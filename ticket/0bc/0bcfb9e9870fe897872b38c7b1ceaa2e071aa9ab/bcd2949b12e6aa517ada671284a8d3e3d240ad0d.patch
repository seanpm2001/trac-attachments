--- C:\Users\nmccorkx\version controlled\blueline\ThirdParty\lib\wx-3.0-msw\wx\lib\agw\hypertreelist.py	2014-07-18 14:58:58.000000000 -0700
+++ C:\Users\nmccorkx\Downloads\wxpy3.0.1\wx-3.0-msw\wx\lib\agw\hypertreelist.py	2014-07-07 20:00:08.000000000 -0700
@@ -1,12 +1,12 @@
 # --------------------------------------------------------------------------------- #
 # HYPERTREELIST wxPython IMPLEMENTATION
 # Inspired By And Heavily Based On wx.gizmos.TreeListCtrl.
 #
 # Andrea Gavana, @ 08 May 2006
-# Latest Revision: 18 Jul 2014, 9.41 GMT
+# Latest Revision: 03 Jan 2014, 23.00 GMT
 #
 #
 # TODO List
 #
 # Almost All The Features Of wx.gizmos.TreeListCtrl Are Available, And There Is
 # Practically No Limit In What Could Be Added To This Class. The First Things
@@ -258,13 +258,13 @@
 
 License And Version
 ===================
 
 :class:`HyperTreeList` is distributed under the wxPython license.
 
-Latest Revision: Nathan McCorkle @ 18 Jul 2014, 9.58 GMT
+Latest Revision: Andrea Gavana @ 03 Jan 2014, 23.00 GMT
 
 Version 1.3
 
 """
 
 import wx
@@ -4083,13 +4083,13 @@
 class HyperTreeList(wx.PyControl):
     """
     :class:`HyperTreeList` is a class that mimics the behaviour of :class:`gizmos.TreeListCtrl`, with
     almost the same base functionalities plus some more enhancements. This class does
     not rely on the native control, as it is a full owner-drawn tree-list control.
     """
-    LIST_AUTOSIZE_CONTENT_OR_HEADER = -555
+    
     def __init__(self, parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize,
                  style=0, agwStyle=wx.TR_DEFAULT_STYLE, validator=wx.DefaultValidator,
                  name="HyperTreeList"):
         """
         Default class constructor.
         
@@ -4388,21 +4388,13 @@
             # Search TreeListHeaderWindow.OnPaint to understand this:
             width += 2*_EXTRA_WIDTH + _MARGIN
         
         elif width == wx.LIST_AUTOSIZE:
         
             width = self._main_win.GetBestColumnWidth(column)
-        elif width == self.LIST_AUTOSIZE_CONTENT_OR_HEADER:
-            width1 = self._main_win.GetBestColumnWidth(column)
-            font = self._header_win.GetFont()
-            dc = wx.ClientDC(self._header_win)
-            width2, dummy, dummy = dc.GetMultiLineTextExtent(self._header_win.GetColumnText(column))
-            # Search TreeListHeaderWindow.OnPaint to understand this:
-            width2 += 2*_EXTRA_WIDTH + _MARGIN
-            width = max(width1, width2)
-
+        
         self._header_win.SetColumnWidth(column, width)
         self._header_win.Refresh()
 
 
     def GetColumnWidth(self, column):
         """

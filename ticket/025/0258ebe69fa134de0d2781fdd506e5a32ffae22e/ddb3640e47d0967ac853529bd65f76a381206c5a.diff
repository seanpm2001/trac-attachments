 include/wx/msw/ole/safearray.h | 50 +++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 49 insertions(+), 1 deletion(-)

diff --git a/include/wx/msw/ole/safearray.h b/include/wx/msw/ole/safearray.h
index fb5c70a..f0eb9ae 100644
--- a/include/wx/msw/ole/safearray.h
+++ b/include/wx/msw/ole/safearray.h
@@ -161,6 +161,30 @@ public:
         m_array = NULL;
     }
 
+    // A "move" constructor.
+    // Takes the ownership of the SAFEARRAY from toCopy.
+    wxSafeArray(wxSafeArray& toCopy)
+    {
+        *this = toCopy;
+    }
+
+    // Assignment operator
+    // Takes the ownership of the SAFEARRAY from toCopy.
+    wxSafeArray& operator=(wxSafeArray& toCopy)
+    {
+        if ( &toCopy != this )
+        {
+            // Check if the SAFEARRAY this instance has is 
+            // different from the one we are trying to assign to it
+            wxCHECK_MSG( (m_array == NULL) || ( m_array != toCopy.m_array), *this,
+                wxS("Attempting to assign the same SAFEARRAY") );
+            Destroy();
+            if ( toCopy.HasArray() )
+                Attach(toCopy.Detach());
+        }
+        return *this;
+    }
+
     // Creates and locks a zero-based one-dimensional SAFEARRAY with the given
     // number of elements.
     bool Create(size_t count)
@@ -386,7 +410,31 @@ public:
         return result;
     }
 
-    wxDECLARE_NO_COPY_TEMPLATE_CLASS(wxSafeArray, varType);
+// infrastructure necessary to implement the "move" constructor and operator= with C++98
+    struct auto_ref
+    {
+        wxSafeArray* m_ptr;
+        
+        wxEXPLICIT auto_ref(wxSafeArray* ptr)
+            : m_ptr(ptr)
+        {}
+    };
+
+    wxSafeArray(auto_ref toCopyRef)
+    {
+        *this = *(toCopyRef.m_ptr);
+    }
+
+    wxSafeArray& operator=(auto_ref toCopyRef)
+    {
+        *this = *(toCopyRef.m_ptr);
+        return *this;
+    }
+
+    operator auto_ref()
+    {
+        return auto_ref(this);
+    }
 };
 
 #endif // wxUSE_OLE && wxUSE_VARIANT

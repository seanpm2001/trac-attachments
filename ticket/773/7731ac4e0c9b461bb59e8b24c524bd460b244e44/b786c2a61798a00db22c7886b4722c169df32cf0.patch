Index: docs/latex/wx/artprov.tex
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWindows/docs/latex/wx/artprov.tex,v
retrieving revision 1.17
diff -u -2 -r1.17 artprov.tex
--- docs/latex/wx/artprov.tex	2006/09/23 20:16:08	1.17
+++ docs/latex/wx/artprov.tex	2006/10/30 21:32:10
@@ -11,7 +11,8 @@
 instead. This way users can plug in their own wxArtProvider class and easily
 replace standard art with their own version. All
-that is needed is to derive a class from wxArtProvider, override its
-\helpref{CreateBitmap}{wxartprovidercreatebitmap} method and register the
-provider with
+that is needed is to derive a class from wxArtProvider, override either its
+\helpref{CreateBitmap}{wxartprovidercreatebitmap} and/or its
+\helpref{CreateIconBundle}{wxartprovidercreateiconbundle} methods
+and register the provider with
 \helpref{wxArtProvider::Push}{wxartproviderpush}:
 
@@ -23,4 +24,8 @@
                           const wxArtClient& client,
                           const wxSize size)
+
+    // optionally override this one as well
+    wxIconBundle CreateIconBundle(const wxArtID& id, 
+                                  const wxArtClient& client)
     { ... }
   };
@@ -29,4 +34,8 @@
 \end{verbatim}
 
+If you need bitmap images (of the same artwork) that should be displayed at different sizes 
+you should probably consider overriding CreateIconBundle and supplying icon bundles that contain 
+different bitmap sizes.
+
 There's another way of taking advantage of this class: you can use it in your code and use
 platform native icons as provided by \helpref{wxArtProvider::GetBitmap}{wxartprovidergetbitmap} or 
@@ -38,5 +47,5 @@
 \membersection{Identifying art resources}\label{artprovideridentifying}
 
-Every bitmap is known to wxArtProvider under an unique ID that is used by when
+Every bitmap and icon bundle are known to wxArtProvider under an unique ID that is used when
 requesting a resource from it. The ID is represented by wxArtID type and can
 have one of these predefined values (you can see bitmaps represented by these
@@ -141,8 +150,8 @@
 \func{wxBitmap}{CreateBitmap}{\param{const wxArtID\& }{id}, \param{const wxArtClient\& }{client}, \param{const wxSize\& }{size}}
 
-Derived art provider classes must override this method to create requested 
-art resource. Note that returned bitmaps are cached by wxArtProvider and it is therefore
-not necessary to optimize CreateBitmap for speed (e.g. you may create wxBitmap objects
-from XPMs here).
+Derived art provider classes must override this method or the CreateIconBundle method 
+to create requested art resource. Note that returned bitmaps are cached by wxArtProvider 
+and it is therefore not necessary to optimize CreateBitmap for speed (e.g. you may create 
+wxBitmap objects from XPMs here).
 
 \wxheading{Parameters}
@@ -160,8 +169,31 @@
 This is {\bf not} part of wxArtProvider's public API, use
 \helpref{wxArtProvider::GetBitmap}{wxartprovidergetbitmap} or 
+\helpref{wxArtProvider::GetIconBundle}{wxartprovidergeticonbundle} or
 \helpref{wxArtProvider::GetIcon}{wxartprovidergeticon}
 to query wxArtProvider for a resource.
 
 
+\func{wxIconBundle}{CreateIconBundle}{\param{const wxArtID\& }{id}, \param{const wxArtClient\& }{client}}
+
+Derived art provider classes must override this method or the CreateIconBundle method 
+to create requested art resource. Note that returned icon bundles are cached by wxArtProvider 
+and it is therefore not necessary to optimize CreateIconBundle for speed (e.g. you may create icon bundles
+from artwork resources here).
+
+\wxheading{Parameters}
+
+\docparam{id}{wxArtID unique identifier of the icon bundle.}
+
+\docparam{client}{wxArtClient identifier of the client (i.e. who is asking for the icon bundle).
+This only servers as a hint.}
+
+\wxheading{Note}
+
+This is {\bf not} part of wxArtProvider's public API, use
+\helpref{wxArtProvider::GetBitmap}{wxartprovidergetbitmap} or 
+\helpref{wxArtProvider::GetIconBundle}{wxartprovidergeticonbundle} or
+\helpref{wxArtProvider::GetIcon}{wxartprovidergeticon}
+to query wxArtProvider for a resource.
+
 \membersection{wxArtProvider::Delete}\label{wxartproviderdelete}
 
@@ -188,4 +220,21 @@
 
 The bitmap if one of registered providers recognizes the ID or wxNullBitmap otherwise.
+
+
+\membersection{wxArtProvider::GetIconBundle}\label{wxartprovidergeticonbundle}
+
+\func{static wxIconBundle}{GetIconBundle}{\param{const wxArtID\& }{id}, \param{const wxArtClient\& }{client = wxART\_OTHER}}
+
+Query registered providers for icon bundle with given ID.
+
+\wxheading{Parameters}
+
+\docparam{id}{wxArtID unique identifier of the icon bundle.}
+
+\docparam{client}{wxArtClient identifier of the client (i.e. who is asking for the icon bundle).}
+
+\wxheading{Return value}
+
+The icon bundle if one of registered providers recognizes the ID or wxNullIconBundle otherwise.
 
 
Index: docs/latex/wx/iconbndl.tex
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWindows/docs/latex/wx/iconbndl.tex,v
retrieving revision 1.3
diff -u -2 -r1.3 iconbndl.tex
--- docs/latex/wx/iconbndl.tex	2004/09/13 14:11:00	1.3
+++ docs/latex/wx/iconbndl.tex	2006/10/30 21:32:10
@@ -7,6 +7,13 @@
 \wxheading{Derived from}
 
-No base class
+\helpref{wxGDIObject}{wxgdiobject}\\
+\helpref{wxObject}{wxobject}
 
+\wxheading{Predefined objects}
+
+Objects:
+
+{\bf wxNullIconBundle}
+
 \latexignore{\rtfignore{\wxheading{Members}}}
 
@@ -51,5 +58,5 @@
 \membersection{wxIconBundle::GetIcon}\label{wxiconbundlegeticon}
 
-\constfunc{const wxIcon\&}{GetIcon}{\param{const wxSize\& }{size}}
+\constfunc{wxIcon}{GetIcon}{\param{const wxSize\& }{size}}
 
 Returns the icon with the given size; if no such icon exists,
@@ -59,12 +66,23 @@
 returns the icon with size wxSYS\_ICON\_X/wxSYS\_ICON\_Y.
 
-\constfunc{const wxIcon\&}{GetIcon}{\param{wxCoord }{size = -1}}
+\constfunc{wxIcon}{GetIcon}{\param{wxCoord }{size = -1}}
 
 Same as GetIcon( wxSize( size, size ) ).
+
+\membersection{wxIconBundle::operator $=$}\label{wxiconbundleoperatorassign}
+
+\func{wxIconBundle\&}{operator $=$}{\param{const wxIconBundle\& }{ic}}
+
+Assignment operator, using \helpref{reference counting}{trefcount}.
+
+\membersection{wxIconBundle::operator $==$}\label{wxiconbundleoperatorequals}
+
+\func{bool}{operator $==$}{\param{const wxIconBundle\& }{ic}}
 
-\membersection{wxIconBundle::operator=}\label{wxiconbundleoperatorassign}
+Equality operator. This returns if two icon bundles are equal.
 
-\func{const wxIconBundle\&}{operator=}{\param{const wxIconBundle\& }{ic}}
+\membersection{wxIconBundle::operator $!=$}\label{wxiconbundleoperatornotequals}
 
-Assignment operator.
+\func{bool}{operator $!=$}{\param{const wxIconBundle\& }{ic}}
 
+Inequality operator. This returns if two icon bundles are not equal.
Index: include/wx/artprov.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWindows/include/wx/artprov.h,v
retrieving revision 1.28
diff -u -2 -r1.28 artprov.h
--- include/wx/artprov.h	2006/10/30 11:56:10	1.28
+++ include/wx/artprov.h	2006/10/30 21:32:10
@@ -45,4 +45,5 @@
 #define wxART_MESSAGE_BOX          wxART_MAKE_CLIENT_ID(wxART_MESSAGE_BOX)
 #define wxART_BUTTON               wxART_MAKE_CLIENT_ID(wxART_BUTTON)
+#define wxART_LIST                 wxART_MAKE_CLIENT_ID(wxART_LIST)
 
 #define wxART_OTHER                wxART_MAKE_CLIENT_ID(wxART_OTHER)
@@ -147,4 +148,9 @@
                           const wxSize& size = wxDefaultSize);
 
+    // Query the providers for iconbundle with given ID and return it. Return
+    // wxNullIconBundle if no provider provides it.
+    static wxIconBundle GetIconBundle(const wxArtID& id,
+                                      const wxArtClient& client = wxART_OTHER);
+
     // Get the size hint of an icon from a specific wxArtClient, queries
     // the topmost provider if platform_dependent = false
@@ -178,10 +184,16 @@
     }
 
-    // Derived classes must override this method to create requested
-    // art resource. This method is called only once per instance's
-    // lifetime for each requested wxArtID.
+    // Derived classes must override CreateBitmap or CreateIconBundle
+    // (or both) to create requested art resource. This method is called 
+    // only once per instance's lifetime for each requested wxArtID.
     virtual wxBitmap CreateBitmap(const wxArtID& WXUNUSED(id),
                                   const wxArtClient& WXUNUSED(client),
-                                  const wxSize& WXUNUSED(size)) = 0;
+                                  const wxSize& WXUNUSED(size)) { return wxNullBitmap; }
+
+    virtual wxIconBundle CreateIconBundle(const wxArtID& WXUNUSED(id), 
+                                          const wxArtClient& WXUNUSED(client)) 
+    { 
+        return wxNullIconBundle; 
+    }
 
 private:
Index: include/wx/gdicmn.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWindows/include/wx/gdicmn.h,v
retrieving revision 1.119
diff -u -2 -r1.119 gdicmn.h
--- include/wx/gdicmn.h	2006/10/29 18:58:05	1.119
+++ include/wx/gdicmn.h	2006/10/30 21:32:10
@@ -38,4 +38,5 @@
 class WXDLLIMPEXP_CORE wxRegion;
 class WXDLLIMPEXP_BASE wxString;
+class WXDLLIMPEXP_CORE wxIconBundle;
 
 // ---------------------------------------------------------------------------
@@ -709,7 +710,8 @@
 extern WXDLLEXPORT_DATA(wxPen)        wxNullPen;
 extern WXDLLEXPORT_DATA(wxBrush)      wxNullBrush;
-extern WXDLLEXPORT_DATA(wxPalette)     wxNullPalette;
+extern WXDLLEXPORT_DATA(wxPalette)    wxNullPalette;
 extern WXDLLEXPORT_DATA(wxFont)       wxNullFont;
 extern WXDLLEXPORT_DATA(wxColour)     wxNullColour;
+extern WXDLLEXPORT_DATA(wxIconBundle) wxNullIconBundle;
 
 extern WXDLLEXPORT_DATA(wxColourDatabase*)  wxTheColourDatabase;
Index: include/wx/iconbndl.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWindows/include/wx/iconbndl.h,v
retrieving revision 1.10
diff -u -2 -r1.10 iconbndl.h
--- include/wx/iconbndl.h	2005/09/23 12:48:41	1.10
+++ include/wx/iconbndl.h	2006/10/30 21:32:10
@@ -14,4 +14,5 @@
 
 #include "wx/dynarray.h"
+#include "wx/gdiobj.h"
 // for wxSize
 #include "wx/gdicmn.h"
@@ -20,31 +21,38 @@
 class WXDLLIMPEXP_BASE wxString;
 
-WX_DECLARE_EXPORTED_OBJARRAY( wxIcon, wxIconArray );
+class WXDLLEXPORT wxIconBundle;
 
+WX_DECLARE_EXPORTED_OBJARRAY(wxIcon, wxIconArray);
+
 // this class can't load bitmaps of type wxBITMAP_TYPE_ICO_RESOURCE,
 // if you need them, you have to load them manually and call
 // wxIconCollection::AddIcon
-class WXDLLEXPORT wxIconBundle
+class WXDLLEXPORT wxIconBundle: public wxGDIObject
 {
 public:
     // default constructor
-    wxIconBundle() : m_icons() {}
+    wxIconBundle();
+
     // initializes the bundle with the icon(s) found in the file
-    wxIconBundle( const wxString& file, long type ) : m_icons()
-        { AddIcon( file, type ); }
+    wxIconBundle(const wxString& file, long type);
+
     // initializes the bundle with a single icon
-    wxIconBundle( const wxIcon& icon ) : m_icons()
-        { AddIcon( icon ); }
+    wxIconBundle(const wxIcon& icon);
 
-    const wxIconBundle& operator =( const wxIconBundle& ic );
-    wxIconBundle( const wxIconBundle& ic ) : m_icons()
-        { *this = ic; }
+    // initializes the bundle from another icon bundle
+    wxIconBundle(const wxIconBundle& icon);
 
-    ~wxIconBundle() { DeleteIcons(); }
+    wxIconBundle& operator=(const wxIconBundle& ic)
+        { if ( this != &ic) Ref(ic); return *this; }
 
+    virtual ~wxIconBundle() { }
+
+    virtual bool IsOk() const;
+
     // adds all the icons contained in the file to the collection,
     // if the collection already contains icons with the same
     // width and height, they are replaced
     void AddIcon( const wxString& file, long type );
+
     // adds the icon to the collection, if the collection already
     // contains an icon with the same width and height, it is
@@ -55,15 +63,20 @@
     // returns the icon with size wxSYS_ICON_[XY]; if no such icon exists,
     // returns the first icon in the bundle
-    const wxIcon& GetIcon( const wxSize& size ) const;
+    wxIcon GetIcon( const wxSize& size ) const;
+
     // equivalent to GetIcon( wxSize( size, size ) )
-    const wxIcon& GetIcon( wxCoord size = wxDefaultCoord ) const
+    wxIcon GetIcon( wxCoord size = wxDefaultCoord ) const
         { return GetIcon( wxSize( size, size ) ); }
+
+protected:
+    virtual wxObjectRefData *CreateRefData() const;
+    virtual wxObjectRefData *CloneRefData(const wxObjectRefData *data) const;
+
 private:
     // delete all icons
     void DeleteIcons();
-public:
-    wxIconArray m_icons;
+
+    DECLARE_DYNAMIC_CLASS(wxIconBundle)
 };
 
-#endif
-    // _WX_ICONBNDL_H_
+#endif // _WX_ICONBNDL_H_
Index: include/wx/toplevel.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWindows/include/wx/toplevel.h,v
retrieving revision 1.82
diff -u -2 -r1.82 toplevel.h
--- include/wx/toplevel.h	2006/10/30 13:24:53	1.82
+++ include/wx/toplevel.h	2006/10/30 21:32:11
@@ -146,5 +146,5 @@
 
     // get the frame icon
-    const wxIcon& GetIcon() const { return m_icons.GetIcon( -1 ); }
+    wxIcon GetIcon() const { return m_icons.GetIcon( -1 ); }
 
     // get the frame icons
Index: include/wx/mac/carbon/icon.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWindows/include/wx/mac/carbon/icon.h,v
retrieving revision 1.12
diff -u -2 -r1.12 icon.h
--- include/wx/mac/carbon/icon.h	2006/10/30 19:25:57	1.12
+++ include/wx/mac/carbon/icon.h	2006/10/30 21:32:11
@@ -30,4 +30,7 @@
       LoadFile(loc.GetFileName(), wxBITMAP_TYPE_ICON);
     }
+
+    wxIcon(const wxIcon& icon, const wxSize& size);
+
     virtual ~wxIcon();
 
Index: samples/treectrl/treetest.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWindows/samples/treectrl/treetest.cpp,v
retrieving revision 1.109
diff -u -2 -r1.109 treetest.cpp
--- samples/treectrl/treetest.cpp	2006/10/22 22:33:25	1.109
+++ samples/treectrl/treetest.cpp	2006/10/30 21:32:11
@@ -25,4 +25,5 @@
 #include "wx/numdlg.h"
 
+#include "wx/artprov.h"
 #include "wx/image.h"
 #include "wx/imaglist.h"
@@ -96,4 +97,5 @@
     MENU_LINK(Recreate)
     MENU_LINK(ToggleImages)
+    MENU_LINK(ToggleAlternateImages)
     MENU_LINK(ToggleButtons)
     MENU_LINK(SetImageSize)
@@ -206,4 +208,5 @@
 #endif // NO_MULTIPLE_SELECTION
     style_menu->AppendCheckItem(TreeTest_ToggleImages, wxT("Toggle show ima&ges"));
+    style_menu->AppendCheckItem(TreeTest_ToggleAlternateImages, wxT("Toggle alternate images"));
     style_menu->Append(TreeTest_SetImageSize, wxT("Set image si&ze..."));
     style_menu->AppendSeparator();
@@ -273,4 +276,5 @@
 
     menu_bar->Check(TreeTest_ToggleImages, true);
+    menu_bar->Check(TreeTest_ToggleAlternateImages, false);
 
 #if wxUSE_STATUSBAR
@@ -568,4 +572,12 @@
 }
 
+void MyFrame::OnToggleAlternateImages(wxCommandEvent& WXUNUSED(event))
+{
+    bool alternateImages = m_treeCtrl->AlternateImages();
+
+    m_treeCtrl->SetAlternateImages(!alternateImages);
+    m_treeCtrl->CreateImageList(0);
+}
+
 void MyFrame::OnToggleButtons(wxCommandEvent& WXUNUSED(event))
 {
@@ -673,5 +685,6 @@
                        const wxPoint& pos, const wxSize& size,
                        long style)
-          : wxTreeCtrl(parent, id, pos, size, style)
+          : wxTreeCtrl(parent, id, pos, size, style),
+            m_alternateImages(false)
 {
     m_reverseSort = false;
@@ -701,13 +714,27 @@
     wxBusyCursor wait;
     wxIcon icons[5];
-    icons[0] = wxIcon(icon1_xpm);
-    icons[1] = wxIcon(icon2_xpm);
-    icons[2] = wxIcon(icon3_xpm);
-    icons[3] = wxIcon(icon4_xpm);
-    icons[4] = wxIcon(icon5_xpm);
+
+    if (m_alternateImages)
+    {
+        icons[TreeCtrlIcon_File] = wxIcon(icon1_xpm);
+        icons[TreeCtrlIcon_FileSelected] = wxIcon(icon2_xpm);
+        icons[TreeCtrlIcon_Folder] = wxIcon(icon3_xpm);
+        icons[TreeCtrlIcon_FolderSelected] = wxIcon(icon4_xpm);
+        icons[TreeCtrlIcon_FolderOpened] = wxIcon(icon5_xpm);
+    }
+    else
+    {
+        wxSize iconSize(size, size);
 
-    int sizeOrig = icons[0].GetWidth();
+        icons[TreeCtrlIcon_File] = 
+        icons[TreeCtrlIcon_FileSelected] = wxArtProvider::GetIcon(wxART_NORMAL_FILE, wxART_LIST, iconSize);
+        icons[TreeCtrlIcon_Folder] = 
+        icons[TreeCtrlIcon_FolderSelected] = 
+        icons[TreeCtrlIcon_FolderOpened] = wxArtProvider::GetIcon(wxART_FOLDER, wxART_LIST, iconSize);
+    }
+
     for ( size_t i = 0; i < WXSIZEOF(icons); i++ )
     {
+        int sizeOrig = icons[0].GetWidth();
         if ( size == sizeOrig )
         {
@@ -738,10 +765,23 @@
     wxBusyCursor wait;
     wxIcon icons[4];
-    icons[0] = wxIcon(icon3_xpm);   // closed
-    icons[1] = wxIcon(icon3_xpm);   // closed, selected
-    icons[2] = wxIcon(icon5_xpm);   // open
-    icons[3] = wxIcon(icon5_xpm);   // open, selected
 
-    for ( size_t i = 0; i < WXSIZEOF(icons); i++ )
+    if (m_alternateImages)
+    {
+        icons[0] = wxIcon(icon3_xpm);   // closed
+        icons[1] = wxIcon(icon3_xpm);   // closed, selected
+        icons[2] = wxIcon(icon5_xpm);   // open
+        icons[3] = wxIcon(icon5_xpm);   // open, selected
+    }
+    else
+    {
+         wxSize iconSize(size, size);
+
+        icons[0] =                                                                 // closed
+        icons[1] = wxArtProvider::GetIcon(wxART_FOLDER, wxART_LIST, iconSize);     // closed, selected
+        icons[2] =                                                                 // open
+        icons[3] = wxArtProvider::GetIcon(wxART_FOLDER_OPEN, wxART_LIST, iconSize);// open, selected
+    }
+
+   for ( size_t i = 0; i < WXSIZEOF(icons); i++ )
     {
         int sizeOrig = icons[i].GetWidth();
Index: samples/treectrl/treetest.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWindows/samples/treectrl/treetest.h,v
retrieving revision 1.49
diff -u -2 -r1.49 treetest.h
--- samples/treectrl/treetest.h	2006/09/24 15:24:19	1.49
+++ samples/treectrl/treetest.h	2006/10/30 21:32:11
@@ -35,5 +35,5 @@
 
 private:
-    bool m_showImages, m_showButtons;
+    bool m_showImages, m_showButtons; 
 };
 
@@ -62,5 +62,5 @@
     };
 
-    MyTreeCtrl() { }
+    MyTreeCtrl() { m_alternateImages = false; }
     MyTreeCtrl(wxWindow *parent, const wxWindowID id,
                const wxPoint& pos, const wxSize& size,
@@ -112,4 +112,7 @@
     void SetLastItem(wxTreeItemId id) { m_lastItem = id; }
 
+    void SetAlternateImages(bool show) { m_alternateImages = show; }
+    bool AlternateImages() const { return m_alternateImages; }
+
 protected:
     virtual int OnCompareItems(const wxTreeItemId& i1, const wxTreeItemId& i2);
@@ -134,4 +137,5 @@
     wxTreeItemId m_lastItem,                // for OnEnsureVisible()
                  m_draggedItem;             // item being dragged right now
+    bool         m_alternateImages;
 
     // NB: due to an ugly wxMSW hack you _must_ use DECLARE_DYNAMIC_CLASS()
@@ -193,4 +197,5 @@
     void OnToggleButtons(wxCommandEvent& event);
     void OnToggleImages(wxCommandEvent& event);
+    void OnToggleAlternateImages(wxCommandEvent& event);
     void OnSetImageSize(wxCommandEvent& event);
     void OnCollapseAndReset(wxCommandEvent& event);
@@ -273,4 +278,5 @@
     TreeTest_Recreate,
     TreeTest_ToggleImages,
+    TreeTest_ToggleAlternateImages,
     TreeTest_ToggleButtons,
     TreeTest_SetImageSize,
Index: src/common/artprov.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWindows/src/common/artprov.cpp,v
retrieving revision 1.32
diff -u -2 -r1.32 artprov.cpp
--- src/common/artprov.cpp	2006/09/23 20:16:11	1.32
+++ src/common/artprov.cpp	2006/10/30 21:32:11
@@ -44,4 +44,5 @@
 
 WX_DECLARE_EXPORTED_STRING_HASH_MAP(wxBitmap, wxArtProviderBitmapsHash);
+WX_DECLARE_EXPORTED_STRING_HASH_MAP(wxIconBundle, wxArtProviderIconBundlesHash);
 
 class WXDLLEXPORT wxArtProviderCache
@@ -52,4 +53,8 @@
         { m_bitmapsHash[full_id] = bmp; }
 
+    bool GetIconBundle(const wxString& full_id, wxIconBundle* bmp);
+    void PutIconBundle(const wxString& full_id, const wxIconBundle& iconbundle)
+        { m_iconBundlesHash[full_id] = iconbundle; }
+
     void Clear();
 
@@ -58,6 +63,10 @@
                                     const wxSize& size);
 
+    static wxString ConstructHashID(const wxArtID& id,
+                                    const wxArtClient& client);
+
 private:
-    wxArtProviderBitmapsHash m_bitmapsHash;
+    wxArtProviderBitmapsHash m_bitmapsHash;         // cache of wxBitmaps
+    wxArtProviderIconBundlesHash m_iconBundlesHash; // cache of wxIconBundles
 };
 
@@ -76,19 +85,41 @@
 }
 
+bool wxArtProviderCache::GetIconBundle(const wxString& full_id, wxIconBundle* bmp)
+{
+    wxArtProviderIconBundlesHash::iterator entry = m_iconBundlesHash.find(full_id);
+    if ( entry == m_iconBundlesHash.end() )
+    {
+        return false;
+    }
+    else
+    {
+        *bmp = entry->second;
+        return true;
+    }
+}
+
 void wxArtProviderCache::Clear()
 {
     m_bitmapsHash.clear();
+    m_iconBundlesHash.clear();
 }
 
-/*static*/ wxString wxArtProviderCache::ConstructHashID(
-                                const wxArtID& id, const wxArtClient& client,
-                                const wxSize& size)
-{
-    wxString str;
-    str.Printf(wxT("%s-%s-%i-%i"), id.c_str(), client.c_str(), size.x, size.y);
-    return str;
+/* static */ wxString
+wxArtProviderCache::ConstructHashID(const wxArtID& id,
+                                    const wxArtClient& client)
+{
+    return id + _T('-') + client;
 }
 
 
+/* static */ wxString
+wxArtProviderCache::ConstructHashID(const wxArtID& id,
+                                    const wxArtClient& client,
+                                    const wxSize& size)
+{
+    return ConstructHashID(id, client) + _T('-') +
+            wxString::Format(_T("%d-%d"), size.x, size.y);
+}
+
 // ============================================================================
 // wxArtProvider class
@@ -217,12 +248,39 @@
                 break;
             }
+            // We could try the IconBundles here and convert what we find
+            // to a bitmap.
         }
-
         sm_cache->PutBitmap(hashId, bmp);
-    }
+        }
 
     return bmp;
 }
 
+/*static*/ wxIconBundle wxArtProvider::GetIconBundle(const wxArtID& id, const wxArtClient& client)
+{
+    // safety-check against writing client,id,size instead of id,client,size:
+    wxASSERT_MSG( client.Last() == _T('C'), _T("invalid 'client' parameter") );
+
+    wxCHECK_MSG( sm_providers, wxNullIconBundle, _T("no wxArtProvider exists") );
+
+    wxString hashId = wxArtProviderCache::ConstructHashID(id, client);
+
+    wxIconBundle iconbundle;
+    if ( !sm_cache->GetIconBundle(hashId, &iconbundle) )
+    {
+        for (wxArtProvidersList::compatibility_iterator node = sm_providers->GetFirst();
+             node; node = node->GetNext())
+        {
+            iconbundle = node->GetData()->CreateIconBundle(id, client);
+            if ( iconbundle.IsOk() )
+                break;
+        }
+
+        sm_cache->PutIconBundle(hashId, iconbundle);
+    }
+
+    return iconbundle;
+}
+
 /*static*/ wxIcon wxArtProvider::GetIcon(const wxArtID& id,
                                          const wxArtClient& client,
@@ -231,4 +289,10 @@
     wxCHECK_MSG( sm_providers, wxNullIcon, _T("no wxArtProvider exists") );
 
+    // First look for an appropriate icon bundle - this will give us the best icon
+    wxIconBundle iconBundle = GetIconBundle(id, client);
+    if ( iconBundle.IsOk() )
+        return iconBundle.GetIcon(size);
+
+    // If there is no icon bundle then look for a bitmap
     wxBitmap bmp = GetBitmap(id, client, size);
     if ( !bmp.Ok() )
Index: src/common/artstd.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWindows/src/common/artstd.cpp,v
retrieving revision 1.27
diff -u -2 -r1.27 artstd.cpp
--- src/common/artstd.cpp	2006/09/23 20:16:11	1.27
+++ src/common/artstd.cpp	2006/10/30 21:32:11
@@ -78,5 +78,5 @@
 }
 
-#if !defined(__WXGTK20__) || defined(__WXUNIVERSAL__)
+#if !(defined(__WXGTK20__) || defined(__WXMAC__)) || defined(__WXUNIVERSAL__)
 /*static*/ void wxArtProvider::InitNativeProvider()
 {
Index: src/common/gdicmn.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWindows/src/common/gdicmn.cpp,v
retrieving revision 1.142
diff -u -2 -r1.142 gdicmn.cpp
--- src/common/gdicmn.cpp	2006/10/26 03:26:57	1.142
+++ src/common/gdicmn.cpp	2006/10/30 21:32:11
@@ -53,4 +53,5 @@
 WXDLLIMPEXP_DATA_CORE(wxPalette) wxNullPalette;
 #endif
+WXDLLIMPEXP_DATA_CORE(wxIconBundle) wxNullIconBundle;
 
 const wxSize wxDefaultSize(wxDefaultCoord, wxDefaultCoord);
Index: src/common/iconbndl.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWindows/src/common/iconbndl.cpp,v
retrieving revision 1.16
diff -u -2 -r1.16 iconbndl.cpp
--- src/common/iconbndl.cpp	2006/08/17 16:08:13	1.16
+++ src/common/iconbndl.cpp	2006/10/30 21:32:11
@@ -9,4 +9,12 @@
 /////////////////////////////////////////////////////////////////////////////
 
+// ============================================================================
+// declarations
+// ============================================================================
+
+// ----------------------------------------------------------------------------
+// headers
+// ----------------------------------------------------------------------------
+
 // For compilers that support precompilation, includes "wx.h".
 #include "wx/wxprec.h"
@@ -30,21 +38,74 @@
 
 WX_DEFINE_OBJARRAY(wxIconArray)
+
+IMPLEMENT_DYNAMIC_CLASS(wxIconBundle, wxGDIObject)
+
+#define M_ICONBUNDLEDATA ((wxIconBundleRefData *)m_refData)
+
+// ----------------------------------------------------------------------------
+// wxIconBundleRefData
+// ----------------------------------------------------------------------------
+
+class WXDLLEXPORT wxIconBundleRefData: public wxGDIRefData
+{
+public:
+    // default and copy ctors and assignment operators are ok
+
+protected:
+    wxIconArray m_icons;
+
+    friend class WXDLLEXPORT wxIconBundle;
+};
+
+// ============================================================================
+// wxIconBundle implementation
+// ============================================================================
+
+wxIconBundle::wxIconBundle()
+            : wxGDIObject()
+{
+    m_refData = new wxIconBundleRefData;
+}
 
-const wxIconBundle& wxIconBundle::operator =( const wxIconBundle& ic )
+wxIconBundle::wxIconBundle(const wxString& file, long type)
+            : wxGDIObject()
 {
-    if( this == &ic ) return *this;
+    m_refData = new wxIconBundleRefData;
+    AddIcon(file, type);
+}
 
-    size_t i, max = ic.m_icons.GetCount();
+wxIconBundle::wxIconBundle(const wxIconBundle& icon)
+            : wxGDIObject()
+{
+    Ref(icon);
+}
 
-    DeleteIcons();
-    for( i = 0; i < max; ++i )
-        m_icons.Add( ic.m_icons[i] );
+wxIconBundle::wxIconBundle(const wxIcon& icon)
+            : wxGDIObject()
+{
+    m_refData = new wxIconBundleRefData;
+    AddIcon(icon);
+}
 
-    return *this;
+wxObjectRefData *wxIconBundle::CreateRefData() const
+{
+    return new wxIconBundleRefData;
 }
 
+wxObjectRefData *wxIconBundle::CloneRefData(const wxObjectRefData *data) const
+{
+    return new wxIconBundleRefData(*wx_static_cast(const wxIconBundleRefData *, data));
+}
+
 void wxIconBundle::DeleteIcons()
+{
+    wxIconBundleRefData* ref = new wxIconBundleRefData();
+    UnRef();
+    m_refData = ref;
+}
+
+bool wxIconBundle::IsOk() const
 {
-    m_icons.Empty();
+    return M_ICONBUNDLEDATA && !M_ICONBUNDLEDATA->m_icons.IsEmpty();
 }
 
@@ -55,4 +116,17 @@
 #endif
 {
+#ifdef __WXMAC__
+    // Deal with standard icons
+    if ( type == wxBITMAP_TYPE_ICON_RESOURCE )
+    {
+        wxIcon tmp(file, type);
+        if (tmp.Ok())
+        {
+            AddIcon(tmp);
+            return;
+        }
+    }
+#endif // __WXMAC__
+
 #if wxUSE_IMAGE && (!defined(__WXMSW__) || wxUSE_WXDIB)
     size_t count = wxImage::GetImageCount( file, type );
@@ -77,20 +151,28 @@
 }
 
-const wxIcon& wxIconBundle::GetIcon( const wxSize& size ) const
+wxIcon wxIconBundle::GetIcon(const wxSize& size) const
 {
-    // temp. variable needed to fix Borland C++ 5.5.1 problem
-    // with passing a return value through two functions
-    wxIcon *tmp;
+    wxCHECK_MSG( IsOk(), wxNullIcon, _T("invalid icon bundle") );
+
+    wxIconArray& iconArray = M_ICONBUNDLEDATA->m_icons;
 
-    size_t max = m_icons.GetCount();
+    const size_t count = iconArray.size();
 
+    wxIcon *tmp = &wxNullIcon;
+
     // if we have one or no icon, we can return now without doing more work:
-    if ( max <= 1 )
+    if ( count == 1 )
     {
-        if ( max == 1 ) // fix for broken BCC
-            tmp = &m_icons[0];
-        else // max == 0
-            tmp = &wxNullIcon;
+        tmp = &iconArray[0];
+     #if defined(__WXMAC__)
+        return wxIcon(*tmp, size);
+     #else
         return *tmp;
+     #endif
+    }
+
+    if ( count == 0 )
+    {
+        return wxNullIcon;
     }
 
@@ -99,44 +181,55 @@
             sysY = wxSystemSettings::GetMetric( wxSYS_ICON_Y );
 
-    wxIcon *sysIcon = 0;
+    wxIcon *sysIcon = NULL;
 
-    for( size_t i = 0; i < max; i++ )
+    for( size_t i = 0; i < count; i++ )
     {
-        if( !m_icons[i].Ok() )
+        if( !iconArray[i].Ok() )
             continue;
-        wxCoord sx = m_icons[i].GetWidth(), sy = m_icons[i].GetHeight();
+        wxCoord sx = iconArray[i].GetWidth(), sy = iconArray[i].GetHeight();
         // requested size
         if( sx == size.x && sy == size.y )
-        {
-            tmp = &m_icons[i]; // fix for broken BCC
-            return *tmp;
-        }
+            return iconArray[i];
+
         // keep track if there is a system-size icon
         if( sx == sysX && sy == sysY )
-            sysIcon = &m_icons[i];
+            sysIcon = &iconArray[i];
     }
 
     // return the system-sized icon if we've got one
-    if( sysIcon ) return *sysIcon;
-    // we certainly have at least one icon thanks to the <=1 check above
-    tmp = &m_icons[0];
+    if( sysIcon )
+        tmp = sysIcon;
+    // return the first icon, if we have one
+    else if( count > 0 ) // fix for broken BCC
+        tmp = &iconArray[0];
+
+ #if defined(__WXMAC__)
+    return wxIcon(*tmp, size);
+ #else
     return *tmp;
+ #endif
 }
 
-void wxIconBundle::AddIcon( const wxIcon& icon )
+void wxIconBundle::AddIcon(const wxIcon& icon)
 {
-    size_t i, max = m_icons.GetCount();
+   AllocExclusive();
 
-    for( i = 0; i < max; ++i )
-    {
-        wxIcon& tmp = m_icons[i];
-        if( tmp.Ok() && tmp.GetWidth() == icon.GetWidth() &&
-            tmp.GetHeight() == icon.GetHeight() )
-        {
-            tmp = icon;
-            return;
-        }
-    }
+   wxIconArray& iconArray = M_ICONBUNDLEDATA->m_icons;
+
+   // replace existing icon with the same size if we already have it
+   const size_t count = iconArray.size();
+   for ( size_t i = 0; i < count; ++i )
+   {
+       wxIcon& tmp = iconArray[i];
+       if ( tmp.Ok() &&
+               tmp.GetWidth() == icon.GetWidth() &&
+                    tmp.GetHeight() == icon.GetHeight() )
+       {
+           tmp = icon;
+           return;
+       }
+   }
 
-    m_icons.Add( icon );
+   // if we don't, add an icon with new size
+   iconArray.Add(icon);
 }
Index: src/mac/carbon/icon.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWindows/src/mac/carbon/icon.cpp,v
retrieving revision 1.29
diff -u -2 -r1.29 icon.cpp
--- src/mac/carbon/icon.cpp	2006/10/08 21:56:36	1.29
+++ src/mac/carbon/icon.cpp	2006/10/30 21:32:11
@@ -54,4 +54,15 @@
 }
 
+wxIcon::wxIcon(const wxIcon &icon, const wxSize& size)
+      : wxGDIObject()
+{
+    // as the icon owns that ref, we have to acquire it as well
+    m_refData = new wxIconRefData( icon.GetHICON() ) ;
+    AcquireIconRef( (IconRef) icon.GetHICON() ) ;
+
+    M_ICONDATA->SetWidth( size.x ) ;
+    M_ICONDATA->SetHeight( size.y ) ;
+}
+
 wxIcon::~wxIcon()
 {
@@ -126,4 +137,16 @@
         {
             theId = kAlertStopIcon ;
+        }
+        else if ( filename == wxT("wxICON_FOLDER") )
+        {
+            theId = kGenericFolderIcon ;
+        }
+        else if ( filename == wxT("wxICON_FOLDER_OPEN") )
+        {
+            theId = kOpenFolderIcon ;
+        }
+        else if ( filename == wxT("wxICON_NORMAL_FILE") )
+        {
+            theId = kGenericDocumentIcon ;
         }
         else
Index: src/mac/carbon/artmac.cpp
===================================================================
RCS file: artmac.cpp
diff -N artmac.cpp
--- /dev/null	Mon Oct 30 22:32:08 2006
+++ artmac.cpp	Mon Oct 30 22:32:11 2006
@@ -0,0 +1,109 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        src/mac/carbon/artmac.cpp
+// Purpose:     wxArtProvider instance with native Mac stock icons
+// Author:      Alan Shouls
+// Created:     2006-10-30
+// RCS-ID:      $Id$
+// Copyright:   (c) wxWindows team
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+// ---------------------------------------------------------------------------
+// headers
+// ---------------------------------------------------------------------------
+
+// For compilers that support precompilation, includes "wx.h".
+#include "wx/wxprec.h"
+
+#if defined(__BORLANDC__)
+    #pragma hdrstop
+#endif
+
+#ifndef WX_PRECOMP
+    #include "wx/image.h"
+#endif
+
+#include "wx/artprov.h"
+#include "wx/image.h"
+
+// ----------------------------------------------------------------------------
+// wxMacArtProvider
+// ----------------------------------------------------------------------------
+
+class wxMacArtProvider : public wxArtProvider
+{
+protected:
+    virtual wxBitmap CreateBitmap(const wxArtID& id, const wxArtClient& client,
+                                  const wxSize& size);
+    virtual wxIconBundle CreateIconBundle(const wxArtID& id,
+                                          const wxArtClient& client);
+};
+
+/* static */ void wxArtProvider::InitNativeProvider()
+{
+    wxArtProvider::Push(new wxMacArtProvider);
+}
+
+// ----------------------------------------------------------------------------
+// helper macros
+// ----------------------------------------------------------------------------
+
+#define CREATE_STD_ICON(iconId, xpmRc) \
+    { \
+        wxIconBundle icon(_T(iconId), wxBITMAP_TYPE_ICON_RESOURCE); \
+        return icon; \
+    }
+
+// Macro used in CreateBitmap to get wxICON_FOO icons:
+#define ART_MSGBOX(artId, iconId, xpmRc) \
+    if ( id == artId ) \
+    { \
+        CREATE_STD_ICON(#iconId, xpmRc) \
+    }
+
+static wxIconBundle wxMacArtProvider_CreateIconBundle(const wxArtID& id)
+{
+    ART_MSGBOX(wxART_ERROR,       wxICON_ERROR,       error)
+    ART_MSGBOX(wxART_INFORMATION, wxICON_INFORMATION, info)
+    ART_MSGBOX(wxART_WARNING,     wxICON_WARNING,     warning)
+    ART_MSGBOX(wxART_QUESTION,    wxICON_QUESTION,    question)
+
+    ART_MSGBOX(wxART_FOLDER,      wxICON_FOLDER,      folder)
+    ART_MSGBOX(wxART_FOLDER_OPEN, wxICON_FOLDER_OPEN, folder_open)
+    ART_MSGBOX(wxART_NORMAL_FILE, wxICON_NORMAL_FILE, deffile)
+
+    return wxNullIconBundle;
+}
+
+// ----------------------------------------------------------------------------
+// CreateIconBundle
+// ----------------------------------------------------------------------------
+
+wxIconBundle wxMacArtProvider::CreateIconBundle(const wxArtID& id, const wxArtClient& client)
+{
+    // On the Mac folders in lists are always drawn closed, so if an open
+    // folder icon is asked for we will ask for a closed one in its place
+    if ( client == wxART_LIST && id == wxART_FOLDER_OPEN )
+        id = wxART_FOLDER;
+
+    return wxMacArtProvider_CreateIconBundle(id);
+}
+
+// ----------------------------------------------------------------------------
+// CreateBitmap
+// ----------------------------------------------------------------------------
+
+wxBitmap wxMacArtProvider::CreateBitmap(const wxArtID& id,
+                                        const wxArtClient& client,
+                                        const wxSize& reqSize)
+{
+    wxIconBundle ic(CreateIconBundle(id, client));
+    if (ic.IsOk())
+    {
+        wxIcon theIcon(ic.GetIcon(reqSize));
+        return wxBitmap(theIcon);
+    }
+
+    return wxNullBitmap;
+}
+
Index: build/bakefiles/files.bkl
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWindows/build/bakefiles/files.bkl,v
retrieving revision 1.397
diff -u -2 -r1.397 files.bkl
--- build/bakefiles/files.bkl	2006/10/30 20:07:18	1.397
+++ build/bakefiles/files.bkl	2006/10/30 21:32:11
@@ -2068,4 +2068,5 @@
     src/mac/carbon/aga.cpp
     src/mac/carbon/app.cpp
+    src/mac/carbon/artmac.cpp
     src/mac/carbon/bitmap.cpp
     src/mac/carbon/bmpbuttn.cpp

 	  	 

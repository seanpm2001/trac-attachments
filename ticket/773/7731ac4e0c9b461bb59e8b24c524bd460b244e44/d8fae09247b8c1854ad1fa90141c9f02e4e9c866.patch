? iconbundle.patch
? osx-build
? docs/.DS_Store
? docs/html/.DS_Store
? docs/latex/.DS_Store
? docs/latex/wx/.DS_Store
? docs/latex/wx/accel.log
? docs/latex/wx/artprov.log
? docs/latex/wx/icon.log
? docs/mac/.DS_Store
? docs/publicity/.DS_Store
? include/.DS_Store
? include/wx/.DS_Store
? include/wx/mac/.DS_Store
? include/wx/mac/carbon/.DS_Store
? samples/.DS_Store
? samples/animate/.DS_Store
? samples/treectrl/.DS_Store
? src/common/.DS_Store
? src/mac/.DS_Store
? src/mac/carbon/.DS_Store
? tests/.DS_Store
? utils/.DS_Store
Index: docs/latex/wx/artprov.tex
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/docs/latex/wx/artprov.tex,v
retrieving revision 1.17
diff -u -r1.17 artprov.tex
--- docs/latex/wx/artprov.tex	2006/09/23 20:16:08	1.17
+++ docs/latex/wx/artprov.tex	2006/10/21 20:04:33
@@ -10,9 +10,10 @@
 dialog), it does not use a hard-coded resource but asks wxArtProvider for it
 instead. This way users can plug in their own wxArtProvider class and easily
 replace standard art with their own version. All
-that is needed is to derive a class from wxArtProvider, override its
-\helpref{CreateBitmap}{wxartprovidercreatebitmap} method and register the
-provider with
+that is needed is to derive a class from wxArtProvider, override either its
+\helpref{CreateBitmap}{wxartprovidercreatebitmap} and/or its
+\helpref{CreateIconBundle}{wxartprovidercreateiconbundle} methods
+and register the provider with
 \helpref{wxArtProvider::Push}{wxartproviderpush}:
 
 \begin{verbatim}
@@ -22,12 +23,19 @@
     wxBitmap CreateBitmap(const wxArtID& id, 
                           const wxArtClient& client,
                           const wxSize size)
+                          
+    wxIconBundle CreateIconBundle(const wxArtID& id, 
+                                  const wxArtClient& client)
     { ... }
   };
   ...
   wxArtProvider::Push(new MyProvider);
 \end{verbatim}
 
+If you need bitmap images (of the same artwork) that should be displayed at different sizes 
+you should probably consider overriding CreateIconBundle and supplying icon bundles that contains 
+different bitmap sizes.
+
 There's another way of taking advantage of this class: you can use it in your code and use
 platform native icons as provided by \helpref{wxArtProvider::GetBitmap}{wxartprovidergetbitmap} or 
 \helpref{wxArtProvider::GetIcon}{wxartprovidergeticon} (NB: this is not yet really
@@ -37,7 +45,7 @@
 
 \membersection{Identifying art resources}\label{artprovideridentifying}
 
-Every bitmap is known to wxArtProvider under an unique ID that is used by when
+Every bitmap and IconBundle is known to wxArtProvider under an unique ID that is used by when
 requesting a resource from it. The ID is represented by wxArtID type and can
 have one of these predefined values (you can see bitmaps represented by these
 constants in the \helpref{artprov}{sampleartprovider} sample):
@@ -140,10 +148,10 @@
 
 \func{wxBitmap}{CreateBitmap}{\param{const wxArtID\& }{id}, \param{const wxArtClient\& }{client}, \param{const wxSize\& }{size}}
 
-Derived art provider classes must override this method to create requested 
-art resource. Note that returned bitmaps are cached by wxArtProvider and it is therefore
-not necessary to optimize CreateBitmap for speed (e.g. you may create wxBitmap objects
-from XPMs here).
+Derived art provider classes must override this method or the CreateIconBundle method 
+to create requested art resource. Note that returned bitmaps are cached by wxArtProvider 
+and it is therefore not necessary to optimize CreateBitmap for speed (e.g. you may create 
+wxBitmap objects from XPMs here).
 
 \wxheading{Parameters}
 
@@ -159,10 +167,33 @@
 
 This is {\bf not} part of wxArtProvider's public API, use
 \helpref{wxArtProvider::GetBitmap}{wxartprovidergetbitmap} or 
+\helpref{wxArtProvider::GetIconBundle}{wxartprovidergeticonbundle} or
 \helpref{wxArtProvider::GetIcon}{wxartprovidergeticon}
 to query wxArtProvider for a resource.
 
 
+\func{wxIconBundle}{CreateIconBundle}{\param{const wxArtID\& }{id}, \param{const wxArtClient\& }{client}}
+
+Derived art provider classes must override this method or the CreateIconBundle method 
+to create requested art resource. Note that returned icon bundles are cached by wxArtProvider 
+and it is therefore not necessary to optimize CreateIconBundle for speed (e.g. you may create icon bundles
+from artwork resources here).
+
+\wxheading{Parameters}
+
+\docparam{id}{wxArtID unique identifier of the icon bundle.}
+
+\docparam{client}{wxArtClient identifier of the client (i.e. who is asking for the icon bundle).
+This only servers as a hint.}
+
+\wxheading{Note}
+
+This is {\bf not} part of wxArtProvider's public API, use
+\helpref{wxArtProvider::GetBitmap}{wxartprovidergetbitmap} or 
+\helpref{wxArtProvider::GetIconBundle}{wxartprovidergeticonbundle} or
+\helpref{wxArtProvider::GetIcon}{wxartprovidergeticon}
+to query wxArtProvider for a resource.
+
 \membersection{wxArtProvider::Delete}\label{wxartproviderdelete}
 
 \func{static bool}{Delete}{\param{wxArtProvider* }{provider}}
@@ -187,6 +218,23 @@
 \wxheading{Return value}
 
 The bitmap if one of registered providers recognizes the ID or wxNullBitmap otherwise.
+
+
+\membersection{wxArtProvider::GetIconBundle}\label{wxartprovidergeticonbundle}
+
+\func{static wxIconBundle}{GetIconBundle}{\param{const wxArtID\& }{id}, \param{const wxArtClient\& }{client = wxART\_OTHER}}
+
+Query registered providers for icon bundle with given ID.
+
+\wxheading{Parameters}
+
+\docparam{id}{wxArtID unique identifier of the icon bundle.}
+
+\docparam{client}{wxArtClient identifier of the client (i.e. who is asking for the icon bundle).}
+
+\wxheading{Return value}
+
+The icon bundle if one of registered providers recognizes the ID or wxNullIconBundle otherwise.
 
 
 \membersection{wxArtProvider::GetIcon}\label{wxartprovidergeticon}
Index: docs/latex/wx/iconbndl.tex
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/docs/latex/wx/iconbndl.tex,v
retrieving revision 1.3
diff -u -r1.3 iconbndl.tex
--- docs/latex/wx/iconbndl.tex	2004/09/13 14:11:00	1.3
+++ docs/latex/wx/iconbndl.tex	2006/10/21 20:04:33
@@ -2,12 +2,19 @@
 
 This class contains multiple copies of an icon in different sizes,
 see also \helpref{wxDialog::SetIcons}{wxdialogseticons} and
-\helpref{wxTopLevelWindow::SetIcons}{wxtoplevelwindowseticons}.
+\helpref{wxTopLevelWindow::SetIcons}{wxtoplevelwindowseticons}. 
 
 \wxheading{Derived from}
 
-No base class
+\helpref{wxGDIObject}{wxgdiobject}\\
+\helpref{wxObject}{wxobject}
 
+\wxheading{Predefined objects}
+
+Objects:
+
+{\bf wxNullIconBundle}
+
 \latexignore{\rtfignore{\wxheading{Members}}}
 
 \membersection{wxIconBundle::wxIconBundle}\label{wxiconbundlewxiconbundle}
@@ -50,7 +57,7 @@
 
 \membersection{wxIconBundle::GetIcon}\label{wxiconbundlegeticon}
 
-\constfunc{const wxIcon\&}{GetIcon}{\param{const wxSize\& }{size}}
+\constfunc{wxIcon}{GetIcon}{\param{const wxSize\& }{size}}
 
 Returns the icon with the given size; if no such icon exists,
 returns the icon with size wxSYS\_ICON\_X/wxSYS\_ICON\_Y;
@@ -58,13 +65,24 @@
 returns the first icon in the bundle. If size = wxSize( -1, -1 ),
 returns the icon with size wxSYS\_ICON\_X/wxSYS\_ICON\_Y.
 
-\constfunc{const wxIcon\&}{GetIcon}{\param{wxCoord }{size = -1}}
+\constfunc{wxIcon}{GetIcon}{\param{wxCoord }{size = -1}}
 
 Same as GetIcon( wxSize( size, size ) ).
+
+\membersection{wxIconBundle::operator $=$}\label{wxiconbundleoperatorassign}
+
+\func{wxIconBundle\&}{operator $=$}{\param{const wxIconBundle\& }{ic}}
+
+Assignment operator, using \helpref{reference counting}{trefcount}.
+
+\membersection{wxIconBundle::operator $==$}\label{wxiconbundleoperatorequals}
+
+\func{bool}{operator $==$}{\param{const wxIconBundle\& }{ic}}
 
-\membersection{wxIconBundle::operator=}\label{wxiconbundleoperatorassign}
+Equality operator. This returns if two icon bundles are equal.
 
-\func{const wxIconBundle\&}{operator=}{\param{const wxIconBundle\& }{ic}}
+\membersection{wxIconBundle::operator $!=$}\label{wxiconbundleoperatornotequals}
 
-Assignment operator.
+\func{bool}{operator $!=$}{\param{const wxIconBundle\& }{ic}}
 
+Inequality operator. This returns if two icon bundles are not equal.
Index: include/wx/artprov.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/artprov.h,v
retrieving revision 1.27
diff -u -r1.27 artprov.h
--- include/wx/artprov.h	2006/09/23 20:16:10	1.27
+++ include/wx/artprov.h	2006/10/21 20:04:34
@@ -146,6 +146,11 @@
                           const wxArtClient& client = wxART_OTHER,
                           const wxSize& size = wxDefaultSize);
 
+    // Query the providers for iconbundle with given ID and return it. Return
+    // wxNullIconBundle if no provider provides it.
+    static wxIconBundle GetIconBundle(const wxArtID& id,
+                          const wxArtClient& client = wxART_OTHER);
+
     // Get the size hint of an icon from a specific wxArtClient, queries 
     // the topmost provider if platform_dependent = false
     static wxSize GetSizeHint(const wxArtClient& client, bool platform_dependent = false);
@@ -177,13 +182,19 @@
         return GetSizeHint(client, true);
     }
 
-    // Derived classes must override this method to create requested
-    // art resource. This method is called only once per instance's
-    // lifetime for each requested wxArtID.
+    // Derived classes must override CreateBitmap or CreateIconBundle
+    // (or both) to create requested art resource. This method is called 
+    // only once per instance's lifetime for each requested wxArtID.
     virtual wxBitmap CreateBitmap(const wxArtID& WXUNUSED(id),
                                   const wxArtClient& WXUNUSED(client),
-                                  const wxSize& WXUNUSED(size)) = 0;
+                                  const wxSize& WXUNUSED(size)) { return wxNullBitmap; }
 
+    virtual wxIconBundle CreateIconBundle(const wxArtID& WXUNUSED(id), 
+                                          const wxArtClient& WXUNUSED(client)) 
+    { 
+        return wxNullIconBundle; 
+    }
+    
 private:
     static void CommonAddingProvider();
 
Index: include/wx/gdicmn.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/gdicmn.h,v
retrieving revision 1.118
diff -u -r1.118 gdicmn.h
--- include/wx/gdicmn.h	2006/09/24 11:08:43	1.118
+++ include/wx/gdicmn.h	2006/10/21 20:04:34
@@ -37,6 +37,7 @@
 class WXDLLIMPEXP_CORE wxPen;
 class WXDLLIMPEXP_CORE wxRegion;
 class WXDLLIMPEXP_BASE wxString;
+class WXDLLIMPEXP_CORE wxIconBundle;
 
 // ---------------------------------------------------------------------------
 // constants
@@ -707,9 +708,10 @@
 extern WXDLLEXPORT_DATA(wxCursor)     wxNullCursor;
 extern WXDLLEXPORT_DATA(wxPen)        wxNullPen;
 extern WXDLLEXPORT_DATA(wxBrush)      wxNullBrush;
-extern WXDLLEXPORT_DATA(wxPalette)     wxNullPalette;
+extern WXDLLEXPORT_DATA(wxPalette)    wxNullPalette;
 extern WXDLLEXPORT_DATA(wxFont)       wxNullFont;
 extern WXDLLEXPORT_DATA(wxColour)     wxNullColour;
+extern WXDLLEXPORT_DATA(wxIconBundle) wxNullIconBundle;
 
 extern WXDLLEXPORT_DATA(wxColourDatabase*)  wxTheColourDatabase;
 
Index: include/wx/iconbndl.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/iconbndl.h,v
retrieving revision 1.10
diff -u -r1.10 iconbndl.h
--- include/wx/iconbndl.h	2005/09/23 12:48:41	1.10
+++ include/wx/iconbndl.h	2006/10/21 20:04:34
@@ -13,35 +13,59 @@
 #define _WX_ICONBNDL_H_
 
 #include "wx/dynarray.h"
+#include "wx/gdiobj.h"
 // for wxSize
 #include "wx/gdicmn.h"
 
 class WXDLLIMPEXP_CORE wxIcon;
 class WXDLLIMPEXP_BASE wxString;
 
+class WXDLLEXPORT wxIconBundle;
+
 WX_DECLARE_EXPORTED_OBJARRAY( wxIcon, wxIconArray );
 
+class WXDLLEXPORT wxIconBundleRefData: public wxGDIRefData
+{
+    friend class WXDLLEXPORT wxIconBundle;
+public:
+    wxIconBundleRefData();
+    wxIconBundleRefData(const wxIconBundleRefData& data);
+
+    wxIconBundleRefData& operator=(const wxIconBundleRefData& data);
+
+protected:
+    wxIconArray m_icons;
+};
+
+#define M_ICONBUNDLEDATA ((wxIconBundleRefData *)m_refData)
+
 // this class can't load bitmaps of type wxBITMAP_TYPE_ICO_RESOURCE,
 // if you need them, you have to load them manually and call
 // wxIconCollection::AddIcon
-class WXDLLEXPORT wxIconBundle
+class WXDLLEXPORT wxIconBundle: public wxGDIObject
 {
+  DECLARE_DYNAMIC_CLASS(wxIconBundle)
+
 public:
     // default constructor
-    wxIconBundle() : m_icons() {}
+    wxIconBundle();
     // initializes the bundle with the icon(s) found in the file
-    wxIconBundle( const wxString& file, long type ) : m_icons()
-        { AddIcon( file, type ); }
+    wxIconBundle( const wxString& file, long type );
     // initializes the bundle with a single icon
-    wxIconBundle( const wxIcon& icon ) : m_icons()
-        { AddIcon( icon ); }
-
-    const wxIconBundle& operator =( const wxIconBundle& ic );
-    wxIconBundle( const wxIconBundle& ic ) : m_icons()
-        { *this = ic; }
+    wxIconBundle( const wxIcon& icon );
+    // initializes the bundle from another icon bundle
+    wxIconBundle( const wxIconBundle& icon );
+
+    void Unshare();
+
+    inline wxIconBundle& operator = (const wxIconBundle& ic) { if (*this == ic) return (*this); Ref(ic); return *this; }
+    bool operator == (const wxIconBundle& ic) const;
+    bool operator != (const wxIconBundle& ic) const;
+
+    ~wxIconBundle() { }
+    
+    bool IsOk() const;
 
-    ~wxIconBundle() { DeleteIcons(); }
-
     // adds all the icons contained in the file to the collection,
     // if the collection already contains icons with the same
     // width and height, they are replaced
@@ -54,15 +78,13 @@
     // returns the icon with the given size; if no such icon exists,
     // returns the icon with size wxSYS_ICON_[XY]; if no such icon exists,
     // returns the first icon in the bundle
-    const wxIcon& GetIcon( const wxSize& size ) const;
+    wxIcon GetIcon( const wxSize& size ) const;
     // equivalent to GetIcon( wxSize( size, size ) )
-    const wxIcon& GetIcon( wxCoord size = wxDefaultCoord ) const
+    wxIcon GetIcon( wxCoord size = wxDefaultCoord ) const
         { return GetIcon( wxSize( size, size ) ); }
 private:
     // delete all icons
     void DeleteIcons();
-public:
-    wxIconArray m_icons;
 };
 
 #endif
Index: include/wx/toplevel.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/toplevel.h,v
retrieving revision 1.79
diff -u -r1.79 toplevel.h
--- include/wx/toplevel.h	2006/09/10 15:38:52	1.79
+++ include/wx/toplevel.h	2006/10/21 20:04:35
@@ -145,7 +145,7 @@
     virtual bool IsIconized() const = 0;
 
     // get the frame icon
-    const wxIcon& GetIcon() const { return m_icons.GetIcon( -1 ); }
+    wxIcon GetIcon() const { return m_icons.GetIcon( -1 ); }
 
     // get the frame icons
     const wxIconBundle& GetIcons() const { return m_icons; }
Index: include/wx/mac/carbon/icon.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/mac/carbon/icon.h,v
retrieving revision 1.11
diff -u -r1.11 icon.h
--- include/wx/mac/carbon/icon.h	2006/10/08 21:55:40	1.11
+++ include/wx/mac/carbon/icon.h	2006/10/21 20:04:35
@@ -29,6 +29,9 @@
     {
       LoadFile(loc.GetFileName(), wxBITMAP_TYPE_ICON);
     }
+
+    wxIcon(const wxIcon& icon, const wxSize& size);
+
     virtual ~wxIcon();
 
     bool LoadFile(const wxString& name, wxBitmapType flags /* = wxBITMAP_TYPE_ICON_RESOURCE */ ,
Index: samples/treectrl/treetest.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/samples/treectrl/treetest.cpp,v
retrieving revision 1.108
diff -u -r1.108 treetest.cpp
--- samples/treectrl/treetest.cpp	2006/10/02 05:36:30	1.108
+++ samples/treectrl/treetest.cpp	2006/10/21 20:04:39
@@ -24,6 +24,7 @@
 #include "wx/colordlg.h"
 #include "wx/numdlg.h"
 
+#include "wx/artprov.h"
 #include "wx/image.h"
 #include "wx/imaglist.h"
 #include "wx/treectrl.h"
@@ -36,11 +37,13 @@
 
 #include "treetest.h"
 
-#include "icon1.xpm"
-#include "icon2.xpm"
-#include "icon3.xpm"
-#include "icon4.xpm"
-#include "icon5.xpm"
+#ifndef __WXMAC__
+    #include "icon1.xpm"
+    #include "icon2.xpm"
+    #include "icon3.xpm"
+    #include "icon4.xpm"
+    #include "icon5.xpm"
+#endif
 
 #ifndef __WXMSW__
     #include "../sample.xpm"
@@ -700,15 +703,30 @@
     // should correspond to TreeCtrlIcon_xxx enum
     wxBusyCursor wait;
     wxIcon icons[5];
+    
+#ifdef __WXMAC__
+    // In 'normal' lists on the mac we do not show a different file icon for selected items in a list
+    wxSize iconSize(size, size);
+    icons[TreeCtrlIcon_File] = 
+    icons[TreeCtrlIcon_FileSelected] = 
+        wxArtProvider::GetIcon(wxART_NORMAL_FILE, wxART_OTHER, iconSize);
+
+    // In 'normal' lists on the mac we do not show a different file icon for selected, or opened folders in a list
+	icons[TreeCtrlIcon_Folder] = 
+	icons[TreeCtrlIcon_FolderSelected] = 
+	icons[TreeCtrlIcon_FolderOpened] = 
+        wxArtProvider::GetIcon(wxART_FOLDER, wxART_OTHER, iconSize);
+#else
     icons[0] = wxIcon(icon1_xpm);
     icons[1] = wxIcon(icon2_xpm);
     icons[2] = wxIcon(icon3_xpm);
     icons[3] = wxIcon(icon4_xpm);
     icons[4] = wxIcon(icon5_xpm);
+#endif
 
-    int sizeOrig = icons[0].GetWidth();
     for ( size_t i = 0; i < WXSIZEOF(icons); i++ )
     {
+        int sizeOrig = icons[i].GetWidth();
         if ( size == sizeOrig )
         {
             images->Add(icons[i]);
@@ -737,11 +755,21 @@
     // should correspond to TreeCtrlIcon_xxx enum
     wxBusyCursor wait;
     wxIcon icons[4];
+#ifdef __WXMAC__
+    wxSize iconSize(size, size);
+    icons[0] = 
+    icons[1] = 
+        wxArtProvider::GetIcon(wxART_FOLDER, wxART_OTHER, iconSize);
+	icons[2] = 
+	icons[3] = 
+        wxArtProvider::GetIcon(wxART_FOLDER_OPEN, wxART_OTHER, iconSize);
+#else
+
     icons[0] = wxIcon(icon3_xpm);   // closed
     icons[1] = wxIcon(icon3_xpm);   // closed, selected
     icons[2] = wxIcon(icon5_xpm);   // open
     icons[3] = wxIcon(icon5_xpm);   // open, selected
-
+#endif
     for ( size_t i = 0; i < WXSIZEOF(icons); i++ )
     {
         int sizeOrig = icons[i].GetWidth();
Index: src/common/artprov.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/artprov.cpp,v
retrieving revision 1.32
diff -u -r1.32 artprov.cpp
--- src/common/artprov.cpp	2006/09/23 20:16:11	1.32
+++ src/common/artprov.cpp	2006/10/21 20:04:39
@@ -43,6 +43,7 @@
 // ----------------------------------------------------------------------------
 
 WX_DECLARE_EXPORTED_STRING_HASH_MAP(wxBitmap, wxArtProviderBitmapsHash);
+WX_DECLARE_EXPORTED_STRING_HASH_MAP(wxIconBundle, wxArtProviderIconBundlesHash);
 
 class WXDLLEXPORT wxArtProviderCache
 {
@@ -51,14 +52,22 @@
     void PutBitmap(const wxString& full_id, const wxBitmap& bmp)
         { m_bitmapsHash[full_id] = bmp; }
 
+    bool GetIconBundle(const wxString& full_id, wxIconBundle* bmp);
+    void PutIconBundle(const wxString& full_id, const wxIconBundle& iconbundle)
+        { m_iconBundlesHash[full_id] = iconbundle; }
+
     void Clear();
 
     static wxString ConstructHashID(const wxArtID& id,
                                     const wxArtClient& client,
                                     const wxSize& size);
 
+    static wxString ConstructHashID(const wxArtID& id,
+                                    const wxArtClient& client);
+
 private:
-    wxArtProviderBitmapsHash m_bitmapsHash;
+    wxArtProviderBitmapsHash m_bitmapsHash;         // cache of wxBitmaps
+    wxArtProviderIconBundlesHash m_iconBundlesHash; // cache of wxIconBundles
 };
 
 bool wxArtProviderCache::GetBitmap(const wxString& full_id, wxBitmap* bmp)
@@ -75,9 +84,24 @@
     }
 }
 
+bool wxArtProviderCache::GetIconBundle(const wxString& full_id, wxIconBundle* bmp)
+{
+    wxArtProviderIconBundlesHash::iterator entry = m_iconBundlesHash.find(full_id);
+    if ( entry == m_iconBundlesHash.end() )
+    {
+        return false;
+    }
+    else
+    {
+        *bmp = entry->second;
+        return true;
+    }
+}
+
 void wxArtProviderCache::Clear()
 {
     m_bitmapsHash.clear();
+    m_iconBundlesHash.clear();
 }
 
 /*static*/ wxString wxArtProviderCache::ConstructHashID(
@@ -89,6 +113,14 @@
     return str;
 }
 
+/*static*/ wxString wxArtProviderCache::ConstructHashID(
+                                const wxArtID& id, const wxArtClient& client)
+{
+    wxString str;
+    str.Printf(wxT("%s-%s"), id.c_str(), client.c_str());
+    return str;
+}
+
 
 // ============================================================================
 // wxArtProvider class
@@ -216,20 +248,53 @@
 #endif
                 break;
             }
+            // We could try the IconBundles here and convert what we find
+            // to a bitmap.
         }
-
         sm_cache->PutBitmap(hashId, bmp);
     }
 
     return bmp;
 }
 
+/*static*/ wxIconBundle wxArtProvider::GetIconBundle(const wxArtID& id, const wxArtClient& client)
+{
+    // safety-check against writing client,id,size instead of id,client,size:
+    wxASSERT_MSG( client.Last() == _T('C'), _T("invalid 'client' parameter") );
+
+    wxCHECK_MSG( sm_providers, wxNullIconBundle, _T("no wxArtProvider exists") );
+
+    wxString hashId = wxArtProviderCache::ConstructHashID(id, client);
+
+    wxIconBundle iconbundle;
+    if ( !sm_cache->GetIconBundle(hashId, &iconbundle) )
+    {
+        for (wxArtProvidersList::compatibility_iterator node = sm_providers->GetFirst();
+             node; node = node->GetNext())
+        {
+            iconbundle = node->GetData()->CreateIconBundle(id, client);
+            if ( iconbundle.IsOk() )
+                break;
+        }
+
+        sm_cache->PutIconBundle(hashId, iconbundle);
+    }
+
+    return iconbundle;
+}
+
 /*static*/ wxIcon wxArtProvider::GetIcon(const wxArtID& id,
                                          const wxArtClient& client,
                                          const wxSize& size)
 {
     wxCHECK_MSG( sm_providers, wxNullIcon, _T("no wxArtProvider exists") );
 
+    // First look for an appropriate icon bundle - this will give us the best icon
+    wxIconBundle iconBundle = GetIconBundle(id, client);
+    if ( iconBundle.IsOk() )
+        return iconBundle.GetIcon(size);
+
+    // If there is no icon bundle then look for a bitmap
     wxBitmap bmp = GetBitmap(id, client, size);
     if ( !bmp.Ok() )
         return wxNullIcon;
Index: src/common/artstd.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/artstd.cpp,v
retrieving revision 1.27
diff -u -r1.27 artstd.cpp
--- src/common/artstd.cpp	2006/09/23 20:16:11	1.27
+++ src/common/artstd.cpp	2006/10/21 20:04:40
@@ -35,6 +35,7 @@
 protected:
     virtual wxBitmap CreateBitmap(const wxArtID& id, const wxArtClient& client,
                                   const wxSize& size);
+    virtual wxIconBundle CreateIconBundle(const wxArtID& id, const wxArtClient& client);
 };
 
 // ----------------------------------------------------------------------------
@@ -49,8 +50,20 @@
 // wxIcon ctor. This depends on the platform:
 #if defined(__WXUNIVERSAL__)
     #define CREATE_STD_ICON(iconId, xpmRc) return wxNullBitmap;
+    #define ART_PROVIDER_ICON wxBitmap
+    #define NULL_ART_PROVIDER_ICON wxNullBitmap
 #elif defined(__WXGTK__) || defined(__WXMOTIF__)
     #define CREATE_STD_ICON(iconId, xpmRc) return wxBitmap(xpmRc##_xpm);
+    #define ART_PROVIDER_ICON wxBitmap
+    #define NULL_ART_PROVIDER_ICON wxNullBitmap
+#elif defined(__WXMAC__)
+    #define CREATE_STD_ICON(iconId, xpmRc) \
+        { \
+            wxIconBundle icon(_T(iconId), wxBITMAP_TYPE_ICON_RESOURCE); \
+            return icon; \
+        }
+    #define ART_PROVIDER_ICON wxIconBundle
+    #define NULL_ART_PROVIDER_ICON wxNullIconBundle
 #else
     #define CREATE_STD_ICON(iconId, xpmRc) \
         { \
@@ -59,6 +72,8 @@
             bmp.CopyFromIcon(icon); \
             return bmp; \
         }
+    #define ART_PROVIDER_ICON wxBitmap
+    #define NULL_ART_PROVIDER_ICON wxNullBitmap
 #endif
 
 // Macro used in CreateBitmap to get wxICON_FOO icons:
@@ -155,7 +170,7 @@
 
 #undef static
 
-wxBitmap wxDefaultArtProvider_CreateBitmap(const wxArtID& id)
+ART_PROVIDER_ICON wxDefaultArtProvider_CreateIcon(const wxArtID& id)
 {
     // wxMessageBox icons:
     ART_MSGBOX(wxART_ERROR,       wxICON_ERROR,       error)
@@ -163,6 +178,17 @@
     ART_MSGBOX(wxART_WARNING,     wxICON_WARNING,     warning)
     ART_MSGBOX(wxART_QUESTION,    wxICON_QUESTION,    question)
 
+#if defined(__WXMAC__)
+    ART_MSGBOX(wxART_FOLDER,      wxICON_FOLDER,      folder)
+    ART_MSGBOX(wxART_FOLDER_OPEN, wxICON_FOLDER_OPEN, folder_open)
+    ART_MSGBOX(wxART_NORMAL_FILE, wxICON_NORMAL_FILE, deffile)
+#endif
+
+    return NULL_ART_PROVIDER_ICON;
+}
+
+wxBitmap wxDefaultArtProvider_CreateBitmap(const wxArtID& id)
+{
     // standard icons:
 #if wxUSE_HTML
     ART(wxART_HELP_SIDE_PANEL,                     htmsidep)
@@ -171,6 +197,13 @@
     ART(wxART_HELP_FOLDER,                         htmfoldr)
     ART(wxART_HELP_PAGE,                           htmpage)
 #endif // wxUSE_HTML
+
+#if !defined(__WXMAC__)
+    ART(wxART_FOLDER,                              folder)
+    ART(wxART_FOLDER_OPEN,                         folder_open)
+    ART(wxART_NORMAL_FILE,                         deffile)
+#endif
+
     ART(wxART_MISSING_IMAGE,                       missimg)
     ART(wxART_ADD_BOOKMARK,                        addbookm)
     ART(wxART_DEL_BOOKMARK,                        delbookm)
@@ -191,11 +224,8 @@
     ART(wxART_FLOPPY,                              floppy)
     ART(wxART_CDROM,                               cdrom)
     ART(wxART_REMOVABLE,                           removable)
-    ART(wxART_FOLDER,                              folder)
-    ART(wxART_FOLDER_OPEN,                         folder_open)
     ART(wxART_GO_DIR_UP,                           dir_up)
     ART(wxART_EXECUTABLE_FILE,                     exefile)
-    ART(wxART_NORMAL_FILE,                         deffile)
     ART(wxART_TICK_MARK,                           tick)
     ART(wxART_CROSS_MARK,                          cross)
 
@@ -212,7 +242,6 @@
     ART(wxART_FIND_AND_REPLACE,                    findrepl)
     ART(wxART_NEW,                                 new)
 
-
     return wxNullBitmap;
 }
 
@@ -226,6 +255,11 @@
 {
     wxBitmap bmp = wxDefaultArtProvider_CreateBitmap(id);
 
+#if !defined(__WXMAC__)
+    if (!bmp.Ok())
+        bmp = wxDefaultArtProvider_CreateIcon(id);
+#endif
+        
 #if wxUSE_IMAGE && (!defined(__WXMSW__) || wxUSE_WXDIB)
     if (bmp.Ok())
     {
@@ -256,3 +290,18 @@
 
     return bmp;
 }
+
+// ----------------------------------------------------------------------------
+// CreateIconBundle
+// ----------------------------------------------------------------------------
+
+wxIconBundle wxDefaultArtProvider::CreateIconBundle(const wxArtID& id, const wxArtClient& client)
+{
+    wxUnusedVar(client);
+#if defined(__WXMAC__)
+    return wxDefaultArtProvider_CreateIcon(id);
+#else
+    wxUnusedVar(id);
+    return wxNullIconBundle;
+#endif
+}
\ No newline at end of file
Index: src/common/gdicmn.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/gdicmn.cpp,v
retrieving revision 1.141
diff -u -r1.141 gdicmn.cpp
--- src/common/gdicmn.cpp	2006/09/13 17:12:01	1.141
+++ src/common/gdicmn.cpp	2006/10/21 20:04:40
@@ -52,6 +52,7 @@
 #if wxUSE_PALETTE
 WXDLLIMPEXP_DATA_CORE(wxPalette) wxNullPalette;
 #endif
+WXDLLIMPEXP_DATA_CORE(wxIconBundle) wxNullIconBundle;
 
 const wxSize wxDefaultSize(wxDefaultCoord, wxDefaultCoord);
 const wxPoint wxDefaultPosition(wxDefaultCoord, wxDefaultCoord);
Index: src/common/iconbndl.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/iconbndl.cpp,v
retrieving revision 1.16
diff -u -r1.16 iconbndl.cpp
--- src/common/iconbndl.cpp	2006/08/17 16:08:13	1.16
+++ src/common/iconbndl.cpp	2006/10/21 20:04:40
@@ -30,30 +30,108 @@
 
 WX_DEFINE_OBJARRAY(wxIconArray)
 
-const wxIconBundle& wxIconBundle::operator =( const wxIconBundle& ic )
+IMPLEMENT_DYNAMIC_CLASS(wxIconBundle, wxGDIObject)
+
+wxIconBundleRefData::wxIconBundleRefData()
+: m_icons()
 {
-    if( this == &ic ) return *this;
+}
 
-    size_t i, max = ic.m_icons.GetCount();
+wxIconBundleRefData::wxIconBundleRefData(const wxIconBundleRefData& data)
+: wxGDIRefData()
+{
+    m_icons = data.m_icons;
+}
 
-    DeleteIcons();
-    for( i = 0; i < max; ++i )
-        m_icons.Add( ic.m_icons[i] );
+wxIconBundle::wxIconBundle()
+{
+    m_refData = new wxIconBundleRefData;
+}
+    
+wxIconBundle::wxIconBundle( const wxString& file, long type )
+{
+    m_refData = new wxIconBundleRefData;
+    AddIcon( file, type );
+}    
 
-    return *this;
+wxIconBundle::wxIconBundle( const wxIconBundle& icon )
+      : wxGDIObject()
+{
+    Ref(icon);
 }
 
+wxIconBundle::wxIconBundle( const wxIcon& icon )
+{
+    m_refData = new wxIconBundleRefData;
+    AddIcon( icon );
+}
+
+bool wxIconBundle::operator == (const wxIconBundle& ic) const
+{ 
+    if (m_refData == ic.m_refData)
+        return true;
+    if (m_refData == NULL || ic.m_refData == NULL)
+        return false;
+        
+    return (wxIconBundleRefData *)m_refData == (wxIconBundleRefData *)ic.m_refData;
+}
+
+bool wxIconBundle::operator != (const wxIconBundle& ic) const
+{ 
+    if (m_refData == ic.m_refData)
+        return false;
+    if (m_refData == NULL || ic.m_refData == NULL)
+        return true;
+        
+    return (wxIconBundleRefData *)m_refData != (wxIconBundleRefData *)ic.m_refData;
+}
+
+void wxIconBundle::Unshare()
+{
+    // Don't change shared data
+    if (!m_refData)
+    {
+        m_refData = new wxIconBundleRefData();
+    }
+    else
+    {
+        wxIconBundleRefData* ref = new wxIconBundleRefData(*(wxIconBundleRefData*)m_refData);
+        UnRef();
+        m_refData = ref;
+    }
+}
+
 void wxIconBundle::DeleteIcons()
 {
-    m_icons.Empty();
+    wxIconBundleRefData* ref = new wxIconBundleRefData();
+    UnRef();
+    m_refData = ref;
 }
 
+bool wxIconBundle::IsOk() const 
+{ 
+    return !M_ICONBUNDLEDATA->m_icons.IsEmpty(); 
+}
+
 #if wxUSE_IMAGE
 void wxIconBundle::AddIcon( const wxString& file, long type )
 #else
 void wxIconBundle::AddIcon( const wxString& WXUNUSED(file), long WXUNUSED(type) )
 #endif
 {
+#if (defined(__WXMAC__))
+    // Deal with standard icons
+    if ( type == wxBITMAP_TYPE_ICON_RESOURCE )
+    {
+        wxIcon tmp(file, type);
+        if (tmp.Ok())
+        {
+            AddIcon(tmp);
+            return;
+        }
+    }
+#endif
+
 #if wxUSE_IMAGE && (!defined(__WXMSW__) || wxUSE_WXDIB)
     size_t count = wxImage::GetImageCount( file, type );
     size_t i;
@@ -76,21 +154,34 @@
 #endif
 }
 
-const wxIcon& wxIconBundle::GetIcon( const wxSize& size ) const
+wxIcon wxIconBundle::GetIcon( const wxSize& size ) const
 {
+    wxIconArray  &iconArray = (M_ICONBUNDLEDATA->m_icons);
+
     // temp. variable needed to fix Borland C++ 5.5.1 problem
     // with passing a return value through two functions
-    wxIcon *tmp;
+    
+    wxIcon *tmp = NULL;
 
-    size_t max = m_icons.GetCount();
+    // Note: wxIconBundle::GetIcon originally returned a reference, it may well be that the
+    // Compiler bug does not happen when you pass an object back. If this is the case
+    // this function could be cleaned up - alan
 
+    size_t max = iconArray.GetCount();
+
     // if we have one or no icon, we can return now without doing more work:
-    if ( max <= 1 )
+    if ( max == 1 )
+    {
+        tmp = &iconArray[0];
+     #if defined(__WXMAC__)
+        return wxIcon(*tmp, size);
+     #else
+        return *tmp;
+     #endif
+    }
+    if ( max ==0 )
     {
-        if ( max == 1 ) // fix for broken BCC
-            tmp = &m_icons[0];
-        else // max == 0
-            tmp = &wxNullIcon;
+        tmp = &wxNullIcon;
         return *tmp;
     }
 
@@ -102,34 +193,44 @@
 
     for( size_t i = 0; i < max; i++ )
     {
-        if( !m_icons[i].Ok() )
+        if( !iconArray[i].Ok() )
             continue;
-        wxCoord sx = m_icons[i].GetWidth(), sy = m_icons[i].GetHeight();
+        wxCoord sx = iconArray[i].GetWidth(), sy = iconArray[i].GetHeight();
         // requested size
         if( sx == size.x && sy == size.y )
         {
-            tmp = &m_icons[i]; // fix for broken BCC
+            tmp = &iconArray[i]; // fix for broken BCC
             return *tmp;
         }
         // keep track if there is a system-size icon
         if( sx == sysX && sy == sysY )
-            sysIcon = &m_icons[i];
+            sysIcon = &iconArray[i];
     }
 
     // return the system-sized icon if we've got one
-    if( sysIcon ) return *sysIcon;
-    // we certainly have at least one icon thanks to the <=1 check above
-    tmp = &m_icons[0];
-    return *tmp;
+    if( sysIcon ) 
+        tmp = sysIcon;
+    // return the first icon, if we have one
+    else if( max > 0 ) // fix for broken BCC
+        tmp = &iconArray[0];
+        
+ #if defined(__WXMAC__)
+    return tmp ? wxIcon(*tmp, size) : wxNullIcon;
+ #else
+    return tmp ? *tmp : wxNullIcon;
+ #endif
 }
 
 void wxIconBundle::AddIcon( const wxIcon& icon )
 {
-    size_t i, max = m_icons.GetCount();
+   Unshare();
+   
+   wxIconArray  &iconArray = (M_ICONBUNDLEDATA->m_icons);
+   size_t i, max = iconArray.GetCount();
 
     for( i = 0; i < max; ++i )
     {
-        wxIcon& tmp = m_icons[i];
+        wxIcon& tmp = iconArray[i];
         if( tmp.Ok() && tmp.GetWidth() == icon.GetWidth() &&
             tmp.GetHeight() == icon.GetHeight() )
         {
@@ -138,5 +239,5 @@
         }
     }
 
-    m_icons.Add( icon );
+    iconArray.Add( icon );
 }
Index: src/mac/carbon/icon.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/mac/carbon/icon.cpp,v
retrieving revision 1.29
diff -u -r1.29 icon.cpp
--- src/mac/carbon/icon.cpp	2006/10/08 21:56:36	1.29
+++ src/mac/carbon/icon.cpp	2006/10/21 20:04:41
@@ -53,6 +53,17 @@
     LoadFile( icon_file, (wxBitmapType) flags, desiredWidth, desiredHeight );
 }
 
+wxIcon::wxIcon(const wxIcon &icon, const wxSize& size)
+        : wxGDIObject()
+{
+    // as the icon owns that ref, we have to acquire it as well
+    m_refData = new wxIconRefData( icon.GetHICON() ) ;
+    AcquireIconRef( (IconRef) icon.GetHICON() ) ;
+
+	M_ICONDATA->SetWidth( size.x ) ;
+	M_ICONDATA->SetHeight( size.y ) ;
+}
+
 wxIcon::~wxIcon()
 {
 }
@@ -125,6 +136,18 @@
         else if ( filename == wxT("wxICON_ERROR") )
         {
             theId = kAlertStopIcon ;
+        }
+        else if ( filename == wxT("wxICON_FOLDER") )
+        {
+            theId = kGenericFolderIcon ;
+        }
+        else if ( filename == wxT("wxICON_FOLDER_OPEN") )
+        {
+            theId = kOpenFolderIcon ;
+        }
+        else if ( filename == wxT("wxICON_NORMAL_FILE") )
+        {
+            theId = kGenericDocumentIcon ;
         }
         else
         {

 	  	 

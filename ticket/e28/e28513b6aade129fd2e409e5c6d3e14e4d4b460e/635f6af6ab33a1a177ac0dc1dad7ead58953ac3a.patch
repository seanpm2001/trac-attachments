b615eac6644e114b8d06bd4889df125a950bfa6b
 include/wx/ribbon/bar.h   |  4 +++-
 interface/wx/ribbon/bar.h | 36 +++++++++++++++++++++++++++++++++++-
 src/ribbon/bar.cpp        | 46 +++++++++++++++++-----------------------------
 3 files changed, 55 insertions(+), 31 deletions(-)

diff --git a/include/wx/ribbon/bar.h b/include/wx/ribbon/bar.h
index 2b45454..cf39598 100644
--- a/include/wx/ribbon/bar.h
+++ b/include/wx/ribbon/bar.h
@@ -140,9 +140,11 @@ public:
     void AddPageHighlight(size_t page, bool highlight = true);
     void RemovePageHighlight(size_t page) { AddPageHighlight(page, false); }
 
+    void ShowPanels(wxRibbonDisplayMode);
     void ShowPanels(bool show = true);
-    void HidePanels() { ShowPanels(false); }
+    void HidePanels() { ShowPanels(wxRIBBON_BAR_MINIMIZED); }
     bool ArePanelsShown() const { return m_arePanelsShown; }
+    wxRibbonDisplayMode GetDisplayMode() const { return m_ribbon_state; }
 
     virtual bool HasMultiplePages() const { return true; }
 
diff --git a/interface/wx/ribbon/bar.h b/interface/wx/ribbon/bar.h
index e8d9ef3..cba29ad 100644
--- a/interface/wx/ribbon/bar.h
+++ b/interface/wx/ribbon/bar.h
@@ -5,6 +5,21 @@
 // Licence:     wxWindows licence
 ///////////////////////////////////////////////////////////////////////////////
 
+
+/**
+    The possible display modes of the panel area of a wxRibbonBar widget.
+    
+    @see wxRibbonBar::ShowPanels()
+    @see wxRibbonBar::GetDisplayMode()
+*/
+enum wxRibbonDisplayMode
+{
+    wxRIBBON_BAR_PINNED,     ///< The panel area is visible and pinned: it remains visible when the ribbon bar loose the focus.
+    wxRIBBON_BAR_MINIMIZED,  ///< The panel area is hidden: only the pages tabs remain visible.
+    wxRIBBON_BAR_EXPANDED    ///< The panel area is visible, but not pinned: it minimizes as soon as the focus is lost.
+};
+
+
 /**
     @class wxRibbonBarEvent
 
@@ -317,6 +332,14 @@ public:
         @since 2.9.5
     */
     void RemovePageHighlight(size_t page);
+    
+    /**
+        Shows or hide the panel area of the ribbon bar according to the
+        given display mode.
+                       
+        @since 3.0.1
+    */
+    void ShowPanels(wxRibbonDisplayMode mode);
 
     /**
         Shows or hides the panel area of the ribbon bar.
@@ -324,6 +347,7 @@ public:
         If the panel area is hidden, then only the tab of the ribbon bar will
         be shown. This is useful for giving the user more screen space to work
         with when he/she doesn't need to see the ribbon's options.
+        When the panel is shown, this method pins it.
 
         @since 2.9.2
     */
@@ -332,7 +356,7 @@ public:
     /**
         Hides the panel area of the ribbon bar.
 
-        This method simply calls ShowPanels() with @false argument.
+        This method behaves like ShowPanels() with @false argument.
 
         @since 2.9.2
     */
@@ -348,6 +372,16 @@ public:
     bool ArePanelsShown() const;
     
     /**
+        Returns the current display mode of the panel area.
+        
+        @see ShowPanels()
+        
+        @since 3.0.1
+    */
+    wxRibbonDisplayMode GetDisplayMode() const;
+    
+    
+    /**
         Perform initial layout and size calculations of the bar and its
         children. This must be called after all of the bar's children have been
         created (and their children created, etc.) - if it is not, then windows
diff --git a/src/ribbon/bar.cpp b/src/ribbon/bar.cpp
index 1bad16a..94141e3 100644
--- a/src/ribbon/bar.cpp
+++ b/src/ribbon/bar.cpp
@@ -115,12 +115,22 @@ bool wxRibbonBar::DismissExpandedPanel()
     return m_pages.Item(m_current_page).page->DismissExpandedPanel();
 }
 
-void wxRibbonBar::ShowPanels(bool show)
+
+void wxRibbonBar::ShowPanels(wxRibbonDisplayMode mode)
 {
-    m_arePanelsShown = show;
+    m_arePanelsShown = (mode == wxRIBBON_BAR_PINNED || mode == wxRIBBON_BAR_EXPANDED);
+
     SetMinSize(wxSize(GetSize().GetWidth(), DoGetBestSize().GetHeight()));
     Realise();
     GetParent()->Layout();
+
+    m_ribbon_state = mode;
+}
+
+
+void wxRibbonBar::ShowPanels(bool show)
+{
+    ShowPanels( show ? wxRIBBON_BAR_PINNED : wxRIBBON_BAR_MINIMIZED );
 }
 
 void wxRibbonBar::SetWindowStyleFlag(long style)
@@ -974,13 +984,11 @@ void wxRibbonBar::OnMouseLeftDown(wxMouseEvent& evt)
     {
         if ( m_ribbon_state == wxRIBBON_BAR_MINIMIZED )
         {
-            ShowPanels();
-            m_ribbon_state = wxRIBBON_BAR_EXPANDED;
+            ShowPanels(wxRIBBON_BAR_EXPANDED);
         }
         else if ( (tab == &m_pages.Item(m_current_page)) && (m_ribbon_state == wxRIBBON_BAR_EXPANDED) )
         {
             HidePanels();
-            m_ribbon_state = wxRIBBON_BAR_MINIMIZED;
         }
     }
     else
@@ -988,7 +996,6 @@ void wxRibbonBar::OnMouseLeftDown(wxMouseEvent& evt)
         if ( m_ribbon_state == wxRIBBON_BAR_EXPANDED )
         {
             HidePanels();
-            m_ribbon_state = wxRIBBON_BAR_MINIMIZED;
         }
     }
     if(tab && tab != &m_pages.Item(m_current_page))
@@ -1028,12 +1035,7 @@ void wxRibbonBar::OnMouseLeftDown(wxMouseEvent& evt)
         {
             if(m_toggle_button_rect.Contains(position))
             {
-                bool pshown = ArePanelsShown();
-                ShowPanels(!pshown);
-                if ( pshown )
-                    m_ribbon_state = wxRIBBON_BAR_MINIMIZED;
-                else
-                    m_ribbon_state = wxRIBBON_BAR_PINNED;
+                ShowPanels(ArePanelsShown() ? wxRIBBON_BAR_MINIMIZED : wxRIBBON_BAR_PINNED);
                 wxRibbonBarEvent event(wxEVT_RIBBONBAR_TOGGLED, GetId());
                 event.SetEventObject(this);
                 ProcessWindowEvent(event);
@@ -1168,13 +1170,11 @@ void wxRibbonBar::OnMouseDoubleClick(wxMouseEvent& evt)
     {
         if ( m_ribbon_state == wxRIBBON_BAR_PINNED )
         {
-            m_ribbon_state = wxRIBBON_BAR_MINIMIZED;
             HidePanels();
         }
         else
         {
-            m_ribbon_state = wxRIBBON_BAR_PINNED;
-            ShowPanels();
+            ShowPanels(wxRIBBON_BAR_PINNED);
         }
     }
 }
@@ -1269,20 +1269,8 @@ void wxRibbonBar::HitTestRibbonButton(const wxRect& rect, const wxPoint& positio
 
 void wxRibbonBar::HideIfExpanded()
 {
-    switch ( m_ribbon_state )
-    {
-        case wxRIBBON_BAR_EXPANDED:
-            m_ribbon_state = wxRIBBON_BAR_MINIMIZED;
-            // Fall through
-
-        case wxRIBBON_BAR_MINIMIZED:
-            HidePanels();
-            break;
-
-        case wxRIBBON_BAR_PINNED:
-            ShowPanels();
-            break;
-    }
+    if ( m_ribbon_state == wxRIBBON_BAR_EXPANDED)
+        HidePanels();
 }
 
 void wxRibbonBar::OnKillFocus(wxFocusEvent& WXUNUSED(evt))

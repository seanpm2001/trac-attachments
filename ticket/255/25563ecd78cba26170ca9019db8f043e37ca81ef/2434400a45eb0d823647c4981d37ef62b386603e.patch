Index: build/bakefiles/files.bkl
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/build/bakefiles/files.bkl,v
retrieving revision 1.414
diff -bu2 -r1.414 build/bakefiles/files.bkl
--- build/bakefiles/files.bkl
+++ build/bakefiles/files.bkl
@@ -641,4 +641,5 @@
     src/common/srchcmn.cpp
     src/common/statbar.cpp
+    src/common/stattextcmn.cpp
     src/common/stockitem.cpp
     src/common/tbarbase.cpp
Index: docs/latex/wx/stattext.tex
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/docs/latex/wx/stattext.tex,v
retrieving revision 1.13
diff -bu2 -r1.13 docs/latex/wx/stattext.tex
--- docs/latex/wx/stattext.tex
+++ docs/latex/wx/stattext.tex
@@ -94,4 +94,7 @@
 label unless the control has wxST\_NO\_AUTORESIZE flag.
 
+Note that the \tt{&} characters in the given text will be interpreted as mnemonics;
+see \helpref{wxControl::SetLabel}{wxcontrolsetlabel} for more info.
+
 \wxheading{Parameters}
 
@@ -99,4 +102,74 @@
 
 
+\membersection{wxStaticText::SetLabelWithMarkup}\label{wxstatictextsetlabelwithmarkup}
+
+\func{virtual void}{SetLabelWithMarkup}{\param{const wxString\& }{ label}}
+
+This function allows to set decorated static label text on platforms which support
+it natively (currently only GTK+ 2).
+Platforms which do not support markup in static text labels, just remove the markup
+from the given string and then call \helpref{SetLabel}{wxstatictextsetlabel}.
+
+The supported markup is:
+
+\twocolwidtha{5cm}
+\begin{twocollist}\itemsep=0pt
+\twocolitem{<b>}{bold text}
+\twocolitem{<big>}{bigger text}
+\twocolitem{<i>}{italic text}
+\twocolitem{<s>}{text with strikethrough}
+\twocolitem{<sub>}{subscript text}
+\twocolitem{<sup>}{superscript text}
+\twocolitem{<small>}{smaller text}
+\twocolitem{<tt>}{monospaced text}
+\twocolitem{<u>}{underlined text}
+\twocolitem{<span>}{generic formatter tag; see \urlref{Pango Markup}{http://developer.gnome.org/doc/API/2.0/pango/PangoMarkupFormat.html} for more info.}
+
+\end{twocollist}
+
+Note that the string needs to be well-formed (e.g. all tags must be correctly closed)
+otherwise an assert will fail at run-time.
+
+Also note that you need to escape the following special characters:
+
+\twocolwidtha{5cm}
+\begin{twocollist}\itemsep=0pt
+\twocolitem{\bf{Special character}}{\bf{Escape as}}
+\twocolitem{\tt{&}}{\tt{&&amp;}}
+\twocolitem{\tt{'}}{\tt{&&apos;}}
+\twocolitem{\tt{"}}{\tt{&&quot;}}
+\twocolitem{\tt{<}}{\tt{&&lt;}}
+\twocolitem{\tt{>}}{\tt{&&gt;}}
+\end{twocollist}
+
+Single ampersands \tt{&} will be interpreted as mnemonics exactly as
+\helpref{SetLabel}{wxstatictextsetlabel} does.
+
+Example:
+
+%% TEX NOTE: in the following block we need to write the (ugly) &&amp;amp;
+%%           string in order to force Tex2rtf to show the &&amp; string
+\begin{verbatim}
+    // this will set the wxStaticText to show the "Hello world!" string
+    // with the "Hello" world bolded on platforms which support markup
+    // and will be equivalent to
+    //        SetLabel(wxT("Hello world!"));
+    // on platforms which do not support markup:
+    pStaticText->SetLabelWithMarkup(wxT("<b>Hello</b> world!"));
+
+    // this will set into the wxStaticText the string:
+    //
+    //              Specials: & ' " < >"
+    //
+    // On platforms which support markup, the "Specials" word will be smaller
+    pStaticText->SetLabelWithMarkup(
+        wxT("<small>Specials</small>: &&amp;amp; &&amp;apos; &&amp;quot;; &&amp;lt; &&amp;gt;"));
+\end{verbatim}
+
+\wxheading{Parameters}
+
+\docparam{label}{The new label to set. It may contain newline characters and the markup described above.}
+
+
 \membersection{wxStaticText::Wrap}\label{wxstatictextwrpa}
 
Index: include/wx/stattext.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/stattext.h,v
retrieving revision 1.25
diff -bu2 -r1.25 include/wx/stattext.h
--- include/wx/stattext.h
+++ include/wx/stattext.h
@@ -40,4 +40,6 @@
     virtual bool HasTransparentBackground() { return true; }
 
+    void SetLabelWithMarkup(const wxString &str);
+
 private:
     DECLARE_NO_COPY_CLASS(wxStaticTextBase)
Index: include/wx/gtk/control.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/gtk/control.h,v
retrieving revision 1.34
diff -bu2 -r1.34 include/wx/gtk/control.h
--- include/wx/gtk/control.h
+++ include/wx/gtk/control.h
@@ -57,4 +57,5 @@
     // sets the label to the given string and also sets it for the given widget
     void GTKSetLabelForLabel(GtkLabel *w, const wxString& label);
+    void GTKSetLabelWithMarkupForLabel(GtkLabel *w, const wxString& label);
 
     // GtkFrame helpers
Index: include/wx/private/stattext.h
--- /dev/null
+++ include/wx/private/stattext.h
@@ -0,0 +1,70 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        include/wx/private/stattext.h
+// Purpose:     Internal declarations for dlgcmn.cpp and stattextcmn.cpp
+// Author:      Francesco Montorsi
+// Modified by:
+// Created:     7-1-2007
+// RCS-ID:      $Id: filename.h,v 1.1 2006/10/23 13:10:12 MW Exp $
+// Copyright:   (c) 2007 wxWidgets team
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+#ifndef _WX_PRIVATE_STATTEXT_H_
+#define _WX_PRIVATE_STATTEXT_H_
+
+#if wxUSE_STATTEXT
+
+// ----------------------------------------------------------------------------
+// wxTextWrapper
+// ----------------------------------------------------------------------------
+
+// this class is used to wrap the text on word boundary: wrapping is done by
+// calling OnStartLine() and OnOutputLine() functions
+class wxTextWrapper
+{
+public:
+    wxTextWrapper() { m_eol = false; }
+
+    // win is used for getting the font, text is the text to wrap, width is the
+    // max line width or -1 to disable wrapping
+    void Wrap(wxWindow *win, const wxString& text, int widthMax);
+
+    // we don't need it, but just to avoid compiler warnings
+    virtual ~wxTextWrapper() { }
+
+protected:
+    // line may be empty
+    virtual void OnOutputLine(const wxString& line) = 0;
+
+    // called at the start of every new line (except the very first one)
+    virtual void OnNewLine() { }
+
+private:
+    // call OnOutputLine() and set m_eol to true
+    void DoOutputLine(const wxString& line)
+    {
+        OnOutputLine(line);
+
+        m_eol = true;
+    }
+
+    // this function is a destructive inspector: when it returns true it also
+    // resets the flag to false so calling it again woulnd't return true any
+    // more
+    bool IsStartOfNewLine()
+    {
+        if ( !m_eol )
+            return false;
+
+        m_eol = false;
+
+        return true;
+    }
+
+
+    bool m_eol;
+};
+
+#endif // wxUSE_STATTEXT
+
+#endif // _WX_PRIVATE_STATTEXT_H_
Index: samples/widgets/static.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/samples/widgets/static.cpp,v
retrieving revision 1.23
diff -bu2 -r1.23 samples/widgets/static.cpp
--- samples/widgets/static.cpp
+++ samples/widgets/static.cpp
@@ -54,5 +54,6 @@
     StaticPage_Reset = wxID_HIGHEST,
     StaticPage_BoxText,
-    StaticPage_LabelText
+    StaticPage_LabelText,
+    StaticPage_LabelTextWithMarkup
 };
 
@@ -156,4 +157,5 @@
     void OnButtonBoxText(wxCommandEvent& event);
     void OnButtonLabelText(wxCommandEvent& event);
+    void OnButtonLabelWithMarkupText(wxCommandEvent& event);
 
     // reset all parameters
@@ -176,5 +178,6 @@
     wxStaticBox *m_staticBox;
     wxStaticBoxSizer *m_sizerStatBox;
-    wxStaticText *m_statText;
+    wxStaticText *m_statText,
+                 *m_statTextWithMarkup;
 #if wxUSE_STATLINE
     wxStaticLine *m_statLine;
@@ -184,5 +187,6 @@
     // the text entries for command parameters
     wxTextCtrl *m_textBox,
-               *m_textLabel;
+               *m_textLabel,
+               *m_textLabelWithMarkup;
 
 private:
@@ -198,4 +202,5 @@
     EVT_BUTTON(StaticPage_Reset, StaticWidgetsPage::OnButtonReset)
     EVT_BUTTON(StaticPage_LabelText, StaticWidgetsPage::OnButtonLabelText)
+    EVT_BUTTON(StaticPage_LabelTextWithMarkup, StaticWidgetsPage::OnButtonLabelWithMarkupText)
     EVT_BUTTON(StaticPage_BoxText, StaticWidgetsPage::OnButtonBoxText)
 
@@ -226,9 +231,11 @@
     m_statLine = (wxStaticLine *)NULL;
 #endif // wxUSE_STATLINE
-    m_statText = (wxStaticText *)NULL;
+    m_statText = m_statTextWithMarkup = (wxStaticText *)NULL;
 
     m_staticBox = (wxStaticBox *)NULL;
     m_sizerStatBox = (wxStaticBoxSizer *)NULL;
     m_sizerStatic = (wxSizer *)NULL;
+
+    m_textBox = m_textLabel = m_textLabelWithMarkup = NULL;
 }
 
@@ -289,6 +296,16 @@
     sizerMiddle->Add(sizerRow, 0, wxGROW | wxALL, 5);
 
+    sizerRow = CreateSizerWithTextAndButton(StaticPage_LabelTextWithMarkup,
+                                            _T("Change decorated text label"),
+                                            wxID_ANY, &m_textLabelWithMarkup);
+    sizerMiddle->Add(sizerRow, 0, wxGROW | wxALL, 5);
+
+
     m_textBox->SetValue(_T("This is a box"));
-    m_textLabel->SetValue(_T("And this is a label\ninside the box"));
+    m_textLabel->SetValue(_T("And this is a label\ninside the box with a &mnemonic"));
+    m_textLabelWithMarkup->SetValue(_T("Another label, this time <b>decorated</b> ")
+                                    _T("with <u>markup</u>; here you need entities ")
+                                    _T("for the symbols: &&lt; &&gt; &&amp; &&apos; &&quot; ")
+                                    _T(" but you can still place &mnemonics..."));
 
     // right pane
@@ -333,4 +350,5 @@
         m_sizerStatic->Remove(m_sizerStatBox);
         delete m_statText;
+        delete m_statTextWithMarkup;
 #if wxUSE_STATLINE
         delete m_statLine;
@@ -398,4 +416,11 @@
                                   flagsText);
 
+    m_statTextWithMarkup = new wxStaticText(this, wxID_ANY, wxEmptyString,
+                                            wxDefaultPosition, wxDefaultSize, flagsText);
+
+    // we need to set the text with SetLabelWithMarkup() as wxStaticText
+    // contructor accepts only un-decorated labels:
+    m_statTextWithMarkup->SetLabelWithMarkup(m_textLabelWithMarkup->GetValue());
+
 #if wxUSE_STATLINE
     m_statLine = new wxStaticLine(this, wxID_ANY,
@@ -408,5 +433,5 @@
     m_sizerStatBox->Add(m_statLine, 0, wxGROW | wxALL, 5);
 #endif // wxUSE_STATLINE
-    m_sizerStatBox->Add(0, 0, 1);
+    m_sizerStatBox->Add(m_statTextWithMarkup, 1, wxGROW | wxALL, 5);
 
     m_sizerStatic->Add(m_sizerStatBox, 1, wxGROW);
@@ -441,2 +466,7 @@
 }
 
+void StaticWidgetsPage::OnButtonLabelWithMarkupText(wxCommandEvent& WXUNUSED(event))
+{
+    m_statTextWithMarkup->SetLabelWithMarkup(m_textLabelWithMarkup->GetValue());
+}
+
Index: src/common/dlgcmn.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/dlgcmn.cpp,v
retrieving revision 1.64
diff -bu2 -r1.64 src/common/dlgcmn.cpp
--- src/common/dlgcmn.cpp
+++ src/common/dlgcmn.cpp
@@ -39,59 +39,6 @@
 #include "wx/statline.h"
 #include "wx/sysopt.h"
+#include "wx/private/stattext.h"
 
-#if wxUSE_STATTEXT
-
-// ----------------------------------------------------------------------------
-// wxTextWrapper
-// ----------------------------------------------------------------------------
-
-// this class is used to wrap the text on word boundary: wrapping is done by
-// calling OnStartLine() and OnOutputLine() functions
-class wxTextWrapper
-{
-public:
-    wxTextWrapper() { m_eol = false; }
-
-    // win is used for getting the font, text is the text to wrap, width is the
-    // max line width or -1 to disable wrapping
-    void Wrap(wxWindow *win, const wxString& text, int widthMax);
-
-    // we don't need it, but just to avoid compiler warnings
-    virtual ~wxTextWrapper() { }
-
-protected:
-    // line may be empty
-    virtual void OnOutputLine(const wxString& line) = 0;
-
-    // called at the start of every new line (except the very first one)
-    virtual void OnNewLine() { }
-
-private:
-    // call OnOutputLine() and set m_eol to true
-    void DoOutputLine(const wxString& line)
-    {
-        OnOutputLine(line);
-
-        m_eol = true;
-    }
-
-    // this function is a destructive inspector: when it returns true it also
-    // resets the flag to false so calling it again woulnd't return true any
-    // more
-    bool IsStartOfNewLine()
-    {
-        if ( !m_eol )
-            return false;
-
-        m_eol = false;
-
-        return true;
-    }
-
-
-    bool m_eol;
-};
-
-#endif // wxUSE_STATTEXT
 
 // ----------------------------------------------------------------------------
@@ -127,56 +74,4 @@
 #if wxUSE_STATTEXT
 
-void wxTextWrapper::Wrap(wxWindow *win, const wxString& text, int widthMax)
-{
-    const wxChar *lastSpace = NULL;
-    wxString line;
-
-    const wxChar *lineStart = text.c_str();
-    for ( const wxChar *p = lineStart; ; p++ )
-    {
-        if ( IsStartOfNewLine() )
-        {
-            OnNewLine();
-
-            lastSpace = NULL;
-            line.clear();
-            lineStart = p;
-        }
-
-        if ( *p == _T('\n') || *p == _T('\0') )
-        {
-            DoOutputLine(line);
-
-            if ( *p == _T('\0') )
-                break;
-        }
-        else // not EOL
-        {
-            if ( *p == _T(' ') )
-                lastSpace = p;
-
-            line += *p;
-
-            if ( widthMax >= 0 && lastSpace )
-            {
-                int width;
-                win->GetTextExtent(line, &width, NULL);
-
-                if ( width > widthMax )
-                {
-                    // remove the last word from this line
-                    line.erase(lastSpace - lineStart, p + 1 - lineStart);
-                    DoOutputLine(line);
-
-                    // go back to the last word of this line which we didn't
-                    // output yet
-                    p = lastSpace;
-                }
-            }
-            //else: no wrapping at all or impossible to wrap
-        }
-    }
-}
-
 class wxTextSizerWrapper : public wxTextWrapper
 {
@@ -239,43 +134,4 @@
 }
 
-class wxLabelWrapper : public wxTextWrapper
-{
-public:
-    void WrapLabel(wxWindow *text, int widthMax)
-    {
-        m_text.clear();
-        Wrap(text, text->GetLabel(), widthMax);
-        text->SetLabel(m_text);
-    }
-
-protected:
-    virtual void OnOutputLine(const wxString& line)
-    {
-        m_text += line;
-    }
-
-    virtual void OnNewLine()
-    {
-        m_text += _T('\n');
-    }
-
-private:
-    wxString m_text;
-};
-
-// NB: don't "factor out" the scope operator, SGI MIPSpro 7.3 (but not 7.4)
-//     gets confused if it doesn't immediately follow the class name
-void
-#if defined(__WXGTK__) && !defined(__WXUNIVERSAL__)
-wxStaticText::
-#else
-wxStaticTextBase::
-#endif
-Wrap(int width)
-{
-    wxLabelWrapper wrapper;
-    wrapper.WrapLabel(this, width);
-}
-
 #endif // wxUSE_STATTEXT
 
--- nul	1970-01-01 01:00:00.000000000 +0100
+++ 	2007-01-07 17:26:39.390625000 +0100

Index: src/common/stattextcmn.cpp
--- /dev/null
+++ src/common/stattextcmn.cpp
@@ -0,0 +1,215 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        src/common/stattextcmn.cpp
+// Purpose:     common (to all ports) wxStaticText functions
+// Author:      Vadim Zeitlin
+// Modified by:
+// Created:     7/1/2006 (extracted from dlgcmn.cpp)
+// RCS-ID:      $Id$
+// Copyright:   (c) Vadim Zeitlin
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+// ============================================================================
+// declarations
+// ============================================================================
+
+// ----------------------------------------------------------------------------
+// headers
+// ----------------------------------------------------------------------------
+
+// For compilers that support precompilation, includes "wx.h".
+#include "wx/wxprec.h"
+
+#ifdef __BORLANDC__
+    #pragma hdrstop
+#endif
+
+#include "wx/private/stattext.h"
+
+#ifndef WX_PRECOMP
+    #include "wx/button.h"
+    #include "wx/dcclient.h"
+    #include "wx/intl.h"
+    #include "wx/settings.h"
+    #include "wx/stattext.h"
+    #include "wx/sizer.h"
+    #include "wx/containr.h"
+#endif
+
+#if wxUSE_STATTEXT
+
+// ----------------------------------------------------------------------------
+// wxTextWrapper
+// ----------------------------------------------------------------------------
+
+void wxTextWrapper::Wrap(wxWindow *win, const wxString& text, int widthMax)
+{
+    const wxChar *lastSpace = NULL;
+    wxString line;
+
+    const wxChar *lineStart = text.c_str();
+    for ( const wxChar *p = lineStart; ; p++ )
+    {
+        if ( IsStartOfNewLine() )
+        {
+            OnNewLine();
+
+            lastSpace = NULL;
+            line.clear();
+            lineStart = p;
+        }
+
+        if ( *p == _T('\n') || *p == _T('\0') )
+        {
+            DoOutputLine(line);
+
+            if ( *p == _T('\0') )
+                break;
+        }
+        else // not EOL
+        {
+            if ( *p == _T(' ') )
+                lastSpace = p;
+
+            line += *p;
+
+            if ( widthMax >= 0 && lastSpace )
+            {
+                int width;
+                win->GetTextExtent(line, &width, NULL);
+
+                if ( width > widthMax )
+                {
+                    // remove the last word from this line
+                    line.erase(lastSpace - lineStart, p + 1 - lineStart);
+                    DoOutputLine(line);
+
+                    // go back to the last word of this line which we didn't
+                    // output yet
+                    p = lastSpace;
+                }
+            }
+            //else: no wrapping at all or impossible to wrap
+        }
+    }
+}
+
+
+// ----------------------------------------------------------------------------
+// wxLabelWrapper: helper class for wxStaticTextBase::Wrap()
+// ----------------------------------------------------------------------------
+
+class wxLabelWrapper : public wxTextWrapper
+{
+public:
+    void WrapLabel(wxWindow *text, int widthMax)
+    {
+        m_text.clear();
+        Wrap(text, text->GetLabel(), widthMax);
+        text->SetLabel(m_text);
+    }
+
+protected:
+    virtual void OnOutputLine(const wxString& line)
+    {
+        m_text += line;
+    }
+
+    virtual void OnNewLine()
+    {
+        m_text += _T('\n');
+    }
+
+private:
+    wxString m_text;
+};
+
+
+// ----------------------------------------------------------------------------
+// wxStaticTextBase
+// ----------------------------------------------------------------------------
+
+// NB: don't "factor out" the scope operator, SGI MIPSpro 7.3 (but not 7.4)
+//     gets confused if it doesn't immediately follow the class name
+#if defined(__WXGTK__) && !defined(__WXUNIVERSAL__)
+#define base_class     wxStaticText
+#else
+#define base_class     wxStaticTextBase
+#endif
+
+void base_class::Wrap(int width)
+{
+    wxLabelWrapper wrapper;
+    wrapper.WrapLabel(this, width);
+}
+
+#if !defined(__WXGTK20__)
+void base_class::SetLabelWithMarkup(const wxString &text)
+{
+    // these are the only entities treated in a special way by SetLabelWithMarkup()
+    const wxChar *entities[] =
+    {
+        wxT("&amp;"),
+        wxT("&lt;"),
+        wxT("&gt;"),
+        wxT("&apos;"),
+        wxT("&quot;")
+    };
+
+    const wxChar *entityRef[] =
+    {
+        wxT("&&"),      // we need to convert &&amp; to just && as '&' is special for SetLabel()
+        wxT("<"),
+        wxT(">"),
+        wxT("'"),
+        wxT("\"")
+    };
+
+
+    // strip out of "text" the markup for platforms which don't support it natively
+    bool inside_tag = false;
+
+    wxString label;
+    const wxChar *source = text;
+    for (size_t i=0, max=text.length(); i<max; i++)
+    {
+        switch (source[i])
+        {
+            case wxT('<'):
+                wxASSERT_MSG(!inside_tag, wxT("Invalid markup !"));
+                inside_tag = true;
+                break;
+
+            case wxT('>'):
+                wxASSERT_MSG(inside_tag, wxT("Invalid markup !"));
+                inside_tag = false;
+                break;
+
+            case wxT('&'):
+                // cannot be used as last character!
+                wxASSERT_MSG(i != max-1, wxT("Cannot use & as last character of the string"));
+                for (size_t j=0; j < WXSIZEOF(entities); j++)
+                {
+                    size_t entityLen = wxStrlen(entities[j]);
+                    if (max - i >= entityLen &&
+                        wxStrncmp(entities[j], &source[i+1], entityLen) == 0)
+                    {
+                        label << entityRef[j];
+                        i += entityLen;
+                        break;
+                    }
+                }
+                break;
+
+
+            default:
+                if (!inside_tag)
+                    label << text[i];
+        }
+    }
+
+    SetLabel(label);
+}
+#endif      // __WXGTK20__
+
+#endif // wxUSE_STATTEXT
Index: src/gtk/control.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/gtk/control.cpp,v
retrieving revision 1.56
diff -bu2 -r1.56 src/gtk/control.cpp
--- src/gtk/control.cpp
+++ src/gtk/control.cpp
@@ -112,5 +112,19 @@
 
     gtk_label_set_text_with_mnemonic(w, wxGTK_CONV(labelGTK));
+
+}
+
+#ifdef __WXGTK20__
+void wxControl::GTKSetLabelWithMarkupForLabel(GtkLabel *w, const wxString& label)
+{
+    // don't call the virtual function which might call this one back again
+    wxControl::SetLabel(label);
+
+    const wxString labelGTK = GTKConvertMnemonics(label);
+
+    gtk_label_set_markup_with_mnemonic(w, wxGTK_CONV(labelGTK));
 }
+#endif
+
 
 // ----------------------------------------------------------------------------
@@ -159,5 +173,5 @@
 // notice that under GTK+ 1 we only really need to support MNEMONICS_REMOVE as
 // it doesn't support mnemonics anyhow but this would make the code so ugly
-// that we do the same thing for GKT+ 1 and 2
+// that we do the same thing for GTK+ 1 and 2
 // ----------------------------------------------------------------------------
 

 	  	 

 	  	 

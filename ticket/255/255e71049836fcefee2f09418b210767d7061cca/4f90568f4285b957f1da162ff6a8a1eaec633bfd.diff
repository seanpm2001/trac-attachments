--- src/common/imagjpeg.cpp.orig	Fri Mar  4 17:23:28 2005
+++ src/common/imagjpeg.cpp	Tue Apr 25 09:18:28 2006
@@ -195,6 +195,21 @@
     src->pub.term_source = wx_term_source;
 }
 
+static inline void wx_cmyk_to_rgb(unsigned char* rgb, const unsigned char* cmyk)
+{
+    register int k = 255 - cmyk[3];
+    register int k2 = cmyk[3];
+    register int c;
+
+    c = k + k2 * (255 - cmyk[0]) / 255;
+    rgb[0] = (c > 255) ? 0 : (255 - c);
+
+    c = k + k2 * (255 - cmyk[1]) / 255;
+    rgb[1] = (c > 255) ? 0 : (255 - c);
+
+    c = k + k2 * (255 - cmyk[2]) / 255;
+    rgb[2] = (c > 255) ? 0 : (255 - c);
+}
 
 // temporarily disable the warning C4611 (interaction between '_setjmp' and
 // C++ object destruction is non-portable) - I don't see any dtors here
@@ -232,7 +247,11 @@
     jpeg_create_decompress( &cinfo );
     wx_jpeg_io_src( &cinfo, stream );
     jpeg_read_header( &cinfo, TRUE );
-    cinfo.out_color_space = JCS_RGB;
+//    cinfo.out_color_space = JCS_RGB;
+    if ((cinfo.out_color_space == JCS_CMYK) || (cinfo.out_color_space == JCS_YCCK))
+        cinfo.out_color_space = JCS_CMYK;
+    else
+        cinfo.out_color_space = JCS_RGB;
     jpeg_start_decompress( &cinfo );
 
     image->Create( cinfo.image_width, cinfo.image_height );
@@ -243,14 +262,31 @@
     }
     image->SetMask( false );
     ptr = image->GetData();
-    stride = cinfo.output_width * 3;
-    tempbuf = (*cinfo.mem->alloc_sarray)
-        ((j_common_ptr) &cinfo, JPOOL_IMAGE, stride, 1 );
-
-    while ( cinfo.output_scanline < cinfo.output_height ) {
-        jpeg_read_scanlines( &cinfo, tempbuf, 1 );
-        memcpy( ptr, tempbuf[0], stride );
-        ptr += stride;
+
+    if (cinfo.out_color_space == JCS_RGB) {
+        stride = cinfo.output_width * 3;
+        tempbuf = (*cinfo.mem->alloc_sarray)
+            ((j_common_ptr) &cinfo, JPOOL_IMAGE, stride, 1 );
+
+        while ( cinfo.output_scanline < cinfo.output_height ) {
+            jpeg_read_scanlines( &cinfo, tempbuf, 1 );
+            memcpy( ptr, tempbuf[0], stride );
+            ptr += stride;
+        }
+    } else {
+        stride = cinfo.output_width * 4;
+        tempbuf = (*cinfo.mem->alloc_sarray)
+            ((j_common_ptr) &cinfo, JPOOL_IMAGE, stride, 1 );
+
+        while ( cinfo.output_scanline < cinfo.output_height ) {
+            jpeg_read_scanlines( &cinfo, tempbuf, 1 );
+            const unsigned char* inptr = (const unsigned char*) tempbuf[0];
+            for (size_t i = 0; i < cinfo.output_width; i++) {
+                wx_cmyk_to_rgb(ptr, inptr);
+                ptr += 3;
+                inptr += 4;
+            }
+        }
     }
     jpeg_finish_decompress( &cinfo );
     jpeg_destroy_decompress( &cinfo );

 	  	 

--- /old/grid.cpp	2007-03-19 15:27:06.000000000 +0200
+++ /new/grid.cpp	2007-05-10 01:14:44.000000000 +0300
@@ -1890,16 +1890,16 @@
         if ((best_width > rectCell.width) && (col < cols) && grid.GetTable())
         {
             int i, c_cols, c_rows;
-            for (i = col+cell_cols; i < cols; i++)
+            for (i = grid.GetColPos(col)+cell_cols; i < cols; i++)
             {
                 bool is_empty = true;
                 for (int j=row; j < row + cell_rows; j++)
                 {
                     // check w/ anchor cell for multicell block
-                    grid.GetCellSize(j, i, &c_rows, &c_cols);
+                    grid.GetCellSize(j, grid.GetColAt(i), &c_rows, &c_cols);
                     if (c_rows > 0)
                         c_rows = 0;
-                    if (!grid.GetTable()->IsEmptyCell(j + c_rows, i))
+                    if (!grid.GetTable()->IsEmptyCell(j + c_rows, grid.GetColAt(i)))
                     {
                         is_empty = false;
                         break;
@@ -1908,7 +1908,7 @@
 
                 if (is_empty)
                 {
-                    rect.width += grid.GetColSize(i);
+                    rect.width += grid.GetColSize(grid.GetColAt(i));
                 }
                 else
                 {
@@ -1920,7 +1920,7 @@
                     break;
             }
 
-            overflowCols = i - col - cell_cols + 1;
+            overflowCols = i - grid.GetColPos(col) - cell_cols + 1;
             if (overflowCols >= cols)
                 overflowCols = cols - 1;
         }
@@ -1931,21 +1931,21 @@
             wxRect clip = rect;
             clip.x += rectCell.width;
             // draw each overflow cell individually
-            int col_end = col + cell_cols + overflowCols;
+            int col_end = grid.GetColPos(col) + cell_cols + overflowCols;
             if (col_end >= grid.GetNumberCols())
                 col_end = grid.GetNumberCols() - 1;
-            for (int i = col + cell_cols; i <= col_end; i++)
+            for (int i = grid.GetColPos(col) + cell_cols; i <= col_end; i++)
             {
-                clip.width = grid.GetColSize(i) - 1;
+                clip.width = grid.GetColSize(grid.GetColAt(i)) - 1;
                 dc.DestroyClippingRegion();
                 dc.SetClippingRegion(clip);
 
                 SetTextColoursAndFont(grid, attr, dc,
-                        grid.IsInSelection(row,i));
+                        grid.IsInSelection(row,grid.GetColAt(i)));
 
                 grid.DrawTextRectangle(dc, grid.GetCellValue(row, col),
                         rect, hAlign, vAlign);
-                clip.x += grid.GetColSize(i) - 1;
+                clip.x += grid.GetColSize(grid.GetColAt(i)) - 1;
             }
 
             rect = rectCell;
@@ -4903,6 +4903,15 @@
                     m_colAt[i] = i;
                 }
             }
+            if ( !m_colPos.IsEmpty() )
+			{
+                //Refilling positons table
+// 				printf(	"McolPos1\n");
+                m_colPos.Add( 0, numCols );
+                int i;
+                for ( i = 0; i < m_numCols; i++ )
+					m_colPos[m_colAt[i]] =i;
+			};
 
             if ( !m_colWidths.IsEmpty() )
             {
@@ -4932,7 +4941,7 @@
             }
 
             if ( m_selection )
-                m_selection->UpdateCols( pos, numCols );
+                m_selection->UpdateCols( GetColPos(pos), numCols );
             wxGridCellAttrProvider * attrProvider = m_table->GetAttrProvider();
             if (attrProvider)
                 attrProvider->UpdateAttrCols( pos, numCols );
@@ -4962,6 +4971,17 @@
                     m_colAt[i] = i;
                 }
             }
+            if ( !m_colPos.IsEmpty() )
+			{
+// 				printf(	"McolPos2\n");
+                //Refilling positons table
+                m_colPos.Add( 0, numCols );
+                int i;
+                for ( i = oldNumCols; i < m_numCols; i++ )
+                {
+					m_colPos[i] =i;
+                }
+			};
 
             if ( !m_colWidths.IsEmpty() )
             {
@@ -5018,6 +5038,15 @@
                         m_colAt[colPos] -= numCols;
                 }
             }
+            if ( !m_colPos.IsEmpty() )
+			{
+// 				printf(	"McolPos3\n");
+                //Refilling positons table
+                m_colPos.RemoveAt( pos, numCols );
+                int i;
+                for ( i = 0; i < m_numCols; i++ )
+					m_colPos[m_colAt[i]] =i;
+			};
 
             if ( !m_colWidths.IsEmpty() )
             {
@@ -5046,7 +5075,7 @@
             }
 
             if ( m_selection )
-                m_selection->UpdateCols( pos, -((int)numCols) );
+                m_selection->UpdateCols( GetColPos(pos), -((int)numCols) );
             wxGridCellAttrProvider * attrProvider = m_table->GetAttrProvider();
             if (attrProvider)
             {
@@ -5515,7 +5544,7 @@
                     {
                         if ( m_selection )
                         {
-                            m_selection->SelectCol( col,
+                            m_selection->SelectCol( GetColPos(col),
                                                     event.ControlDown(),
                                                     event.ShiftDown(),
                                                     event.AltDown(),
@@ -5539,9 +5568,14 @@
                     else
                         markerX = GetColLeft( m_moveToCol );
 
+
                     if ( markerX != m_dragLastPos )
                     {
                         wxClientDC dc( m_colLabelWin );
+                        int sx, dx,tmp1;
+                        GetViewStart(&sx, &tmp1);
+                        GetScrollPixelsPerUnit(&dx, &tmp1);
+                        dc.SetDeviceOrigin(-sx*dx,0);
 
                         int cw, ch;
                         m_colLabelWin->GetClientSize( &cw, &ch );
@@ -5556,8 +5590,8 @@
                             dc.DrawLine( m_dragLastPos + 1, 0, m_dragLastPos + 1, ch );
                             dc.SetPen(wxNullPen);
 
-                            if ( XToCol( m_dragLastPos ) != -1 )
-                                DrawColLabel( dc, XToCol( m_dragLastPos ) );
+                           if ( XToCol( m_dragLastPos ) != -1 )
+                               DrawColLabel( dc, XToCol( m_dragLastPos ) );
                         }
 
                         //Moving to the same place? Don't draw a marker
@@ -5626,8 +5660,10 @@
                 {
                     //Show button as pressed
                     wxClientDC dc( m_colLabelWin );
+					DoPrepareDC(dc);
                     int colLeft = GetColLeft( col );
                     int colRight = GetColRight( col ) - 1;
+
                     dc.SetPen( wxPen( m_colLabelWin->GetBackgroundColour(), 1 ) );
                     dc.DrawLine( colLeft, 1, colLeft, m_colLabelHeight-1 );
                     dc.DrawLine( colLeft, 1, colRight, 1 );
@@ -5643,8 +5679,8 @@
                         if ( event.ShiftDown() )
                         {
                             m_selection->SelectBlock( 0,
-                                                      m_currentCellCoords.GetCol(),
-                                                      GetNumberRows() - 1, col,
+                                                      GetColPos(m_currentCellCoords.GetCol()),
+                                                      GetNumberRows() - 1, GetColPos(col),
                                                       event.ControlDown(),
                                                       event.ShiftDown(),
                                                       event.AltDown(),
@@ -5652,7 +5688,7 @@
                         }
                         else
                         {
-                            m_selection->SelectCol( col,
+                            m_selection->SelectCol( GetColPos(col),
                                                     event.ControlDown(),
                                                     event.ShiftDown(),
                                                     event.AltDown(),
@@ -5886,7 +5922,11 @@
     wxPoint pos( event.GetPosition() );
     CalcUnscrolledPosition( pos.x, pos.y, &x, &y );
 
+//    wxGridCellCoords coords_pos;
+//    XYToCellPos( x, y, coords_pos );
     wxGridCellCoords coords;
+//	coords.SetRow(coords_pos.GetRow());
+//	coords.SetCol(GetColAt(coords_pos.GetCol()));
     XYToCell( x, y, coords );
 
     int cell_rows, cell_cols;
@@ -5901,6 +5941,7 @@
     if ( event.Dragging() )
     {
         //wxLogDebug("pos(%d, %d) coords(%d, %d)", pos.x, pos.y, coords.GetRow(), coords.GetCol());
+//		printf(	"pos(%d, %d) coords(%d, %d),coords_pos(%d, %d)\n", pos.x, pos.y, coords.GetRow(), coords.GetCol(), coords_pos.GetRow(), coords_pos.GetCol());
 
         // Don't start doing anything until the mouse has been dragged at
         // least 3 pixels in any direction...
@@ -5932,7 +5973,8 @@
                 {
                     if ( m_selectingKeyboard == wxGridNoCellCoords)
                         m_selectingKeyboard = coords;
-                    HighlightBlock( m_selectingKeyboard, coords );
+                 HighlightBlock( m_selectingKeyboard, coords );
+// 					  HighlightBlockByID( m_selectingKeyboard, coords );
                 }
                 else if ( CanDragCell() )
                 {
@@ -5952,11 +5994,14 @@
                 {
                     if ( !IsSelection() )
                     {
-                        HighlightBlock( coords, coords );
+                       HighlightBlock( coords, coords );
+// 						HighlightBlockByID( coords, coords );
+
                     }
                     else
                     {
                         HighlightBlock( m_currentCellCoords, coords );
+//  						HighlightBlockByID( m_currentCellCoords, coords );
                     }
                 }
 
@@ -6035,11 +6080,14 @@
     //
     if ( event.LeftDown() && coords != wxGridNoCellCoords )
     {
+//		printf(	"LeftPress=pos(%d, %d) coords(%d, %d),coords_pos(%d, %d)\n", pos.x, pos.y, coords.GetRow(), coords.GetCol(), coords_pos.GetRow(), coords_pos.GetCol());
+
         if ( !SendEvent( wxEVT_GRID_CELL_LEFT_CLICK,
                        coords.GetRow(),
                        coords.GetCol(),
                        event ) )
         {
+//			printf(	"step1\n");
             if ( !event.CmdDown() )
                 ClearSelection();
             if ( event.ShiftDown() )
@@ -6047,9 +6095,13 @@
                 if ( m_selection )
                 {
                     m_selection->SelectBlock( m_currentCellCoords.GetRow(),
-                                              m_currentCellCoords.GetCol(),
+                                             GetColPos(m_currentCellCoords.GetCol()),
+//                                               m_currentCellCoords.GetCol(),
                                               coords.GetRow(),
-                                              coords.GetCol(),
+//                                              coords_pos.GetRow(),
+                                              GetColPos(coords.GetCol()),
+//                                               coords.GetCol(),
+//                                              coords_pos.GetCol(),
                                               event.ControlDown(),
                                               event.ShiftDown(),
                                               event.AltDown(),
@@ -6067,7 +6119,10 @@
                     if ( m_selection )
                     {
                         m_selection->ToggleCellSelection( coords.GetRow(),
-                                                          coords.GetCol(),
+//                        m_selection->ToggleCellSelection( coords_pos.GetRow(),
+                                                         GetColPos(coords.GetCol()),
+//                                                           coords.GetCol(),
+//                                                           coords_pos.GetCol(),
                                                           event.ControlDown(),
                                                           event.ShiftDown(),
                                                           event.AltDown(),
@@ -6076,9 +6131,11 @@
                     m_selectingTopLeft = wxGridNoCellCoords;
                     m_selectingBottomRight = wxGridNoCellCoords;
                     m_selectingKeyboard = coords;
+//                    m_selectingKeyboard = coords_pos;
                 }
                 else
                 {
+//					printf(	"step3\n");
                     m_waitForSlowClick = m_currentCellCoords == coords && coords != wxGridNoCellCoords;
                     SetCurrentCell( coords );
                     if ( m_selection )
@@ -6086,6 +6143,7 @@
                         if ( m_selection->GetSelectionMode() !=
                                 wxGrid::wxGridSelectCells )
                         {
+//                             HighlightBlockByID( coords, coords );
                             HighlightBlock( coords, coords );
                         }
                     }
@@ -6103,8 +6161,8 @@
         if ( XToEdgeOfCol(x) < 0 && YToEdgeOfRow(y) < 0 )
         {
             if ( !SendEvent( wxEVT_GRID_CELL_LEFT_DCLICK,
-                             coords.GetRow(),
-                             coords.GetCol(),
+                              coords.GetRow(),
+                              coords.GetCol(),
                              event ) )
             {
                 // we want double click to select a cell and start editing
@@ -6118,8 +6176,10 @@
     //
     else if ( event.LeftUp() )
     {
+//		printf(	"LU step1\n");
         if ( m_cursorMode == WXGRID_CURSOR_SELECT_CELL )
         {
+//			printf(	"LU step2\n");
             if (m_winCapture)
             {
                 if (m_winCapture->HasCapture())
@@ -6146,9 +6206,11 @@
                 if ( m_selection )
                 {
                     m_selection->SelectBlock( m_selectingTopLeft.GetRow(),
-                                              m_selectingTopLeft.GetCol(),
+                                             GetColPos(m_selectingTopLeft.GetCol()),
+//                                               m_selectingTopLeft.GetCol(),
                                               m_selectingBottomRight.GetRow(),
-                                              m_selectingBottomRight.GetCol(),
+                                             GetColPos(m_selectingBottomRight.GetCol()),
+//                                               m_selectingBottomRight.GetCol(),
                                               event.ControlDown(),
                                               event.ShiftDown(),
                                               event.AltDown(),
@@ -6422,28 +6484,44 @@
             m_colAt.Add( i );
         }
     }
+    if ( m_colPos.IsEmpty() )
+    {
+// 		printf(	"McolPos4\n");
+        m_colPos.Alloc( m_numCols );
+        int i;
+        for ( i = 0; i < m_numCols; i++ )
+        {
+            m_colPos.Add( i );
+        }
+    }
 
     int oldPos = GetColPos( colID );
 
     //Reshuffle the m_colAt array
     if ( newPos > oldPos )
     {
+// 		printf(	"McolPos5\n");
         int i;
         for ( i = oldPos; i < newPos; i++ )
         {
             m_colAt[i] = m_colAt[i+1];
+ 			m_colPos[m_colAt[i]]=i;
         }
     }
     else
     {
+// 		printf(	"McolPos6\n");
         int i;
         for ( i = oldPos; i > newPos; i-- )
         {
             m_colAt[i] = m_colAt[i-1];
+ 			m_colPos[m_colAt[i]]=i;
         }
     }
+// 	printf(	"McolPos7\n");
 
     m_colAt[newPos] = colID;
+ 	m_colPos[colID]=newPos;
 
     //Recalculate the column rights
     if ( !m_colWidths.IsEmpty() )
@@ -6474,7 +6552,9 @@
 
     if ( !m_canDragColMove )
     {
+		printf(	"McolPos8\n");
         m_colAt.Clear();
+        m_colPos.Clear();
 
         //Recalculate the column rights
         if ( !m_colWidths.IsEmpty() )
@@ -7060,7 +7140,7 @@
                     {
                         m_selection->ToggleCellSelection(
                             m_currentCellCoords.GetRow(),
-                            m_currentCellCoords.GetCol(),
+                            GetColPos(m_currentCellCoords.GetCol()),
                             event.ControlDown(),
                             event.ShiftDown(),
                             event.AltDown(),
@@ -7097,9 +7177,9 @@
             {
                 m_selection->SelectBlock(
                     m_selectingTopLeft.GetRow(),
-                    m_selectingTopLeft.GetCol(),
+                    GetColPos(m_selectingTopLeft.GetCol()),
                     m_selectingBottomRight.GetRow(),
-                    m_selectingBottomRight.GetCol(),
+                    GetColPos(m_selectingBottomRight.GetCol()),
                     event.ControlDown(),
                     true,
                     event.AltDown(),
@@ -7160,7 +7240,7 @@
 
 void wxGrid::SetCurrentCell( const wxGridCellCoords& coords )
 {
-    if ( SendEvent( wxEVT_GRID_SELECT_CELL, coords.GetRow(), coords.GetCol() ) )
+    if ( SendEvent( wxEVT_GRID_SELECT_CELL, coords.GetRow(), coords.GetCol()  ) )
     {
         // the event has been intercepted - do nothing
         return;
@@ -7236,7 +7316,7 @@
         bottomRow = temp;
     }
 
-    if ( leftCol > rightCol )
+    if ( GetColPos(leftCol) > GetColPos(rightCol) )
     {
         temp = leftCol;
         leftCol = rightCol;
@@ -7278,7 +7358,7 @@
         wxCoord oldBottom = m_selectingBottomRight.GetRow();
 
         // Determine the outer/inner coordinates.
-        if (oldLeft > leftCol)
+        if (GetColPos(oldLeft) > GetColPos(leftCol))
         {
             temp = oldLeft;
             oldLeft = leftCol;
@@ -7290,7 +7370,7 @@
             oldTop = topRow;
             topRow = temp;
         }
-        if (oldRight < rightCol )
+        if (GetColPos(oldRight) < GetColPos(rightCol) )
         {
             temp = oldRight;
             oldRight = rightCol;
@@ -7307,7 +7387,7 @@
         // rectangle or we don't have a situation where one
         // is contained in the other.
 
-        if ( oldLeft < leftCol )
+        if ( GetColPos(oldLeft) < GetColPos(leftCol) )
         {
             // Refresh the newly selected or deselected
             // area to the left of the old or new selection.
@@ -7327,7 +7407,7 @@
                 wxGridCellCoords( topRow - 1, rightCol ) );
         }
 
-        if ( oldRight > rightCol )
+        if ( GetColPos(oldRight) > GetColPos(rightCol) )
         {
             // Refresh the newly selected or deselected
             // area to the right of the old or new selection.
@@ -8525,6 +8605,22 @@
     }
 }
 
+/*void wxGrid::XYToCellPos( int x, int y, wxGridCellCoords& coords )
+{
+    int row = YToRow(y);
+    int col = XToCol(x,false,true);
+
+    if ( row == -1 || col == -1 )
+    {
+        coords = wxGridNoCellCoords;
+    }
+    else
+    {
+        coords.Set( row, col );
+    }
+}*/
+
+
 // Internal Helper function for computing row or column from some
 // (unscrolled) coordinate value, using either
 // m_defaultRowHeight/m_defaultColWidth or binary search on array
@@ -8598,6 +8694,7 @@
                            m_minAcceptableRowHeight, m_rowBottoms, m_numRows, false);
 }
 
+//int  wxGrid::XToCol( int x, bool clipToMinMax, bool ReturnCellPos)
 int wxGrid::XToCol( int x, bool clipToMinMax )
 {
     if (x < 0)
@@ -8658,6 +8755,66 @@
     }
     return GetColAt( maxPos );
 }
+/*
+{
+    if (x < 0)
+        return clipToMinMax && (m_numCols > 0) ? (ReturnCellPos?0:GetColAt( 0 )) : -1;
+
+    if (!m_defaultColWidth)
+        m_defaultColWidth = 1;
+
+    int maxPos = x / m_defaultColWidth;
+    int minPos = 0;
+
+    if (m_colRights.IsEmpty())
+    {
+        if(maxPos < m_numCols)
+            return ReturnCellPos?maxPos:GetColAt( maxPos );
+        return clipToMinMax ? (ReturnCellPos?m_numCols - 1:GetColAt( m_numCols - 1 )) : -1;
+    }
+
+    if ( maxPos >= m_numCols)
+        maxPos = m_numCols - 1;
+    else
+    {
+        if ( x >= m_colRights[GetColAt( maxPos )])
+        {
+            minPos = maxPos;
+            if (m_minAcceptableColWidth)
+                maxPos = x / m_minAcceptableColWidth;
+            else
+                maxPos =  m_numCols - 1;
+        }
+        if ( maxPos >= m_numCols)
+            maxPos = m_numCols - 1;
+    }
+
+    //X is beyond the last column
+    if ( x >= m_colRights[GetColAt( maxPos )])
+        return clipToMinMax ? (ReturnCellPos?maxPos:GetColAt( maxPos )) : -1;
+
+    //X is before the first column
+    if ( x < m_colRights[GetColAt( 0 )] )
+        return ReturnCellPos?0:GetColAt( 0 );
+
+    //Perform a binary search
+    while ( maxPos - minPos > 0 )
+    {
+        wxCHECK_MSG(m_colRights[GetColAt( minPos )] <= x && x < m_colRights[GetColAt( maxPos )],
+                    0, _T("wxGrid: internal error in XToCol"));
+
+        if (x >=  m_colRights[GetColAt( maxPos - 1 )])
+            return ReturnCellPos?maxPos:GetColAt( maxPos );
+        else
+            maxPos--;
+        int median = minPos + (maxPos - minPos + 1) / 2;
+        if (x < m_colRights[GetColAt( median )])
+            maxPos = median;
+        else
+            minPos = median;
+    }
+    return ReturnCellPos?maxPos:GetColAt( maxPos );
+}*/
 
 // return the row number that that the y coord is near
 //  the edge of, or -1 if not near an edge.
@@ -8704,7 +8861,8 @@
         if ( abs(GetColRight(i) - x) < WXGRID_LABEL_EDGE_ZONE )
             return i;
         else if ( i > 0 && x - GetColLeft(i) < WXGRID_LABEL_EDGE_ZONE )
-            return i - 1;
+//            return i - 1;
+            return GetColAt(GetColPos(i) - 1);
     }
 
     return -1;
@@ -10799,7 +10957,7 @@
         ClearSelection();
 
     if ( m_selection )
-        m_selection->SelectCol( col, false, addToSelected );
+        m_selection->SelectCol( GetColPos(col), false, addToSelected );
 }
 
 void wxGrid::SelectBlock( int topRow, int leftCol, int bottomRow, int rightCol,
@@ -10809,7 +10967,7 @@
         ClearSelection();
 
     if ( m_selection )
-        m_selection->SelectBlock( topRow, leftCol, bottomRow, rightCol,
+        m_selection->SelectBlock( topRow, GetColPos(leftCol), bottomRow, GetColPos(rightCol),
                                   false, addToSelected );
 }
 
@@ -10851,27 +11009,27 @@
 {
     if ( !m_selection )
         return;
-
+	int col_pos=GetColPos(col);
     if ( m_selection->GetSelectionMode() == wxGrid::wxGridSelectColumns )
     {
-        if ( m_selection->IsInSelection(0, col ) )
-            m_selection->ToggleCellSelection(0, col);
+        if ( m_selection->IsInSelection(0, col_pos ) )
+            m_selection->ToggleCellSelection(0, col_pos);
     }
     else
     {
         int nRows = GetNumberRows();
         for ( int i = 0; i < nRows; i++ )
         {
-            if ( m_selection->IsInSelection(i, col ) )
-                m_selection->ToggleCellSelection(i, col);
+            if ( m_selection->IsInSelection(i, col_pos ) )
+                m_selection->ToggleCellSelection(i, col_pos);
         }
     }
 }
 
 void wxGrid::DeselectCell( int row, int col )
 {
-    if ( m_selection && m_selection->IsInSelection(row, col) )
-        m_selection->ToggleCellSelection(row, col);
+    if ( m_selection && m_selection->IsInSelection(row, GetColPos(col)) )
+        m_selection->ToggleCellSelection(row, GetColPos(col));
 }
 
 bool wxGrid::IsSelection()
@@ -10883,11 +11041,15 @@
 
 bool wxGrid::IsInSelection( int row, int col ) const
 {
-    return ( m_selection && (m_selection->IsInSelection( row, col ) ||
+	int col_pos=GetColPos(col);
+     return ( m_selection && (m_selection->IsInSelection( row, col_pos ) ||
+//    return ( m_selection && (m_selection->IsInSelection( row, col ) ||
              ( row >= m_selectingTopLeft.GetRow() &&
-               col >= m_selectingTopLeft.GetCol() &&
+               col_pos >= GetColPos(m_selectingTopLeft.GetCol())&&
+//               col_pos >= m_selectingTopLeft.GetCol() &&
                row <= m_selectingBottomRight.GetRow() &&
-               col <= m_selectingBottomRight.GetCol() )) );
+               col_pos <= GetColPos(m_selectingBottomRight.GetCol()) )) );
+//               col_pos <= m_selectingBottomRight.GetCol() )) );
 }
 
 wxGridCellCoordsArray wxGrid::GetSelectedCells() const
@@ -10934,6 +11096,7 @@
     return m_selection->m_rowSelection;
 }
 
+//Should we transform from col_pos(stored in selection grid) to colid? (and in GetSelectionBlockBottomRight)
 wxArrayInt wxGrid::GetSelectedCols() const
 {
     if (!m_selection)
@@ -10941,7 +11104,6 @@
         wxArrayInt a;
         return a;
     }
-
     return m_selection->m_colSelection;
 }
 

 	  	 

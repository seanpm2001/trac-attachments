Index: wxWindows/include/wx/defs.h
===================================================================
RCS file: /home/wxcvs/wxWindows/include/wx/defs.h,v
retrieving revision 1.270
diff -r1.270 defs.h
1053,1057c1053,1059
< #define wxCAL_SUNDAY_FIRST      0x0000
< #define wxCAL_MONDAY_FIRST      0x0001
< #define wxCAL_SHOW_HOLIDAYS     0x0002
< #define wxCAL_NO_YEAR_CHANGE    0x0004
< #define wxCAL_NO_MONTH_CHANGE   0x000c // no month change => no year change
---
> #define wxCAL_SUNDAY_FIRST               0x0000
> #define wxCAL_MONDAY_FIRST               0x0001
> #define wxCAL_SHOW_HOLIDAYS              0x0002
> #define wxCAL_NO_YEAR_CHANGE             0x0004
> #define wxCAL_NO_MONTH_CHANGE            0x000c // no month change => no year change
> #define wxCAL_SEQUENTIAL_MONTH_SELECTION 0x0010 // use MS-style month-selection instead of combo-spin combination
> #define wxCAL_SHOW_SURROUNDING_WEEKS     0x0020 // show the neighbouring weeks in the previous and next month
Index: wxWindows/include/wx/generic/calctrl.h
===================================================================
RCS file: /home/wxcvs/wxWindows/include/wx/generic/calctrl.h,v
retrieving revision 1.11
diff -r1.11 calctrl.h
66c66
<     void SetDate(const wxDateTime& date);
---
>     bool SetDate(const wxDateTime& date); // we need to be able to control if the event should be sent in SetDateAndNotify(...)
68a69,78
>     // set/get the range in which selection can occur
>     // ---------------------------------------------
> 
>     bool SetLowerDateLimit(const wxDateTime& date = wxDefaultDateTime);
>     const wxDateTime& GetLowerDateLimit() const { return m_lowdate; }
>     bool SetUpperDateLimit(const wxDateTime& date = wxDefaultDateTime);
>     const wxDateTime& GetUpperDateLimit() const { return m_highdate; }
> 
>     bool SetDateRange(const wxDateTime& lowerdate = wxDefaultDateTime, const wxDateTime& upperdate = wxDefaultDateTime);
>     
191a202,208
>     // is this date in the given range?
>     bool IsDateInRange(const wxDateTime& date) const;
>     
>     // range helpers
>     bool ChangeYear(wxDateTime* target) const;
>     bool ChangeMonth(wxDateTime* target) const;
> 
234a252,261
>     // OnPaint helper-methods
>     
>     // Highlight the [fromdate : todate] range using pen and brush
>     void HighlightRange(wxPaintDC* dc, const wxDateTime& fromdate, const wxDateTime& todate, wxPen* pen, wxBrush* brush);
>     
>     // Get the "coordinates" for the date relative to the month currently displayed.
>     // using (day, week): upper left coord is (1, 1), lower right coord is (7, 6)
>     // if the date isn't visible (-1, -1) is put in (day, week) and false is returned
>     bool GetDateCoord(const wxDateTime& date, int *day, int *week) const;
> 
244a272,275
>     // the date-range
>     wxDateTime m_lowdate;
>     wxDateTime m_highdate;
> 
258c289,293
<             m_heightRow;
---
>             m_heightRow,
>             m_rowOffset;
> 
>     wxRect m_leftArrowRect,
>             m_rightArrowRect;
Index: wxWindows/src/generic/calctrl.cpp
===================================================================
RCS file: /home/wxcvs/wxWindows/src/generic/calctrl.cpp,v
retrieving revision 1.22
diff -r1.22 calctrl.cpp
202,210c202,216
<     m_spinYear = new wxYearSpinCtrl(this);
<     m_staticYear = new wxStaticText(GetParent(), -1, m_date.Format(_T("%Y")),
<                                     wxDefaultPosition, wxDefaultSize,
<                                     wxALIGN_CENTRE);
< 
<     m_comboMonth = new wxMonthComboBox(this);
<     m_staticMonth = new wxStaticText(GetParent(), -1, m_date.Format(_T("%B")),
<                                      wxDefaultPosition, wxDefaultSize,
<                                      wxALIGN_CENTRE);
---
>     m_lowdate = wxDefaultDateTime;
>     m_highdate = wxDefaultDateTime;
> 
>     if ( !(GetWindowStyle() & wxCAL_SEQUENTIAL_MONTH_SELECTION) )
>     {
>         m_spinYear = new wxYearSpinCtrl(this);
>         m_staticYear = new wxStaticText(GetParent(), -1, m_date.Format(_T("%Y")),
>                                         wxDefaultPosition, wxDefaultSize,
>                                         wxALIGN_CENTRE);
> 
>         m_comboMonth = new wxMonthComboBox(this);
>         m_staticMonth = new wxStaticText(GetParent(), -1, m_date.Format(_T("%B")),
>                                          wxDefaultPosition, wxDefaultSize,
>                                          wxALIGN_CENTRE);
>     }
257,258c263,267
<     GetMonthControl()->Show(show);
<     GetYearControl()->Show(show);
---
>     if ( !(GetWindowStyle() & wxCAL_SEQUENTIAL_MONTH_SELECTION) )
>     {
>         GetMonthControl()->Show(show);
>         GetYearControl()->Show(show);
>     }
270,271c279,283
<     GetMonthControl()->Enable(enable);
<     GetYearControl()->Enable(enable);
---
>     if ( !(GetWindowStyle() & wxCAL_SEQUENTIAL_MONTH_SELECTION) )
>     {
>         GetMonthControl()->Enable(enable);
>         GetYearControl()->Enable(enable);
>     }
282c294
<     if ( AllowMonthChange() )
---
>     if ( !(GetWindowStyle() & wxCAL_SEQUENTIAL_MONTH_SELECTION) )
284,287c296
<         m_comboMonth->Show();
<         m_staticMonth->Hide();
< 
<         if ( AllowYearChange() )
---
>         if ( AllowMonthChange() )
289,290c298,299
<             m_spinYear->Show();
<             m_staticYear->Hide();
---
>             m_comboMonth->Show();
>             m_staticMonth->Hide();
292,293c301,313
<             // skip the rest
<             return;
---
>             if ( AllowYearChange() )
>             {
>                 m_spinYear->Show();
>                 m_staticYear->Hide();
> 
>                 // skip the rest
>                 return;
>             }
>         }
>         else
>         {
>             m_comboMonth->Hide();
>             m_staticMonth->Show();
295,300d314
<     }
<     else
<     {
<         m_comboMonth->Hide();
<         m_staticMonth->Show();
<     }
302,304c316,319
<     // year change not allowed here
<     m_spinYear->Hide();
<     m_staticYear->Show();
---
>         // year change not allowed here
>         m_spinYear->Hide();
>         m_staticYear->Show();
>     }
328a344,347
>         if ( GetWindowStyle() & wxCAL_SEQUENTIAL_MONTH_SELECTION )
>         {
>             Refresh();
>         }
342c361
< 
---
>         
343a363,366
>         if ( GetWindowStyle() & wxCAL_SEQUENTIAL_MONTH_SELECTION )
>         {
>             Refresh();
>         }
351c374
< void wxCalendarCtrl::SetDate(const wxDateTime& date)
---
> bool wxCalendarCtrl::SetDate(const wxDateTime& date)
352a376,377
>     bool retval = false;
> 
356c381
<     if ( sameMonth && sameYear )
---
>     if ( IsDateInRange(date) )
358,363c383
<         // just change the day
<         ChangeDay(date);
<     }
<     else
<     {
<         if ( !AllowMonthChange() || (!AllowYearChange() && !sameYear) )
---
>         if ( sameMonth && sameYear )
365,366c385,387
<             // forbidden
<             return;
---
>             // just change the day
>             retval = true;
>             ChangeDay(date);
367a389,395
>         else
>         {
>             if ( !AllowMonthChange() || (!AllowYearChange() && !sameYear) )
>             {
>                 // forbidden
>                 return retval;
>             }
369,370c397,399
<         // change everything
<         m_date = date;
---
>             // change everything
>             retval = true;
>             m_date = date;
372,373c401,404
<         // update the controls
<         m_comboMonth->SetSelection(m_date.GetMonth());
---
>             if ( !(GetWindowStyle() & wxCAL_SEQUENTIAL_MONTH_SELECTION) )
>             {
>                 // update the controls
>                 m_comboMonth->SetSelection(m_date.GetMonth());
375,378c406,410
<         if ( AllowYearChange() )
<         {
<             m_spinYear->SetValue(m_date.Format(_T("%Y")));
<         }
---
>                 if ( AllowYearChange() )
>                 {
>                     m_spinYear->SetValue(m_date.Format(_T("%Y")));
>                 }
>             }
380,381c412,413
<         // as the month changed, holidays did too
<         SetHolidayAttrs();
---
>             // as the month changed, holidays did too
>             SetHolidayAttrs();
383,384c415,417
<         // update the calendar
<         Refresh();
---
>             // update the calendar
>             Refresh();
>         }
385a419,420
> 
>     return retval;
422c457,494
<     SetDate(date);
---
>     if ( SetDate(date) )
>     {
>         GenerateEvents(type, wxEVT_CALENDAR_SEL_CHANGED);
>     }
> }
> 
> // ----------------------------------------------------------------------------
> // date range
> // ----------------------------------------------------------------------------
> 
> bool wxCalendarCtrl::SetLowerDateLimit(const wxDateTime& date /* = wxDefaultDateTime */)
> {
>     bool retval = true;
> 
>     if ( !(date.IsValid()) || ( ( m_highdate.IsValid() ) ? ( date <= m_highdate ) : true ) )
>     {
>         m_lowdate = date;
>     }
>     else
>     {
>         retval = false;
>     }
> 
>     return retval;
> }
> 
> bool wxCalendarCtrl::SetUpperDateLimit(const wxDateTime& date /* = wxDefaultDateTime */)
> {
>     bool retval = true;
> 
>     if ( !(date.IsValid()) || ( ( m_lowdate.IsValid() ) ? ( date >= m_lowdate ) : true ) )
>     {
>         m_highdate = date;
>     }
>     else
>     {
>         retval = false;
>     }
424c496,515
<     GenerateEvents(type, wxEVT_CALENDAR_SEL_CHANGED);
---
>     return retval;
> }
> 
> bool wxCalendarCtrl::SetDateRange(const wxDateTime& lowerdate /* = wxDefaultDateTime */, const wxDateTime& upperdate /* = wxDefaultDateTime */)
> {
>     bool retval = true;
> 
>     if (
>         ( !( lowerdate.IsValid() ) || ( ( upperdate.IsValid() ) ? ( lowerdate <= upperdate ) : true ) ) &&
>         ( !( upperdate.IsValid() ) || ( ( lowerdate.IsValid() ) ? ( upperdate >= lowerdate ) : true ) ) )
>     {
>         m_lowdate = lowerdate;
>         m_highdate = upperdate;
>     }
>     else
>     {
>         retval = false;
>     }
>     
>     return retval;
440a532,540
>     if ( GetWindowStyle() & wxCAL_SHOW_SURROUNDING_WEEKS )
>     {
>         // We want to offset the calendar if we start on the first..
>         if ( date.GetDay() == 1 )
>         {
>             date -= wxDateSpan::Week();
>         }
>     }
> 
446c546,622
<     return date.GetMonth() == m_date.GetMonth();
---
>     if ( !(GetWindowStyle() & wxCAL_SHOW_SURROUNDING_WEEKS) )
>     {
>         return date.GetMonth() == m_date.GetMonth();
>     }
>     else
>     {
>         return TRUE;
>     }
> }
> 
> bool wxCalendarCtrl::IsDateInRange(const wxDateTime& date) const
> {
>     bool retval = true;
>     // Check if the given date is in the range specified
>     retval = ( ( ( m_lowdate.IsValid() ) ? ( date >= m_lowdate ) : true ) 
>         && ( ( m_highdate.IsValid() ) ? ( date <= m_highdate ) : true ) );
>     return retval;
> }
> 
> bool wxCalendarCtrl::ChangeYear(wxDateTime* target) const
> {
>     bool retval = false;
> 
>     if ( !(IsDateInRange(*target)) )
>     {
>         if ( target->GetYear() < m_date.GetYear() )
>         {
>             if ( target->GetYear() >= GetLowerDateLimit().GetYear() )
>             {
>                 *target = GetLowerDateLimit();
>                 retval = true;
>             }
>             else
>             {
>                 *target = m_date;
>             }
>         }
>         else
>         {
>             if ( target->GetYear() <= GetUpperDateLimit().GetYear() )
>             {
>                 *target = GetUpperDateLimit();
>                 retval = true;
>             }
>             else
>             {
>                 *target = m_date;
>             }
>         }
>     }
>     else
>     {
>         retval = true;
>     }
> 
>     return retval;
> }
> 
> bool wxCalendarCtrl::ChangeMonth(wxDateTime* target) const
> {
>     bool retval = true;
> 
>     if ( !(IsDateInRange(*target)) )
>     {
>         retval = false;
> 
>         if ( target->GetMonth() < m_date.GetMonth() )
>         {
>             *target = GetLowerDateLimit();
>         }
>         else
>         {
>             *target = GetUpperDateLimit();
>         }
>     }
> 
>     return retval;
451,453c627,648
<     return date.GetWeekOfMonth(GetWindowStyle() & wxCAL_MONDAY_FIRST
<                                ? wxDateTime::Monday_First
<                                : wxDateTime::Sunday_First);
---
>     size_t retval = date.GetWeekOfMonth(GetWindowStyle() & wxCAL_MONDAY_FIRST
>                                    ? wxDateTime::Monday_First
>                                    : wxDateTime::Sunday_First);
> 
>     if ( (GetWindowStyle() & wxCAL_SHOW_SURROUNDING_WEEKS) )
>     {
>         // we need to offset an extra week if we "start" on the 1st of the month
>         wxDateTime::Tm tm = date.GetTm();
> 
>         wxDateTime datetest = wxDateTime(1, tm.mon, tm.year);
> 
>         // rewind back
>         datetest.SetToPrevWeekDay(GetWindowStyle() & wxCAL_MONDAY_FIRST
>                               ? wxDateTime::Mon : wxDateTime::Sun);
>         
>         if ( datetest.GetDay() == 1 )
>         {
>             retval += 1;
>         }
>     }
>     
>     return retval;
478c673
<             height = 7*m_heightRow;
---
>             height = 7*m_heightRow + m_rowOffset;
482d676
<     height += VERT_MARGIN + m_spinYear->GetBestSize().y;
484c678,688
<     if ( GetWindowStyle() & (wxRAISED_BORDER | wxSUNKEN_BORDER) )
---
>     if ( !(GetWindowStyle() & wxCAL_SEQUENTIAL_MONTH_SELECTION) )
>     {
>         height += VERT_MARGIN + m_spinYear->GetBestSize().y;
>     }
>     else
>     {
>         height += VERT_MARGIN;
>     }
> 
> //    if ( GetWindowStyle() & (wxRAISED_BORDER | wxSUNKEN_BORDER) ) // This doesn't work. Default is wxBORDER_DEFAULT (0)
>     if ( !(GetWindowStyle() & wxBORDER_NONE) )
487a692
>         width += 4;
502,503c707,708
<     wxSize sizeCombo = m_comboMonth->GetSize();
<     wxSize sizeStatic = m_staticMonth->GetSize();
---
>     int xDiff = 0;
>     int yDiff = 0;
505,511c710,713
<     int dy = (sizeCombo.y - sizeStatic.y) / 2;
<     m_comboMonth->Move(x, y);
<     m_staticMonth->SetSize(x, y + dy, sizeCombo.x, sizeStatic.y);
< 
<     int xDiff = sizeCombo.x + HORZ_MARGIN;
<     m_spinYear->SetSize(x + xDiff, y, width - xDiff, sizeCombo.y);
<     m_staticYear->SetSize(x + xDiff, y + dy, width - xDiff, sizeStatic.y);
---
>     if ( !(GetWindowStyle() & wxCAL_SEQUENTIAL_MONTH_SELECTION) )
>     {
>         wxSize sizeCombo = m_comboMonth->GetSize();
>         wxSize sizeStatic = m_staticMonth->GetSize();
513,514c715,727
<     wxSize sizeSpin = m_spinYear->GetSize();
<     int yDiff = wxMax(sizeSpin.y, sizeCombo.y) + VERT_MARGIN;
---
>         int dy = (sizeCombo.y - sizeStatic.y) / 2;
>         
>         m_comboMonth->Move(x, y);
>         m_staticMonth->SetSize(x, y + dy, sizeCombo.x, sizeStatic.y);
>         
>         xDiff = sizeCombo.x + HORZ_MARGIN;
>         
>         m_spinYear->SetSize(x + xDiff, y, width - xDiff, sizeCombo.y);
>         m_staticYear->SetSize(x + xDiff, y + dy, width - xDiff, sizeStatic.y);
> 
>         wxSize sizeSpin = m_spinYear->GetSize();
>         yDiff = wxMax(sizeSpin.y, sizeCombo.y) + VERT_MARGIN;
>     }
523,524c736
<     // our real top corner is not in this position
<     if ( y )
---
>     if ( !(GetWindowStyle() & wxCAL_SEQUENTIAL_MONTH_SELECTION) )
526c738,742
<         *y -= GetMonthControl()->GetSize().y + VERT_MARGIN;
---
>         // our real top corner is not in this position
>         if ( y )
>         {
>             *y -= GetMonthControl()->GetSize().y + VERT_MARGIN;
>         }
534,535c750
<     // our real height is bigger
<     if ( height )
---
>     if ( !(GetWindowStyle() & wxCAL_SEQUENTIAL_MONTH_SELECTION) )
537c752,756
<         *height += GetMonthControl()->GetSize().y + VERT_MARGIN;
---
>         // our real height is bigger
>         if ( height )
>         {
>             *height += GetMonthControl()->GetSize().y + VERT_MARGIN;
>         }
566a786,787
> 
>     m_rowOffset = (GetWindowStyle() & wxCAL_SEQUENTIAL_MONTH_SELECTION) ? m_heightRow : 0; // conditional in relation to style
586a808,883
>     wxCoord y = 0;
> 
> /////////////////////////////////////////////////////////////////////////////////////////
> 
>     if ( (GetWindowStyle() & wxCAL_SEQUENTIAL_MONTH_SELECTION) )
>     {
>         // draw the sequential month-selector
> 
>         dc.SetBackgroundMode(wxTRANSPARENT);
>         dc.SetTextForeground(*wxBLACK);
>         dc.SetBrush(wxBrush(m_colHeaderBg, wxSOLID));
>         dc.SetPen(wxPen(m_colHeaderBg, 1, wxSOLID));
>         dc.DrawRectangle(0, y, 7*m_widthCol, m_heightRow);
> 
>         // Get extent of month-name + year
>         wxCoord monthw, monthh;
>         wxString headertext = m_date.Format("%B %Y");
>         dc.GetTextExtent(headertext, &monthw, &monthh);
> 
>         // draw month-name centered above weekdays
>         wxCoord monthx = ((m_widthCol * 7) - monthw) / 2;
>         wxCoord monthy = ((m_heightRow - monthh) / 2) + y;
>         dc.DrawText(headertext, monthx,  monthy);   
> 
>         // calculate the "month-arrows"
>         wxPoint leftarrow[3];
>         wxPoint rightarrow[3];
> 
>         int arrowheight = monthh / 2;
>         
>         leftarrow[0] = wxPoint(0, arrowheight / 2);
>         leftarrow[1] = wxPoint(arrowheight / 2, 0);
>         leftarrow[2] = wxPoint(arrowheight / 2, arrowheight - 1);
> 
>         rightarrow[0] = wxPoint(0, 0);
>         rightarrow[1] = wxPoint(arrowheight / 2, arrowheight / 2);
>         rightarrow[2] = wxPoint(0, arrowheight - 1);
> 
>         // draw the "month-arrows"
> 
>         wxCoord arrowy = (m_heightRow - arrowheight) / 2;
>         wxCoord larrowx = (m_widthCol - (arrowheight / 2)) / 2;
>         wxCoord rarrowx = ((m_widthCol - (arrowheight / 2)) / 2) + m_widthCol*6;
>         m_leftArrowRect = wxRect(0, 0, 0, 0);
>         m_rightArrowRect = wxRect(0, 0, 0, 0);
> 
>         if ( AllowMonthChange() )
>         {
>             wxDateTime ldpm = wxDateTime(1,m_date.GetMonth(), m_date.GetYear()) - wxDateSpan::Day(); // last day prev month
>             // Check if range permits change
>             if ( IsDateInRange(ldpm) && ( ( ldpm.GetYear() == m_date.GetYear() ) ? true : AllowYearChange() ) )
>             {
>                 m_leftArrowRect = wxRect(larrowx - 3, arrowy - 3, (arrowheight / 2) + 8, (arrowheight + 6));
>                 dc.SetBrush(wxBrush(*wxBLACK, wxSOLID));
>                 dc.SetPen(wxPen(*wxBLACK, 1, wxSOLID));
>                 dc.DrawPolygon(3, leftarrow, larrowx , arrowy, wxWINDING_RULE);
>                 dc.SetBrush(*wxTRANSPARENT_BRUSH);
>                 dc.DrawRectangle(m_leftArrowRect);
>             }
>             wxDateTime fdnm = wxDateTime(1,m_date.GetMonth(), m_date.GetYear()) + wxDateSpan::Month(); // first day next month
>             if ( IsDateInRange(fdnm) && ( ( fdnm.GetYear() == m_date.GetYear() ) ? true : AllowYearChange() ) )
>             {
>                 m_rightArrowRect = wxRect(rarrowx - 4, arrowy - 3, (arrowheight / 2) + 8, (arrowheight + 6));
>                 dc.SetBrush(wxBrush(*wxBLACK, wxSOLID));
>                 dc.SetPen(wxPen(*wxBLACK, 1, wxSOLID));
>                 dc.DrawPolygon(3, rightarrow, rarrowx , arrowy, wxWINDING_RULE);
>                 dc.SetBrush(*wxTRANSPARENT_BRUSH);
>                 dc.DrawRectangle(m_rightArrowRect);
>             }
>         }
> 
>         y += m_heightRow;
>     }
> 
> /////////////////////////////////////////////////////////////////////////////////////////
> 
588c885
<     if ( IsExposed(0, 0, 7*m_widthCol, m_heightRow) )
---
>     if ( IsExposed(0, y, 7*m_widthCol, m_heightRow) )
598c895
<         dc.DrawRectangle(0, 0, 7*m_widthCol, m_heightRow);
---
>         dc.DrawRectangle(0, y, 7*m_widthCol, m_heightRow);
608,609c905,908
< 
<             dc.DrawText(m_weekdays[n], wd*m_widthCol + 1, 0);
---
>             wxCoord dayw, dayh;
>             dc.GetTextExtent(m_weekdays[n], &dayw, &dayh);
> //            dc.DrawText(m_weekdays[n], wd*m_widthCol + 1, y);
>             dc.DrawText(m_weekdays[n], (wd*m_widthCol) + ((m_widthCol- dayw) / 2), y); // center the day-name
617,618c916
<     wxCoord y = m_heightRow;
< 
---
>     y += m_heightRow;
619a918
> 
653c952,953
<                 wxCalendarDateAttr *attr = m_attrs[day - 1];
---
>                 bool isSel = false;
>                 wxCalendarDateAttr *attr = NULL;
655,656c955
<                 bool isSel = date.IsSameDate(m_date);
<                 if ( isSel )
---
>                 if ( date.GetMonth() != m_date.GetMonth() || !IsDateInRange(date) )
658,660c957,959
<                     dc.SetTextForeground(m_colHighlightFg);
<                     dc.SetTextBackground(m_colHighlightBg);
< 
---
>                     // surrounding week or out-of-range
>                     // draw "disabled"
>                     dc.SetTextForeground(*wxLIGHT_GREY);
663c962
<                 else if ( attr )
---
>                 else
665c964,965
<                     wxColour colFg, colBg;
---
>                     isSel = date.IsSameDate(m_date);
>                     attr = m_attrs[day - 1];
667,672c967
<                     if ( attr->IsHoliday() )
<                     {
<                         colFg = m_colHolidayFg;
<                         colBg = m_colHolidayBg;
<                     }
<                     else
---
>                     if ( isSel )
674,676c969,970
<                         colFg = attr->GetTextColour();
<                         colBg = attr->GetBackgroundColour();
<                     }
---
>                         dc.SetTextForeground(m_colHighlightFg);
>                         dc.SetTextBackground(m_colHighlightBg);
678,680d971
<                     if ( colFg.Ok() )
<                     {
<                         dc.SetTextForeground(colFg);
683,684c974
< 
<                     if ( colBg.Ok() )
---
>                     else if ( attr )
686,688c976
<                         dc.SetTextBackground(colBg);
<                         changedColours = TRUE;
<                     }
---
>                         wxColour colFg, colBg;
690,693c978,1005
<                     if ( attr->HasFont() )
<                     {
<                         dc.SetFont(attr->GetFont());
<                         changedFont = TRUE;
---
>                         if ( attr->IsHoliday() )
>                         {
>                             colFg = m_colHolidayFg;
>                             colBg = m_colHolidayBg;
>                         }
>                         else
>                         {
>                             colFg = attr->GetTextColour();
>                             colBg = attr->GetBackgroundColour();
>                         }
> 
>                         if ( colFg.Ok() )
>                         {
>                             dc.SetTextForeground(colFg);
>                             changedColours = TRUE;
>                         }
> 
>                         if ( colBg.Ok() )
>                         {
>                             dc.SetTextBackground(colBg);
>                             changedColours = TRUE;
>                         }
> 
>                         if ( attr->HasFont() )
>                         {
>                             dc.SetFont(attr->GetFont());
>                             changedFont = TRUE;
>                         }
748a1061,1086
> 
>     // Greying out out-of-range background
>     bool showSurrounding = (GetWindowStyle() & wxCAL_SHOW_SURROUNDING_WEEKS) != 0;
> 
>     date = ( showSurrounding ) ? GetStartDate() : wxDateTime(1, m_date.GetMonth(), m_date.GetYear());
>     if ( !IsDateInRange(date) )
>     {
>         wxDateTime firstOOR = GetLowerDateLimit() - wxDateSpan::Day(); // first out-of-range
> 
>         wxBrush oorbrush = *wxLIGHT_GREY_BRUSH;
>         oorbrush.SetStyle(wxFDIAGONAL_HATCH);
> 
>         HighlightRange(&dc, date, firstOOR, wxTRANSPARENT_PEN, &oorbrush);
>     }
> 
>     date = ( showSurrounding ) ? GetStartDate() + wxDateSpan::Weeks(6) - wxDateSpan::Day() : wxDateTime().SetToLastMonthDay(m_date.GetMonth(), m_date.GetYear());
>     if ( !IsDateInRange(date) )
>     {
>         wxDateTime firstOOR = GetUpperDateLimit() + wxDateSpan::Day(); // first out-of-range
>         
>         wxBrush oorbrush = *wxLIGHT_GREY_BRUSH;
>         oorbrush.SetStyle(wxFDIAGONAL_HATCH);
> 
>         HighlightRange(&dc, firstOOR, date, wxTRANSPARENT_PEN, &oorbrush);
>     }
> 
764c1102,1104
<     rect.y = m_heightRow * GetWeek(date);
---
> 
>     rect.y = (m_heightRow * GetWeek(date)) + m_rowOffset;
> 
786a1127,1304
> void wxCalendarCtrl::HighlightRange(wxPaintDC* pDC, const wxDateTime& fromdate, const wxDateTime& todate, wxPen* pPen, wxBrush* pBrush)
> {
>     // Highlights the given range using pen and brush
>     // Does nothing if todate < fromdate
> 
> 
> #if DEBUG_PAINT
>     wxLogDebug("+++ HighlightRange: (%s) - (%s) +++", fromdate.Format("%d %m %Y"), todate.Format("%d %m %Y"));
> #endif
> 
>     if ( todate >= fromdate )
>     {
>         // do stuff
>         // date-coordinates
>         int fd, fw; 
>         int td, tw;
> 
>         // implicit: both dates must be currently shown - checked by GetDateCoord
>         if ( GetDateCoord(fromdate, &fd, &fw) && GetDateCoord(todate, &td, &tw) )
>         {
> #if DEBUG_PAINT
>             wxLogDebug("Highlight range: (%i, %i) - (%i, %i)", fd, fw, td, tw);
> #endif
>             if ( ( (tw - fw) == 1 ) && ( td < fd ) )
>             {
>                 // special case: interval 7 days or less not in same week
>                 // split in two seperate intervals
>                 wxDateTime tfd = fromdate + wxDateSpan::Days(7-fd);
>                 wxDateTime ftd = tfd + wxDateSpan::Day();
> #if DEBUG_PAINT
>                 wxLogDebug("Highlight: Seperate segments");
> #endif
>                 // draw seperately
>                 HighlightRange(pDC, fromdate, tfd, pPen, pBrush);
>                 HighlightRange(pDC, ftd, todate, pPen, pBrush);
>             }
>             else
>             {
>                 int numpoints;
>                 wxPoint corners[8]; // potentially 8 corners in polygon
> 
>                 if ( fw == tw )
>                 {
>                     // simple case: same week
>                     numpoints = 4;
>                     corners[0] = wxPoint((fd - 1) * m_widthCol, (fw * m_heightRow) + m_rowOffset);
>                     corners[1] = wxPoint((fd - 1) * m_widthCol, ((fw + 1 ) * m_heightRow) + m_rowOffset);
>                     corners[2] = wxPoint(td * m_widthCol, ((tw + 1) * m_heightRow) + m_rowOffset);
>                     corners[3] = wxPoint(td * m_widthCol, (tw * m_heightRow) + m_rowOffset);
>                 }
>                 else
>                 {
>                     int cidx = 0;
>                     // "complex" polygon
>                     corners[cidx] = wxPoint((fd - 1) * m_widthCol, (fw * m_heightRow) + m_rowOffset); cidx++;
>                     
>                     if ( fd > 1 )
>                     {
>                         corners[cidx] = wxPoint((fd - 1) * m_widthCol, ((fw + 1) * m_heightRow) + m_rowOffset); cidx++;
>                         corners[cidx] = wxPoint(0, ((fw + 1) * m_heightRow) + m_rowOffset); cidx++;
>                     }
> 
>                     corners[cidx] = wxPoint(0, ((tw + 1) * m_heightRow) + m_rowOffset); cidx++;
>                     corners[cidx] = wxPoint(td * m_widthCol, ((tw + 1) * m_heightRow) + m_rowOffset); cidx++;
> 
>                     if ( td < 7 )
>                     {
>                         corners[cidx] = wxPoint(td * m_widthCol, (tw * m_heightRow) + m_rowOffset); cidx++;
>                         corners[cidx] = wxPoint(7 * m_widthCol, (tw * m_heightRow) + m_rowOffset); cidx++;
>                     }
> 
>                     corners[cidx] = wxPoint(7 * m_widthCol, (fw * m_heightRow) + m_rowOffset); cidx++;
>                     
>                     numpoints = cidx;
>                 }
> 
>                 // draw the polygon
>                 pDC->SetBrush(*pBrush);
>                 pDC->SetPen(*pPen);
>                 pDC->DrawPolygon(numpoints, corners);
>             }
>         }
>     }
>     // else do nothing
> #if DEBUG_PAINT
>     wxLogDebug("--- HighlightRange ---");
> #endif
> }
> 
> bool wxCalendarCtrl::GetDateCoord(const wxDateTime& date, int *day, int *week) const
> {
>     bool retval = true;
> 
> #if DEBUG_PAINT
>     wxLogDebug("+++ GetDateCoord: (%s) +++", date.Format("%d %m %Y"));
> #endif
> 
>     if ( IsDateShown(date) )
>     {
>         bool startOnMonday = ( GetWindowStyle() & wxCAL_MONDAY_FIRST ) != 0;
>         
>         // Find day
>         *day = date.GetWeekDay();
>         
>         if ( *day == 0 ) // sunday
>         {
>             *day = ( startOnMonday ) ? 7 : 1;
>         }
>         else
>         {
>             day += ( startOnMonday ) ? 0 : 1;
>         }
> 
>         int targetmonth = date.GetMonth() + (12 * date.GetYear());
>         int thismonth = m_date.GetMonth() + (12 * m_date.GetYear());
> 
>         // Find week
>         if ( targetmonth == thismonth )
>         {
>             *week = GetWeek(date);
>         }
>         else
>         {
>             if ( targetmonth < thismonth )
>             {
>                 *week = 1; // trivial
>             }
>             else // targetmonth > thismonth
>             {
>                 wxDateTime ldcm;
>                 int lastweek;
>                 int lastday;
> 
>                 // get the datecoord of the last day in the month currently shown
> #if DEBUG_PAINT
>                 wxLogDebug("     +++ LDOM +++");
> #endif
>                 GetDateCoord(ldcm.SetToLastMonthDay(m_date.GetMonth(), m_date.GetYear()), &lastday, &lastweek);
> #if DEBUG_PAINT
>                 wxLogDebug("     --- LDOM ---");
> #endif
> 
>                 wxTimeSpan span = date - ldcm;
> 
>                 int daysfromlast = span.GetDays();
> #if DEBUG_PAINT
>                 wxLogDebug("daysfromlast: %i", daysfromlast);
> #endif
>                 if ( daysfromlast + lastday > 7 ) // past week boundary
>                 {
>                     int wholeweeks = (daysfromlast / 7);
>                     *week = wholeweeks + lastweek;
>                     if ( (daysfromlast - (7 * wholeweeks) + lastday) > 7 )
>                     {
>                         *week += 1;
>                     }
>                 }
>                 else
>                 {
>                     *week = lastweek;
>                 }
>             }
>         }
>     }
>     else
>     {
>         *day = -1;
>         *week = -1;
>         retval = false;
>     }
> 
> #if DEBUG_PAINT
>     wxLogDebug("--- GetDateCoord: (%s) = (%i, %i) ---", date.Format("%d %m %Y"), *day, *week);
> #endif
> 
>     return retval;
> }
> 
810c1328,1330
<             ChangeDay(date);
---
>             if ( IsDateInRange(date) )
>             {
>                 ChangeDay(date);
812,813c1332,1334
<             GenerateEvents(wxEVT_CALENDAR_DAY_CHANGED,
<                            wxEVT_CALENDAR_SEL_CHANGED);
---
>                 GenerateEvents(wxEVT_CALENDAR_DAY_CHANGED,
>                                wxEVT_CALENDAR_SEL_CHANGED);
>             }
823a1345,1350
>         case wxCAL_HITTEST_DECMONTH:
>         case wxCAL_HITTEST_INCMONTH:
>         case wxCAL_HITTEST_SURROUNDING_WEEK:
>             SetDateAndNotify(date); // we probably only want to refresh the control. No notification.. (maybe as an option?)
>             break;
> 
840,841d1366
<     int wday = pos.x / m_widthCol;
< 
843c1368,1370
<     if ( y < m_heightRow )
---
> 
> ///////////////////////////////////////////////////////////////////////////////////////////////////////
>     if ( (GetWindowStyle() & wxCAL_SEQUENTIAL_MONTH_SELECTION) )
845c1372,1376
<         if ( wd )
---
>         // Header: month
>         
>         // we need to find out if the hit is on left arrow, on month or on right arrow
>         // left arrow?
>         if ( wxRegion(m_leftArrowRect).Contains(pos) == wxInRegion )
847c1378
<             if ( GetWindowStyle() & wxCAL_MONDAY_FIRST )
---
>             if ( date )
849c1380,1387
<                 wday = wday == 6 ? 0 : wday + 1;
---
>                 if ( IsDateInRange(m_date - wxDateSpan::Month()) )
>                 {
>                     *date = m_date - wxDateSpan::Month();
>                 }
>                 else
>                 {
>                     *date = GetLowerDateLimit();
>                 }
852c1390,1407
<             *wd = (wxDateTime::WeekDay)wday;
---
>             return wxCAL_HITTEST_DECMONTH;
>         }
> 
>         if ( wxRegion(m_rightArrowRect).Contains(pos) == wxInRegion )
>         {
>             if ( date )
>             {
>                 if ( IsDateInRange(m_date + wxDateSpan::Month()) )
>                 {
>                     *date = m_date + wxDateSpan::Month();
>                 }
>                 else
>                 {
>                     *date = GetUpperDateLimit();
>                 }
>             }
> 
>             return wxCAL_HITTEST_INCMONTH;
855d1409
<         return wxCAL_HITTEST_HEADER;
858c1412,1439
<     int week = (y - m_heightRow) / m_heightRow;
---
> ///////////////////////////////////////////////////////////////////////////////////////////////////////
>     // Header: Days
>     int wday = pos.x / m_widthCol;
> //    if ( y < m_heightRow )
>     if ( y < (m_heightRow + m_rowOffset) )
>     {
>         if ( y > m_rowOffset )
>         {
>             if ( wd )
>             {
>                 if ( GetWindowStyle() & wxCAL_MONDAY_FIRST )
>                 {
>                     wday = wday == 6 ? 0 : wday + 1;
>                 }
> 
>                 *wd = (wxDateTime::WeekDay)wday;
>             }
> 
>             return wxCAL_HITTEST_HEADER;
>         }
>         else
>         {
>             return wxCAL_HITTEST_NOWHERE;
>         }
>     }
> 
> //    int week = (y - m_heightRow) / m_heightRow;
>     int week = (y - (m_heightRow + m_rowOffset)) / m_heightRow;
871c1452,1460
<         return wxCAL_HITTEST_DAY;
---
>         if ( dt.GetMonth() == m_date.GetMonth() )
>         {
> 
>             return wxCAL_HITTEST_DAY;
>         }
>         else
>         {
>             return wxCAL_HITTEST_SURROUNDING_WEEK;
>         }
893c1482,1485
<     SetDateAndNotify(wxDateTime(tm.mday, mon, tm.year));
---
>     wxDateTime target = wxDateTime(tm.mday, mon, tm.year);
> 
>     ChangeMonth(&target);
>     SetDateAndNotify(target);
904a1497,1509
>     
>     wxDateTime target = wxDateTime(tm.mday, tm.mon, year);
> 
>     if ( ChangeYear(&target) )
>     {
>         SetDateAndNotify(target);
>     }
>     else
>     {
>         // In this case we don't want to change the date. That would put us
>         // inside the same year but a strange number of months forward/back..
>         m_spinYear->SetValue(target.GetYear());
>     }
906d1510
<     SetDateAndNotify(wxDateTime(tm.mday, tm.mon, year));
914a1519
>     wxDateTime target;
919c1524,1528
<             SetDateAndNotify(m_date + wxDateSpan::Year());
---
>             target = m_date + wxDateSpan::Year();
>             if ( ChangeYear(&target) )
>             {
>                 SetDateAndNotify(target);
>             }
924c1533,1537
<             SetDateAndNotify(m_date - wxDateSpan::Year());
---
>             target = m_date - wxDateSpan::Year();
>             if ( ChangeYear(&target) )
>             {
>                 SetDateAndNotify(target);
>             }
928c1541,1543
<             SetDateAndNotify(m_date - wxDateSpan::Month());
---
>             target = m_date - wxDateSpan::Month();
>             ChangeMonth(&target);
>             SetDateAndNotify(target); // always
932c1547,1549
<             SetDateAndNotify(m_date + wxDateSpan::Month());
---
>             target = m_date + wxDateSpan::Month();
>             ChangeMonth(&target);
>             SetDateAndNotify(target); // always
937c1554,1555
<                 SetDateAndNotify(wxDateTime(m_date).SetToNextWeekDay(
---
>             {
>                 target = wxDateTime(m_date).SetToNextWeekDay(
939c1557,1563
<                                  ? wxDateTime::Sun : wxDateTime::Sat));
---
>                                  ? wxDateTime::Sun : wxDateTime::Sat);
>                 if ( !IsDateInRange(target) )
>                 {
>                     target = GetUpperDateLimit();
>                 }
>                 SetDateAndNotify(target);
>             }
946c1570,1571
<                 SetDateAndNotify(wxDateTime(m_date).SetToPrevWeekDay(
---
>             {
>                 target = wxDateTime(m_date).SetToPrevWeekDay(
948c1573,1579
<                                  ? wxDateTime::Mon : wxDateTime::Sun));
---
>                                  ? wxDateTime::Mon : wxDateTime::Sun);
>                 if ( !IsDateInRange(target) )
>                 {
>                     target = GetLowerDateLimit();
>                 }
>                 SetDateAndNotify(target);
>             }

 	  	 

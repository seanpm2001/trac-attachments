Index: include/wx/html/htmlcell.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/html/htmlcell.h,v
retrieving revision 1.64
diff -u -r1.64 htmlcell.h
--- include/wx/html/htmlcell.h	2006/04/14 11:38:29	1.64
+++ include/wx/html/htmlcell.h	2006/05/08 05:20:08
@@ -276,9 +276,11 @@
     //
     // Returned value : true if pagebreak was modified, false otherwise
     // Usage : while (container->AdjustPagebreak(&p)) {}
-    virtual bool AdjustPagebreak(int *pagebreak,
+/*    virtual bool AdjustPagebreak(int *pagebreak,
                                  int *known_pagebreaks = NULL,
-                                 int number_of_pages = 0) const;
+                                 int number_of_pages = 0) const; */
+    virtual bool AdjustPagebreak(int *pagebreak,
+                                 wxArrayInt& known_pagebreaks) const;
 
     // Sets cell's behaviour on pagebreaks (see AdjustPagebreak). Default
     // is true - the cell can be split on two pages
@@ -411,7 +413,8 @@
                       wxHtmlRenderingInfo& info);
     virtual void DrawInvisible(wxDC& dc, int x, int y,
                                wxHtmlRenderingInfo& info);
-    virtual bool AdjustPagebreak(int *pagebreak, int *known_pagebreaks = NULL, int number_of_pages = 0) const;
+/*    virtual bool AdjustPagebreak(int *pagebreak, int *known_pagebreaks = NULL, int number_of_pages = 0) const;*/
+    virtual bool AdjustPagebreak(int *pagebreak, wxArrayInt& known_pagebreaks) const;
 
     // insert cell at the end of m_Cells list
     void InsertCell(wxHtmlCell *cell);
Index: include/wx/html/htmprint.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/html/htmprint.h,v
retrieving revision 1.30
diff -u -r1.30 htmprint.h
--- include/wx/html/htmprint.h	2005/09/24 21:42:16	1.30
+++ include/wx/html/htmprint.h	2006/05/08 05:21:48
@@ -77,9 +77,11 @@
     // set the same pagebreak twice.
     //
     // CAUTION! Render() changes DC's user scale and does NOT restore it!
-    int Render(int x, int y, int from = 0, int dont_render = FALSE,
+    /*int Render(int x, int y, int from = 0, int dont_render = FALSE,
                int maxHeight = INT_MAX,
-               int *known_pagebreaks = NULL, int number_of_pages = 0);
+               int *known_pagebreaks = NULL, int number_of_pages = 0); */
+    int Render(int x, int y, wxArrayInt& known_pagebreaks, int from = 0,
+               int dont_render = FALSE, int to = INT_MAX);
 
     // returns total height of the html document
     // (compare Render's return value with this)
@@ -181,7 +183,8 @@
 
 private:
     int m_NumPages;
-    int m_PageBreaks[wxHTML_PRINT_MAX_PAGES];
+    //int m_PageBreaks[wxHTML_PRINT_MAX_PAGES];
+    wxArrayInt m_PageBreaks;

     wxString m_Document, m_BasePath;
     bool m_BasePathIsDir;
Index: src/html/htmlcell.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/html/htmlcell.cpp,v
retrieving revision 1.110
diff -u -r1.110 htmlcell.cpp
--- src/html/htmlcell.cpp	2006/04/19 14:18:02	1.110
+++ src/html/htmlcell.cpp	2006/05/08 05:11:53
@@ -219,7 +219,8 @@
 }

 
-bool wxHtmlCell::AdjustPagebreak(int *pagebreak, int* WXUNUSED(known_pagebreaks), int WXUNUSED(number_of_pages)) const
+//bool wxHtmlCell::AdjustPagebreak(int *pagebreak, int* WXUNUSED(known_pagebreaks), int WXUNUSED(number_of_pages)) const
+bool wxHtmlCell::AdjustPagebreak(int *pagebreak, wxArrayInt& WXUNUSED(known_pagebreaks)) const
 {
     if ((!m_CanLiveOnPagebreak) &&
                 m_PosY < *pagebreak && m_PosY + m_Height > *pagebreak)
@@ -699,7 +700,7 @@
 }
 
 
-
+/*
 bool wxHtmlContainerCell::AdjustPagebreak(int *pagebreak, int* known_pagebreaks, int number_of_pages) const
 {
     if (!m_CanLiveOnPagebreak)
@@ -721,8 +722,30 @@
             *pagebreak = pbrk + m_PosY;
         return rt;
     }
-}
+}       */
+
+bool wxHtmlContainerCell::AdjustPagebreak(int *pagebreak, wxArrayInt& known_pagebreaks) const
+{
+    if (!m_CanLiveOnPagebreak)
+        return wxHtmlCell::AdjustPagebreak(pagebreak, known_pagebreaks);
+
+    else
+    {
+        wxHtmlCell *c = GetFirstChild();
+        bool rt = false;
+        int pbrk = *pagebreak - m_PosY;
 
+        while (c)
+        {
+            if (c->AdjustPagebreak(&pbrk, known_pagebreaks))
+                rt = true;
+            c = c->GetNext();
+        }
+        if (rt)
+            *pagebreak = pbrk + m_PosY;
+        return rt;
+    }
+}
 
 
 void wxHtmlContainerCell::Layout(int w)
Index: src/html/htmprint.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/html/htmprint.cpp,v
retrieving revision 1.54
diff -u -r1.54 htmprint.cpp
--- src/html/htmprint.cpp	2006/05/05 22:58:25	1.54
+++ src/html/htmprint.cpp	2006/05/08 14:19:15
@@ -103,7 +103,7 @@
         m_Cells->Layout(m_Width);
 }
 
-
+#if 0
 int wxHtmlDCRenderer::Render(int x, int y, int from, int dont_render,
                              int maxHeight,
                              int *known_pagebreaks, int number_of_pages)
@@ -135,9 +135,41 @@
     if (pbreak < m_Cells->GetHeight()) return pbreak;
     else return GetTotalHeight();
 }
+#endif
+
+
+
+int wxHtmlDCRenderer::Render(int x, int y, wxArrayInt& known_pagebreaks, int from, int dont_render, int to)
+{
+    int pbreak, hght;
 
+    if (m_Cells == NULL || m_DC == NULL) return 0;
 
+    pbreak = (int)(from + m_Height);
+    while (m_Cells->AdjustPagebreak(&pbreak, known_pagebreaks)) {}
+    hght = pbreak - from;
+    if(to < hght)
+        hght = to;
 
+    if (!dont_render)
+    {
+        wxHtmlRenderingInfo rinfo;
+        wxDefaultHtmlRenderingStyle rstyle;
+        rinfo.SetStyle(&rstyle);
+        m_DC->SetBrush(*wxWHITE_BRUSH);
+        m_DC->SetClippingRegion(x, y, m_Width, hght);
+        m_Cells->Draw(*m_DC,
+                      x, (y - from),
+                      y, pbreak + (y /*- from*/),
+                      rinfo);
+        m_DC->DestroyClippingRegion();
+    }
+
+    if (pbreak < m_Cells->GetHeight()) return pbreak;
+    else return GetTotalHeight();
+}
+
+
 int wxHtmlDCRenderer::GetTotalHeight()
 {
     if (m_Cells) return m_Cells->GetHeight();
@@ -264,17 +296,26 @@
 
 void wxHtmlPrintout::GetPageInfo(int *minPage, int *maxPage, int *selPageFrom, int *selPageTo)
 {
+    //*minPage = 1;
+    //*maxPage = m_NumPages;
+    //*selPageFrom = 1;
+    //*selPageTo = m_NumPages;
     *minPage = 1;
-    *maxPage = m_NumPages;
+    if ( m_NumPages >= (signed)m_PageBreaks.Count()-1)
+        *maxPage = m_NumPages;
+    else
+        *maxPage = (signed)m_PageBreaks.Count()-1;
     *selPageFrom = 1;
-    *selPageTo = m_NumPages;
+    *selPageTo = (signed)m_PageBreaks.Count()-1;
 }
 
 
 
 bool wxHtmlPrintout::HasPage(int pageNum)
 {
-    return (pageNum >= 1 && pageNum <= m_NumPages);
+    // return (pageNum >= 1 && pageNum <= m_NumPages);
+    return (pageNum >= 1 && pageNum-1 <= (signed)m_PageBreaks.Count());
+
 }
 
 
@@ -360,16 +401,27 @@
     ppmm_v = (float)pageHeight / mm_h;

     int pos = 0;
-
     m_NumPages = 0;
+    // m_PageBreaks[0] = 0;
 
-    m_PageBreaks[0] = 0;
+    m_PageBreaks.Clear();
+    m_PageBreaks.Add( 0);
     do
     {
-        pos = m_Renderer->Render((int)( ppmm_h * m_MarginLeft),
+        /*pos = m_Renderer->Render((int)( ppmm_h * m_MarginLeft),
                                    (int) (ppmm_v * (m_MarginTop + (m_HeaderHeight == 0 ? 0 : m_MarginSpace)) + m_HeaderHeight),
                                    pos, true, INT_MAX, m_PageBreaks, m_NumPages);
-        m_PageBreaks[++m_NumPages] = pos;
+        m_PageBreaks[++m_NumPages] = pos;*/
+        pos = m_Renderer->Render((int)( ppmm_h * m_MarginLeft),
+                                   (int) (ppmm_v * (m_MarginTop + (m_HeaderHeight == 0 ? 0 : m_MarginSpace)) + m_HeaderHeight), m_PageBreaks,
+                                   pos, true, INT_MAX);
+        m_PageBreaks.Add( pos);
+        if( m_PageBreaks.Count() > wxHTML_PRINT_MAX_PAGES)
+        {
+            wxMessageBox( _("HTML pagination algorithm generated more than the allowed maximum number of pages and it can continue any longer!"),
+            _("Warning"), wxCANCEL | wxICON_ERROR );
+            break;
+        }
     } while (pos < m_Renderer->GetTotalHeight());
 }
 
@@ -402,20 +454,24 @@
 
     dc->SetBackgroundMode(wxTRANSPARENT);
 
-    m_Renderer->Render((int) (ppmm_h * m_MarginLeft),
+/*    m_Renderer->Render((int) (ppmm_h * m_MarginLeft),
                          (int) (ppmm_v * (m_MarginTop + (m_HeaderHeight == 0 ? 0 : m_MarginSpace)) + m_HeaderHeight),
+                         m_PageBreaks[page-1], false, m_PageBreaks[page]-m_PageBreaks[page-1]); */
+    m_Renderer->Render((int) (ppmm_h * m_MarginLeft),
+                         (int) (ppmm_v * (m_MarginTop + (m_HeaderHeight == 0 ? 0 : m_MarginSpace)) + m_HeaderHeight), m_PageBreaks,
                          m_PageBreaks[page-1], false, m_PageBreaks[page]-m_PageBreaks[page-1]);
 
+
     m_RendererHdr->SetDC(dc, (double)ppiPrinterY / (double)ppiScreenY);
     if (m_Headers[page % 2] != wxEmptyString)
     {
         m_RendererHdr->SetHtmlText(TranslateHeader(m_Headers[page % 2], page));
-        m_RendererHdr->Render((int) (ppmm_h * m_MarginLeft), (int) (ppmm_v * m_MarginTop));
+        m_RendererHdr->Render((int) (ppmm_h * m_MarginLeft), (int) (ppmm_v * m_MarginTop), m_PageBreaks);
     }
     if (m_Footers[page % 2] != wxEmptyString)
     {
         m_RendererHdr->SetHtmlText(TranslateHeader(m_Footers[page % 2], page));
-        m_RendererHdr->Render((int) (ppmm_h * m_MarginLeft), (int) (pageHeight - ppmm_v * m_MarginBottom - m_FooterHeight));
+        m_RendererHdr->Render((int) (ppmm_h * m_MarginLeft), (int) (pageHeight - ppmm_v * m_MarginBottom - m_FooterHeight), m_PageBreaks);
     }
 }
 
@@ -429,7 +485,8 @@
     num.Printf(wxT("%i"), page);
     r.Replace(wxT("@PAGENUM@"), num);
 
-    num.Printf(wxT("%i"), m_NumPages);
+    //num.Printf(wxT("%i"), m_NumPages);
+    num.Printf(wxT("%i"), m_PageBreaks.Count()-1);
     r.Replace(wxT("@PAGESCNT@"), num);
 
     return r;
Index: src/html/m_layout.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/html/m_layout.cpp,v
retrieving revision 1.42
diff -u -r1.42 m_layout.cpp
--- src/html/m_layout.cpp	2006/04/18 08:11:25	1.42
+++ src/html/m_layout.cpp	2006/05/08 05:17:07
@@ -71,9 +71,12 @@
 public:
     wxHtmlPageBreakCell() {}
 
-    bool AdjustPagebreak(int* pagebreak,
+    /*bool AdjustPagebreak(int* pagebreak,
                          int* known_pagebreaks = NULL,
-                         int number_of_pages = 0) const;
+                         int number_of_pages = 0) const; */
+    bool AdjustPagebreak(int* pagebreak,
+                         wxArrayInt& known_pagebreaks) const;
+                         
     void Draw(wxDC& WXUNUSED(dc),
               int WXUNUSED(x), int WXUNUSED(y),
               int WXUNUSED(view_y1), int WXUNUSED(view_y2),
@@ -88,7 +91,7 @@
 {
     return *(int*)i0 - *(int*)i1;
 }
-
+/*
 bool wxHtmlPageBreakCell::AdjustPagebreak(int* pagebreak, int* known_pagebreaks, int number_of_pages) const
 {
     // When we are counting pages, 'known_pagebreaks' is non-NULL.
@@ -130,7 +133,50 @@
         *pagebreak = m_PosY;
         return true;
         }
+}  */
+
+bool wxHtmlPageBreakCell::AdjustPagebreak(int* pagebreak, wxArrayInt& known_pagebreaks) const
+{
+    // When we are counting pages, 'known_pagebreaks' is non-NULL.
+    // That's the only time we change 'pagebreak'. Otherwise, pages
+    // were already counted, 'known_pagebreaks' is NULL, and we don't
+    // do anything except return false.
+    //
+    // We also simply return false if the 'pagebreak' argument is
+    // less than (vertically above) or the same as the current
+    // vertical position. Otherwise we'd be setting a pagebreak above
+    // the current cell, which is incorrect, or duplicating a
+    // pagebreak that has already been set.
+    if( known_pagebreaks.Count() == 0 || *pagebreak <= m_PosY)
+    {
+        return false;
+    }
+
+    // m_PosY is only the vertical offset from the parent. The pagebreak
+    // required here is the total page offset, so m_PosY must be added
+    // to the parent's offset and height.
+    int total_height = m_PosY + GetParent()->GetPosY() + GetParent()->GetHeight();
+
+    // Search the array of pagebreaks to see whether we've already set
+    // a pagebreak here. The standard bsearch() function is appropriate
+    // because the array of pagebreaks through known_pagebreaks[number_of_pages]
+    // is known to be sorted in strictly increasing order. '1 + number_of_pages'
+    // is used as a bsearch() argument because the array contains a leading
+    // zero plus one element for each page.
+    int where = known_pagebreaks.Index( total_height);
+    // Add a pagebreak only if there isn't one already set here.
+    if( wxNOT_FOUND != where)
+    {
+        return false;
+    }
+    else
+    {
+        *pagebreak = m_PosY;
+        return true;
+    }
 }
+
+

 TAG_HANDLER_BEGIN(P, "P")
     TAG_HANDLER_CONSTR(P) { }

 	  	 

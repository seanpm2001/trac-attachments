Index: configure.in
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/configure.in,v
retrieving revision 1.1162
diff -bu2 -r1.1162 configure.in
--- configure.in
+++ configure.in
@@ -510,4 +510,5 @@
 
   DEFAULT_wxUSE_ACCEL=no
+  DEFAULT_wxUSE_ANIMATIONCTRL=no
   DEFAULT_wxUSE_BUTTON=no
   DEFAULT_wxUSE_BMPBUTTON=no
@@ -724,4 +725,5 @@
 
   DEFAULT_wxUSE_ACCEL=yes
+  DEFAULT_wxUSE_ANIMATIONCTRL=yes
   DEFAULT_wxUSE_BUTTON=yes
   DEFAULT_wxUSE_BMPBUTTON=yes
@@ -1050,4 +1052,5 @@
 if test "$wxUSE_CONTROLS" = "yes"; then
   DEFAULT_wxUSE_ACCEL=yes
+  DEFAULT_wxUSE_ANIMATIONCTRL=yes
   DEFAULT_wxUSE_BMPBUTTON=yes
   DEFAULT_wxUSE_BUTTON=yes
@@ -1099,4 +1102,5 @@
 elif test "$wxUSE_CONTROLS" = "no"; then
   DEFAULT_wxUSE_ACCEL=no
+  DEFAULT_wxUSE_ANIMATIONCTRL=no
   DEFAULT_wxUSE_BMPBUTTON=no
   DEFAULT_wxUSE_BUTTON=no
@@ -1149,4 +1153,5 @@
 
 WX_ARG_ENABLE(accel,       [  --enable-accel          use accelerators], wxUSE_ACCEL)
+WX_ARG_ENABLE(animatectrl, [  --enable-animatectrl    use wxAnimationCtrl class], wxUSE_ANIMATIONCTRL)
 WX_ARG_ENABLE(button,      [  --enable-button         use wxButton class], wxUSE_BUTTON)
 WX_ARG_ENABLE(bmpbutton,   [  --enable-bmpbutton      use wxBitmapButton class], wxUSE_BMPBUTTON)
@@ -6455,4 +6460,10 @@
 fi
 
+if test "$wxUSE_ACCEL" = "yes"; then
+  AC_DEFINE(wxUSE_ANIMATIONCTRL)
+  USES_CONTROLS=1
+  SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS animate"
+fi
+
 if test "$wxUSE_BUTTON" = "yes"; then
   AC_DEFINE(wxUSE_BUTTON)
Index: setup.h.in
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/setup.h.in,v
retrieving revision 1.226
diff -bu2 -r1.226 setup.h.in
--- setup.h.in
+++ setup.h.in
@@ -301,4 +301,5 @@
 #define wxUSE_TIPWINDOW    0
 
+#define wxUSE_ANIMATIONCTRL 0
 #define wxUSE_BUTTON        0
 #define wxUSE_BMPBUTTON     0
Index: build/bakefiles/files.bkl
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/build/bakefiles/files.bkl,v
retrieving revision 1.366
diff -bu2 -r1.366 build/bakefiles/files.bkl
--- build/bakefiles/files.bkl
+++ build/bakefiles/files.bkl
@@ -552,4 +552,5 @@
 <set var="GUI_CMN_SRC" hints="files">
     src/common/accesscmn.cpp
+    src/common/anidecod.cpp
     src/common/appcmn.cpp
     src/common/artprov.cpp
@@ -754,4 +755,5 @@
     wx/accel.h
     wx/access.h
+    wx/anidecod.h
     wx/artprov.h
     wx/bitmap.h
@@ -2606,4 +2608,5 @@
 
 <set var="ADVANCED_CMN_SRC" hints="files">
+    src/common/animatecmn.cpp
     src/common/datavcmn.cpp
     src/generic/bmpcboxg.cpp
@@ -2626,4 +2629,5 @@
 
 <set var="ADVANCED_CMN_HDR" hints="files">
+    wx/animate.h
     wx/bmpcbox.h
     wx/calctrl.h
@@ -2665,4 +2669,5 @@
 
 <set var="ADVANCED_MSW_SRC" hints="files">
+    src/generic/animateg.cpp
     src/common/taskbarcmn.cpp
     src/msw/sound.cpp
@@ -2670,4 +2675,5 @@
 </set>
 <set var="ADVANCED_MSW_HDR" hints="files">
+    wx/generic/animate.h
     wx/msw/sound.h
     wx/msw/taskbar.h
@@ -2691,4 +2697,5 @@
 
 <set var="ADVANCED_MAC_SRC" hints="files">
+    src/generic/animateg.cpp
     src/common/taskbarcmn.cpp
     src/mac/carbon/drawer.cpp
@@ -2698,4 +2705,5 @@
 </set>
 <set var="ADVANCED_MAC_HDR" hints="files">
+    wx/generic/animate.h
     wx/mac/carbon/drawer.h
     wx/mac/carbon/sound.h
@@ -2705,4 +2713,5 @@
 
 <set var="ADVANCED_COCOA_SRC" hints="files">
+    src/generic/animateg.cpp
     src/cocoa/taskbar.mm
     src/common/taskbarcmn.cpp
@@ -2710,4 +2719,5 @@
 </set>
 <set var="ADVANCED_COCOA_HDR" hints="files">
+    wx/generic/animate.h
     wx/cocoa/taskbar.h
     wx/mac/corefoundation/joystick.h
@@ -2715,8 +2725,10 @@
 
 <set var="ADVANCED_OS2_SRC" hints="files">
+    src/generic/animateg.cpp
     src/os2/joystick.cpp
     src/os2/sound.cpp
 </set>
 <set var="ADVANCED_OS2_HDR" hints="files">
+    wx/generic/animate.h
     wx/os2/joystick.h
     wx/os2/sound.h
@@ -2736,8 +2748,13 @@
 
 <set var="ADVANCED_GTK_SRC" hints="files">
+    src/gtk/animate.cpp
     src/gtk/taskbar.cpp
     src/gtk/dataview.cpp
     src/gtk/eggtrayicon.c
 </set>
+<set var="ADVANCED_GTK_HDR" hints="files">
+    wx/gtk/animate.h
+</set>
+
 <set var="ADVANCED_GTK1_SRC" hints="files">
 </set>
Index: docs/latex/wx/category.tex
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/docs/latex/wx/category.tex,v
retrieving revision 1.123
diff -bu2 -r1.123 docs/latex/wx/category.tex
--- docs/latex/wx/category.tex
+++ docs/latex/wx/category.tex
@@ -86,4 +86,5 @@
 \twocolwidtha{6cm}
 \begin{twocollist}\itemsep=0pt
+\twocolitem{\helpref{wxAnimationCtrl}{wxanimationctrl}}{A control to display an animation}
 \twocolitem{\helpref{wxControl}{wxcontrol}}{The base class for controls}
 \twocolitem{\helpref{wxButton}{wxbutton}}{Push button control, displaying text}
@@ -589,4 +590,13 @@
 \end{twocollist}
 
+{\large {\bf XML classes}}
+
+\twocolwidtha{6cm}
+\begin{twocollist}\itemsep=0pt
+\twocolitem{\helpref{wxXmlDocument}{wxxmldocument}}{A class to parse XML files.}
+\twocolitem{\helpref{wxXmlNode}{wxxmlnode}}{A class which represents XML nodes.}
+\twocolitem{\helpref{wxXmlProperty}{wxxmlproperty}}{A class which represents XML properties.}
+\end{twocollist}
+
 {\large {\bf XML-based resource system classes}}
 
Index: docs/latex/wx/classes.tex
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/docs/latex/wx/classes.tex,v
retrieving revision 1.206
diff -bu2 -r1.206 docs/latex/wx/classes.tex
--- docs/latex/wx/classes.tex
+++ docs/latex/wx/classes.tex
@@ -11,4 +11,6 @@
 \input activexcontainer.tex
 \input activexevt.tex
+\input animation.tex
+\input animatctrl.tex
 \input app.tex
 \input apptraits.tex
Index: include/wx/chkconf.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/chkconf.h,v
retrieving revision 1.128
diff -bu2 -r1.128 include/wx/chkconf.h
--- include/wx/chkconf.h
+++ include/wx/chkconf.h
@@ -321,4 +321,12 @@
 #endif /* !defined(wxUSE_ACCEL) */
 
+#ifndef wxUSE_ANIMATIONCTRL
+#   ifdef wxABORT_ON_CONFIG_ERROR
+#       error "wxUSE_ANIMATIONCTRL must be defined."
+#   else
+#       define wxUSE_ANIMATIONCTRL 0
+#   endif
+#endif /* !defined(wxUSE_ANIMATIONCTRL) */
+
 #ifndef wxUSE_BITMAPCOMBOBOX
 #   ifdef wxABORT_ON_CONFIG_ERROR
Index: include/wx/gifdecod.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/gifdecod.h,v
retrieving revision 1.18
diff -bu2 -r1.18 include/wx/gifdecod.h
--- include/wx/gifdecod.h
+++ include/wx/gifdecod.h
@@ -18,4 +18,8 @@
 #include "wx/stream.h"
 #include "wx/image.h"
+#include "wx/animdecod.h"
+
+// internal utility used to store a frame in 8bit-per-pixel format
+class /*WXDLLEXPORT*/ GIFImage;
 
 
@@ -30,5 +34,5 @@
 //  the stream will not be correctly positioned. the
 //
-enum
+enum wxGIFErrorCode
 {
     wxGIF_OK = 0,                   /* everything was OK */
@@ -38,16 +42,4 @@
 };
 
-// Disposal method
-//  Experimental; subject to change.
-//
-enum
-{
-    wxGIF_D_UNSPECIFIED = -1,       /* not specified */
-    wxGIF_D_DONOTDISPOSE = 0,       /* do not dispose */
-    wxGIF_D_TOBACKGROUND = 1,       /* restore to background colour */
-    wxGIF_D_TOPREVIOUS = 2          /* restore to previous image */
-};
-
-
 #define MAX_BLOCK_SIZE 256          /* max. block size */
 
@@ -57,43 +49,10 @@
 // --------------------------------------------------------------------------
 
-// internal class for storing GIF image data
-class GIFImage
-{
-public:
-    // def ctor
-    GIFImage();
-
-    unsigned int w;                 /* width */
-    unsigned int h;                 /* height */
-    unsigned int left;              /* x coord (in logical screen) */
-    unsigned int top;               /* y coord (in logical screen) */
-    int transparent;                /* transparent color (-1 = none) */
-    int disposal;                   /* disposal method (-1 = unspecified) */
-    long delay;                     /* delay in ms (-1 = unused) */
-    unsigned char *p;               /* bitmap */
-    unsigned char *pal;             /* palette */
-    unsigned int ncolours;          /* number of colours */
-    GIFImage *next;                 /* next image */
-    GIFImage *prev;                 /* prev image */
-
-    DECLARE_NO_COPY_CLASS(GIFImage)
-};
-
-
-class WXDLLEXPORT wxGIFDecoder
+class WXDLLEXPORT wxGIFDecoder : public wxAnimationDecoder
 {
 private:
-    // logical screen
-    unsigned int  m_screenw;        /* logical screen width */
-    unsigned int  m_screenh;        /* logical screen height */
-    int           m_background;     /* background color (-1 = none) */
-
-    // image data
-    bool          m_anim;           /* animated GIF */
-    int           m_nimages;        /* number of images */
-    int           m_image;          /* current image */
-    GIFImage      *m_pimage;        /* pointer to current image */
-    GIFImage      *m_pfirst;        /* pointer to first image */
-    GIFImage      *m_plast;         /* pointer to last image */
+    // a wxArray provides a constant access time rather than a linear time
+    // like for linked lists.
+    wxArrayPtrVoid m_frames;
 
     // decoder state vars
@@ -104,50 +63,49 @@
     unsigned char *m_bufp;          /* pointer to next byte in buffer */
 
-    // input stream
-    wxInputStream *m_f;             /* input stream */
-
 private:
-    int getcode(int bits, int abfin);
-    int dgif(GIFImage *img, int interl, int bits);
+    int getcode(wxInputStream& stream, int bits, int abfin);
+    wxGIFErrorCode dgif(wxInputStream& stream, GIFImage *img, int interl, int bits);
 
 public:
     // get data of current frame
-    int GetFrameIndex() const;
-    unsigned char* GetData() const;
-    unsigned char* GetPalette() const;
-    unsigned int GetNcolours() const;
-    unsigned int GetWidth() const;
-    unsigned int GetHeight() const;
-    unsigned int GetLeft() const;
-    unsigned int GetTop() const;
-    int GetDisposalMethod() const;
-    int GetTransparentColour() const;
-    long GetDelay() const;
-
-    // get global data
-    unsigned int GetLogicalScreenWidth() const;
-    unsigned int GetLogicalScreenHeight() const;
-    int GetBackgroundColour() const;
-    int GetNumberOfFrames() const;
-    bool IsAnimation() const;
-
-    // move through the animation
-    bool GoFirstFrame();
-    bool GoLastFrame();
-    bool GoNextFrame(bool cyclic = false);
-    bool GoPrevFrame(bool cyclic = false);
-    bool GoFrame(int which);
+    unsigned char* GetData(size_t frame) const;
+    unsigned char* GetPalette(size_t frame) const;
+    unsigned int GetNcolours(size_t frame) const;
+    int GetTransparentColour(size_t frame) const;
+
+    virtual wxSize GetFrameSize(size_t frame) const;
+    virtual wxPoint GetFramePosition(size_t frame) const;
+    virtual wxAnimationDisposal GetDisposalMethod(size_t frame) const;
+    virtual long GetDelay(size_t frame) const;
+
+    // GIFs can contain both static images and animations
+    bool IsAnimation() const
+        { return m_nFrames > 1; }
 
 public:
     // constructor, destructor, etc.
-    wxGIFDecoder(wxInputStream *s, bool anim = false);
+    wxGIFDecoder();
     ~wxGIFDecoder();
-    bool CanRead();
-    int ReadGIF();
+
+    // load function which returns more info than just Load():
+    wxGIFErrorCode LoadGIF( wxInputStream& stream );
+
+    // free all internal frames
     void Destroy();
 
-    // convert current frame to wxImage
-    bool ConvertToImage(wxImage *image) const;
+public:     // implementation of wxAnimationDecoder's pure virtuals
 
+    virtual bool CanRead( wxInputStream& stream ) const;
+    virtual bool Load( wxInputStream& stream )
+        { return LoadGIF(stream) == wxGIF_OK; }
+
+    bool ConvertToImage(size_t frame, wxImage *image) const;
+
+    wxAnimationDecoder *Clone() const
+        { return new wxGIFDecoder; }
+    wxAnimationType GetType() const
+        { return wxANIMATION_TYPE_GIF; }
+
+private:
     DECLARE_NO_COPY_CLASS(wxGIFDecoder)
 };
Index: include/wx/imagbmp.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/imagbmp.h,v
retrieving revision 1.20
diff -bu2 -r1.20 include/wx/imagbmp.h
--- include/wx/imagbmp.h
+++ include/wx/imagbmp.h
@@ -1,5 +1,5 @@
 /////////////////////////////////////////////////////////////////////////////
 // Name:        imagbmp.h
-// Purpose:     wxImage BMP, ICO and CUR handlers
+// Purpose:     wxImage BMP, ICO, CUR and ANI handlers
 // Author:      Robert Roebling, Chris Elliott
 // RCS-ID:      $Id: imagbmp.h,v 1.20 2006/02/08 21:44:22 VZ Exp $
Index: include/wx/setup_inc.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/setup_inc.h,v
retrieving revision 1.44
diff -bu2 -r1.44 include/wx/setup_inc.h
--- include/wx/setup_inc.h
+++ include/wx/setup_inc.h
@@ -582,4 +582,5 @@
 //
 // Recommended setting: 1
+#define wxUSE_ANIMATIONCTRL 1   // wxAnimationCtrl
 #define wxUSE_BUTTON        1   // wxButton
 #define wxUSE_BMPBUTTON     1   // wxBitmapButton
Index: samples/samples.bkl
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/samples/samples.bkl,v
retrieving revision 1.17
diff -bu2 -r1.17 samples/samples.bkl
--- samples/samples.bkl
+++ samples/samples.bkl
@@ -11,4 +11,5 @@
     <!-- all samples are enumerated here: -->
     <subproject id="access" template="sub"/>
+    <subproject id="animate" template="sub"/>
     <subproject id="artprov" template="sub"/>
     <subproject id="calendar" template="sub"/>
Index: src/common/gifdecod.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/gifdecod.cpp,v
retrieving revision 1.45
diff -bu2 -r1.45 src/common/gifdecod.cpp
--- src/common/gifdecod.cpp
+++ src/common/gifdecod.cpp
@@ -27,4 +27,32 @@
 
 
+
+//---------------------------------------------------------------------------
+// GIFImage
+//---------------------------------------------------------------------------
+
+// internal class for storing GIF image data
+class GIFImage
+{
+public:
+    // def ctor
+    GIFImage();
+
+    unsigned int w;                 /* width */
+    unsigned int h;                 /* height */
+    unsigned int left;              /* x coord (in logical screen) */
+    unsigned int top;               /* y coord (in logical screen) */
+    int transparent;                /* transparent color index (-1 = none) */
+    wxAnimationDisposal disposal;   /* disposal method */
+    long delay;                     /* delay in ms (-1 = unused) */
+    unsigned char *p;               /* bitmap */
+    unsigned char *pal;             /* palette */
+    unsigned int ncolours;          /* number of colours */
+
+    DECLARE_NO_COPY_CLASS(GIFImage)
+};
+
+
+
 //---------------------------------------------------------------------------
 // GIFImage constructor
@@ -37,11 +65,9 @@
     top = 0;
     transparent = 0;
-    disposal = 0;
+    disposal = wxANIM_DONOTREMOVE;
     delay = -1;
     p = (unsigned char *) NULL;
     pal = (unsigned char *) NULL;
     ncolours = 0;
-    next = (GIFImage *) NULL;
-    prev = (GIFImage *) NULL;
 }
 
@@ -50,18 +76,6 @@
 //---------------------------------------------------------------------------
 
-wxGIFDecoder::wxGIFDecoder(wxInputStream *s, bool anim)
+wxGIFDecoder::wxGIFDecoder()
 {
-    m_f    = s;
-    m_anim = anim;
-
-    m_background = -1;
-    m_screenw = 0;
-    m_screenh = 0;
-
-    m_pimage  = NULL;
-    m_pfirst  = NULL;
-    m_plast   = NULL;
-    m_image   = 0;
-    m_nimages = 0;
 }
 
@@ -73,22 +87,15 @@
 void wxGIFDecoder::Destroy()
 {
-    GIFImage *pimg, *paux;
-
-    pimg = m_pfirst;
-
-    while (pimg != NULL)
+    wxASSERT(m_nFrames==m_frames.GetCount());
+    for (size_t i=0; i<m_nFrames; i++)
     {
-        paux = pimg->next;
-        free(pimg->p);
-        free(pimg->pal);
-        delete pimg;
-        pimg = paux;
+        GIFImage *f = (GIFImage*)m_frames[i];
+        free(f->p);
+        free(f->pal);
+        delete f;
     }
 
-    m_pimage  = NULL;
-    m_pfirst  = NULL;
-    m_plast   = NULL;
-    m_image   = 0;
-    m_nimages = 0;
+    m_frames.Clear();
+    m_nFrames = 0;
 }
 
@@ -100,5 +107,5 @@
 // This function was designed by Vaclav Slavik
 
-bool wxGIFDecoder::ConvertToImage(wxImage *image) const
+bool wxGIFDecoder::ConvertToImage(size_t frame, wxImage *image) const
 {
     unsigned char *src, *dst, *pal;
@@ -110,18 +117,19 @@
 
     /* create the image */
-    image->Create(GetWidth(), GetHeight());
+    wxSize sz = GetFrameSize(frame);
+    image->Create(sz.GetWidth(), sz.GetHeight());
 
     if (!image->Ok())
         return false;
 
-    pal = GetPalette();
-    src = GetData();
+    pal = GetPalette(frame);
+    src = GetData(frame);
     dst = image->GetData();
-    transparent = GetTransparentColour();
+    transparent = GetTransparentColour(frame);
 
     /* set transparent colour mask */
     if (transparent != -1)
     {
-        for (i = 0; i < GetNcolours(); i++)
+        for (i = 0; i < GetNcolours(frame); i++)
         {
             if ((pal[3 * i + 0] == 255) &&
@@ -154,9 +162,10 @@
     }
 
-    image->SetPalette(wxPalette(GetNcolours(), r, g, b));
+    image->SetPalette(wxPalette(GetNcolours(frame), r, g, b));
 #endif // wxUSE_PALETTE
 
     /* copy image data */
-    for (i = 0; i < (GetWidth() * GetHeight()); i++, src++)
+    unsigned long npixel = sz.GetWidth() * sz.GetHeight();
+    for (i = 0; i < npixel; i++, src++)
     {
         *(dst++) = pal[3 * (*src) + 0];
@@ -173,116 +182,34 @@
 //---------------------------------------------------------------------------
 
-// Get data for current frame
-
-int wxGIFDecoder::GetFrameIndex() const         { return m_image; }
-unsigned char* wxGIFDecoder::GetData() const    { return (m_pimage->p); }
-unsigned char* wxGIFDecoder::GetPalette() const { return (m_pimage->pal); }
-unsigned int wxGIFDecoder::GetNcolours() const  { return (m_pimage->ncolours); }
-unsigned int wxGIFDecoder::GetWidth() const     { return (m_pimage->w); }
-unsigned int wxGIFDecoder::GetHeight() const    { return (m_pimage->h); }
-unsigned int wxGIFDecoder::GetTop() const       { return (m_pimage->top); }
-unsigned int wxGIFDecoder::GetLeft() const      { return (m_pimage->left); }
-int wxGIFDecoder::GetTransparentColour() const  { return (m_pimage->transparent); }
-int wxGIFDecoder::GetDisposalMethod() const     { return (m_pimage->disposal); }
-long wxGIFDecoder::GetDelay() const             { return (m_pimage->delay); }
-
-// Get global data
+#define GetFrame(n)     ((GIFImage*)m_frames[n])
 
-unsigned int wxGIFDecoder::GetLogicalScreenWidth() const    { return m_screenw; }
-unsigned int wxGIFDecoder::GetLogicalScreenHeight() const   { return m_screenh; }
-int wxGIFDecoder::GetBackgroundColour() const   { return m_background; }
-int wxGIFDecoder::GetNumberOfFrames() const     { return m_nimages; }
-bool wxGIFDecoder::IsAnimation() const          { return (m_nimages > 1); }
 
+// Get data for current frame
 
-//---------------------------------------------------------------------------
-// Functions to move through the animation
-//---------------------------------------------------------------------------
-
-bool wxGIFDecoder::GoFirstFrame()
+wxSize wxGIFDecoder::GetFrameSize(size_t frame) const 
 {
-    if (!IsAnimation())
-        return false;
-
-    m_image = 1;
-    m_pimage = m_pfirst;
-    return true;
+    return wxSize(GetFrame(frame)->w, GetFrame(frame)->h);
 }
 
-bool wxGIFDecoder::GoLastFrame()
+wxPoint wxGIFDecoder::GetFramePosition(size_t frame) const
 {
-    if (!IsAnimation())
-        return false;
-
-    m_image = m_nimages;
-    m_pimage = m_plast;
-    return true;
+    return wxPoint(GetFrame(frame)->left, GetFrame(frame)->top);
 }
 
-bool wxGIFDecoder::GoNextFrame(bool cyclic)
+wxAnimationDisposal wxGIFDecoder::GetDisposalMethod(size_t frame) const
 {
-    if (!IsAnimation())
-        return false;
-
-    if ((m_image < m_nimages) || (cyclic))
-    {
-        m_pimage = m_pimage->next;
-        m_image++;
-
-        if (!m_pimage)
-        {
-            m_image = 1;
-            m_pimage = m_pfirst;
-        }
-
-        return true;
-    }
-    else
-        return false;
+    return GetFrame(frame)->disposal;
 }
 
-bool wxGIFDecoder::GoPrevFrame(bool cyclic)
+long wxGIFDecoder::GetDelay(size_t frame) const
 {
-    if (!IsAnimation())
-        return false;
-
-    if ((m_image > 1) || (cyclic))
-    {
-        m_pimage = m_pimage->prev;
-        m_image--;
-
-        if (!m_pimage)
-        {
-            m_image = m_nimages;
-            m_pimage = m_plast;
-        }
-
-        return true;
-    }
-    else
-        return false;
+    return GetFrame(frame)->delay;
 }
 
-bool wxGIFDecoder::GoFrame(int which)
-{
-    if (!IsAnimation())
-        return false;
-
-    if ((which >= 1) && (which <= m_nimages))
-    {
-        m_image = 1;
-        m_pimage = m_pfirst;
-
-        while (m_image < which)
-        {
-            m_image++;
-            m_pimage = m_pimage->next;
-        }
+unsigned char* wxGIFDecoder::GetData(size_t frame) const    { return (GetFrame(frame)->p); }
+unsigned char* wxGIFDecoder::GetPalette(size_t frame) const { return (GetFrame(frame)->pal); }
+unsigned int wxGIFDecoder::GetNcolours(size_t frame) const  { return (GetFrame(frame)->ncolours); }
+int wxGIFDecoder::GetTransparentColour(size_t frame) const  { return (GetFrame(frame)->transparent); }
 
-        return true;
-    }
-    else
-        return false;
-}
 
 
@@ -294,10 +221,9 @@
 //  Reads the next code from the file stream, with size 'bits'
 //
-int wxGIFDecoder::getcode(int bits, int ab_fin)
+int wxGIFDecoder::getcode(wxInputStream& stream, int bits, int ab_fin)
 {
     unsigned int mask;          /* bit mask */
     unsigned int code;          /* code (result) */
 
-
     /* get remaining bits from last byte read */
     mask = (1 << bits) - 1;
@@ -310,5 +236,5 @@
         if (m_restbyte == 0)
         {
-            m_restbyte = (unsigned char)m_f->GetC();
+            m_restbyte = (unsigned char)stream.GetC();
 
             /* Some encoders are a bit broken: instead of issuing
@@ -324,6 +250,6 @@
 
             /* prefetch data */
-            m_f->Read((void *) m_buffer, m_restbyte);
-            if (m_f->LastRead() != m_restbyte)
+            stream.Read((void *) m_buffer, m_restbyte);
+            if (stream.LastRead() != m_restbyte)
             {
                 code = ab_fin;
@@ -355,5 +281,5 @@
 //  Returns wxGIF_OK (== 0) on success, or an error code if something
 // fails (see header file for details)
-int wxGIFDecoder::dgif(GIFImage *img, int interl, int bits)
+wxGIFErrorCode wxGIFDecoder::dgif(wxInputStream& stream, GIFImage *img, int interl, int bits)
 {
     static const int allocSize = 4096 + 1;
@@ -411,5 +337,5 @@
     {
         /* get next code */
-        readcode = code = getcode(ab_bits, ab_fin);
+        readcode = code = getcode(stream, ab_bits, ab_fin);
 
         /* end of image? */
@@ -630,12 +556,12 @@
 //  Returns true if the file looks like a valid GIF, false otherwise.
 //
-bool wxGIFDecoder::CanRead()
+bool wxGIFDecoder::CanRead(wxInputStream &stream) const
 {
     unsigned char buf[3];
 
-    if ( !m_f->Read(buf, WXSIZEOF(buf)) )
+    if ( !stream.Read(buf, WXSIZEOF(buf)) )
         return false;
 
-    m_f->SeekI(-(wxFileOffset)WXSIZEOF(buf), wxFromCurrent);
+    stream.SeekI(-(wxFileOffset)WXSIZEOF(buf), wxFromCurrent);
 
     return memcmp(buf, "GIF", WXSIZEOF(buf)) == 0;
@@ -643,5 +569,5 @@
 
 
-// ReadGIF:
+// LoadGIF:
 //  Reads and decodes one or more GIF images, depending on whether
 //  animated GIF support is enabled. Can read GIFs with any bit
@@ -652,8 +578,9 @@
 //  header file for details)
 //
-int wxGIFDecoder::ReadGIF()
+wxGIFErrorCode wxGIFDecoder::LoadGIF(wxInputStream& stream)
 {
     unsigned int  global_ncolors = 0;
-    int           bits, interl, transparent, disposal, i;
+    int           bits, interl, transparent, i;
+    wxAnimationDisposal disposal;
     long          size;
     long          delay;
@@ -661,9 +588,8 @@
     unsigned char pal[768];
     unsigned char buf[16];
-    GIFImage      **ppimg;
-    GIFImage      *pimg, *pprev;
+    bool anim = true;
 
     /* check GIF signature */
-    if (!CanRead())
+    if (!CanRead(stream))
         return wxGIF_INVFORMAT;
 
@@ -671,6 +597,6 @@
 
     static const size_t headerSize = (3 + 3);
-    m_f->Read(buf, headerSize);
-    if (m_f->LastRead() != headerSize)
+    stream.Read(buf, headerSize);
+    if (stream.LastRead() != headerSize)
     {
         return wxGIF_INVFORMAT;
@@ -679,19 +605,19 @@
     if (memcmp(buf + 3, "89a", 3) < 0)
     {
-        m_anim = false;
+        anim = false;
     }
 
     /* read logical screen descriptor block (LSDB) */
     static const size_t lsdbSize = (2 + 2 + 1 + 1 + 1);
-    m_f->Read(buf, lsdbSize);
-    if (m_f->LastRead() != lsdbSize)
+    stream.Read(buf, lsdbSize);
+    if (stream.LastRead() != lsdbSize)
     {
         return wxGIF_INVFORMAT;
     }
 
-    m_screenw = buf[0] + 256 * buf[1];
-    m_screenh = buf[2] + 256 * buf[3];
+    m_szAnimation.SetWidth( buf[0] + 256 * buf[1] );
+    m_szAnimation.SetHeight( buf[2] + 256 * buf[3] );
 
-    if ((m_screenw == 0) || (m_screenh == 0))
+    if ((m_szAnimation.GetWidth() == 0) || (m_szAnimation.GetHeight() == 0))
     {
         return wxGIF_INVFORMAT;
@@ -701,30 +627,28 @@
     if ((buf[4] & 0x80) == 0x80)
     {
-        m_background = buf[5];
+        int backgroundColIndex = buf[5];
 
         global_ncolors = 2 << (buf[4] & 0x07);
         size_t numBytes = 3 * global_ncolors;
-        m_f->Read(pal, numBytes);
-        if (m_f->LastRead() != numBytes)
+        stream.Read(pal, numBytes);
+        if (stream.LastRead() != numBytes)
         {
             return wxGIF_INVFORMAT;
         }
+
+        m_background.Set(pal[backgroundColIndex*3 + 0],
+                         pal[backgroundColIndex*3 + 1],
+                         pal[backgroundColIndex*3 + 2]);
     }
 
     /* transparent colour, disposal method and delay default to unused */
     transparent = -1;
-    disposal = -1;
+    disposal = wxANIM_UNSPECIFIED;
     delay = -1;
 
-    /* read images */
-    ppimg = &m_pfirst;
-    pprev = NULL;
-    pimg  = NULL;
-
     bool done = false;
-
     while (!done)
     {
-        type = (unsigned char)m_f->GetC();
+        type = (unsigned char)stream.GetC();
 
         /*
@@ -736,5 +660,5 @@
         possible here since some init code is done after this loop.
         */
-        if (m_f->Eof())// || !m_f->IsOk())
+        if (stream.Eof())// || !stream.IsOk())
         {
             /*
@@ -754,10 +678,10 @@
         if (type == 0x21)
         {
-            if (((unsigned char)m_f->GetC()) == 0xF9)
+            if (((unsigned char)stream.GetC()) == 0xF9)
             /* graphics control extension, parse it */
             {
                 static const size_t gceSize = 6;
-                m_f->Read(buf, gceSize);
-                if (m_f->LastRead() != gceSize)
+                stream.Read(buf, gceSize);
+                if (stream.LastRead() != gceSize)
                 {
                     Destroy();
@@ -773,13 +697,13 @@
 
                 /* read disposal method */
-                disposal = ((buf[1] & 0x1C) >> 2) - 1;
+                disposal = (wxAnimationDisposal)(((buf[1] & 0x1C) >> 2) - 1);
             }
             else
             /* other extension, skip */
             {
-                while ((i = (unsigned char)m_f->GetC()) != 0)
+                while ((i = (unsigned char)stream.GetC()) != 0)
                 {
-                    m_f->SeekI(i, wxFromCurrent);
-                    if (m_f->Eof())
+                    stream.SeekI(i, wxFromCurrent);
+                    if (stream.Eof())
                     {
                         done = true;
@@ -794,5 +718,5 @@
         {
             /* allocate memory for IMAGEN struct */
-            pimg = (*ppimg) = new GIFImage();
+            GIFImage *pimg = new GIFImage();
 
             if (pimg == NULL)
@@ -804,6 +728,6 @@
             /* fill in the data */
             static const size_t idbSize = (2 + 2 + 2 + 2 + 1);
-            m_f->Read(buf, idbSize);
-            if (m_f->LastRead() != idbSize)
+            stream.Read(buf, idbSize);
+            if (stream.LastRead() != idbSize)
             {
                 Destroy();
@@ -820,5 +744,6 @@
             pimg->h = buf[6] + 256 * buf[7];
 
-            if ((pimg->w == 0) || (pimg->w > m_screenw) || (pimg->h == 0) || (pimg->h > m_screenh))
+            if ((pimg->w == 0) || (pimg->w > (unsigned int)m_szAnimation.GetWidth()) || 
+                (pimg->h == 0) || (pimg->h > (unsigned int)m_szAnimation.GetHeight()))
             {
                 Destroy();
@@ -832,8 +757,4 @@
             pimg->disposal = disposal;
             pimg->delay = delay;
-            pimg->next = NULL;
-            pimg->prev = pprev;
-            pprev = pimg;
-            ppimg = &pimg->next;
 
             /* allocate memory for image and palette */
@@ -852,7 +773,7 @@
                 unsigned int local_ncolors = 2 << (buf[8] & 0x07);
                 size_t numBytes = 3 * local_ncolors;
-                m_f->Read(pimg->pal, numBytes);
+                stream.Read(pimg->pal, numBytes);
                 pimg->ncolours = local_ncolors;
-                if (m_f->LastRead() != numBytes)
+                if (stream.LastRead() != numBytes)
                 {
                     Destroy();
@@ -867,5 +788,5 @@
 
             /* get initial code size from first byte in raster data */
-            bits = (unsigned char)m_f->GetC();
+            bits = (unsigned char)stream.GetC();
             if (bits == 0)
             {
@@ -875,5 +796,5 @@
 
             /* decode image */
-            int result = dgif(pimg, interl, bits);
+            wxGIFErrorCode result = dgif(stream, pimg, interl, bits);
             if (result != wxGIF_OK)
             {
@@ -881,13 +802,16 @@
                 return result;
             }
-            m_nimages++;
+
+            /* add the image to our frame array */
+            m_frames.Add((void*)pimg);
+            m_nFrames++;
 
             /* if this is not an animated GIF, exit after first image */
-            if (!m_anim)
+            if (!anim)
                 done = true;
         }
     }
 
-    if (m_nimages <= 0)
+    if (m_nFrames <= 0)
     {
         Destroy();
@@ -895,26 +819,21 @@
     }
 
-    /* setup image pointers */
-    m_image = 1;
-    m_plast = pimg;
-    m_pimage = m_pfirst;
-
     /* try to read to the end of the stream */
     while (type != 0x3B)
     {
-        if (!m_f->IsOk())
+        if (!stream.IsOk())
             return wxGIF_TRUNCATED;
 
-        type = (unsigned char)m_f->GetC();
+        type = (unsigned char)stream.GetC();
 
         if (type == 0x21)
         {
             /* extension type */
-            (void) m_f->GetC();
+            (void) stream.GetC();
 
             /* skip all data */
-            while ((i = (unsigned char)m_f->GetC()) != 0)
+            while ((i = (unsigned char)stream.GetC()) != 0)
             {
-                m_f->SeekI(i, wxFromCurrent);
+                stream.SeekI(i, wxFromCurrent);
             }
         }
@@ -923,6 +842,6 @@
             /* image descriptor block */
             static const size_t idbSize = (2 + 2 + 2 + 2 + 1);
-            m_f->Read(buf, idbSize);
-            if (m_f->LastRead() != idbSize)
+            stream.Read(buf, idbSize);
+            if (stream.LastRead() != idbSize)
             {
                 Destroy();
@@ -934,8 +853,8 @@
             {
                 unsigned int local_ncolors = 2 << (buf[8] & 0x07);
-                wxFileOffset pos = m_f->TellI();
+                wxFileOffset pos = stream.TellI();
                 wxFileOffset numBytes = 3 * local_ncolors;
-                m_f->SeekI(numBytes, wxFromCurrent);
-                if (m_f->TellI() != (pos + numBytes))
+                stream.SeekI(numBytes, wxFromCurrent);
+                if (stream.TellI() != (pos + numBytes))
                 {
                     Destroy();
@@ -945,10 +864,10 @@
 
             /* initial code size */
-            (void) m_f->GetC();
+            (void) stream.GetC();
 
             /* skip all data */
-            while ((i = (unsigned char)m_f->GetC()) != 0)
+            while ((i = (unsigned char)stream.GetC()) != 0)
             {
-                m_f->SeekI(i, wxFromCurrent);
+                stream.SeekI(i, wxFromCurrent);
             }
         }
Index: src/common/imagbmp.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/imagbmp.cpp,v
retrieving revision 1.66
diff -bu2 -r1.66 src/common/imagbmp.cpp
--- src/common/imagbmp.cpp
+++ src/common/imagbmp.cpp
@@ -33,4 +33,5 @@
 #include "wx/wfstream.h"
 #include "wx/quantize.h"
+#include "wx/anidecod.h"
 
 // For memcpy
@@ -1327,156 +1328,24 @@
                             bool verbose, int index)
 {
-    wxInt32 FCC1, FCC2;
-    wxUint32 datalen;
-
-    wxInt32 riff32;
-    memcpy( &riff32, "RIFF", 4 );
-    wxInt32 list32;
-    memcpy( &list32, "LIST", 4 );
-    wxInt32 ico32;
-    memcpy( &ico32, "icon", 4 );
-    int iIcon = 0;
-
-    stream.SeekI(0);
-    stream.Read(&FCC1, 4);
-    if ( FCC1 != riff32 )
+    wxANIDecoder decoder;
+    if (!decoder.Load(stream))
         return false;
 
-    // we have a riff file:
-    while (stream.IsOk())
-    {
-        // we always have a data size
-        stream.Read(&datalen, 4);
-        datalen = wxINT32_SWAP_ON_BE(datalen) ;
-        //data should be padded to make even number of bytes
-        if (datalen % 2 == 1) datalen ++ ;
-        //now either data or a FCC
-        if ( (FCC1 == riff32) || (FCC1 == list32) )
-        {
-            stream.Read(&FCC2, 4);
-        }
-        else
-        {
-            if (FCC1 == ico32 && iIcon >= index)
-            {
-                return DoLoadFile(image, stream, verbose, -1);
-            }
-            else
-            {
-                stream.SeekI(stream.TellI() + datalen);
-                if ( FCC1 == ico32 )
-                    iIcon ++;
-            }
-        }
-
-        // try to read next data chunk:
-        stream.Read(&FCC1, 4);
-    }
-    return false;
+    return decoder.ConvertToImage(index != -1 ? (size_t)index : 0, image);
 }
 
 bool wxANIHandler::DoCanRead(wxInputStream& stream)
 {
-    wxInt32 FCC1, FCC2;
-    wxUint32 datalen ;
-
-    wxInt32 riff32;
-    memcpy( &riff32, "RIFF", 4 );
-    wxInt32 list32;
-    memcpy( &list32, "LIST", 4 );
-    wxInt32 ico32;
-    memcpy( &ico32, "icon", 4 );
-    wxInt32 anih32;
-    memcpy( &anih32, "anih", 4 );
-
-    stream.SeekI(0);
-    if ( !stream.Read(&FCC1, 4) )
-        return false;
-
-    if ( FCC1 != riff32 )
-        return false;
-
-    // we have a riff file:
-    while ( stream.IsOk() )
-    {
-        if ( FCC1 == anih32 )
-            return true;
-        // we always have a data size:
-        stream.Read(&datalen, 4);
-        datalen = wxINT32_SWAP_ON_BE(datalen) ;
-        //data should be padded to make even number of bytes
-        if (datalen % 2 == 1) datalen ++ ;
-        // now either data or a FCC:
-        if ( (FCC1 == riff32) || (FCC1 == list32) )
-        {
-            stream.Read(&FCC2, 4);
-        }
-        else
-        {
-            stream.SeekI(stream.TellI() + datalen);
-        }
-
-        // try to read next data chunk:
-        if ( !stream.Read(&FCC1, 4) )
-        {
-            // reading failed -- either EOF or IO error, bail out anyhow
-            return false;
-        }
-    }
-
-    return false;
+    wxANIDecoder decod;
+    return decod.CanRead(stream);
 }
 
 int wxANIHandler::GetImageCount(wxInputStream& stream)
 {
-    wxInt32 FCC1, FCC2;
-    wxUint32 datalen ;
-
-    wxInt32 riff32;
-    memcpy( &riff32, "RIFF", 4 );
-    wxInt32 list32;
-    memcpy( &list32, "LIST", 4 );
-    wxInt32 ico32;
-    memcpy( &ico32, "icon", 4 );
-    wxInt32 anih32;
-    memcpy( &anih32, "anih", 4 );
-
-    stream.SeekI(0);
-    stream.Read(&FCC1, 4);
-    if ( FCC1 != riff32 )
+    wxANIDecoder decoder;
+    if (!decoder.Load(stream))
         return wxNOT_FOUND;
 
-    // we have a riff file:
-    while ( stream.IsOk() )
-    {
-        // we always have a data size:
-        stream.Read(&datalen, 4);
-        datalen = wxINT32_SWAP_ON_BE(datalen) ;
-        //data should be padded to make even number of bytes
-        if (datalen % 2 == 1) datalen ++ ;
-        // now either data or a FCC:
-        if ( (FCC1 == riff32) || (FCC1 == list32) )
-        {
-            stream.Read(&FCC2, 4);
-        }
-        else
-        {
-            if ( FCC1 == anih32 )
-            {
-                wxUint32 *pData = new wxUint32[datalen/4];
-                stream.Read(pData, datalen);
-                int nIcons = wxINT32_SWAP_ON_BE(*(pData + 1));
-                delete[] pData;
-                return nIcons;
-            }
-            else
-                stream.SeekI(stream.TellI() + datalen);
-        }
-
-        // try to read next data chunk:
-        stream.Read(&FCC1, 4);
-    }
-
-    return wxNOT_FOUND;
+    return decoder.GetFrameCount();
 }
 
Index: src/common/imaggif.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/imaggif.cpp,v
retrieving revision 1.41
diff -bu2 -r1.41 src/common/imaggif.cpp
--- src/common/imaggif.cpp
+++ src/common/imaggif.cpp
@@ -38,10 +38,10 @@
 {
     wxGIFDecoder *decod;
-    int error;
+    wxGIFErrorCode error;
     bool ok = true;
 
 //    image->Destroy();
-    decod = new wxGIFDecoder(&stream, true);
-    error = decod->ReadGIF();
+    decod = new wxGIFDecoder();
+    error = decod->LoadGIF(stream);
 
     if ((error != wxGIF_OK) && (error != wxGIF_TRUNCATED))
@@ -72,22 +72,7 @@
     }
 
-    if (index != -1)
-    {
-        // We're already on index = 0 by default. So no need
-        // to call GoFrame(0) then. On top of that GoFrame doesn't
-        // accept an index of 0. (Instead GoFirstFrame() should be used)
-        // Also if the gif image has only one frame, calling GoFrame(0)
-        // fails because GoFrame() only works with gif animations.
-        // (It fails if IsAnimation() returns false)
-        // All valid reasons to NOT call GoFrame when index equals 0.
-        if (index != 0)
-        {
-            ok = decod->GoFrame(index);
-        }
-    }
-
     if (ok)
     {
-        ok = decod->ConvertToImage(image);
+        ok = decod->ConvertToImage(index != -1 ? (size_t)index : 0, image);
     }
     else
@@ -112,6 +97,6 @@
 bool wxGIFHandler::DoCanRead( wxInputStream& stream )
 {
-    wxGIFDecoder decod(&stream);
-    return decod.CanRead();
+    wxGIFDecoder decod;
+    return decod.CanRead(stream);
 }
 
Index: src/html/m_image.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/html/m_image.cpp,v
retrieving revision 1.64
diff -bu2 -r1.64 src/html/m_image.cpp
--- src/html/m_image.cpp
+++ src/html/m_image.cpp
@@ -310,4 +310,5 @@
     wxTimer            *m_gifTimer;
     int                 m_physX, m_physY;
+    size_t              m_nCurrFrame;
 #endif
     double              m_scale;
@@ -359,4 +360,5 @@
     m_gifTimer = NULL;
     m_physX = m_physY = wxDefaultCoord;
+    m_nCurrFrame = 0;
 #endif
 
@@ -375,9 +377,9 @@
                       input->GetLocation().Matches(wxT("*.GIF"))) )
                 {
-                    m_gifDecoder = new wxGIFDecoder(s, true);
-                    if ( m_gifDecoder->ReadGIF() == wxGIF_OK )
+                    m_gifDecoder = new wxGIFDecoder();
+                    if ( m_gifDecoder->LoadGIF(*s) == wxGIF_OK )
                     {
                         wxImage img;
-                        if ( m_gifDecoder->ConvertToImage(&img) )
+                        if ( m_gifDecoder->ConvertToImage(0, &img) )
                             SetImage(img);
 
@@ -387,5 +389,5 @@
                         {
                             m_gifTimer = new wxGIFTimer(this);
-                            m_gifTimer->Start(m_gifDecoder->GetDelay(), true);
+                            m_gifTimer->Start(m_gifDecoder->GetDelay(0), true);
                         }
                         else
@@ -482,5 +484,8 @@
     wxImage img;
 
-    m_gifDecoder->GoNextFrame(true);
+    // advance current frame
+    m_nCurrFrame++;
+    if (m_nCurrFrame == m_gifDecoder->GetFrameCount())
+        m_nCurrFrame = 0;
 
     if ( m_physX == wxDefaultCoord )
@@ -500,15 +505,14 @@
 
     if ( win->GetClientRect().Intersects(rect) &&
-         m_gifDecoder->ConvertToImage(&img) )
+         m_gifDecoder->ConvertToImage(m_nCurrFrame, &img) )
     {
 #if !defined(__WXMSW__) || wxUSE_WXDIB
-        if ( (int)m_gifDecoder->GetWidth() != m_Width ||
-             (int)m_gifDecoder->GetHeight() != m_Height ||
-             m_gifDecoder->GetLeft() != 0 || m_gifDecoder->GetTop() != 0 )
+        if ( m_gifDecoder->GetFrameSize(m_nCurrFrame) != wxSize(m_Width, m_Height) ||
+             m_gifDecoder->GetFramePosition(m_nCurrFrame) != wxPoint(0, 0) )
         {
             wxBitmap bmp(img);
             wxMemoryDC dc;
             dc.SelectObject(*m_bitmap);
-            dc.DrawBitmap(bmp, m_gifDecoder->GetLeft(), m_gifDecoder->GetTop(),
+            dc.DrawBitmap(bmp, m_gifDecoder->GetFramePosition(m_nCurrFrame),
                           true /* use mask */);
         }
@@ -519,5 +523,5 @@
     }
 
-    timer->Start(m_gifDecoder->GetDelay(), true);
+    timer->Start(m_gifDecoder->GetDelay(m_nCurrFrame), true);
 }
 

 	  	 

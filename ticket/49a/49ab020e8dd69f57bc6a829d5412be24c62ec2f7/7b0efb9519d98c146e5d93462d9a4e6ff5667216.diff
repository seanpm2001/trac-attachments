Index: include/wx/generic/grid.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/generic/grid.h,v
retrieving revision 1.128
diff -u -r1.128 grid.h
--- include/wx/generic/grid.h	2003/09/11 21:10:58	1.128
+++ include/wx/generic/grid.h	2004/02/21 14:34:15
@@ -92,6 +92,157 @@
 #define wxSafeDecRef(p) if ( p ) (p)->DecRef()
 
 // ----------------------------------------------------------------------------
+// wxGridCellCoords: location of a cell in the grid
+// ----------------------------------------------------------------------------
+
+class WXDLLIMPEXP_ADV wxGridCellCoords
+{
+public:
+    wxGridCellCoords() { m_row = m_col = -1; }
+    wxGridCellCoords( int r, int c ) { m_row = r; m_col = c; }
+
+    // default copy ctor is ok
+
+    int GetRow() const { return m_row; }
+    void SetRow( int n ) { m_row = n; }
+    int GetCol() const { return m_col; }
+    void SetCol( int n ) { m_col = n; }
+    void Set( int row, int col ) { m_row = row; m_col = col; }
+
+    wxGridCellCoords& operator=( const wxGridCellCoords& other )
+    {
+        if ( &other != this )
+        {
+            m_row=other.m_row;
+            m_col=other.m_col;
+        }
+        return *this;
+    }
+
+    bool operator==( const wxGridCellCoords& other ) const
+    {
+        return (m_row == other.m_row  &&  m_col == other.m_col);
+    }
+
+    bool operator!=( const wxGridCellCoords& other ) const
+    {
+        return (m_row != other.m_row  ||  m_col != other.m_col);
+    }
+
+    bool operator!() const
+    {
+        return (m_row == -1 && m_col == -1 );
+    }
+
+private:
+    int m_row;
+    int m_col;
+};
+
+
+
+/**
+ * wxGridCellRenderContext class handles the majority of a redraw 
+ * cycle.
+ *
+ * wxGrid hands redraws off to the context which can handle
+ * them in a optimised order, and re-entrant safe.
+ *
+ * Please , please consider how you manage objects of this
+ * type carefully .
+ * Look the implementation on DrawCell for why!
+ *
+ */
+class wxGridRenderContextRowBase {
+public:
+    typedef enum{ Setup, Ready , Rendering} state_t;
+    wxGridRenderContextRowBase() : m_state(Setup) {}
+
+    virtual ~wxGridRenderContextRowBase() {}
+    /**
+     * Makes  range to this row to be drawn, the union of
+     * the currently set and plus the cells between left and 
+     * right inclusive
+     */
+    virtual void EnsureWidth(size_t left ,size_t right)=0;
+    /**
+     * Scan the row to left , and return the last non-empty cell reached. 
+     * As a hint the scan needs start no further right than right,
+     * but the row can start the scan anywhere between left and right
+     * to avoid touching already visited cells
+     */
+    virtual size_t Scan(size_t left,size_t right) =0;
+    /**
+     * Returns the same value as the last Scan().
+     */
+    virtual size_t GetMaxOverflow() =0;
+    /**
+     * Set a value for max overflow - which will prolly be returned
+     * by the current Scan()
+     */
+    virtual void   SetMaxOverflow(size_t) =0;
+    /**
+     * Find the current state of the row.
+     */
+    state_t GetState() { return m_state; }
+protected:
+    state_t	m_state;
+};
+
+WX_DEFINE_ARRAY(wxGridRenderContextRowBase*,wxGridCellRenderContext_rowarray);
+
+class WXDLLIMPEXP_ADV wxGridCellRenderContext {
+	// wxGridRenderContextRow should really be a member
+	// class but compiler implementations vary greatly
+	// the in support of this language feature.
+	// I make the class a friend instead.
+public:
+    wxGridCellRenderContext(wxGrid* owner,const wxRegion& reg ,wxDC& dc,
+		            bool drawLines=false,bool drawSpace=false,bool drawHighlight=false);
+
+    void StartDraw();
+
+    /**
+     * GetMaxoverflow only returns meanginfull data during
+     * cell drawing. This means it's safe to call from a
+     * Render , but almost nowhere else.
+     */
+    int GetMaxOverflow() {return m_maxover;}  
+    wxRegion GetMaxRegion() const { return m_reg; }
+    wxRect   GetCellRect() const { return m_rect;}
+    int	     GetRow() const {return m_row; }
+    int      GetCol() const {return m_col; }
+    bool     GetIsSelected() const { return m_selected;}
+    wxDC&     GetDC() const { return m_dc; }
+    wxGridCellAttr* GetAttr() { return m_attr; }
+   
+private:
+    friend class  wxGridRenderContextRow;
+    friend class  wxGridCellRenderContextUndrawnRow;
+    
+    void DrawCell(size_t,size_t,size_t,size_t);
+    size_t BlockScan(size_t row,size_t nr_rows,size_t lcol,size_t rcol);
+    wxGrid* m_grid;
+    wxRegion m_reg;
+    wxDC&  m_dc;
+    int m_toprow,m_endrow,m_leftcol,m_rightcol;
+    wxMutex m_lock;
+    int m_row,m_col;
+    int m_maxover; 
+    size_t m_offset;
+    wxRect m_rect;
+    wxGridCellAttr* m_attr;
+    wxGridCellAttr* m_cattr;
+    wxGridCellRenderContext_rowarray m_rows;
+    wxGridCellCoords m_current;
+    bool m_selected;
+    bool m_drawLines;
+    bool m_drawSpace ;
+    bool m_drawHighlight;
+};
+
+
+// ----------------------------------------------------------------------------
 // wxGridCellWorker: common base class for wxGridCellRenderer and
 // wxGridCellEditor
 //
@@ -150,7 +301,16 @@
                       wxDC& dc,
                       const wxRect& rect,
                       int row, int col,
-                      bool isSelected) = 0;
+                      bool isSelected); 
+
+    virtual void Draw(wxGrid& grid, wxGridCellRenderContext& cntxt) {
+    	Draw(grid,
+             *(cntxt.GetAttr()),
+	     cntxt.GetDC(),
+	     cntxt.GetCellRect(),
+	     cntxt.GetRow(),cntxt.GetCol(),
+	     cntxt.GetIsSelected());
+    }
 
     // get the preferred size of the cell for its contents
     virtual wxSize GetBestSize(wxGrid& grid,
@@ -167,12 +327,7 @@
 {
 public:
     // draw the string
-    virtual void Draw(wxGrid& grid,
-                      wxGridCellAttr& attr,
-                      wxDC& dc,
-                      const wxRect& rect,
-                      int row, int col,
-                      bool isSelected);
+    virtual void Draw(wxGrid& grid, wxGridCellRenderContext& cntxt); 
 
     // return the string extent
     virtual wxSize GetBestSize(wxGrid& grid,
@@ -997,56 +1152,6 @@
 // ============================================================================
 //  Grid view classes
 // ============================================================================
-
-// ----------------------------------------------------------------------------
-// wxGridCellCoords: location of a cell in the grid
-// ----------------------------------------------------------------------------
-
-class WXDLLIMPEXP_ADV wxGridCellCoords
-{
-public:
-    wxGridCellCoords() { m_row = m_col = -1; }
-    wxGridCellCoords( int r, int c ) { m_row = r; m_col = c; }
-
-    // default copy ctor is ok
-
-    int GetRow() const { return m_row; }
-    void SetRow( int n ) { m_row = n; }
-    int GetCol() const { return m_col; }
-    void SetCol( int n ) { m_col = n; }
-    void Set( int row, int col ) { m_row = row; m_col = col; }
-
-    wxGridCellCoords& operator=( const wxGridCellCoords& other )
-    {
-        if ( &other != this )
-        {
-            m_row=other.m_row;
-            m_col=other.m_col;
-        }
-        return *this;
-    }
-
-    bool operator==( const wxGridCellCoords& other ) const
-    {
-        return (m_row == other.m_row  &&  m_col == other.m_col);
-    }
-
-    bool operator!=( const wxGridCellCoords& other ) const
-    {
-        return (m_row != other.m_row  ||  m_col != other.m_col);
-    }
-
-    bool operator!() const
-    {
-        return (m_row == -1 && m_col == -1 );
-    }
-
-private:
-    int m_row;
-    int m_col;
-};
-
-
 // For comparisons...
 //
 extern WXDLLIMPEXP_ADV wxGridCellCoords wxGridNoCellCoords;
@@ -1104,8 +1209,6 @@
     wxArrayInt CalcRowLabelsExposed( const wxRegion& reg );
 
     wxArrayInt CalcColLabelsExposed( const wxRegion& reg );
-    wxGridCellCoordsArray CalcCellsExposed( const wxRegion& reg );
-
 
     // ------ event handlers
     //
@@ -1131,7 +1234,6 @@
     bool AppendCols( int numCols = 1, bool updateLabels=TRUE );
     bool DeleteCols( int pos = 0, int numCols = 1, bool updateLabels=TRUE );
 
-    void DrawGridCellArea( wxDC& dc , const wxGridCellCoordsArray& cells );
     void DrawGridSpace( wxDC& dc );
     void DrawCellBorder( wxDC& dc, const wxGridCellCoords& );
     void DrawAllGridLines( wxDC& dc, const wxRegion & reg );
@@ -1913,6 +2015,8 @@
     bool SetModelValues();
 
     friend class WXDLLIMPEXP_ADV wxGridSelection;
+    friend class WXDLLIMPEXP_ADV wxGridCellRenderContext;
+    friend class WXDLLIMPEXP_ADV wxGridRenderContextRow;
 
     DECLARE_DYNAMIC_CLASS( wxGrid )
     DECLARE_EVENT_TABLE()
Index: src/generic/grid.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/generic/grid.cpp,v
retrieving revision 1.284
diff -u -r1.284 grid.cpp
--- src/generic/grid.cpp	2004/01/31 18:21:24	1.284
+++ src/generic/grid.cpp	2004/02/21 14:34:34
@@ -428,7 +428,6 @@
 // ============================================================================
 // implementation
 // ============================================================================
-
 // ----------------------------------------------------------------------------
 // wxGridCellEditor
 // ----------------------------------------------------------------------------
@@ -1647,12 +1646,15 @@
 }
 
 void wxGridCellStringRenderer::Draw(wxGrid& grid,
-                                    wxGridCellAttr& attr,
-                                    wxDC& dc,
-                                    const wxRect& rectCell,
-                                    int row, int col,
-                                    bool isSelected)
+		 wxGridCellRenderContext& cntxt)
 {
+   wxGridCellAttr& attr=*(cntxt.GetAttr());
+   wxDC& dc=cntxt.GetDC();
+   const wxRect& rectCell=cntxt.GetCellRect();
+   int row=cntxt.GetRow();
+   int col=cntxt.GetCol();
+   bool isSelected=cntxt.GetIsSelected();
+
     wxRect rect = rectCell;
     rect.Inflate(-1);
 
@@ -1666,41 +1668,21 @@
 
     if (attr.GetOverflow())
     {
-        int cols = grid.GetNumberCols();
         int best_width = GetBestSize(grid,attr,dc,row,col).GetWidth();
-        int cell_rows, cell_cols;
+	int cell_rows, cell_cols;
         attr.GetSize( &cell_rows, &cell_cols ); // shouldn't get here if <=0
-        if ((best_width > rectCell.width) && (col < cols) && grid.GetTable())
-        {
-            int i, c_cols, c_rows;
-            for (i = col+cell_cols; i < cols; i++)
-            {
-                bool is_empty = TRUE;
-                for (int j=row; j<row+cell_rows; j++)
-                {
-                    // check w/ anchor cell for multicell block
-                    grid.GetCellSize(j, i, &c_rows, &c_cols);
-                    if (c_rows > 0) c_rows = 0;
-                    if (!grid.GetTable()->IsEmptyCell(j+c_rows, i))
-                    {
-                        is_empty = FALSE;
-                        break;
-                    }
-                }
-                if (is_empty)
-                    rect.width += grid.GetColSize(i);
-                else
-                {
-                    i--;
-                    break;
-                }
-                if (rect.width >= best_width) break;
-            }
-            overflowCols = i - col - cell_cols + 1;
-            if (overflowCols >= cols) overflowCols = cols - 1;
-        }
 
-        if (overflowCols > 0) // redraw overflow cells w/ proper hilight
+	overflowCols = cntxt.GetMaxOverflow() ;
+        int hAlign, vAlign;
+	attr.GetAlignment(&hAlign, &vAlign);
+        for (size_t c=col+1; c<overflowCols  ;++c) {
+            rect.width += grid.GetColSize(c);
+	}
+	rect.width=wxMin(rect.width,best_width);
+
+	overflowCols = overflowCols-col-1;
+        
+	if (overflowCols > 0) // redraw overflow cells w/ proper hilight
         {
             hAlign = wxALIGN_LEFT; // if oveflowed then it's left aligned
             wxRect clip = rect;
@@ -3686,13 +3668,8 @@
     wxPaintDC dc( this );
     m_owner->PrepareDC( dc );
     wxRegion reg = GetUpdateRegion();
-    wxGridCellCoordsArray DirtyCells = m_owner->CalcCellsExposed( reg );
-    m_owner->DrawGridCellArea( dc , DirtyCells);
-#if WXGRID_DRAW_LINES
-    m_owner->DrawAllGridLines( dc, reg );
-#endif
-    m_owner->DrawGridSpace( dc );
-    m_owner->DrawHighlight( dc , DirtyCells );
+    wxGridCellRenderContext cntxt(m_owner,reg,dc,WXGRID_DRAW_LINES,true,true);
+    cntxt.StartDraw();
 }
 
 
@@ -3758,6 +3735,391 @@
                                           m_rowBottoms, m_numRows, TRUE)
 /////////////////////////////////////////////////////////////////////
 
+
+// ----------------------------------------------------------------------------
+//  wxGridCellRenderContext
+// ----------------------------------------------------------------------------
+
+
+class  wxGridRenderContextRow : public  wxGridRenderContextRowBase {
+public:
+    wxGridRenderContextRow(size_t r,wxGridCellRenderContext* p) : 
+            m_row(r),m_left(UINT_MAX),m_right(0),m_nxtcol(0),m_maxover(3),
+            m_owner(p) { }
+
+
+    virtual void EnsureWidth(size_t newleft,size_t newright) {
+        m_state=Ready;
+	m_left  = wxMin(newleft,m_left);
+        m_right = wxMax(newright,m_right);
+        m_maxover=m_right+1;
+        m_nxtcol=m_right+1;
+    }
+    virtual size_t Scan(size_t lcol,size_t rcol);
+    virtual size_t GetMaxOverflow() { return m_maxover; }
+    virtual void   SetMaxOverflow(size_t m) { m_maxover =m; }
+protected:
+    void HandleSpanCell(size_t row,size_t  col,int rows,int cols,size_t r);
+private:
+    size_t m_row;
+    size_t m_left,m_right;
+    /**
+     * this is the next columun to paint +1 !
+     *
+     * Since zero is valid we cant test for being less than zero
+     * otherwise. Arguably we could used signed numbers instead
+     * but I want to use reasonable wide numbers so v. large grids
+     * are possible on architecture / machine which can support them.
+     */
+    size_t m_nxtcol;
+    int m_maxover;
+    wxGridCellRenderContext* m_owner;
+};
+
+class wxGridCellRenderContextUndrawnRow : public  wxGridRenderContextRowBase {
+public:
+    wxGridCellRenderContextUndrawnRow(wxGridCellRenderContext* o,
+                    size_t r) : m_owner(o), m_row(r) {}
+
+    virtual size_t Scan(size_t l,size_t r) ;
+    virtual size_t GetMaxOverflow() {return 0;} 
+    virtual void SetMaxOverflow(size_t WXUNUSED(v)) {}
+    virtual void EnsureWidth(size_t WXUNUSED(r),size_t WXUNUSED(l)) {
+    	m_state=Ready;
+    }
+    
+private:
+    wxGridCellRenderContext* m_owner;
+    size_t m_row,m_nxtcol,m_maxover;
+};
+
+/*
+#include <wx/arrimpl.cpp> 
+WX_DEFINE_ARRAY(wxGridCellRenderContext_rowarray)
+*/
+size_t
+wxGridCellRenderContextUndrawnRow::Scan(size_t maxleft,size_t right) { 
+    m_state=Rendering;
+    m_nxtcol= (wxMin(m_nxtcol-1,right)+1);
+    m_maxover = wxMin(m_maxover,right);
+    while (m_nxtcol >= (maxleft+1)) {
+        size_t col=m_nxtcol=1;
+        int rowspan,colspan;
+        m_owner->m_grid->GetCellSize(m_row,col,&rowspan,&colspan);
+        m_nxtcol = m_nxtcol -1;
+           //Skip over spanned cell.
+           if (colspan <0 ) { 
+            m_nxtcol += colspan;
+        }
+        if (rowspan >=0) rowspan=0;
+        if (colspan >=0) colspan=0;
+        if ( ! m_owner->m_grid->GetCellValue(m_row+rowspan,col+colspan).IsNull()) {
+             m_maxover=wxMin(col,m_maxover);
+        }
+    }
+    return m_maxover;
+}
+
+size_t
+wxGridRenderContextRow::Scan(size_t maxleft,size_t right) {
+    wxASSERT_MSG(m_left <= m_right ,_T("Inconsistent row in render state"));
+    m_state=Rendering;
+
+    //Limit to region, as defined by class.
+    maxleft = wxMax(maxleft,m_left);
+   
+    // Note +1 due top def of m_nxtcol
+    while (m_nxtcol >= (maxleft+1)) {
+        wxASSERT_MSG(m_nxtcol,_T("Reached invalid column in rowscan"));
+        size_t col = m_nxtcol-1;
+        int rowspan,colspan;
+        m_owner->m_grid->GetCellSize(m_row,col,&rowspan,&colspan);
+        m_nxtcol = m_nxtcol -1;
+    
+        //Skip over spanned cell.
+        if (colspan <0 ) { 
+            m_nxtcol += colspan;
+        }
+    
+        if ( (rowspan != 1)) {
+            HandleSpanCell(m_row,col,rowspan,colspan,right);
+        } else {
+            m_owner->DrawCell(m_row,col,m_maxover,1);
+        }
+    }
+    
+    // Check for outer loop.
+    if (maxleft == m_left) {
+        while (m_nxtcol >= 1) {
+            size_t col = m_nxtcol-1;
+            int rowspan,colspan;
+            m_owner->m_grid->GetCellSize(m_row,col,&rowspan,&colspan);
+            m_nxtcol = m_nxtcol -1;
+    
+            //Skip over spanned cell.
+            if (colspan <0 ) { 
+                m_nxtcol += colspan;
+            }
+    
+            if ( ! m_owner->m_grid->GetCellValue(m_row,col).IsNull()) {
+                wxGridCellAttr* attr = m_owner->m_grid->GetCellAttr(m_row, col);
+               
+                //Only do anything if it's an overflow cell
+                if ( ! attr->GetOverflow()) continue;
+                   
+                m_owner->m_grid->GetCellSize(m_row,col,&rowspan,&colspan);
+                if ((rowspan != 1) || (colspan != 1)) {
+                    HandleSpanCell(m_row,col,rowspan,colspan,right);
+                } else {
+                    m_owner->DrawCell(m_row,col,m_maxover,1);
+                }
+                //Found a non-empty cell and done any work so we don't need to go any further.
+                  break;
+            }
+        }
+    }
+    return m_maxover;
+}
+
+wxGridCellRenderContext::wxGridCellRenderContext(wxGrid* owner,
+                const wxRegion& reg,wxDC& dc,
+                bool drawLines,bool drawSpace,bool drawHighlight)
+    : m_grid(owner) , m_reg(reg) , m_dc(dc) ,
+      m_drawLines(drawLines)  ,m_drawSpace(drawSpace)  ,
+      m_drawHighlight(drawHighlight)
+{
+   if (m_drawHighlight) {
+   	m_current=wxGridCellCoords(m_grid->GetGridCursorRow(),
+			           m_grid->GetGridCursorCol());
+   }
+}
+
+//This function is the meat of the algorithm and splits the
+// rows around and spaned cell into the sections to be scanned
+// and drawn seperately. 
+void 
+wxGridRenderContextRow::HandleSpanCell(size_t row,size_t col,int rows,int cols,size_t right) {
+     // Scan and draw the area while we are there
+     // the area to the right of the span
+     // we now know the leftmost non-empty cell.
+     size_t master_col=col , master_row=row;
+     if ((rows < 0) || (cols < 0)) {
+        master_col+=cols;
+        master_row+=rows;
+        m_owner->m_grid->GetCellSize(master_row,master_col,&rows,&cols);
+     }
+     
+     //Get data about other rows span by this cell.
+     // - we include this row in the scan request but it
+     //    should do zero passes of the loop in Scan
+     // - by including ourselves we don't need to
+     //   worry about which row of the span we have touched
+     //   (as it could be a middle row if the span is partiall
+     //     obscured or scrolled ).
+     size_t max_over=m_owner->BlockScan(m_row,rows,master_col+cols,right);
+     
+     //Draw the span..
+     m_owner->DrawCell(master_row,master_col,max_over,rows);
+     
+}
+
+/** DrawCell
+ *
+ * draws any grid window portion of the celll,
+ * Pre: row,col are not spanned, or are the top,left 
+ * corner of a spanned cell.
+ * Post: cell is painted on the grid window.
+ */
+void
+wxGridCellRenderContext::DrawCell(size_t row ,size_t col,size_t maxover,size_t rows) {
+
+#ifdef __WXDEBUG__
+    //Check for a re-entrancy that will cause trouble 
+    // but shouldn't ever happen.
+    //
+    // Assumes locks are non recursive
+    wxMutexLocker lock(m_lock);
+    if (!lock.IsOk() ) abort();
+#endif    
+  
+    m_maxover=maxover;
+
+    m_attr = m_grid->GetCellAttr(row, col);
+    if (  m_drawHighlight &&
+         (m_current.GetRow() == row) &&
+         (m_current.GetCol() == col)) {
+    
+    	m_cattr=m_attr;
+	m_cattr->IncRef();
+    }
+    
+    bool isCurrent = (row == m_grid->GetCursorRow()) && (col == m_grid->GetCursorColumn() ) ;
+    m_row=row; m_col=col;
+    m_rect = m_grid->CellToRect( row, col );
+        
+    // if the editor is shown, we should use it and not the renderer
+    // Note: However, only if it is really _shown_, i.e. not hidden!
+    if ( isCurrent && m_grid->IsCellEditControlShown() )
+    {
+        wxGridCellEditor *editor = m_attr->GetEditor(m_grid, row, col);
+        editor->PaintBackground(m_rect, m_attr);
+        editor->DecRef();
+    }
+    else
+    {
+        // but all the rest is drawn by the cell renderer and hence may be
+        // customized
+    m_selected=m_grid->IsInSelection(row,col);
+        wxGridCellRenderer *renderer = m_attr->GetRenderer(m_grid, row, col);
+        renderer->Draw(*m_grid, *this);
+        renderer->DecRef();
+    }
+
+    m_attr->DecRef();
+    if ( ! m_grid->GetCellValue(row,col).IsNull()) {
+        for (size_t i=row; i<=(row+rows-1) ; ++i) {
+            //Check array bounds... 
+            // -out of bound rows are legal and likely.
+            if ((i >= m_offset) && ((i-m_offset) < m_rows.GetCount()) ) {
+                m_rows[i-m_offset]->SetMaxOverflow(col);
+            }
+        
+        }
+    }
+}
+
+inline static void
+FixupRect(wxRect& r, wxGrid* grid,
+          size_t& te, size_t& be , size_t& le, size_t& re) {
+        
+    // TODO: remove motif part when we can...
+    // There is a bug in wxMotif that gives garbage update
+    // rectangles if you jump-scroll a long way by clicking the
+    // scrollbar with middle button.  This is a work-around
+    //
+#if defined(__WXMOTIF__)
+    int cw, ch;
+   //FIXME: Find acccess to m_gridWin. 
+    grid->m_gridWin->GetClientSize( &cw, &ch );
+    if ( r.GetTop() > ch ) r.SetTop( 0 );
+    if ( r.GetLeft() > cw ) r.SetLeft( 0 );
+    r.SetRight( wxMin( r.GetRight(), cw ) );
+    r.SetBottom( wxMin( r.GetBottom(), ch ) );
+#endif
+        
+     int top,bottom,left,right; 
+     // logical bounds of update region
+     //
+     grid->CalcUnscrolledPosition( r.GetLeft(), r.GetTop(), &left, &top );
+     grid->CalcUnscrolledPosition( r.GetRight(), r.GetBottom(), &right, &bottom );
+
+     // find the cells within these bounds
+     //
+     top    = grid->YToRow(top);
+     bottom = grid->YToRow(bottom);
+     left   = grid->XToCol(left);
+     right  = grid->XToCol(right);
+    
+     // Force to limits. -
+     if (bottom<0) bottom= grid->GetNumberRows()-1;
+     if (right <0) right = grid->GetNumberCols()-1;
+     if (top   <0) top   = 0;
+     if (left  <0) left  = 0;
+    
+     te=top; be=bottom; re=right; le=left;
+}
+
+void
+wxGridCellRenderContext::StartDraw() {
+    wxRegionIterator iter( m_reg );
+    wxRect r;
+
+    size_t left, top, right, bottom;
+    size_t firstrow=UINT_MAX; 
+    size_t lastrow=0;
+    while ( iter )
+    {
+        r = iter.GetRect();
+
+        FixupRect(r,m_grid,top,bottom,left,right);
+    
+        lastrow =wxMax(lastrow,bottom);
+        firstrow=wxMin(firstrow,top);
+    
+        ++iter;
+    }
+
+    m_offset=firstrow;
+    m_rows.Alloc(lastrow-m_offset+1);
+    
+    for (size_t i=firstrow; i<=lastrow; ++i) {
+        m_rows.Add(new wxGridRenderContextRow(i,this));
+    }
+   
+    
+    iter.Reset();
+    size_t rightmost=0;
+    while (iter) {
+        r = iter.GetRect();
+
+        FixupRect(r,m_grid,top,bottom,left,right);
+    
+
+        for (size_t i=top ; i<=bottom; ++i) {
+            m_rows[i-m_offset]->EnsureWidth(left,right);
+        }
+        rightmost =wxMax(rightmost,right);
+        ++iter;
+    }
+    m_cattr=NULL; 
+    BlockScan(firstrow,lastrow-firstrow+1,0,rightmost);
+    
+    if (m_drawLines) m_grid->DrawAllGridLines(m_dc,m_reg);
+    if (m_drawSpace) m_grid->DrawGridSpace(m_dc);
+    if (m_drawHighlight) {
+	if (!m_cattr) {
+    	    m_cattr = m_grid->GetCellAttr(m_current.GetRow(), m_current.GetCol());
+	}
+        m_grid->DrawCellHighlight(m_dc,m_cattr);
+        m_cattr->DecRef(); 
+    }
+    m_cattr=NULL; 
+}
+
+
+size_t
+wxGridCellRenderContext::BlockScan(size_t firstrow,size_t rows,size_t maxcol,size_t mincol) {
+    size_t lastrow= wxMin(firstrow+rows,m_offset+m_rows.GetCount());
+    wxASSERT_MSG(firstrow >= m_offset,_T("looking for drawn cells in unscanned row above the region"));
+    //FIXME This funtion needs to lock against racing array access.
+    // - note row inserted at the head of the array are inserted in
+    //   decrementing order of row number eg, i is not the
+    //   row number of the inserted row.
+    
+    //First add any preinsert rows.
+    for (size_t i=firstrow; i<=(lastrow-1) ; ++i) {
+        if (i < m_offset) 
+            m_rows.Insert(new wxGridCellRenderContextUndrawnRow(this,--m_offset),0);
+    }
+    
+    for (size_t i=firstrow; i<=(firstrow+rows-1) ; ++i) {
+        if (i >= m_offset+m_rows.GetCount() ) {
+            m_rows.Add(new wxGridCellRenderContextUndrawnRow(this,i));
+        }
+	wxGridRenderContextRowBase* row=m_rows[i-m_offset];
+	if (row->GetState() == wxGridRenderContextRowBase::Setup) {
+	    m_rows[i-m_offset]=new wxGridCellRenderContextUndrawnRow(this,i);
+	    delete row;
+	    row=m_rows[i-m_offset];
+	}
+        mincol=wxMax(mincol,row->Scan(maxcol,mincol));
+    }
+    return mincol;
+}
+
+/////////////////////////////////////////////////////////////////////
+
+
 #if wxUSE_EXTENDED_RTTI
 WX_DEFINE_FLAGS( wxGridStyle )
 
@@ -4677,67 +5039,6 @@
 }
 
 
-wxGridCellCoordsArray wxGrid::CalcCellsExposed( const wxRegion& reg )
-{
-    wxRegionIterator iter( reg );
-    wxRect r;
-
-    wxGridCellCoordsArray  cellsExposed;
-
-    int left, top, right, bottom;
-    while ( iter )
-    {
-        r = iter.GetRect();
-
-        // TODO: remove this when we can...
-        // There is a bug in wxMotif that gives garbage update
-        // rectangles if you jump-scroll a long way by clicking the
-        // scrollbar with middle button.  This is a work-around
-        //
-#if defined(__WXMOTIF__)
-        int cw, ch;
-        m_gridWin->GetClientSize( &cw, &ch );
-        if ( r.GetTop() > ch ) r.SetTop( 0 );
-        if ( r.GetLeft() > cw ) r.SetLeft( 0 );
-        r.SetRight( wxMin( r.GetRight(), cw ) );
-        r.SetBottom( wxMin( r.GetBottom(), ch ) );
-#endif
-
-        // logical bounds of update region
-        //
-        CalcUnscrolledPosition( r.GetLeft(), r.GetTop(), &left, &top );
-        CalcUnscrolledPosition( r.GetRight(), r.GetBottom(), &right, &bottom );
-
-        // find the cells within these bounds
-        //
-        int row, col;
-        for ( row = internalYToRow(top);  row < m_numRows;  row++ )
-        {
-            if ( GetRowBottom(row) <= top )
-                continue;
-
-            if ( GetRowTop(row) > bottom )
-                break;
-
-            for ( col = internalXToCol(left);  col < m_numCols;  col++ )
-            {
-                if ( GetColRight(col) <= left )
-                    continue;
-
-                if ( GetColLeft(col) > right )
-                    break;
-
-                cellsExposed.Add( wxGridCellCoords( row, col ) );
-            }
-        }
-
-        iter++;
-    }
-
-    return cellsExposed;
-}
-
-
 void wxGrid::ProcessRowLabelMouseEvent( wxMouseEvent& event )
 {
     int x, y, row;
@@ -6461,13 +6762,12 @@
                 r.height++;
             }
 
-            wxGridCellCoordsArray cells = CalcCellsExposed( r );
+            wxGridCellRenderContext cntxt(this,r,dc,1);
 
             // Otherwise refresh redraws the highlight!
             m_currentCellCoords = coords;
 
-            DrawGridCellArea(dc,cells);
-            DrawAllGridLines( dc, r );
+            cntxt.StartDraw();
         }
     }
 
@@ -6673,116 +6973,6 @@
     }
 
     return FALSE;
-}
-
-
-
-// Note - this function only draws cells that are in the list of
-// exposed cells (usually set from the update region by
-// CalcExposedCells)
-//
-void wxGrid::DrawGridCellArea( wxDC& dc, const wxGridCellCoordsArray& cells )
-{
-    if ( !m_numRows || !m_numCols ) return;
-
-    int i, numCells = cells.GetCount();
-    int row, col, cell_rows, cell_cols;
-    wxGridCellCoordsArray redrawCells;
-
-    for ( i = numCells-1; i >= 0;  i-- )
-    {
-        row = cells[i].GetRow();
-        col = cells[i].GetCol();
-        GetCellSize( row, col, &cell_rows, &cell_cols );
-
-        // If this cell is part of a multicell block, find owner for repaint
-        if ( cell_rows <= 0 || cell_cols <= 0 )
-        {
-            wxGridCellCoords cell(row+cell_rows, col+cell_cols);
-            bool marked = FALSE;
-            for ( int j = 0;  j < numCells;  j++ )
-            {
-                if ( cell == cells[j] )
-                {
-                    marked = TRUE;
-                    break;
-                }
-            }
-            if (!marked)
-            {
-                int count = redrawCells.GetCount();
-                for (int j = 0; j < count; j++)
-                {
-                    if ( cell == redrawCells[j] )
-                    {
-                        marked = TRUE;
-                        break;
-                    }
-                }
-                if (!marked) redrawCells.Add( cell );
-            }
-            continue; // don't bother drawing this cell
-        }
-
-        // If this cell is empty, find cell to left that might want to overflow
-        if (m_table && m_table->IsEmptyCell(row, col))
-        {
-            for ( int l = 0; l < cell_rows; l++ )
-            {
-                // find a cell in this row to left alreay marked for repaint
-                int left = col;
-                for (int k = 0; k < int(redrawCells.GetCount()); k++)
-                    if ((redrawCells[k].GetCol() < left) &&
-                        (redrawCells[k].GetRow() == row))
-                        left=redrawCells[k].GetCol();
-
-                if (left == col) left = 0; // oh well
-
-                for (int j = col-1; j >= left; j--)
-                {
-                    if (!m_table->IsEmptyCell(row+l, j))
-                    {
-                        if (GetCellOverflow(row+l, j))
-                        {
-                            wxGridCellCoords cell(row+l, j);
-                            bool marked = FALSE;
-
-                            for (int k = 0; k < numCells; k++)
-                            {
-                                if ( cell == cells[k] )
-                                {
-                                    marked = TRUE;
-                                    break;
-                                }
-                            }
-                            if (!marked)
-                            {
-                                int count = redrawCells.GetCount();
-                                for (int k = 0; k < count; k++)
-                                {
-                                    if ( cell == redrawCells[k] )
-                                    {
-                                        marked = TRUE;
-                                        break;
-                                    }
-                                }
-                                if (!marked) redrawCells.Add( cell );
-                            }
-                        }
-                        break;
-                    }
-                }
-            }
-        }
-        DrawCell( dc, cells[i] );
-    }
-
-    numCells = redrawCells.GetCount();
-
-    for ( i = numCells - 1; i >= 0;  i-- )
-    {
-        DrawCell( dc, redrawCells[i] );
-    }
 }


Index: samples/grid/griddemo.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/samples/grid/griddemo.cpp,v
retrieving revision 1.3
diff -u -r1.3 griddemo.cpp
--- samples/grid/griddemo.cpp	2003/09/09 20:24:33	1.3
+++ samples/grid/griddemo.cpp	2004/02/21 14:34:19
@@ -973,17 +973,14 @@
 // possible to alter the appearance of the cell beyond what the attributes
 // allow
 void MyGridCellRenderer::Draw(wxGrid& grid,
-                              wxGridCellAttr& attr,
-                              wxDC& dc,
-                              const wxRect& rect,
-                              int row, int col,
-                              bool isSelected)
+                             wxGridCellRenderContext& cntxt)
 {
-    wxGridCellStringRenderer::Draw(grid, attr, dc, rect, row, col, isSelected);
+    wxGridCellStringRenderer::Draw(grid, cntxt);
 
+    wxDC& dc=cntxt.GetDC();
     dc.SetPen(*wxGREEN_PEN);
     dc.SetBrush(*wxTRANSPARENT_BRUSH);
-    dc.DrawEllipse(rect);
+    dc.DrawEllipse(cntxt.GetCellRect());
 }
 
 // ----------------------------------------------------------------------------
Index: samples/grid/griddemo.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/samples/grid/griddemo.h,v
retrieving revision 1.2
diff -u -r1.2 griddemo.h
--- samples/grid/griddemo.h	2003/05/13 15:16:54	1.2
+++ samples/grid/griddemo.h	2004/02/21 14:34:19
@@ -159,12 +159,7 @@
 class MyGridCellRenderer : public wxGridCellStringRenderer
 {
 public:
-    virtual void Draw(wxGrid& grid,
-                      wxGridCellAttr& attr,
-                      wxDC& dc,
-                      const wxRect& rect,
-                      int row, int col,
-                      bool isSelected);
+    virtual void Draw(wxGrid& grid, wxGridCellRenderContext& cntxt);
 };
 
 // ----------------------------------------------------------------------------

 	  	 

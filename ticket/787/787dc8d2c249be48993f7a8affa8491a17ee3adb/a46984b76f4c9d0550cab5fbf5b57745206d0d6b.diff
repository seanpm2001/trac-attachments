Index: src/msw/evtloop.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/msw/evtloop.cpp,v
retrieving revision 1.15
diff -b -u -2 -r1.15 evtloop.cpp
--- src/msw/evtloop.cpp	2003/09/26 12:38:49	1.15
+++ src/msw/evtloop.cpp	2003/10/07 10:15:02
@@ -73,4 +73,11 @@
     int GetExitCode() const { return m_exitcode; }
 
+    enum wxCatchAllResponse {
+        catch_continue,
+        catch_exit,
+        catch_rethrow
+    };
+    wxCatchAllResponse OnCatchAll();
+
 private:
     // preprocess a message, return TRUE if processed (i.e. no further
@@ -210,4 +217,23 @@
 }
 
+// ----------------------------------------------------------------------------
+// wxEventLoopImpl exception handling
+// ----------------------------------------------------------------------------
+
+wxEventLoopImpl::wxCatchAllResponse wxEventLoopImpl::OnCatchAll()
+{
+    switch (::MessageBox(NULL, 
+            "An unhandled exception occurred. 'Abort' will terminate the program,\r\n"
+            "'Retry' will close the current dialog, 'Ignore' will try to continue.", 
+            "Unhandled exception...", 
+            MB_ABORTRETRYIGNORE|MB_ICONERROR|MB_TASKMODAL))
+    {
+        case IDABORT: return catch_rethrow;
+        case IDRETRY: return catch_exit;
+        case IDIGNORE: return catch_continue;
+    }
+    return catch_rethrow;
+}
+
 // ============================================================================
 // wxEventLoop implementation
@@ -246,11 +272,16 @@
     // wxModalEventLoop depends on this (so we can't just use ON_BLOCK_EXIT or
     // something similar here)
+#if wxUSE_EXCEPTIONS
+    bool retryAfterException;
+    do {
+        retryAfterException=false;
+#endif
     wxTRY
     {
         for ( ;; )
         {
-#if wxUSE_THREADS
+    #if wxUSE_THREADS
             wxMutexGuiLeaveOrEnter();
-#endif // wxUSE_THREADS
+    #endif // wxUSE_THREADS
 
             // generate and process idle events for as long as we don't have
@@ -267,6 +298,26 @@
             }
         }
+        }
+        wxCATCH_ALL( 
+            switch (m_impl->OnCatchAll()) {
+                case wxEventLoopImpl::catch_continue:
+                    retryAfterException=true;
+                    break;
+                case wxEventLoopImpl::catch_exit:
+                    OnExit();
+                    break;
+                case wxEventLoopImpl::catch_rethrow:
+                    OnExit();
+                    // should be replaced with wx macro, but
+                    // there is none yet. OTOH, wxCATCH_ALL isn't
+                    // expanded unless wxUSE_EXCEPTIONS, so its
+                    // safe to use throw here.
+                    throw;  
+                    break;
     }
-    wxCATCH_ALL( OnExit(); )
+        )
+#if wxUSE_EXCEPTIONS
+    } while (retryAfterException);
+#endif
 
     return m_impl->GetExitCode();

 	  	 

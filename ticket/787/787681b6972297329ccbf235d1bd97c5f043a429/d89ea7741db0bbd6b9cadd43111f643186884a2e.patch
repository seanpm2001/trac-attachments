? build/msw/wx_net.sln
? build/msw/wx_net.suo
? build/msw/wx_net.vcproj
Index: docs/latex/wx/socket.tex
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWidgets/docs/latex/wx/socket.tex,v
retrieving revision 1.37
diff -u -r1.37 socket.tex
--- docs/latex/wx/socket.tex	2004/05/04 08:25:47	1.37
+++ docs/latex/wx/socket.tex	2004/07/16 17:30:09
@@ -586,6 +586,7 @@
 \twocolitem{{\bf wxSOCKET\_NOWAIT}}{Read/write as much data as possible and return immediately.}
 \twocolitem{{\bf wxSOCKET\_WAITALL}}{Wait for all required data to be read/written unless an error occurs.}
 \twocolitem{{\bf wxSOCKET\_BLOCK}}{Block the GUI (do not yield) while reading/writing data.}
+\twocolitem{{\bf wxSOCKET\_REUSEADDR}}{Allows the use of an in-use port (wxServerSocket only)}
 \end{twocollist}
 
 A brief overview on how to use these flags follows.
@@ -619,6 +620,13 @@
 completes. If it is not used, then the application must take extra
 care to avoid unwanted reentrance.
 
+The {\bf wxSOCKET\_REUSEADDR} flag controls the use of the SO_REUSEADDR standard
+setsockopt() flag. This flag allows the socket to bind to a port that is already in use.
+This is mostly used on UNIX-based systems to allow rapid starting and stopping of a server - 
+otherwise you may have to wait several minutes for the port to become available.
+This option can have suprising platform dependent behavior, check the documentation for
+your platforms implementation of setsockopt().
+
 So:
 
 {\bf wxSOCKET\_NONE} will try to read at least SOME data, no matter how much.
@@ -631,6 +639,8 @@
 
 {\bf wxSOCKET\_BLOCK} has nothing to do with the previous flags and
 it controls whether the GUI blocks.
+
+(\bf wxSOCKET\_REUSEADDR} controls special platform-specific behavior for wxServerSocket.
 
 %
 % SetNotify
Index: include/wx/gsocket.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWidgets/include/wx/gsocket.h,v
retrieving revision 1.33
diff -u -r1.33 gsocket.h
--- include/wx/gsocket.h	2004/03/09 22:48:48	1.33
+++ include/wx/gsocket.h	2004/07/16 17:16:56
@@ -234,6 +234,15 @@
  */
 GSocketError GSocket_Connect(GSocket *socket, GSocketStream stream);
 
+/* GSocket_SetReusable:
+*  Simply sets the m_resuable flag on the socket. GSocket_SetServer will
+*  make the appropriate setsockopt() call.
+*  Implemented as a GSocket function because clients (ie, wxSocketServer)
+*  don't have access to the GSocket struct information.
+*  Returns TRUE if the flag was set correctly, FALSE if an error occured
+*  (ie, if the parameter was NULL)
+*/
+BOOL GSocket_SetReusable(GSocket *socket);
 
 /* Datagram sockets */
 
Index: include/wx/socket.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWidgets/include/wx/socket.h,v
retrieving revision 1.58
diff -u -r1.58 socket.h
--- include/wx/socket.h	2004/05/23 20:50:24	1.58
+++ include/wx/socket.h	2004/07/16 14:29:33
@@ -80,7 +80,8 @@
   wxSOCKET_NONE = 0,
   wxSOCKET_NOWAIT = 1,
   wxSOCKET_WAITALL = 2,
-  wxSOCKET_BLOCK = 4
+  wxSOCKET_BLOCK = 4,
+  wxSOCKET_REUSEADDR = 8
 };
 
 enum wxSocketType
Index: include/wx/msw/gsockmsw.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWidgets/include/wx/msw/gsockmsw.h,v
retrieving revision 1.13
diff -u -r1.13 gsockmsw.h
--- include/wx/msw/gsockmsw.h	2003/08/07 12:24:14	1.13
+++ include/wx/msw/gsockmsw.h	2004/07/16 14:23:03
@@ -50,6 +50,7 @@
   int m_stream;
   int m_oriented;
   int m_establishing;
+  int m_reusable;
   struct timeval m_timeout;
 
   /* Callbacks */
Index: src/common/socket.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWidgets/src/common/socket.cpp,v
retrieving revision 1.122
diff -u -r1.122 socket.cpp
--- src/common/socket.cpp	2004/05/23 20:52:04	1.122
+++ src/common/socket.cpp	2004/07/16 17:14:50
@@ -1053,6 +1053,11 @@
         // Setup the socket as server
 
     GSocket_SetLocal(m_socket, addr_man.GetAddress());
+    
+    if (GetFlags() & wxSOCKET_REUSEADDR) {
+        GSocket_SetReusable(m_socket);
+    }
+
     if (GSocket_SetServer(m_socket) != GSOCK_NOERROR)
     {
         GSocket_destroy(m_socket);
Index: src/msw/gsocket.c
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWidgets/src/msw/gsocket.c,v
retrieving revision 1.58
diff -u -r1.58 gsocket.c
--- src/msw/gsocket.c	2004/06/18 09:48:11	1.58
+++ src/msw/gsocket.c	2004/07/16 17:15:20
@@ -160,6 +160,7 @@
   socket->m_timeout.tv_sec  = 10 * 60;  /* 10 minutes */
   socket->m_timeout.tv_usec = 0;
   socket->m_establishing    = FALSE;
+  socket->m_reusable        = FALSE;
 
   /* Per-socket GUI-specific initialization */
   success = _GSocket_GUI_Init_Socket(socket);
@@ -392,7 +393,9 @@
   /* allow a socket to re-bind if the socket is in the TIME_WAIT
      state after being previously closed.
    */
-  setsockopt(sck->m_fd, SOL_SOCKET, SO_REUSEADDR, (const char*)&arg, sizeof(u_long));
+  if (sck->m_reusable) {
+    setsockopt(sck->m_fd, SOL_SOCKET, SO_REUSEADDR, (const char*)&arg, sizeof(u_long));
+  }
 
   /* Bind to the local address,
    * retrieve the actual address bound,
@@ -502,6 +505,23 @@
   return connection;
 }
 
+/* GSocket_SetReusable:
+*  Simply sets the m_resuable flag on the socket. GSocket_SetServer will
+*  make the appropriate setsockopt() call.
+*  Implemented as a GSocket function because clients (ie, wxSocketServer)
+*  don't have access to the GSocket struct information.
+*  Returns TRUE if the flag was set correctly, FALSE if an error occured
+*  (ie, if the parameter was NULL)
+*/
+BOOL GSocket_SetReusable(GSocket *socket)
+{  
+    /* socket must not be null, and must not be in use/already bound */
+    if (NULL != socket && socket->m_fd == INVALID_SOCKET) {
+        socket->m_reusable = TRUE;
+        return TRUE;
+    }
+    return FALSE;
+}
 /* Client specific parts */
 
 /* GSocket_Connect:

 	  	 

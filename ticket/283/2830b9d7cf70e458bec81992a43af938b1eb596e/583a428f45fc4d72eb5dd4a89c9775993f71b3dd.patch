diff -bru wxWidgets/include/wx/msw/choice.h /mnt/win7/wxWidgets.3113/include/wx/msw/choice.h
--- wxWidgets/include/wx/msw/choice.h	2011-12-20 23:37:25.000000000 -0800
+++ /mnt/win7/wxWidgets.3113/include/wx/msw/choice.h	2011-12-29 15:43:21.094954200 -0800
@@ -91,9 +91,10 @@
     virtual WXHBRUSH MSWControlColor(WXHDC hDC, WXHWND hWnd);
     virtual bool MSWShouldPreProcessMessage(WXMSG *pMsg);
     virtual WXDWORD MSWGetStyle(long style, WXDWORD *exstyle) const;
-
+    virtual bool Show(bool show = true);
     // returns true if the platform should explicitly apply a theme border
     virtual bool CanApplyThemeBorder() const { return false; }
+    void MSWDoPopupOrDismiss(bool show);
 
 protected:
     // choose the default border for this window
diff -bru wxWidgets/include/wx/msw/combobox.h /mnt/win7/wxWidgets.3113/include/wx/msw/combobox.h
--- wxWidgets/include/wx/msw/combobox.h	2011-12-20 23:37:25.000000000 -0800
+++ /mnt/win7/wxWidgets.3113/include/wx/msw/combobox.h	2011-12-29 15:43:21.029950500 -0800
@@ -130,7 +130,6 @@
 #if wxUSE_TOOLTIPS
     virtual void DoSetToolTip(wxToolTip *tip);
 #endif
-    void MSWDoPopupOrDismiss(bool show);
 
     // this is the implementation of GetEditHWND() which can also be used when
     // we don't have the edit control, it simply returns NULL then
diff -bru wxWidgets/src/msw/choice.cpp /mnt/win7/wxWidgets.3113/src/msw/choice.cpp
--- wxWidgets/src/msw/choice.cpp	2011-12-20 23:36:02.000000000 -0800
+++ /mnt/win7/wxWidgets.3113/src/msw/choice.cpp	2011-12-29 15:43:21.061952300 -0800
@@ -759,6 +759,36 @@
     return true;
 }
 
+void wxChoice::MSWDoPopupOrDismiss(bool show)
+{
+    wxASSERT_MSG( !HasFlag(wxCB_SIMPLE),
+                  wxT("can't popup/dismiss the list for simple combo box") );
+
+    // we *must* set focus to the combobox before showing or hiding the drop
+    // down as without this we get WM_LBUTTONDOWN messages with invalid HWND
+    // when hiding it (whether programmatically or manually) resulting in a
+    // crash when we pass them to IsDialogMessage()
+    //
+    // this can be seen in the combo page of the widgets sample under Windows 7
+    SetFocus();
+
+    ::SendMessage(GetHwnd(), CB_SHOWDROPDOWN, show, 0);
+}
+
+bool wxChoice::Show(bool show)
+{
+	if( !wxWindowMSW::Show( show ) )
+		return false;
+	if( !show )
+	{
+        if( ::SendMessage( GetHwndOf( this ), CB_GETDROPPEDSTATE, 0, 0 ) )
+        {
+			MSWDoPopupOrDismiss( show );
+        }
+	}
+	return true;
+}
+
 WXHBRUSH wxChoice::MSWControlColor(WXHDC hDC, WXHWND hWnd)
 {
     if ( !IsEnabled() )
diff -bru wxWidgets/src/msw/combobox.cpp /mnt/win7/wxWidgets.3113/src/msw/combobox.cpp
--- wxWidgets/src/msw/combobox.cpp	2011-12-20 23:36:02.000000000 -0800
+++ /mnt/win7/wxWidgets.3113/src/msw/combobox.cpp	2011-12-29 15:43:21.131956300 -0800
@@ -642,22 +642,6 @@
     event.Enable(IsEditable() && !wxTextEntry::IsEmpty());
 }
 
-void wxComboBox::MSWDoPopupOrDismiss(bool show)
-{
-    wxASSERT_MSG( !HasFlag(wxCB_SIMPLE),
-                  wxT("can't popup/dismiss the list for simple combo box") );
-
-    // we *must* set focus to the combobox before showing or hiding the drop
-    // down as without this we get WM_LBUTTONDOWN messages with invalid HWND
-    // when hiding it (whether programmatically or manually) resulting in a
-    // crash when we pass them to IsDialogMessage()
-    //
-    // this can be seen in the combo page of the widgets sample under Windows 7
-    SetFocus();
-
-    ::SendMessage(GetHwnd(), CB_SHOWDROPDOWN, show, 0);
-}
-
 #if wxUSE_TOOLTIPS
 
 void wxComboBox::DoSetToolTip(wxToolTip *tip)

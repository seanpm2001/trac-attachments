Index: configure.in
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/configure.in,v
retrieving revision 1.1238
diff -u2 -r1.1238 configure.in
--- configure.in
+++ configure.in
@@ -3159,43 +3159,68 @@
                            [#include <gtk/gtk.h>])
 
-            dnl test if we have at least GTK+ 2.6:
-            AC_MSG_CHECKING([if GTK+ is version >= 2.6])
+
+            dnl test if we have at least GTK+ 2.10:
+            AC_MSG_CHECKING([if GTK+ is version >= 2.10])
             AC_TRY_COMPILE([
                             #include <gtk/gtk.h>
                            ],
                            [
-                            #if !GTK_CHECK_VERSION(2,6,0)
-                            Not GTK+ 2.6
+                            #if !GTK_CHECK_VERSION(2,10,0)
+                            Not GTK+ 2.10
                             #endif
                            ],
                            [
+                            AC_DEFINE(__WXGTK210__)
                             AC_DEFINE(__WXGTK26__)
                             AC_DEFINE(__WXGTK24__)
                             AC_MSG_RESULT([yes])
-                            ac_wxgtk26=1
+                            ac_wxgtk210=1
                            ],
                            [
                             AC_MSG_RESULT([no])
-                            ac_wxgtk26=0
+                            ac_wxgtk210=0
                            ])
 
+            if test "$ac_wxgtk210" = 0; then
+                dnl test if we have at least GTK+ 2.6:
+                AC_MSG_CHECKING([if GTK+ is version >= 2.6])
+                AC_TRY_COMPILE([
+                                #include <gtk/gtk.h>
+                            ],
+                            [
+                                #if !GTK_CHECK_VERSION(2,6,0)
+                                Not GTK+ 2.6
+                                #endif
+                            ],
+                            [
+                                AC_DEFINE(__WXGTK26__)
+                                AC_DEFINE(__WXGTK24__)
+                                AC_MSG_RESULT([yes])
+                                ac_wxgtk26=1
+                            ],
+                            [
+                                AC_MSG_RESULT([no])
+                                ac_wxgtk26=0
+                            ])
+            fi
+
             if test "$ac_wxgtk26" = 0; then
-            dnl test if we have at least GTK+ 2.4:
-            AC_MSG_CHECKING([if GTK+ is version >= 2.4])
-            AC_TRY_COMPILE([
-                            #include <gtk/gtk.h>
-                           ],
-                           [
-                            #if !GTK_CHECK_VERSION(2,4,0)
-                            Not GTK+ 2.4
-                            #endif
-                           ],
-                           [
-                            AC_DEFINE(__WXGTK24__)
-                            AC_MSG_RESULT([yes])
-                           ],
-                           [
-                            AC_MSG_RESULT([no])
-                           ])
+                dnl test if we have at least GTK+ 2.4:
+                AC_MSG_CHECKING([if GTK+ is version >= 2.4])
+                AC_TRY_COMPILE([
+                                #include <gtk/gtk.h>
+                            ],
+                            [
+                                #if !GTK_CHECK_VERSION(2,4,0)
+                                Not GTK+ 2.4
+                                #endif
+                            ],
+                            [
+                                AC_DEFINE(__WXGTK24__)
+                                AC_MSG_RESULT([yes])
+                            ],
+                            [
+                                AC_MSG_RESULT([no])
+                            ])
             fi
 
Index: build/bakefiles/files.bkl
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/build/bakefiles/files.bkl,v
retrieving revision 1.417
diff -u2 -r1.417 build/bakefiles/files.bkl
--- build/bakefiles/files.bkl
+++ build/bakefiles/files.bkl
@@ -2658,4 +2658,5 @@
     src/common/animatecmn.cpp
     src/common/datavcmn.cpp
+    src/common/hyperlnkcmn.cpp
     src/generic/aboutdlgg.cpp
     src/generic/animateg.cpp
@@ -2668,5 +2669,5 @@
     src/generic/gridsel.cpp
     src/generic/helpext.cpp
-    src/generic/hyperlink.cpp
+    src/generic/hyperlinkg.cpp
     src/generic/laywin.cpp
     src/generic/odcombo.cpp
@@ -2697,4 +2698,5 @@
     wx/generic/gridsel.h
     wx/generic/helpext.h
+    wx/generic/hyperlink.h
     wx/generic/laywin.h
     wx/generic/propdlg.h
@@ -2799,4 +2801,5 @@
     src/gtk/animate.cpp
     src/gtk/dataview.cpp
+    src/gtk/hyperlink.cpp
     src/gtk/taskbar.cpp
     src/gtk/eggtrayicon.c
@@ -2804,4 +2807,5 @@
 <set var="ADVANCED_GTK_HDR" hints="files">
     wx/gtk/animate.h
+    wx/gtk/hyperlink.h
 </set>
 
Index: include/wx/hyperlink.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/hyperlink.h,v
retrieving revision 1.7
diff -u2 -r1.7 include/wx/hyperlink.h
--- include/wx/hyperlink.h
+++ include/wx/hyperlink.h
@@ -46,122 +46,39 @@
 //
 // Use the EVT_HYPERLINK() to catch link events.
-class WXDLLIMPEXP_ADV wxHyperlinkCtrl : public wxControl
+class WXDLLIMPEXP_ADV wxHyperlinkCtrlBase : public wxControl
 {
 public:
-    // Default constructor (for two-step construction).
-    wxHyperlinkCtrl() { }
-
-    // Constructor.
-    wxHyperlinkCtrl(wxWindow *parent,
-                    wxWindowID id,
-                    const wxString& label, const wxString& url,
-                    const wxPoint& pos = wxDefaultPosition,
-                    const wxSize& size = wxDefaultSize,
-                    long style = wxHL_DEFAULT_STYLE,
-                    const wxString& name = wxHyperlinkCtrlNameStr)
-    {
-        (void)Create(parent, id, label, url, pos, size, style, name);
-    }
-
-    // Creation function (for two-step construction).
-    bool Create(wxWindow *parent,
-                wxWindowID id,
-                const wxString& label, const wxString& url,
-                const wxPoint& pos = wxDefaultPosition,
-                const wxSize& size = wxDefaultSize,
-                long style = wxHL_DEFAULT_STYLE,
-                const wxString& name = wxHyperlinkCtrlNameStr);
-
 
     // get/set
-    wxColour GetHoverColour() const { return m_hoverColour; }
-    void SetHoverColour(const wxColour &colour) { m_hoverColour = colour; }
+    virtual wxColour GetHoverColour() const = 0;
+    virtual void SetHoverColour(const wxColour &colour) = 0;
 
-    wxColour GetNormalColour() const { return m_normalColour; }
-    void SetNormalColour(const wxColour &colour);
+    virtual wxColour GetNormalColour() const = 0;
+    virtual void SetNormalColour(const wxColour &colour) = 0;
 
-    wxColour GetVisitedColour() const { return m_visitedColour; }
-    void SetVisitedColour(const wxColour &colour);
+    virtual wxColour GetVisitedColour() const = 0;
+    virtual void SetVisitedColour(const wxColour &colour) = 0;
 
-    wxString GetURL() const { return m_url; }
-    void SetURL (const wxString &url) { m_url=url; }
+    virtual wxString GetURL() const = 0;
+    virtual void SetURL (const wxString &url) = 0;
 
-    void SetVisited(bool visited = true) { m_visited=visited; }
-    bool GetVisited() const { return m_visited; }
+    virtual void SetVisited(bool visited = true) = 0;
+    virtual bool GetVisited() const = 0;
 
     // NOTE: also wxWindow::Set/GetLabel, wxWindow::Set/GetBackgroundColour,
     //       wxWindow::Get/SetFont, wxWindow::Get/SetCursor are important !
 
-
 protected:
-    // event handlers
-
-    // Renders the hyperlink.
-    void OnPaint(wxPaintEvent& event);
-
-    // Returns the wxRect of the label of this hyperlink.
-    // This is different from the clientsize's rectangle when
-    // clientsize != bestsize and this rectangle is influenced
-    // by the alignment of the label (wxHL_ALIGN_*).
-    wxRect GetLabelRect() const;
-
-    // If the click originates inside the bounding box of the label,
-    // a flag is set so that an event will be fired when the left
-    // button is released.
-    void OnLeftDown(wxMouseEvent& event);
-
-    // If the click both originated and finished inside the bounding box
-    // of the label, a HyperlinkEvent is fired.
-    void OnLeftUp(wxMouseEvent& event);
-    void OnRightUp(wxMouseEvent& event);
-
-    // Changes the cursor to a hand, if the mouse is inside the label's
-    // bounding box.
-    void OnMotion(wxMouseEvent& event);
-
-    // Changes the cursor back to the default, if necessary.
-    void OnLeaveWindow(wxMouseEvent& event);
-
-    // handles "Copy URL" menuitem
-    void OnPopUpCopy(wxCommandEvent& event);
-
-    // Refreshes the control to update label's position if necessary
-    void OnSize(wxSizeEvent& event);
-
-
-    // overridden base class virtuals
-
-    // Returns the best size for the window, which is the size needed
-    // to display the text label.
-    virtual wxSize DoGetBestSize() const;
-
-    // creates a context menu with "Copy URL" menuitem
-    virtual void DoContextMenu(const wxPoint &);
-
-private:
-    // URL associated with the link. This is transmitted inside
-    // the HyperlinkEvent fired when the user clicks on the label.
-    wxString m_url;
-
-    // Foreground colours for various link types.
-    // NOTE: wxWindow::m_backgroundColour is used for background,
-    //       wxWindow::m_foregroundColour is used to render non-visited links
-    wxColour m_hoverColour;
-    wxColour m_normalColour;
-    wxColour m_visitedColour;
-
-    // True if the mouse cursor is inside the label's bounding box.
-    bool m_rollover;
-
-    // True if the link has been clicked before.
-    bool m_visited;
-
-    // True if a click is in progress (left button down) and the click
-    // originated inside the label's bounding box.
-    bool m_clicking;
+#ifdef __WXDEBUG__
+    // checks for validity some of the ctor/Create() function parameters
+    void CheckParams(const wxString& label, const wxString& url, long style);
+#else
+    void CheckParams() {}
+#endif
 
-private:
-    DECLARE_DYNAMIC_CLASS(wxHyperlinkCtrl)
-    DECLARE_EVENT_TABLE()
+public:
+    // not part of the public API but needs to be public as used by
+    // GTK+ callbacks:
+    void SendEvent();
 };
 
@@ -227,4 +144,13 @@
 
 
+
+#if defined(__WXGTK210__)
+    #include "wx/gtk/hyperlink.h"
+#else
+    #include "wx/generic/hyperlink.h"
+    #define wxHyperlinkCtrl     wxGenericHyperlinkCtrl
+#endif
+
+
 #endif // wxUSE_HYPERLINKCTRL
 
Index: include/wx/generic/hyperlink.h
--- /dev/null
+++ include/wx/generic/hyperlink.h
@@ -0,0 +1,142 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        wx/generic/hyperlink.h
+// Purpose:     Hyperlink control
+// Author:      David Norris <danorris@gmail.com>, Otto Wyss
+// Modified by: Ryan Norton, Francesco Montorsi
+// Created:     04/02/2005
+// RCS-ID:      $Id: hyperlink.h,v 1.7 2006/10/25 20:23:06 RD Exp $
+// Copyright:   (c) 2005 David Norris
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+#ifndef __GENERICHYPERLINKCTRLH__
+#define __GENERICHYPERLINKCTRLH__
+
+#include "wx/defs.h"
+#include "wx/control.h"
+
+
+// ----------------------------------------------------------------------------
+// wxGenericHyperlinkCtrl
+// ----------------------------------------------------------------------------
+
+class WXDLLIMPEXP_ADV wxGenericHyperlinkCtrl : public wxHyperlinkCtrlBase
+{
+public:
+    // Default constructor (for two-step construction).
+    wxGenericHyperlinkCtrl() { }
+
+    // Constructor.
+    wxGenericHyperlinkCtrl(wxWindow *parent,
+                            wxWindowID id,
+                            const wxString& label, const wxString& url,
+                            const wxPoint& pos = wxDefaultPosition,
+                            const wxSize& size = wxDefaultSize,
+                            long style = wxHL_DEFAULT_STYLE,
+                            const wxString& name = wxHyperlinkCtrlNameStr)
+    {
+        (void)Create(parent, id, label, url, pos, size, style, name);
+    }
+
+    // Creation function (for two-step construction).
+    bool Create(wxWindow *parent,
+                wxWindowID id,
+                const wxString& label, const wxString& url,
+                const wxPoint& pos = wxDefaultPosition,
+                const wxSize& size = wxDefaultSize,
+                long style = wxHL_DEFAULT_STYLE,
+                const wxString& name = wxHyperlinkCtrlNameStr);
+
+
+    // get/set
+    wxColour GetHoverColour() const { return m_hoverColour; }
+    void SetHoverColour(const wxColour &colour) { m_hoverColour = colour; }
+
+    wxColour GetNormalColour() const { return m_normalColour; }
+    void SetNormalColour(const wxColour &colour);
+
+    wxColour GetVisitedColour() const { return m_visitedColour; }
+    void SetVisitedColour(const wxColour &colour);
+
+    wxString GetURL() const { return m_url; }
+    void SetURL (const wxString &url) { m_url=url; }
+
+    void SetVisited(bool visited = true) { m_visited=visited; }
+    bool GetVisited() const { return m_visited; }
+
+    // NOTE: also wxWindow::Set/GetLabel, wxWindow::Set/GetBackgroundColour,
+    //       wxWindow::Get/SetFont, wxWindow::Get/SetCursor are important !
+
+
+protected:
+    // event handlers
+
+    // Renders the hyperlink.
+    void OnPaint(wxPaintEvent& event);
+
+    // Returns the wxRect of the label of this hyperlink.
+    // This is different from the clientsize's rectangle when
+    // clientsize != bestsize and this rectangle is influenced
+    // by the alignment of the label (wxHL_ALIGN_*).
+    wxRect GetLabelRect() const;
+
+    // If the click originates inside the bounding box of the label,
+    // a flag is set so that an event will be fired when the left
+    // button is released.
+    void OnLeftDown(wxMouseEvent& event);
+
+    // If the click both originated and finished inside the bounding box
+    // of the label, a HyperlinkEvent is fired.
+    void OnLeftUp(wxMouseEvent& event);
+    void OnRightUp(wxMouseEvent& event);
+
+    // Changes the cursor to a hand, if the mouse is inside the label's
+    // bounding box.
+    void OnMotion(wxMouseEvent& event);
+
+    // Changes the cursor back to the default, if necessary.
+    void OnLeaveWindow(wxMouseEvent& event);
+
+    // handles "Copy URL" menuitem
+    void OnPopUpCopy(wxCommandEvent& event);
+
+    // Refreshes the control to update label's position if necessary
+    void OnSize(wxSizeEvent& event);
+
+
+    // overridden base class virtuals
+
+    // Returns the best size for the window, which is the size needed
+    // to display the text label.
+    virtual wxSize DoGetBestSize() const;
+
+    // creates a context menu with "Copy URL" menuitem
+    virtual void DoContextMenu(const wxPoint &);
+
+private:
+    // URL associated with the link. This is transmitted inside
+    // the HyperlinkEvent fired when the user clicks on the label.
+    wxString m_url;
+
+    // Foreground colours for various link types.
+    // NOTE: wxWindow::m_backgroundColour is used for background,
+    //       wxWindow::m_foregroundColour is used to render non-visited links
+    wxColour m_hoverColour;
+    wxColour m_normalColour;
+    wxColour m_visitedColour;
+
+    // True if the mouse cursor is inside the label's bounding box.
+    bool m_rollover;
+
+    // True if the link has been clicked before.
+    bool m_visited;
+
+    // True if a click is in progress (left button down) and the click
+    // originated inside the label's bounding box.
+    bool m_clicking;
+
+private:
+    DECLARE_DYNAMIC_CLASS(wxGenericHyperlinkCtrl)
+};
+
+#endif // __GENERICHYPERLINKCTRLH__
Index: include/wx/gtk/hyperlink.h
--- /dev/null
+++ include/wx/gtk/hyperlink.h
@@ -0,0 +1,77 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        wx/gtk/hyperlink.h
+// Purpose:     Hyperlink control
+// Author:      Francesco Montorsi
+// Modified by:
+// Created:     14/2/2007
+// RCS-ID:      $Id$
+// Copyright:   (c) 2007 Francesco Montorsi
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+#ifndef __GTKHYPERLINKCTRLH__
+#define __GTKHYPERLINKCTRLH__
+
+#include "wx/generic/hyperlink.h"
+
+// ----------------------------------------------------------------------------
+// wxHyperlinkCtrl
+// ----------------------------------------------------------------------------
+
+class WXDLLIMPEXP_ADV wxHyperlinkCtrl : public wxGenericHyperlinkCtrl
+{
+public:
+    // Default constructor (for two-step construction).
+    wxHyperlinkCtrl() { }
+
+    // Constructor.
+    wxHyperlinkCtrl(wxWindow *parent,
+                    wxWindowID id,
+                    const wxString& label, const wxString& url,
+                    const wxPoint& pos = wxDefaultPosition,
+                    const wxSize& size = wxDefaultSize,
+                    long style = wxHL_DEFAULT_STYLE,
+                    const wxString& name = wxHyperlinkCtrlNameStr)
+    {
+        (void)Create(parent, id, label, url, pos, size, style, name);
+    }
+
+    // Creation function (for two-step construction).
+    bool Create(wxWindow *parent,
+                wxWindowID id,
+                const wxString& label, const wxString& url,
+                const wxPoint& pos = wxDefaultPosition,
+                const wxSize& size = wxDefaultSize,
+                long style = wxHL_DEFAULT_STYLE,
+                const wxString& name = wxHyperlinkCtrlNameStr);
+
+
+    // get/set
+    virtual wxColour GetHoverColour() const;
+    virtual void SetHoverColour(const wxColour &colour);
+
+    virtual wxColour GetNormalColour() const;
+    virtual void SetNormalColour(const wxColour &colour);
+
+    virtual wxColour GetVisitedColour() const;
+    virtual void SetVisitedColour(const wxColour &colour);
+
+    virtual wxString GetURL() const;
+    virtual void SetURL(const wxString &url);
+
+    virtual void SetLabel(const wxString &label);
+
+protected:
+    // overridden base class virtuals
+
+    // Returns the best size for the window, which is the size needed
+    // to display the text label.
+    virtual wxSize DoGetBestSize() const;
+
+    virtual GdkWindow *GTKGetWindow(wxArrayGdkWindows& windows) const;
+
+private:
+    DECLARE_DYNAMIC_CLASS(wxHyperlinkCtrl)
+};
+
+#endif // __GTKHYPERLINKCTRLH__
Index: src/common/hyperlnkcmn.cpp
--- /dev/null
+++ src/common/hyperlnkcmn.cpp
@@ -0,0 +1,77 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        src/common/hyperlnkcmn.cpp
+// Purpose:     Hyperlink control
+// Author:      David Norris <danorris@gmail.com>, Otto Wyss
+// Modified by: Ryan Norton, Francesco Montorsi
+// Created:     04/02/2005
+// RCS-ID:      $Id: hyperlink.cpp,v 1.13 2006/10/31 08:49:56 RD Exp $
+// Copyright:   (c) 2005 David Norris
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+// ============================================================================
+// declarations
+// ============================================================================
+
+//---------------------------------------------------------------------------
+// Pre-compiled header stuff
+//---------------------------------------------------------------------------
+
+// For compilers that support precompilation, includes "wx.h".
+#include "wx/wxprec.h"
+
+#ifdef __BORLANDC__
+    #pragma hdrstop
+#endif
+
+#if wxUSE_HYPERLINKCTRL
+
+//---------------------------------------------------------------------------
+// Includes
+//---------------------------------------------------------------------------
+
+#include "wx/hyperlink.h"
+
+#ifndef WX_PRECOMP
+    #include "wx/menu.h"
+    #include "wx/log.h"
+    #include "wx/dataobj.h"
+#endif
+
+// ============================================================================
+// implementation
+// ============================================================================
+
+IMPLEMENT_DYNAMIC_CLASS(wxHyperlinkEvent, wxCommandEvent)
+DEFINE_EVENT_TYPE(wxEVT_COMMAND_HYPERLINK)
+
+const wxChar wxHyperlinkCtrlNameStr[] = wxT("hyperlink");
+
+// ----------------------------------------------------------------------------
+// wxHyperlinkCtrlBase
+// ----------------------------------------------------------------------------
+
+#ifdef __WXDEBUG__
+void wxHyperlinkCtrlBase::CheckParams(const wxString& label, const wxString& url, long style)
+{
+    wxASSERT_MSG(!url.empty() || !label.empty(),
+                 wxT("Both URL and label are empty ?"));
+
+    int alignment = (int)((style & wxHL_ALIGN_LEFT) != 0) +
+                    (int)((style & wxHL_ALIGN_CENTRE) != 0) +
+                    (int)((style & wxHL_ALIGN_RIGHT) != 0);
+    wxASSERT_MSG(alignment == 1,
+        wxT("Specify exactly one align flag!"));
+}
+#endif
+
+void wxHyperlinkCtrlBase::SendEvent()
+{
+    wxString url = GetURL();
+    wxHyperlinkEvent linkEvent(this, GetId(), url);
+    if (!GetEventHandler()->ProcessEvent(linkEvent))     // was the event skipped ?
+        if (!wxLaunchDefaultBrowser(url))
+            wxLogWarning(wxT("Could not launch the default browser with url '%s' !"), url.c_str());
+}
+
+#endif // wxUSE_HYPERLINKCTRL
File src/generic/hyperlink.cpp should be removed!
Index: src/generic/hyperlinkg.cpp
--- /dev/null
+++ src/generic/hyperlinkg.cpp
@@ -0,0 +1,269 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        src/generic/hyperlinkg.cpp
+// Purpose:     Hyperlink control
+// Author:      David Norris <danorris@gmail.com>, Otto Wyss
+// Modified by: Ryan Norton, Francesco Montorsi
+// Created:     04/02/2005
+// RCS-ID:      $Id: hyperlink.cpp,v 1.13 2006/10/31 08:49:56 RD Exp $
+// Copyright:   (c) 2005 David Norris
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+// ============================================================================
+// declarations
+// ============================================================================
+
+//---------------------------------------------------------------------------
+// Pre-compiled header stuff
+//---------------------------------------------------------------------------
+
+// For compilers that support precompilation, includes "wx.h".
+#include "wx/wxprec.h"
+
+#ifdef __BORLANDC__
+    #pragma hdrstop
+#endif
+
+#if wxUSE_HYPERLINKCTRL
+
+//---------------------------------------------------------------------------
+// Includes
+//---------------------------------------------------------------------------
+
+#include "wx/hyperlink.h"
+
+#ifndef WX_PRECOMP
+    #include "wx/utils.h" // for wxLaunchDefaultBrowser
+    #include "wx/dcclient.h"
+    #include "wx/menu.h"
+    #include "wx/log.h"
+    #include "wx/dataobj.h"
+#endif
+
+#include "wx/clipbrd.h"
+
+// ============================================================================
+// implementation
+// ============================================================================
+
+IMPLEMENT_DYNAMIC_CLASS(wxGenericHyperlinkCtrl, wxControl)
+
+// reserved for internal use only
+#define wxHYPERLINK_POPUP_COPY_ID           16384
+
+// ----------------------------------------------------------------------------
+// wxGenericHyperlinkCtrl
+// ----------------------------------------------------------------------------
+
+bool wxGenericHyperlinkCtrl::Create(wxWindow *parent, wxWindowID id,
+    const wxString& label, const wxString& url, const wxPoint& pos,
+    const wxSize& size, long style, const wxString& name)
+{
+    // do validation checks:
+    CheckParams(label, url, style);
+
+    if (!wxControl::Create(parent, id, pos, size, style, wxDefaultValidator, name))
+        return false;
+
+    // set to non empty strings both the url and the label
+    SetURL(url.empty() ? label : url);
+    SetLabel(label.empty() ? url : label);
+
+    m_rollover = false;
+    m_clicking = false;
+    m_visited = false;
+
+    // colours
+    m_normalColour = *wxBLUE;
+    m_hoverColour = *wxRED;
+    SetForegroundColour(m_normalColour);
+
+    // by default the font of an hyperlink control is underlined
+    wxFont f = GetFont();
+    f.SetUnderlined(true);
+    SetFont(f);
+
+    SetInitialSize(size);
+
+
+    // connect our event handlers:
+    // NOTE: since this class is the base class of the GTK+'s native implementation
+    //       of wxHyperlinkCtrl, we cannot use the static macros in BEGIN/END_EVENT_TABLE
+    //       blocks, otherwise the GTK+'s native impl of wxHyperlinkCtrl would not
+    //       behave correctly (as we intercept events doing things which interfere
+    //       with GTK+'s native handling):
+
+    Connect( wxEVT_PAINT, wxPaintEventHandler(wxGenericHyperlinkCtrl::OnPaint) );
+    Connect( wxEVT_SIZE, wxSizeEventHandler(wxGenericHyperlinkCtrl::OnSize) );
+    Connect( wxEVT_LEAVE_WINDOW, wxMouseEventHandler(wxGenericHyperlinkCtrl::OnLeaveWindow) );
+
+    Connect( wxEVT_LEFT_DOWN, wxMouseEventHandler(wxGenericHyperlinkCtrl::OnLeftDown) );
+    Connect( wxEVT_LEFT_UP, wxMouseEventHandler(wxGenericHyperlinkCtrl::OnLeftUp) );
+    Connect( wxEVT_RIGHT_UP, wxMouseEventHandler(wxGenericHyperlinkCtrl::OnRightUp) );
+    Connect( wxEVT_MOTION, wxMouseEventHandler(wxGenericHyperlinkCtrl::OnMotion) );
+
+    Connect( wxHYPERLINK_POPUP_COPY_ID, wxEVT_COMMAND_MENU_SELECTED,
+             wxCommandEventHandler(wxGenericHyperlinkCtrl::OnPopUpCopy) );
+
+    return true;
+}
+
+wxSize wxGenericHyperlinkCtrl::DoGetBestSize() const
+{
+    int w, h;
+
+    wxClientDC dc((wxWindow *)this);
+    dc.SetFont(GetFont());
+    dc.GetTextExtent(GetLabel(), &w, &h);
+
+    wxSize best(w, h);
+    CacheBestSize(best);
+    return best;
+}
+
+
+void wxGenericHyperlinkCtrl::SetNormalColour(const wxColour &colour)
+{
+    m_normalColour = colour;
+    if (!m_visited)
+    {
+        SetForegroundColour(m_normalColour);
+        Refresh();
+    }
+}
+
+void wxGenericHyperlinkCtrl::SetVisitedColour(const wxColour &colour)
+{
+    m_visitedColour = colour;
+    if (m_visited)
+    {
+        SetForegroundColour(m_visitedColour);
+        Refresh();
+    }
+}
+
+void wxGenericHyperlinkCtrl::DoContextMenu(const wxPoint &pos)
+{
+    wxMenu *menuPopUp = new wxMenu(wxEmptyString, wxMENU_TEAROFF);
+    menuPopUp->Append(wxHYPERLINK_POPUP_COPY_ID, wxT("Copy URL"));
+    PopupMenu( menuPopUp, pos );
+    delete menuPopUp;
+}
+
+wxRect wxGenericHyperlinkCtrl::GetLabelRect() const
+{
+    // our best size is always the size of the label without borders
+    wxSize c(GetClientSize()), b(GetBestSize());
+    wxPoint offset;
+
+    // the label is always centered vertically
+    offset.y = (c.GetHeight()-b.GetHeight())/2;
+
+    if (HasFlag(wxHL_ALIGN_CENTRE))
+        offset.x = (c.GetWidth()-b.GetWidth())/2;
+    else if (HasFlag(wxHL_ALIGN_RIGHT))
+        offset.x = c.GetWidth()-b.GetWidth();
+    else if (HasFlag(wxHL_ALIGN_LEFT))
+        offset.x = 0;
+    return wxRect(offset, b);
+}
+
+
+
+// ----------------------------------------------------------------------------
+// wxGenericHyperlinkCtrl - event handlers
+// ----------------------------------------------------------------------------
+
+void wxGenericHyperlinkCtrl::OnPaint(wxPaintEvent& WXUNUSED(event))
+{
+    wxPaintDC dc(this);
+    dc.SetFont(GetFont());
+    dc.SetTextForeground(GetForegroundColour());
+    dc.SetTextBackground(GetBackgroundColour());
+
+    dc.DrawText(GetLabel(), GetLabelRect().GetTopLeft());
+}
+
+void wxGenericHyperlinkCtrl::OnLeftDown(wxMouseEvent& event)
+{
+    // the left click must start from the hyperlink rect
+    m_clicking = GetLabelRect().Contains(event.GetPosition());
+}
+
+void wxGenericHyperlinkCtrl::OnLeftUp(wxMouseEvent& event)
+{
+    // the click must be started and ended in the hyperlink rect
+    if (!m_clicking || !GetLabelRect().Contains(event.GetPosition())) 
+        return;
+
+    SetForegroundColour(m_visitedColour);
+    m_visited = true;
+    m_clicking = false;
+
+    // send the event
+    SendEvent();
+}
+
+void wxGenericHyperlinkCtrl::OnRightUp(wxMouseEvent& event)
+{
+    if( GetWindowStyle() & wxHL_CONTEXTMENU )
+        if ( GetLabelRect().Contains(event.GetPosition()) )
+            DoContextMenu(wxPoint(event.m_x, event.m_y));
+}
+
+void wxGenericHyperlinkCtrl::OnMotion(wxMouseEvent& event)
+{
+    wxRect textrc = GetLabelRect();
+
+    if (textrc.Contains(event.GetPosition()))
+    {
+        SetCursor(wxCursor(wxCURSOR_HAND));
+        SetForegroundColour(m_hoverColour);
+        m_rollover = true;
+        Refresh();
+    }
+    else if (m_rollover)
+    {
+        SetCursor(*wxSTANDARD_CURSOR);
+        SetForegroundColour(!m_visited ? m_normalColour : m_visitedColour);
+        m_rollover = false;
+        Refresh();
+    }
+}
+
+void wxGenericHyperlinkCtrl::OnLeaveWindow(wxMouseEvent& WXUNUSED(event) )
+{
+    // NB: when the label rect and the client size rect have the same
+    //     height this function is indispensable to remove the "rollover"
+    //     effect as the OnMotion() event handler could not be called
+    //     in that case moving the mouse out of the label vertically...
+
+    if (m_rollover)
+    {
+        SetCursor(*wxSTANDARD_CURSOR);
+        SetForegroundColour(!m_visited ? m_normalColour : m_visitedColour);
+        m_rollover = false;
+        Refresh();
+    }
+}
+
+void wxGenericHyperlinkCtrl::OnPopUpCopy( wxCommandEvent& WXUNUSED(event) )
+{
+#if wxUSE_CLIPBOARD
+    if (!wxTheClipboard->Open())
+        return;
+
+    wxTextDataObject *data = new wxTextDataObject( m_url );
+    wxTheClipboard->SetData( data );
+    wxTheClipboard->Close();
+#endif // wxUSE_CLIPBOARD
+}
+
+void wxGenericHyperlinkCtrl::OnSize(wxSizeEvent& WXUNUSED(event))
+{
+    // update the position of the label in the screen respecting
+    // the selected align flag
+    Refresh();
+}
+
+#endif // wxUSE_HYPERLINKCTRL
Index: src/gtk/hyperlink.cpp
--- /dev/null
+++ src/gtk/hyperlink.cpp
@@ -0,0 +1,241 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        src/gtk/hyperlink.cpp
+// Purpose:     Hyperlink control
+// Author:      Francesco Montorsi
+// Modified by:
+// Created:     14/2/2007
+// RCS-ID:      $Id$
+// Copyright:   (c) 2007 Francesco Montorsi
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+// ============================================================================
+// declarations
+// ============================================================================
+
+//---------------------------------------------------------------------------
+// Pre-compiled header stuff
+//---------------------------------------------------------------------------
+
+// For compilers that support precompilation, includes "wx.h".
+#include "wx/wxprec.h"
+
+#ifdef __BORLANDC__
+    #pragma hdrstop
+#endif
+
+#if wxUSE_HYPERLINKCTRL
+
+//---------------------------------------------------------------------------
+// Includes
+//---------------------------------------------------------------------------
+
+#include "wx/hyperlink.h"
+
+#ifndef WX_PRECOMP
+#endif
+
+#include <gtk/gtk.h>
+#include "wx/gtk/private.h"
+
+
+// ============================================================================
+// implementation
+// ============================================================================
+
+IMPLEMENT_DYNAMIC_CLASS(wxHyperlinkCtrl, wxGenericHyperlinkCtrl)
+
+
+//-----------------------------------------------------------------------------
+// "clicked"
+//-----------------------------------------------------------------------------
+
+extern "C" {
+static void gtk_hyperlink_clicked_callback( GtkWidget *WXUNUSED(widget),
+                                            wxHyperlinkCtrl *linkCtrl )
+{
+    // send the event
+    linkCtrl->SendEvent();
+}
+}
+
+// ----------------------------------------------------------------------------
+// wxHyperlinkCtrl
+// ----------------------------------------------------------------------------
+
+bool wxHyperlinkCtrl::Create(wxWindow *parent, wxWindowID id,
+    const wxString& label, const wxString& url, const wxPoint& pos,
+    const wxSize& size, long style, const wxString& name)
+{
+    if (!gtk_check_version(2,10,0))
+    {
+        // do validation checks:
+        CheckParams(label, url, style);
+
+        m_needParent = true;
+        m_acceptsFocus = true;
+
+        if (!PreCreation( parent, pos, size ) ||
+            !CreateBase( parent, id, pos, size, style, wxDefaultValidator, name ))
+        {
+            wxFAIL_MSG( wxT("wxHyperlinkCtrl creation failed") );
+            return false;
+        }
+
+        m_widget = gtk_link_button_new("asdfsaf asdfdsaf asdfdsa");
+        gtk_widget_show( GTK_WIDGET(m_widget) );
+
+        // alignment
+        float x_alignment = 0.5;
+        if (HasFlag(wxHL_ALIGN_LEFT))
+            x_alignment = 0.0;
+        else if (HasFlag(wxHL_ALIGN_RIGHT))
+            x_alignment = 1.0;
+        gtk_button_set_alignment(GTK_BUTTON(m_widget), x_alignment, 0.5);
+
+        // set to non empty strings both the url and the label
+        SetURL(url.empty() ? label : url);
+        SetLabel(label.empty() ? url : label);
+
+        // our signal handlers:
+        g_signal_connect_after (m_widget, "clicked",
+                                G_CALLBACK (gtk_hyperlink_clicked_callback),
+                                this);
+
+        m_parent->DoAddChild( this );
+
+        PostCreation(size);
+        SetInitialSize(size);
+
+        // wxWindowGTK will connect to the enter_notify and leave_notify GTK+ signals
+        // thus overriding GTK+'s internal signal handlers which set the cursor of
+        // the widget - thus we need to manually set it here: 
+        SetCursor(wxCursor(wxCURSOR_HAND));
+    }
+    else
+        return wxGenericHyperlinkCtrl::Create(parent, id, label, url, pos, size, style, name);
+
+    return true;
+}
+
+wxSize wxHyperlinkCtrl::DoGetBestSize() const
+{
+    if (!gtk_check_version(2,10,0))
+        return wxControl::DoGetBestSize();
+    return wxGenericHyperlinkCtrl::DoGetBestSize();
+}
+
+void wxHyperlinkCtrl::SetLabel(const wxString &label)
+{
+    if (!gtk_check_version(2,10,0))
+    {
+        wxControl::SetLabel(label);
+        const wxString labelGTK = GTKConvertMnemonics(label);
+        gtk_button_set_label(GTK_BUTTON(m_widget), wxGTK_CONV(labelGTK));
+    }
+    else
+        wxGenericHyperlinkCtrl::SetLabel(label);
+}
+
+void wxHyperlinkCtrl::SetURL(const wxString &uri)
+{
+    if (!gtk_check_version(2,10,0))
+        gtk_link_button_set_uri(GTK_LINK_BUTTON(m_widget), uri.c_str());
+    else
+        wxGenericHyperlinkCtrl::SetURL(uri);
+}
+
+wxString wxHyperlinkCtrl::GetURL() const
+{
+    if (!gtk_check_version(2,10,0))
+    {
+        const gchar *str = gtk_link_button_get_uri(GTK_LINK_BUTTON(m_widget));
+        return wxConvFileName->cMB2WX(str);
+    }
+
+    return wxGenericHyperlinkCtrl::GetURL();
+}
+
+void wxHyperlinkCtrl::SetNormalColour(const wxColour &colour)
+{
+    if (!gtk_check_version(2,10,0))
+    {
+        // simply do nothing: GTK+ does not allow us to change it :(
+    }
+    else
+        wxGenericHyperlinkCtrl::SetNormalColour(colour);
+}
+
+wxColour wxHyperlinkCtrl::GetNormalColour() const
+{
+    if (!gtk_check_version(2,10,0))
+    {
+        GdkColor *link_color = NULL;
+        wxColour ret = wxNullColour;
+
+        // convert GdkColor in wxColour
+        gtk_widget_style_get(m_widget, "link-color", &link_color, NULL);
+        if (link_color)
+            ret.Set(link_color->red, link_color->green, link_color->blue);
+        gdk_color_free (link_color);
+
+        return ret;
+    }
+    else
+        return wxGenericHyperlinkCtrl::GetNormalColour();
+}
+
+void wxHyperlinkCtrl::SetVisitedColour(const wxColour &colour)
+{
+    if (!gtk_check_version(2,10,0))
+    {
+        // simply do nothing: GTK+ does not allow us to change it :(
+    }
+    else
+        wxGenericHyperlinkCtrl::SetVisitedColour(colour);
+}
+
+wxColour wxHyperlinkCtrl::GetVisitedColour() const
+{
+    if (!gtk_check_version(2,10,0))
+    {
+        GdkColor *link_color = NULL;
+        wxColour ret = wxNullColour;
+
+        // convert GdkColor in wxColour
+        gtk_widget_style_get(m_widget, "visited-link-color", &link_color, NULL);
+        if (link_color)
+            ret.Set(link_color->red, link_color->green, link_color->blue);
+        gdk_color_free (link_color);
+
+        return ret;
+    }
+    else
+        return wxGenericHyperlinkCtrl::GetVisitedColour();
+}
+
+void wxHyperlinkCtrl::SetHoverColour(const wxColour &colour)
+{
+    if (!gtk_check_version(2,10,0))
+    {
+        // simply do nothing: GTK+ does not allow us to change it :(
+    }
+    else
+        wxGenericHyperlinkCtrl::SetHoverColour(colour);
+}
+
+wxColour wxHyperlinkCtrl::GetHoverColour() const
+{
+    if (!gtk_check_version(2,10,0))
+        // hover colour == normal colour for native GTK+ widget
+        return GetNormalColour();
+
+    return wxGenericHyperlinkCtrl::GetHoverColour();
+}
+
+GdkWindow *wxHyperlinkCtrl::GTKGetWindow(wxArrayGdkWindows& WXUNUSED(windows)) const
+{
+    return GTK_BUTTON(m_widget)->event_window;
+}
+
+#endif // wxUSE_HYPERLINKCTRL

 	  	 

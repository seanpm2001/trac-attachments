? wxWindows/wxgtk-config
? wxWindows/wxgtkd-config
? wxWindows/lexer.c
? wxWindows/parser.c
? wxWindows/configure_gtk_debug_gdb
? wxWindows/contrib/config.log
? wxWindows/contrib/config.status
? wxWindows/contrib/Makefile
? wxWindows/contrib/samples/Makefile
? wxWindows/contrib/samples/xrc
? wxWindows/contrib/samples/applet/Makefile
? wxWindows/contrib/samples/canvas/Makefile
? wxWindows/contrib/samples/canvas/simple/Makefile
? wxWindows/contrib/samples/canvas/test/Makefile
? wxWindows/contrib/samples/gizmos/Makefile
? wxWindows/contrib/samples/gizmos/editlbox/Makefile
? wxWindows/contrib/samples/gizmos/multicell/Makefile
? wxWindows/contrib/samples/gizmos/splittree/Makefile
? wxWindows/contrib/samples/mmedia/Makefile
? wxWindows/contrib/samples/ogl/Makefile
? wxWindows/contrib/samples/ogl/ogledit/Makefile
? wxWindows/contrib/samples/ogl/studio/Makefile
? wxWindows/contrib/samples/plot/Makefile
? wxWindows/contrib/samples/stc/Makefile
? wxWindows/contrib/samples/xml/Makefile
? wxWindows/contrib/src/Makefile
? wxWindows/contrib/src/xrc
? wxWindows/contrib/src/applet/Makefile
? wxWindows/contrib/src/canvas/Makefile
? wxWindows/contrib/src/gizmos/Makefile
? wxWindows/contrib/src/mmedia/Makefile
? wxWindows/contrib/src/ogl/Makefile
? wxWindows/contrib/src/plot/Makefile
? wxWindows/contrib/src/stc/Makefile
? wxWindows/contrib/src/xml/Makefile
? wxWindows/contrib/utils/Makefile
? wxWindows/contrib/utils/convertrc/Makefile
? wxWindows/contrib/utils/wxrc/Makefile
? wxWindows/contrib/utils/wxrcedit/Makefile
? wxWindows/demos/config.log
? wxWindows/demos/config.status
? wxWindows/demos/Makefile
? wxWindows/demos/bombs/Makefile
? wxWindows/demos/dbbrowse/Makefile
? wxWindows/demos/forty/Makefile
? wxWindows/demos/fractal/Makefile
? wxWindows/demos/life/Makefile
? wxWindows/demos/poem/Makefile
? wxWindows/include/wx/imagbmp_orig.h
? wxWindows/include/wx/imagbmp_h.patch
? wxWindows/include/wx/imagbmp_john.h
? wxWindows/lib/wx
? wxWindows/lib/libwx_gtkd-2.3.so.0.0.0
? wxWindows/samples/config.log
? wxWindows/samples/config.status
? wxWindows/samples/config.cache
? wxWindows/samples/Makefile
? wxWindows/samples/erase
? wxWindows/samples/calendar/Makefile
? wxWindows/samples/caret/Makefile
? wxWindows/samples/checklst/Makefile
? wxWindows/samples/config/Makefile
? wxWindows/samples/console/Makefile
? wxWindows/samples/controls/Makefile
? wxWindows/samples/controls/controls
? wxWindows/samples/db/Makefile
? wxWindows/samples/dialogs/Makefile
? wxWindows/samples/dialup/Makefile
? wxWindows/samples/dnd/Makefile
? wxWindows/samples/docview/Makefile
? wxWindows/samples/docvwmdi/Makefile
? wxWindows/samples/dragimag/Makefile
? wxWindows/samples/drawing/Makefile
? wxWindows/samples/dynamic/Makefile
? wxWindows/samples/event/Makefile
? wxWindows/samples/exec/Makefile
? wxWindows/samples/font/Makefile
? wxWindows/samples/grid/Makefile
? wxWindows/samples/help/Makefile
? wxWindows/samples/html/Makefile
? wxWindows/samples/html/about/Makefile
? wxWindows/samples/html/help/Makefile
? wxWindows/samples/html/helpview/Makefile
? wxWindows/samples/html/printing/Makefile
? wxWindows/samples/html/test/Makefile
? wxWindows/samples/html/virtual/Makefile
? wxWindows/samples/html/widget/Makefile
? wxWindows/samples/html/zip/Makefile
? wxWindows/samples/image/Makefile
? wxWindows/samples/image/image
? wxWindows/samples/image/test.xpm
? wxWindows/samples/image/image_orig.cpp
? wxWindows/samples/image/image_john.cpp
? wxWindows/samples/image/junk.bmp
? wxWindows/samples/image/Balls.tiff
? wxWindows/samples/image/hefsparkl.jpg
? wxWindows/samples/image/colors.png
? wxWindows/samples/image/i
? wxWindows/samples/image/image_cpp.patch
? wxWindows/samples/internat/Makefile
? wxWindows/samples/ipc/Makefile
? wxWindows/samples/joytest/Makefile
? wxWindows/samples/layout/Makefile
? wxWindows/samples/listctrl/Makefile
? wxWindows/samples/mdi/Makefile
? wxWindows/samples/memcheck/Makefile
? wxWindows/samples/menu/Makefile
? wxWindows/samples/minifram/Makefile
? wxWindows/samples/minimal/Makefile
? wxWindows/samples/newgrid/Makefile
? wxWindows/samples/notebook/Makefile
? wxWindows/samples/notebook/notebook
? wxWindows/samples/opengl/Makefile
? wxWindows/samples/opengl/cube/Makefile
? wxWindows/samples/opengl/isosurf/Makefile
? wxWindows/samples/opengl/penguin/Makefile
? wxWindows/samples/png/Makefile
? wxWindows/samples/printing/Makefile
? wxWindows/samples/proplist/Makefile
? wxWindows/samples/propsize/Makefile
? wxWindows/samples/resource/Makefile
? wxWindows/samples/richedit/Makefile
? wxWindows/samples/rotate/Makefile
? wxWindows/samples/sashtest/Makefile
? wxWindows/samples/scroll/Makefile
? wxWindows/samples/scrollsub/Makefile
? wxWindows/samples/sockets/Makefile
? wxWindows/samples/splitter/Makefile
? wxWindows/samples/statbar/Makefile
? wxWindows/samples/text/Makefile
? wxWindows/samples/thread/Makefile
? wxWindows/samples/toolbar/Makefile
? wxWindows/samples/treectrl/Makefile
? wxWindows/samples/treelay/Makefile
? wxWindows/samples/typetest/Makefile
? wxWindows/samples/validate/Makefile
? wxWindows/samples/wizard/Makefile
? wxWindows/src/common/imagbmp_orig.cpp
? wxWindows/src/common/imagbmp_john.cpp
? wxWindows/src/common/mypatch.patch
? wxWindows/src/common/imagbmp.patch
? wxWindows/src/common/imagbmp_cpp.patch
? wxWindows/utils/config.log
? wxWindows/utils/config.status
? wxWindows/utils/Makefile
? wxWindows/utils/HelpGen/Makefile
? wxWindows/utils/HelpGen/src/Makefile
? wxWindows/utils/dialoged/Makefile
? wxWindows/utils/hhp2cached/Makefile
? wxWindows/utils/makegen/Makefile
? wxWindows/utils/tex2rtf/Makefile
? wxWindows/utils/tex2rtf/src/Makefile
Index: wxWindows/include/wx/imagbmp.h
===================================================================
RCS file: /home/wxcvs/wxWindows/include/wx/imagbmp.h,v
retrieving revision 1.2
diff -r1.2 imagbmp.h
18a19,32
> // defines for saving the BMP file in different formats, Bits Per Pixel
> // USE: wximage.SetOption( wxBMP_FORMAT, wxBMP_xBPP );
> #define wxBMP_FORMAT wxString("wxBMP_FORMAT")
> #define wxBMP_24BPP        24 // default, do not need to set
> //#define wxBMP_16BPP      16 // wxQuantize can only do 236 colors?
> #define wxBMP_8BPP          8 // 8bpp, quantized colors
> #define wxBMP_8BPP_GREY     9 // 8bpp, rgb averaged to greys
> #define wxBMP_8BPP_GRAY     9
> #define wxBMP_8BPP_RED     10 // 8bpp, red used as greyscale
> #define wxBMP_8BPP_PALETTE 11 // 8bpp, use the wxImage's palette
> #define wxBMP_4BPP          4 // 4bpp, quantized colors
> #define wxBMP_1BPP          1 // 1bpp, quantized "colors"
> #define wxBMP_1BPP_BW       2 // 1bpp, black & white from red
> 
Index: wxWindows/samples/image/image.cpp
===================================================================
RCS file: /home/wxcvs/wxWindows/samples/image/image.cpp,v
retrieving revision 1.57
diff -r1.57 image.cpp
24a25
> #include "wx/quantize.h"
90c91
<         : wxFrame(parent, -1, _T("Frame with image"),
---
>         : wxFrame(parent, -1, _T("Double click to save"),
93c94
<           m_bitmap(bitmap)
---
>                   m_bitmap(bitmap)
103a105,174
>     void OnSave(wxCommandEvent& WXUNUSED(event))
>     {
>         wxImage image(m_bitmap);
> 
>         wxString bppchoices[8] = { "1 bpp color",
>                                    "1 bpp B&W",
>                                    "4 bpp color",
>                                    "8 bpp color",
>                                    "8 bpp greyscale",
>                                    "8 bpp red",
>                                    "8 bpp own palette",
>                                    "24 bpp" };
>         int bppvalues[8] = { wxBMP_1BPP,
>                              wxBMP_1BPP_BW,
>                              wxBMP_4BPP,
>                              wxBMP_8BPP,
>                              wxBMP_8BPP_GREY,
>                              wxBMP_8BPP_RED,
>                              wxBMP_8BPP_PALETTE,
>                              wxBMP_24BPP  };
> 
>         int bppselection = wxGetSingleChoiceIndex("Set BMP BPP", "Set BMP BPP", 8, bppchoices, this);
> 
>         image.SetOption(wxBMP_FORMAT, bppvalues[bppselection]);
> 
>         wxString savefilename = wxFileSelector( "Save Image",
>                                                 "",
>                                                 "junk.bmp",
>                                                 (const char *)NULL,
>                                                 "BMP files (*.bmp)|*.bmp|\
>                                                 PNG files (*.png)|*.png|\
>                                                 JPEG files (*.jpg)|*.jpg|\
>                                                 GIF files (*.gif)|*.gif|\
>                                                 TIFF files (*.tif)|*.tif|\
>                                                 PCX files (*.pcx)|*.pcx|",
>                                                 wxSAVE); //|wxOVERWRITE_PROMPT);
> 
>         if (savefilename == "")  return;
> 
>         if (wxBMP_8BPP_PALETTE == image.GetOptionInt(wxBMP_FORMAT))
>         {
>             int i;
>             unsigned char *cmap = new unsigned char [256];
>             for (i=0; i<256; i++) cmap[i] = i;
>             image.SetPalette(wxPalette(256, cmap, cmap, cmap));
>             delete cmap;
>         }
> 
>         bool saved = FALSE;
> 
>         wxString extension = savefilename.AfterLast('.').Lower();
> 
>         if (extension == "bmp")
>             saved=image.SaveFile(savefilename, wxBITMAP_TYPE_BMP);
>         else if (extension == "png")
>             saved=image.SaveFile(savefilename, wxBITMAP_TYPE_PNG);
>         else if (extension == "pcx")
>             saved=image.SaveFile(savefilename, wxBITMAP_TYPE_PCX);
>         else if ((extension == "tif") || (extension == "tiff"))
>             saved=image.SaveFile(savefilename, wxBITMAP_TYPE_TIF);
>         else if (extension == "jpg")
>             saved=image.SaveFile(savefilename, wxBITMAP_TYPE_JPEG);
>         else if (extension == "pnm")
>             saved=image.SaveFile(savefilename, wxBITMAP_TYPE_PNM);
>         else
>             wxMessageBox("Unknown file type, see options in file selector.",
>                          "Unknown file type",
>                          wxOK|wxCENTRE);
>     }
> 
127c198,199
<     EVT_PAINT(MyImageFrame::OnPaint)
---
>   EVT_PAINT(MyImageFrame::OnPaint)
>   EVT_LEFT_DCLICK(MyImageFrame::OnSave)
Index: wxWindows/src/common/imagbmp.cpp
===================================================================
RCS file: /home/wxcvs/wxWindows/src/common/imagbmp.cpp,v
retrieving revision 1.18
diff -r1.18 imagbmp.cpp
33a34
> #include "wx/quantize.h"
69a71,109
>     // get the format of the BMP file to save, else use 24bpp
>     unsigned format = wxBMP_24BPP;
>     if (image->HasOption(wxBMP_FORMAT))
>         format = image->GetOptionInt(wxBMP_FORMAT);
> 
>     unsigned bpp;     // # of bits per pixel
>     int palette_size; // # of color map entries, ie. 2^bpp colors
> 
>     // set the bpp and appropriate palette_size, and do additional checks
>     if ((format == wxBMP_1BPP) || (format == wxBMP_1BPP_BW))
>     {
>         bpp = 1;
>         palette_size = 2;
>     }
>     else if (format == wxBMP_4BPP)
>     {
>         bpp = 4;
>         palette_size = 16;
>     }
>     else if ((format == wxBMP_8BPP) || (format == wxBMP_8BPP_GREY) ||
>              (format == wxBMP_8BPP_RED) || (format == wxBMP_8BPP_PALETTE))
>     {
>         // need to set a wxPalette to use this, HOW TO CHECK IF VALID, SIZE?
>         if ((format == wxBMP_8BPP_PALETTE) && !image->HasPalette())
>         {
>             if (verbose)
>                 wxLogError(_("BMP: wImage doesn't have own wxPalette."));
>             return FALSE;
>         }
>         bpp = 8;
>         palette_size = 256;
>     }
>     else  // you get 24bpp
>     {
>         format = wxBMP_24BPP;
>         bpp = 24;
>         palette_size = 0;
>     }
> 
71,73c111,113
<     unsigned row_width = width * 3 +
<                          (((width % 4) == 0) ? 0 : (4 - (width * 3) % 4));
<                          // each row must be aligned to dwords
---
>     unsigned row_padding = (4 - int(width*bpp/8.0) % 4) % 4; // # bytes to pad to dword
>     unsigned row_width = int(width * bpp/8.0) + row_padding; // # of bytes per row
> 
92a133
> 
96,99c137,138
<     hdr.filesize = wxUINT32_SWAP_ON_BE(
<                    hdr_size +
<                    row_width * image->GetHeight()
<                    );
---
>     hdr.filesize = wxUINT32_SWAP_ON_BE( hdr_size + palette_size*4 +
>                                         row_width * image->GetHeight() );
101c140
<     hdr.data_offset = wxUINT32_SWAP_ON_BE(hdr_size);
---
>     hdr.data_offset = wxUINT32_SWAP_ON_BE(hdr_size + palette_size*4);
107c146
<     hdr.bpp = wxUINT16_SWAP_ON_BE(24); // always TrueColor
---
>     hdr.bpp = wxUINT16_SWAP_ON_BE(bpp);
110,112c149,151
<     hdr.h_res = hdr.v_res = wxUINT32_SWAP_ON_BE(72); // 72dpi is standard
<     hdr.num_clrs = 0; // maximal possible = 2^24
<     hdr.num_signif_clrs = 0; // all colors are significant
---
>     hdr.h_res = hdr.v_res = wxUINT32_SWAP_ON_BE(72);  // 72dpi is standard
>     hdr.num_clrs = wxUINT32_SWAP_ON_BE(palette_size); // # colors in colormap
>     hdr.num_signif_clrs = 0;     // all colors are significant
138a178,248
>     wxPalette *palette = NULL; // entries for quantized images
>     wxUint8 *rgbquad = NULL;   // for the RGBQUAD bytes for the colormap
>     wxImage *q_image = NULL;   // destination for quantized image
> 
>     // if <24bpp use quantization to reduce colors for *some* of the formats
>     if ( (format == wxBMP_1BPP) || (format == wxBMP_4BPP) ||
>          (format == wxBMP_8BPP) || (format == wxBMP_8BPP_PALETTE))
>     {
>         // make a new palette and quantize the image
>         if (format != wxBMP_8BPP_PALETTE)
>         {
>             q_image = new wxImage();
> 
>             // I get a delete error using Quantize when desired colors > 236
>             int quantize = ((palette_size > 236) ? 236 : palette_size);
>             // fill the destination too, it gives much nicer 4bpp images
>             wxQuantize::Quantize( *image, *q_image, &palette, quantize, 0,
>                                   wxQUANTIZE_FILL_DESTINATION_IMAGE );
>         }
>         else
>         {
>             palette = new wxPalette(image->GetPalette());
>         }
> 
>         int i;
>         unsigned char r, g, b;
>         rgbquad = new wxUint8 [palette_size*4];
> 
>         for (i=0; i<palette_size; i++)
>         {
>             if (!palette->GetRGB( i, &r, &g, &b )) r = g = b = 0;
> 
>             rgbquad[i*4] = b;
>             rgbquad[i*4+1] = g;
>             rgbquad[i*4+2] = r;
>             rgbquad[i*4+3] = 0;
>         }
>     }
>     // make a 256 entry greyscale colormap or 2 entry black & white
>     else if ((format == wxBMP_8BPP_GREY) || (format == wxBMP_8BPP_RED) ||
>              (format == wxBMP_1BPP_BW))
>     {
>         int i;
>         rgbquad = new wxUint8 [palette_size*4];
> 
>         for (i=0; i<palette_size; i++)
>         {
>             // if 1BPP_BW then just 0 and 255 then exit
>             if (( i > 0) && (format == wxBMP_1BPP_BW)) i = 255;
>             rgbquad[i*4] = i;
>             rgbquad[i*4+1] = i;
>             rgbquad[i*4+2] = i;
>             rgbquad[i*4+3] = 0;
>         }
>     }
> 
>     // if the colormap was made, then it needs to be written
>     if (rgbquad)
>     {
>         if (!stream.Write(rgbquad, palette_size*4))
>         {
>             if (verbose) wxLogError(_("BMP: Couldn't write RGB color map."));
>             delete []rgbquad;
>             if (palette) delete palette;
>             if (q_image) delete q_image;
>             return FALSE;
>         }
>         delete []rgbquad;
>     }
> 
>     // pointer to the image data, use quantized if available
139a250,251
>     if (q_image) if (q_image->Ok()) data = (wxUint8*) q_image->GetData();
> 
141d252
<     wxUint8 tmpvar;
143a255
>     long int pixel;
147,148c259
<         memcpy(buffer, data + y * 3 * width, 3 * width);
<         for (x = 0; x < width; x++)
---
>         if (format == wxBMP_24BPP)  // 3 bytes per pixel red,green,blue
150,152c261,342
<             tmpvar = buffer[3 * x + 0];
<             buffer[3 * x + 0] = buffer[3 * x + 2];
<             buffer[3 * x + 2] = tmpvar;
---
>             for (x = 0; x < width; x++)
>             {
>                 pixel = 3*(y*width + x);
> 
>                 buffer[3*x    ] = data[pixel+2];
>                 buffer[3*x + 1] = data[pixel+1];
>                 buffer[3*x + 2] = data[pixel];
>             }
>         }
>         else if ((format == wxBMP_8BPP) ||       // 1 byte per pixel in color
>                  (format == wxBMP_8BPP_PALETTE))
>         {
>             for (x = 0; x < width; x++)
>             {
>                 pixel = 3*(y*width + x);
>                 buffer[x] = palette->GetPixel( data[pixel],
>                                                data[pixel+1],
>                                                data[pixel+2] );
>             }
>         }
>         else if (format == wxBMP_8BPP_GREY) // 1 byte per pix, rgb ave to grey
>         {
>             for (x = 0; x < width; x++)
>             {
>                 pixel = 3*(y*width + x);
>                 buffer[x] = (wxUint8)(.299*data[pixel] +
>                                       .587*data[pixel+1] +
>                                       .114*data[pixel+2]);
>             }
>         }
>         else if (format == wxBMP_8BPP_RED) // 1 byte per pixel, red as greys
>         {
>             for (x = 0; x < width; x++)
>             {
>                 buffer[x] = (wxUint8)data[3*(y*width + x)];
>             }
>         }
>         else if (format == wxBMP_4BPP) // 4 bpp in color
>         {
>             for (x = 0; x < width; x+=2)
>             {
>                 pixel = 3*(y*width + x);
> 
>                 // fill buffer, ignore if > width
>                 buffer[x/2] =
>                                            ((wxUint8)palette->GetPixel(data[pixel], data[pixel+1], data[pixel+2]) << 4) |
>                     (((x+1) > width) ? 0 : ((wxUint8)palette->GetPixel(data[pixel+3], data[pixel+4], data[pixel+5]) ));
>             }
>         }
>         else if (format == wxBMP_1BPP) // 1 bpp in "color"
>         {
>             for (x = 0; x < width; x+=8)
>             {
>                 pixel = 3*(y*width + x);
> 
>                 buffer[x/8] =
>                                            ((wxUint8)palette->GetPixel(data[pixel], data[pixel+1], data[pixel+2]) << 7) |
>                     (((x+1) > width) ? 0 : ((wxUint8)palette->GetPixel(data[pixel+3], data[pixel+4], data[pixel+5]) << 6)) |
>                     (((x+2) > width) ? 0 : ((wxUint8)palette->GetPixel(data[pixel+6], data[pixel+7], data[pixel+8]) << 5)) |
>                     (((x+3) > width) ? 0 : ((wxUint8)palette->GetPixel(data[pixel+9], data[pixel+10], data[pixel+11]) << 4)) |
>                     (((x+4) > width) ? 0 : ((wxUint8)palette->GetPixel(data[pixel+12], data[pixel+13], data[pixel+14]) << 3)) |
>                     (((x+5) > width) ? 0 : ((wxUint8)palette->GetPixel(data[pixel+15], data[pixel+16], data[pixel+17]) << 2)) |
>                     (((x+6) > width) ? 0 : ((wxUint8)palette->GetPixel(data[pixel+18], data[pixel+19], data[pixel+20]) << 1)) |
>                     (((x+7) > width) ? 0 : ((wxUint8)palette->GetPixel(data[pixel+21], data[pixel+22], data[pixel+23])     ));
>             }
>         }
>         else if (format == wxBMP_1BPP_BW) // 1 bpp B&W colormap from red color ONLY
>         {
>             for (x = 0; x < width; x+=8)
>             {
>                 pixel = 3*(y*width + x);
> 
>                 buffer[x/8] =
>                                             (((wxUint8)(data[pixel]   /128.)) << 7) |
>                     ( ((x+1) > width) ? 0 : (((wxUint8)(data[pixel+3] /128.)) << 6)) |
>                     ( ((x+2) > width) ? 0 : (((wxUint8)(data[pixel+6] /128.)) << 5)) |
>                     ( ((x+3) > width) ? 0 : (((wxUint8)(data[pixel+9] /128.)) << 4)) |
>                     ( ((x+4) > width) ? 0 : (((wxUint8)(data[pixel+12]/128.)) << 3)) |
>                     ( ((x+5) > width) ? 0 : (((wxUint8)(data[pixel+15]/128.)) << 2)) |
>                     ( ((x+6) > width) ? 0 : (((wxUint8)(data[pixel+18]/128.)) << 1)) |
>                     ( ((x+7) > width) ? 0 : (((wxUint8)(data[pixel+21]/128.))     ));
>             }
159a350,351
>             if (palette) delete palette;
>             if (q_image) delete q_image;
163a356,357
>     if (palette) delete palette;
>     if (q_image) delete q_image;
167d360
< 

 	  	 

diff -uNr wxWidgets-orig/include/wx/msw/window.h wxWidgets-mine/include/wx/msw/window.h
--- wxWidgets-orig/include/wx/msw/window.h	2019-10-27 18:41:42.000000000 +0100
+++ wxWidgets-mine/include/wx/msw/window.h	2019-11-10 16:07:39.332228100 +0100
@@ -591,6 +591,8 @@
     // wxDPIChangedEvent to let the user code do the same thing as well.
     void MSWUpdateOnDPIChange(const wxSize& oldDPI, const wxSize& newDPI);
 
+    void MSWSetDidCreatePaintDC(bool v) { m_didCreatePaintDC = v; }    
+
 protected:
     // Called from MSWUpdateOnDPIChange() specifically to update the control
     // font, as this may need to be done differently for some specific native
@@ -627,6 +629,14 @@
     int                   m_xThumbSize;
     int                   m_yThumbSize;
 
+    // this variable is used to check that a paint event handler which processed
+    // the event did create a wxPaintDC inside its code and called BeginPaint() to
+    // validate the invalidated window area as otherwise we'd keep getting an
+    // endless stream of WM_PAINT messages for this window resulting in a lot of
+    // difficult to debug problems (e.g. impossibility to repaint other windows,
+    // lack of timer and idle events and so on)
+    bool                  m_didCreatePaintDC;
+    
     // implement the base class pure virtuals
     virtual void DoGetTextExtent(const wxString& string,
                                  int *x, int *y,
diff -uNr wxWidgets-orig/src/msw/dcclient.cpp wxWidgets-mine/src/msw/dcclient.cpp
--- wxWidgets-orig/src/msw/dcclient.cpp	2019-10-27 18:41:42.000000000 +0100
+++ wxWidgets-mine/src/msw/dcclient.cpp	2019-11-10 16:10:24.879718800 +0100
@@ -276,11 +276,8 @@
     }
 #endif // wxHAS_PAINT_DEBUG
 
-    // see comments in src/msw/window.cpp where this is defined
-    extern bool wxDidCreatePaintDC;
-
-    wxDidCreatePaintDC = true;
-
+    // see comments in wx/msw/window.h where this is declared
+    window->MSWSetDidCreatePaintDC(true);
 
     m_window = window;
 
diff -uNr wxWidgets-orig/src/msw/window.cpp wxWidgets-mine/src/msw/window.cpp
--- wxWidgets-orig/src/msw/window.cpp	2019-10-27 18:41:42.000000000 +0100
+++ wxWidgets-mine/src/msw/window.cpp	2019-11-10 16:09:34.210829800 +0100
@@ -457,7 +457,8 @@
     m_oldWndProc = NULL;
     m_mouseInWindow = false;
     m_lastKeydownProcessed = false;
-
+    m_didCreatePaintDC = false;
+    
     m_hWnd = 0;
 
     m_xThumbSize = 0;
@@ -5224,15 +5225,6 @@
 // painting
 // ---------------------------------------------------------------------------
 
-// this variable is used to check that a paint event handler which processed
-// the event did create a wxPaintDC inside its code and called BeginPaint() to
-// validate the invalidated window area as otherwise we'd keep getting an
-// endless stream of WM_PAINT messages for this window resulting in a lot of
-// difficult to debug problems (e.g. impossibility to repaint other windows,
-// lack of timer and idle events and so on)
-extern bool wxDidCreatePaintDC;
-bool wxDidCreatePaintDC = false;
-
 bool wxWindowMSW::HandlePaint()
 {
     HRGN hRegion = ::CreateRectRgn(0, 0, 0, 0); // Dummy call to get a handle
@@ -5247,14 +5239,14 @@
 
     m_updateRegion = wxRegion((WXHRGN) hRegion);
 
-    wxDidCreatePaintDC = false;
+    m_didCreatePaintDC = false;
 
     wxPaintEvent event(m_windowId);
     event.SetEventObject(this);
 
     bool processed = HandleWindowEvent(event);
 
-    if ( wxDidCreatePaintDC && !processed )
+    if ( m_didCreatePaintDC && !processed )
     {
         // Event handler did paint something as wxPaintDC object was created
         // but then it must have skipped the event to indicate that default
@@ -5284,8 +5276,8 @@
     // OnPaint() above, so we should return true. If we did not, even the event
     // was processed, we must still call MSWDefWindowProc() to ensure that the
     // window is validated, i.e. to avoid the problem described in the comment
-    // before wxDidCreatePaintDC definition above.
-    return wxDidCreatePaintDC;
+    // before the m_didCreatePaintDC declaration in wx/msw/window.h
+    return m_didCreatePaintDC;
 }
 
 // Can be called from an application's OnPaint handler

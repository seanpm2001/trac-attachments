diff --git a/src/common/imagbmp.cpp b/src/common/imagbmp.cpp
index 5f45ba9..c85f910 100644
--- a/src/common/imagbmp.cpp
+++ b/src/common/imagbmp.cpp
@@ -454,14 +454,16 @@ bool wxBMPHandler::DoLoadDib(wxImage * image, int width, int height,
                              wxFileOffset bmpOffset, wxInputStream& stream,
                              bool verbose, bool IsBmp, bool hasPalette)
 {
-    wxInt32         aDword, rmask = 0, gmask = 0, bmask = 0;
-    int             rshift = 0, gshift = 0, bshift = 0;
-    int             rbits = 0, gbits = 0, bbits = 0;
+    wxInt32         aDword, rmask = 0, gmask = 0, bmask = 0, amask = 0;
+    int             rshift = 0, gshift = 0, bshift = 0, ashift = 0;
+    int             rbits = 0, gbits = 0, bbits = 0, abits = 0;
     wxInt32         dbuf[4];
     wxInt8          bbuf[4];
     wxUint8         aByte;
     wxUint16        aWord;
 
+    unsigned char* alpha = 0;
+
     // allocate space for palette if needed:
     _cmap *cmap;
 
@@ -484,6 +486,13 @@ bool wxBMPHandler::DoLoadDib(wxImage * image, int width, int height,
 
     unsigned char *ptr = image->GetData();
 
+    if (bpp == 32)
+    {
+        // tell the image to allocate an alpha buffer
+        image->SetAlpha(NULL);
+        alpha = image->GetAlpha();
+    }
+
     if ( !ptr )
     {
         if ( verbose )
@@ -577,9 +586,13 @@ bool wxBMPHandler::DoLoadDib(wxImage * image, int width, int height,
             rmask = 0x00FF0000;
             gmask = 0x0000FF00;
             bmask = 0x000000FF;
+            amask = 0xFF000000;
+
+            ashift = 24;
             rshift = 16;
             gshift = 8;
             bshift = 0;
+            abits = 8;
             rbits = 8;
             gbits = 8;
             bbits = 8;
@@ -815,6 +828,8 @@ bool wxBMPHandler::DoLoadDib(wxImage * image, int width, int height,
                 ptr[poffset + 1] = temp;
                 temp = (unsigned char)((aDword & bmask) >> bshift);
                 ptr[poffset + 2] = temp;
+                temp = (unsigned char)((aDword & amask) >> ashift);
+                alpha[line * width + column] = temp;
                 column++;
             }
         }

diff -ru -xCVS -x'.#*' -x'*.orig' -x'*.rej' -x'*~' wxWidgets.orig/docs/latex/wx/point.tex wxWidgets/docs/latex/wx/point.tex
--- wxWidgets.orig/docs/latex/wx/point.tex	2006-11-02 14:58:02.000000000 +0100
+++ wxWidgets/docs/latex/wx/point.tex	2006-11-02 15:35:26.000000000 +0100
@@ -56,13 +56,13 @@
 Assignment operator.
 
 
-\func{bool}{operator $==$}{\param{const wxPoint\& }{pt}}
+\func{bool}{operator $==$}{\param{const wxPoint\& }{p1}, \param{const wxPoint\& }{p2}}
 
-\func{bool}{operator $!=$}{\param{const wxPoint\& }{pt}}
+\func{bool}{operator $!=$}{\param{const wxPoint\& }{p1}, \param{const wxPoint\& }{p2}}
 
-\func{wxPoint}{operator $+$}{\param{const wxPoint\& }{pt}}
+\func{wxPoint}{operator $+$}{\param{const wxPoint\& }{p1}, \param{const wxPoint\& }{p2}}
 
-\func{wxPoint}{operator $-$}{\param{const wxPoint\& }{pt}}
+\func{wxPoint}{operator $-$}{\param{const wxPoint\& }{p1}, \param{const wxPoint\& }{p2}}
 
 \func{wxPoint\&}{operator $+=$}{\param{const wxPoint\& }{pt}}
 
@@ -71,14 +71,18 @@
 Operators for comparison, sum and subtraction between \helpref{wxPoint}{wxpoint} objects.
 
 
-\func{wxPoint}{operator $+$}{\param{const wxSize\& }{sz}}
+\func{wxPoint}{operator $+$}{\param{const wxPoint\& }{pt}, \param{const wxSize\& }{sz}}
 
-\func{wxPoint}{operator $-$}{\param{const wxSize\& }{sz}}
+\func{wxPoint}{operator $-$}{\param{const wxPoint\& }{pt}, \param{const wxSize\& }{sz}}
+
+\func{wxPoint}{operator $+$}{\param{const wxSize\& }{sz}, \param{const wxPoint\& }{pt}}
+
+\func{wxPoint}{operator $-$}{\param{const wxSize\& }{sz}, \param{const wxPoint\& }{pt}}
 
 \func{wxPoint\&}{operator $+=$}{\param{const wxSize\& }{sz}}
 
 \func{wxPoint\&}{operator $-=$}{\param{const wxSize\& }{sz}}
- 
+
 Operators for sum and subtraction between a \helpref{wxPoint}{wxpoint} object and a
 \helpref{wxSize}{wxsize} object.
 
diff -ru -xCVS -x'.#*' -x'*.orig' -x'*.rej' -x'*~' wxWidgets.orig/docs/latex/wx/rect.tex wxWidgets/docs/latex/wx/rect.tex
--- wxWidgets.orig/docs/latex/wx/rect.tex	2006-11-02 14:59:22.000000000 +0100
+++ wxWidgets/docs/latex/wx/rect.tex	2006-11-02 15:49:34.000000000 +0100
@@ -76,7 +76,7 @@
 
 Returns the rectangle having the same size as this one but centered relatively
 to the given rectangle \arg{r}. By default, rectangle is centred in both
-directions but if \arg{dir} includes only \texttt{wxVERTICAL} or only 
+directions but if \arg{dir} includes only \texttt{wxVERTICAL} or only
 \texttt{wxHORIZONTAL} flag, then it is only centered in this direction while
 the other component of its position remains unchanged.
 
@@ -149,7 +149,7 @@
 
 \constfunc{wxPoint}{GetTopLeft}{\void}
 
-Gets the position of the top left corner of the rectangle, same as 
+Gets the position of the top left corner of the rectangle, same as
 \helpref{GetPosition}{wxrectgetposition}.
 
 
@@ -280,7 +280,7 @@
 
 \constfunc{bool}{IsEmpty}{}
 
-Returns {\tt true} if this rectangle has a width or height less than or equal to 
+Returns {\tt true} if this rectangle has a width or height less than or equal to
 0 and {\tt false} otherwise.
 
 
@@ -354,14 +354,34 @@
 
 \membersection{wxRect::operator $==$}\label{wxrectequal}
 
-\func{bool}{operator $==$}{\param{const wxRect\& }{rect}}
+\func{bool}{operator $==$}{\param{const wxRect\& }{r1}, \param{const wxRect\& }{r2}}
 
 Equality operator.
 
 
 \membersection{wxRect::operator $!=$}\label{wxrectnotequal}
 
-\func{bool}{operator $!=$}{\param{const wxRect\& }{rect}}
+\func{bool}{operator $!=$}{\param{const wxRect\& }{r1}, \param{const wxRect\& }{r2}}
 
 Inequality operator.
 
+
+\membersection{wxRect::operator $!=$}\label{wxrectoperators}
+
+\func{wxRect}{operator $+$}{\param{const wxRect\& }{r1}, \param{const wxRect\& }{r2}}
+
+\func{wxRect\&}{operator $+=$}{\param{const wxRect\& }{r}}
+
+Like Union but don't ignore empty rectangles.
+
+\wxheading{See also}
+
+\helpref{wxRect::Union}{wxrectunion}
+
+
+\func{wxRect}{operator $-$}{\param{const wxRect\& }{r1}, \param{const wxRect\& }{r2}}
+
+\func{wxRect\&}{operator $-=$}{\param{const wxRect\& }{r}}
+
+The intersection of two rectangles empty rectangles are not ignored on input.
+The returned rectangle may be empty.
diff -ru -xCVS -x'.#*' -x'*.orig' -x'*.rej' -x'*~' wxWidgets.orig/docs/latex/wx/size.tex wxWidgets/docs/latex/wx/size.tex
--- wxWidgets.orig/docs/latex/wx/size.tex	2006-11-02 14:55:52.000000000 +0100
+++ wxWidgets/docs/latex/wx/size.tex	2006-11-02 15:38:39.000000000 +0100
@@ -198,13 +198,13 @@
 Assignment operator.
 
 
-\func{bool}{operator $==$}{\param{const wxSize\& }{sz}}
+\func{bool}{operator $==$}{\param{const wxSize\& }{s1}, \param{const wxSize\& }{s2}}
 
-\func{bool}{operator $!=$}{\param{const wxSize\& }{sz}}
+\func{bool}{operator $!=$}{\param{const wxSize\& }{s1}, \param{const wxSize\& }{s2}}
 
-\func{wxSize}{operator $+$}{\param{const wxSize\& }{sz}}
+\func{wxSize}{operator $+$}{\param{const wxSize\& }{s1}, \param{const wxSize\& }{s2}}
 
-\func{wxSize}{operator $-$}{\param{const wxSize\& }{sz}}
+\func{wxSize}{operator $-$}{\param{const wxSize\& }{s1}, \param{const wxSize\& }{s2}}
 
 \func{wxSize\&}{operator $+=$}{\param{const wxSize\& }{sz}}
 
@@ -213,9 +213,11 @@
 Operators for comparison, sum and subtraction between \helpref{wxSize}{wxsize} objects.
 
 
-\func{wxSize}{operator $/$}{\param{int }{factor}}
+\func{wxSize}{operator $/$}{\param{const wxSize\& }{sz}, \param{int }{factor}}
 
-\func{wxSize}{operator $*$}{\param{int }{factor}}
+\func{wxSize}{operator $*$}{\param{const wxSize\& }{sz}, \param{int }{factor}}
+
+\func{wxSize}{operator $*$}{\param{int }{factor}, \param{const wxSize\& }{sz}}
 
 \func{wxSize\&}{operator $/=$}{\param{int }{factor}}
 
diff -ru -xCVS -x'.#*' -x'*.orig' -x'*.rej' -x'*~' wxWidgets.orig/include/wx/gdicmn.h wxWidgets/include/wx/gdicmn.h
--- wxWidgets.orig/include/wx/gdicmn.h	2006-11-01 13:21:36.000000000 +0100
+++ wxWidgets/include/wx/gdicmn.h	2006-11-02 15:08:18.000000000 +0100
@@ -37,6 +37,7 @@
 class WXDLLIMPEXP_CORE wxPen;
 class WXDLLIMPEXP_CORE wxRegion;
 class WXDLLIMPEXP_BASE wxString;
+class wxPoint;
 
 // ---------------------------------------------------------------------------
 // constants
@@ -212,18 +213,23 @@
 
     // no copy ctor or assignment operator - the defaults are ok
 
-    bool operator==(const wxSize& sz) const { return x == sz.x && y == sz.y; }
-    bool operator!=(const wxSize& sz) const { return x != sz.x || y != sz.y; }
-
-    wxSize operator+(const wxSize& sz) const { return wxSize(x + sz.x, y + sz.y); }
-    wxSize operator-(const wxSize& sz) const { return wxSize(x - sz.x, y - sz.y); }
-    wxSize operator/(int i) const { return wxSize(x / i, y / i); }
-    wxSize operator*(int i) const { return wxSize(x * i, y * i); }
-
     wxSize& operator+=(const wxSize& sz) { x += sz.x; y += sz.y; return *this; }
     wxSize& operator-=(const wxSize& sz) { x -= sz.x; y -= sz.y; return *this; }
-    wxSize& operator/=(const int i) { x /= i; y /= i; return *this; }
-    wxSize& operator*=(const int i) { x *= i; y *= i; return *this; }
+    wxSize& operator/=(int i) { x /= i; y /= i; return *this; }
+    wxSize& operator*=(int i) { x *= i; y *= i; return *this; }
+
+    friend inline bool operator==(const wxSize& s1, const wxSize& s2);
+    friend inline bool operator!=(const wxSize& s1, const wxSize& s2);
+
+    friend inline const wxSize  operator+(const wxSize& s1, const wxSize& s2);
+    friend inline const wxSize  operator-(const wxSize& s1, const wxSize& s2);
+    friend inline const wxPoint operator+(const wxPoint& p, const wxSize& s);
+    friend inline const wxPoint operator-(const wxPoint& p, const wxSize& s);
+    friend inline const wxPoint operator+(const wxSize& s, const wxPoint& p);
+    friend inline const wxPoint operator-(const wxSize& s, const wxPoint& p);
+    friend inline const wxSize  operator/(const wxSize& s, int i);
+    friend inline const wxSize  operator*(const wxSize& s, int i);
+    friend inline const wxSize  operator*(int i, const wxSize& s);
 
     void IncTo(const wxSize& sz)
         { if ( sz.x > x ) x = sz.x; if ( sz.y > y ) y = sz.y; }
@@ -280,17 +286,15 @@
     wxRealPoint() : x(0.0), y(0.0) { }
     wxRealPoint(double xx, double yy) : x(xx), y(yy) { }
 
-    wxRealPoint operator+(const wxRealPoint& pt) const { return wxRealPoint(x + pt.x, y + pt.y); }
-    wxRealPoint operator-(const wxRealPoint& pt) const { return wxRealPoint(x - pt.x, y - pt.y); }
+    friend inline bool operator==(const wxRealPoint& p1, const wxRealPoint& p2);
+    friend inline bool operator!=(const wxRealPoint& p1, const wxRealPoint& p2);
 
-    bool operator==(const wxRealPoint& pt) const
-    {
-        return wxIsSameDouble(x, pt.x) && wxIsSameDouble(y, pt.y);
-    }
-    bool operator!=(const wxRealPoint& pt) const { return !(*this == pt); }
+    friend inline const wxRealPoint operator+(const wxRealPoint& p1, const wxRealPoint& p2);
+    friend inline const wxRealPoint operator-(const wxRealPoint& p1, const wxRealPoint& p2);
 };
 
 
+
 class WXDLLEXPORT wxPoint
 {
 public:
@@ -301,26 +305,151 @@
 
     // no copy ctor or assignment operator - the defaults are ok
 
-    // comparison
-    bool operator==(const wxPoint& p) const { return x == p.x && y == p.y; }
-    bool operator!=(const wxPoint& p) const { return !(*this == p); }
-
-    // arithmetic operations (component wise)
-    wxPoint operator+(const wxPoint& p) const { return wxPoint(x + p.x, y + p.y); }
-    wxPoint operator-(const wxPoint& p) const { return wxPoint(x - p.x, y - p.y); }
-
+    //assignment operators
     wxPoint& operator+=(const wxPoint& p) { x += p.x; y += p.y; return *this; }
     wxPoint& operator-=(const wxPoint& p) { x -= p.x; y -= p.y; return *this; }
 
     wxPoint& operator+=(const wxSize& s) { x += s.GetWidth(); y += s.GetHeight(); return *this; }
     wxPoint& operator-=(const wxSize& s) { x -= s.GetWidth(); y -= s.GetHeight(); return *this; }
 
-    wxPoint operator+(const wxSize& s) const { return wxPoint(x + s.GetWidth(), y + s.GetHeight()); }
-    wxPoint operator-(const wxSize& s) const { return wxPoint(x - s.GetWidth(), y - s.GetHeight()); }
+    // comparison
+    friend inline bool operator==(const wxPoint& p1, const wxPoint& p2);
+    friend inline bool operator!=(const wxPoint& p1, const wxPoint& p2);
+
+    // arithmetic operations (component wise)
+    friend inline const wxPoint operator+(const wxPoint& p1, const wxPoint& p2);
+    friend inline const wxPoint operator-(const wxPoint& p1, const wxPoint& p2);
 
-    wxPoint operator-() const { return wxPoint(-x, -y); }
+    friend inline const wxPoint operator+(const wxPoint& p, const wxSize& s);
+    friend inline const wxPoint operator-(const wxPoint& p, const wxSize& s);
+    friend inline const wxPoint operator+(const wxSize& s, const wxPoint& p);
+    friend inline const wxPoint operator-(const wxSize& s, const wxPoint& p);
+
+    friend inline const wxPoint operator-(const wxPoint& p);
 };
 
+
+inline bool operator==(const wxPoint& p1, const wxPoint& p2)
+{
+    return p1.x == p2.x && p1.y == p2.y;
+}
+
+
+inline bool operator!=(const wxPoint& p1, const wxPoint& p2)
+{
+    return !(p1 == p2);
+}
+
+
+inline const wxPoint operator+(const wxPoint& p1, const wxPoint& p2)
+{
+    return wxPoint(p1.x + p2.x, p1.y + p2.y);
+}
+
+
+inline const wxPoint operator-(const wxPoint& p1, const wxPoint& p2)
+{
+    return wxPoint(p1.x - p2.x, p1.y - p2.y);
+}
+
+
+inline const wxPoint operator+(const wxPoint& p, const wxSize& s)
+{
+    return wxPoint(p.x + s.x, p.y + s.y);
+}
+
+
+inline const wxPoint operator-(const wxPoint& p, const wxSize& s)
+{
+    return wxPoint(p.x - s.x, p.y - s.y);
+}
+
+
+inline const wxPoint operator+(const wxSize& s, const wxPoint& p)
+{
+    return wxPoint(p.x + s.x, p.y + s.y);
+}
+
+
+inline const wxPoint operator-(const wxSize& s, const wxPoint& p)
+{
+    return wxPoint(s.x - p.x, s.y - p.y);
+}
+
+
+inline const wxPoint operator-(const wxPoint& p)
+{
+    return wxPoint(-p.x, -p.y);
+}
+
+
+inline bool operator==(const wxRealPoint& p1, const wxRealPoint& p2)
+{
+    return wxIsSameDouble(p1.x, p2.x) && wxIsSameDouble(p1.y, p2.y);
+}
+
+
+inline bool operator!=(const wxRealPoint& p1, const wxRealPoint& p2)
+{
+    return !(p1 == p2);
+}
+
+
+inline const wxRealPoint operator+(const wxRealPoint& p1, const wxRealPoint& p2)
+{
+    return wxRealPoint(p1.x + p2.x, p1.y + p2.y);
+}
+
+
+inline const wxRealPoint operator-(const wxRealPoint& p1, const wxRealPoint& p2)
+{
+    return wxRealPoint(p1.x - p2.x, p1.y - p2.y);
+}
+
+
+inline bool operator==(const wxSize& s1, const wxSize& s2)
+{
+    return s1.x == s2.x && s1.y == s2.y;
+}
+
+
+inline bool operator!=(const wxSize& s1, const wxSize& s2)
+{
+    return s1.x != s2.x || s1.y != s2.y;
+}
+
+
+inline const wxSize  operator+(const wxSize& s1, const wxSize& s2)
+{
+    return wxSize(s1.x + s2.x, s1.y + s2.y);
+}
+
+
+inline const wxSize  operator-(const wxSize& s1, const wxSize& s2)
+{
+    return wxSize(s1.x - s2.x, s1.y - s2.y);
+}
+
+
+inline const wxSize  operator/(const wxSize& s, int i)
+{
+    return wxSize(s.x / i, s.y / i);
+}
+
+
+inline const wxSize  operator*(const wxSize& s, int i)
+{
+    return wxSize(s.x * i, s.y * i);
+}
+
+
+inline const wxSize  operator*(int i, const wxSize& s)
+{
+    return wxSize(s.x * i, s.y * i);
+}
+
+
+
 // ---------------------------------------------------------------------------
 // wxRect
 // ---------------------------------------------------------------------------
@@ -435,8 +564,8 @@
     }
 
     // compare rectangles
-    bool operator==(const wxRect& rect) const;
-    bool operator!=(const wxRect& rect) const { return !(*this == rect); }
+    friend bool operator==(const wxRect& r1, const wxRect& r2);
+    friend bool operator!=(const wxRect& r1, const wxRect& r2);
 
     // return true if the point is (not strcitly) inside the rect
     bool Contains(int x, int y) const;
@@ -456,7 +585,7 @@
 
 
     // these are like Union() but don't ignore empty rectangles
-    wxRect operator+(const wxRect& rect) const;
+    friend const wxRect operator+(const wxRect& r1, const wxRect& r2);
     wxRect& operator+=(const wxRect& rect)
     {
         *this = *this + rect;
@@ -464,6 +593,15 @@
     }
 
 
+    //intersections of two rectrangles not testing for empty rectangles
+    friend const wxRect operator-(const wxRect& r1, const wxRect& r2);
+    wxRect& operator-=(const wxRect& rect)
+    {
+        *this = *this - rect;
+        return *this;
+    }
+
+
     // centre this rectangle in the given (usually, but not necessarily,
     // larger) one
     wxRect CentreIn(const wxRect& r, int dir = wxBOTH) const
diff -ru -xCVS -x'.#*' -x'*.orig' -x'*.rej' -x'*~' wxWidgets.orig/src/common/gdicmn.cpp wxWidgets/src/common/gdicmn.cpp
--- wxWidgets.orig/src/common/gdicmn.cpp	2006-10-26 05:26:57.000000000 +0200
+++ wxWidgets/src/common/gdicmn.cpp	2006-11-02 15:08:04.000000000 +0100
@@ -108,23 +108,6 @@
     height++;
 }
 
-bool wxRect::operator==(const wxRect& rect) const
-{
-    return ((x == rect.x) &&
-            (y == rect.y) &&
-            (width == rect.width) &&
-            (height == rect.height));
-}
-
-wxRect wxRect::operator+(const wxRect& rect) const
-{
-    int x1 = wxMin(this->x, rect.x);
-    int y1 = wxMin(this->y, rect.y);
-    int y2 = wxMax(y+height, rect.height+rect.y);
-    int x2 = wxMax(x+width, rect.width+rect.x);
-    return wxRect(x1, y1, x2-x1, y2-y1);
-}
-
 wxRect& wxRect::Union(const wxRect& rect)
 {
     // ignore empty rectangles: union with an empty rectangle shouldn't extend
@@ -230,6 +213,37 @@
     return r.width != 0;
 }
 
+bool operator==(const wxRect& r1, const wxRect& r2)
+{
+    return ((r1.x == r2.x) &&
+            (r1.y == r2.y) &&
+            (r1.width == r2.width) &&
+            (r1.height == r2.height));
+}
+
+bool operator!=(const wxRect& r1, const wxRect& r2)
+{
+    return !(r1 == r2);
+}
+
+const wxRect operator+(const wxRect& r1, const wxRect& r2)
+{
+    int x1 = wxMin(r1.x, r2.x);
+    int y1 = wxMin(r1.y, r2.y);
+    int y2 = wxMax(r1.y+r1.height, r2.height+r2.y);
+    int x2 = wxMax(r1.x+r1.width, r2.width+r2.x);
+    return wxRect(x1, y1, x2-x1, y2-y1);
+}
+
+const wxRect operator-(const wxRect& r1, const wxRect& r2)
+{
+    int x1 = wxMax(r1.x, r2.x);
+    int y1 = wxMax(r1.y, r2.y);
+    int y2 = wxMin(r1.y+r1.height, r2.height+r2.y);
+    int x2 = wxMin(r1.x+r1.width, r2.width+r2.x);
+    return wxRect(x1, y1, x2-x1, y2-y1);
+}
+
 // ============================================================================
 // wxColourDatabase
 // ============================================================================
diff -ru -xCVS -x'.#*' -x'*.orig' -x'*.rej' -x'*~' wxWidgets.orig/tests/geometry/point.cpp wxWidgets/tests/geometry/point.cpp
--- wxWidgets.orig/tests/geometry/point.cpp	2006-11-02 14:52:17.000000000 +0100
+++ wxWidgets/tests/geometry/point.cpp	2006-11-02 15:16:20.000000000 +0100
@@ -87,6 +87,10 @@
     p6 = p2; p6 = p2 - s;
     CPPUNIT_ASSERT( p3 == p5 );
     CPPUNIT_ASSERT( p4 == p6 );
+    p5 = p2; p5 = s + p2;
+    p6 = p2; p6 = s - p2;
+    CPPUNIT_ASSERT( p3 == p5 );
+    CPPUNIT_ASSERT( p4 == -p6 );
     p5 = p2; p5 += s;
     p6 = p2; p6 -= s;
     CPPUNIT_ASSERT( p3 == p5 );
diff -ru -xCVS -x'.#*' -x'*.orig' -x'*.rej' -x'*~' wxWidgets.orig/tests/geometry/rect.cpp wxWidgets/tests/geometry/rect.cpp
--- wxWidgets.orig/tests/geometry/rect.cpp	2006-11-02 14:52:29.000000000 +0100
+++ wxWidgets/tests/geometry/rect.cpp	2006-11-02 15:22:13.000000000 +0100
@@ -129,6 +129,12 @@
             ( data.GetSecond() + data.GetFirst() ) == data.GetResult()
         );
     }
+
+    // test - operator which returns the intersection of two rectangles
+    wxRect r1 = wxRect(0, 2, 3, 4);
+    wxRect r2 = wxRect(1, 2, 7, 8);
+    r1 -= r2;
+    CPPUNIT_ASSERT(wxRect(1, 2, 2, 4) == r1);
 }
 
 void RectTestCase::Union()
diff -ru -xCVS -x'.#*' -x'*.orig' -x'*.rej' -x'*~' wxWidgets.orig/tests/geometry/size.cpp wxWidgets/tests/geometry/size.cpp
--- wxWidgets.orig/tests/geometry/size.cpp	2006-11-02 14:52:40.000000000 +0100
+++ wxWidgets/tests/geometry/size.cpp	2006-11-02 15:17:44.000000000 +0100
@@ -58,6 +58,8 @@
     CPPUNIT_ASSERT( s3.GetWidth()==2 && s3.GetHeight()==2 );
     s3 = s1 * 2;
     CPPUNIT_ASSERT( s3.GetWidth()==2 && s3.GetHeight()==4 );
+    s3 = 2 * s1;
+    CPPUNIT_ASSERT( s3.GetWidth()==2 && s3.GetHeight()==4 );
     s3 = s3 / 2;
     CPPUNIT_ASSERT( s3.GetWidth()==1 && s3.GetHeight()==2 );
 

 	  	 

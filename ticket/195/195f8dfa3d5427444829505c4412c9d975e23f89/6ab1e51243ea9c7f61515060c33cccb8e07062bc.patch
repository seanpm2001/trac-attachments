Index: docs/changes.txt
===================================================================
--- docs/changes.txt	(revision 67101)
+++ docs/changes.txt	(working copy)
@@ -188,7 +188,15 @@
   StartDrag() virtual methods changed.  You will need to change them in your
   derived renderer class too if you override them.
 
+- wxThread::Wait and wxThread::Delete now take an extra parameter which
+  indicates whether events should be processed or not while waiting for
+  the thread to finish.
+  By default no events are processed. This differs from previous behavior
+  under MSW as there events were always processed while waiting. You will need
+  to explicitly pass wxTHREAD_WAIT_DISPATCH option or make sure
+  WXWIN_COMPATIBILITY_2_8 is defined to obtain previous MSW functionality.
 
+
 Changes in behaviour which may result in compilation errors
 -----------------------------------------------------------
 
Index: interface/wx/thread.h
===================================================================
--- interface/wx/thread.h	(revision 67101)
+++ interface/wx/thread.h	(working copy)
@@ -592,6 +592,17 @@
 };
 
 /**
+  The possible thread wait types.
+*/
+enum wxThreadWait
+{
+    /** no events are processed while waiting */
+    wxTHREAD_WAIT_BLOCK = 0,
+    /** events are processed while waiting; MSW only */
+    wxTHREAD_WAIT_DISPATCH
+};
+
+/**
   The possible thread kinds.
 */
 enum wxThreadKind
@@ -1001,6 +1012,15 @@
         Calling Delete() gracefully terminates a @b detached thread, either when
         the thread calls TestDestroy() or when it finishes processing.
 
+        @param rc
+            The thread exit code, if rc is not NULL.
+
+        @param flags
+            Indicates whether events should be processed or not while waiting
+            for the thread to finish.
+            Implemented only for MSW. Under other platforms this parameter is ignored
+            and the behavior always corresponds to wxTHREAD_WAIT_BLOCK option.
+
         @note
             This function works on a joinable thread but in that case makes
             the TestDestroy() function of the thread return @true and then
@@ -1009,7 +1029,7 @@
 
         See @ref thread_deletion for a broader explanation of this routine.
     */
-    wxThreadError Delete(void** rc = NULL);
+    wxThreadError Delete(ExitCode *rc = NULL, int flags = wxTHREAD_WAIT_BLOCK);
 
     /**
         Returns the number of system CPUs or -1 if the value is unknown.
@@ -1224,9 +1244,15 @@
 
         This function can only be called from another thread context.
 
+        @param flags
+            Indicates whether events should be processed or not while waiting
+            for the thread to finish.
+            Implemented only for MSW. Under other platforms this parameter is ignored
+            and the behavior always corresponds to wxTHREAD_WAIT_BLOCK option.
+
         See @ref thread_deletion for a broader explanation of this routine.
     */
-    ExitCode Wait();
+    ExitCode Wait(int flags = wxTHREAD_WAIT_BLOCK);
 
     /**
         Give the rest of the thread's time-slice to the system allowing the other

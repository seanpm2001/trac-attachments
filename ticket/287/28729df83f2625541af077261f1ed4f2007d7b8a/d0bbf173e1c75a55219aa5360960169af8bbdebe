diff -crbN ../org/wxMSW-2.8.7/Makefile.in ../wxMSW-2.8.7/Makefile.in
*** ../org/wxMSW-2.8.7/Makefile.in	Wed Nov 21 12:39:24 2007
--- ../wxMSW-2.8.7/Makefile.in	Tue Sep  2 11:30:18 2008
***************
*** 570,575 ****
--- 570,576 ----
  	src/common/object.cpp \
  	src/common/platinfo.cpp \
  	src/common/powercmn.cpp \
+ 	src/common/devicechcmn.cpp \
  	src/common/process.cpp \
  	src/common/regex.cpp \
  	src/common/stdpbase.cpp \
***************
*** 12681,12686 ****
--- 12682,12690 ----
  monodll_powercmn.o: $(srcdir)/src/common/powercmn.cpp $(MONODLL_ODEP)
  	$(CXXC) -c -o $@ $(MONODLL_CXXFLAGS) $(srcdir)/src/common/powercmn.cpp
  
+ monodll_devicechcmn.o: $(srcdir)/src/common/devicechcmn.cpp $(MONODLL_ODEP)
+ 	$(CXXC) -c -o $@ $(MONODLL_CXXFLAGS) $(srcdir)/src/common/devicechcmn.cpp
+ 
  monodll_process.o: $(srcdir)/src/common/process.cpp $(MONODLL_ODEP)
  	$(CXXC) -c -o $@ $(MONODLL_CXXFLAGS) $(srcdir)/src/common/process.cpp
  
***************
*** 16809,16814 ****
--- 16813,16821 ----
  monolib_powercmn.o: $(srcdir)/src/common/powercmn.cpp $(MONOLIB_ODEP)
  	$(CXXC) -c -o $@ $(MONOLIB_CXXFLAGS) $(srcdir)/src/common/powercmn.cpp
  
+ monolib_devicechcmn.o: $(srcdir)/src/common/devicechcmn.cpp $(MONOLIB_ODEP)
+ 	$(CXXC) -c -o $@ $(MONOLIB_CXXFLAGS) $(srcdir)/src/common/devicechcmn.cpp
+ 
  monolib_process.o: $(srcdir)/src/common/process.cpp $(MONOLIB_ODEP)
  	$(CXXC) -c -o $@ $(MONOLIB_CXXFLAGS) $(srcdir)/src/common/process.cpp
  
***************
*** 20940,20945 ****
--- 20947,20955 ----
  basedll_powercmn.o: $(srcdir)/src/common/powercmn.cpp $(BASEDLL_ODEP)
  	$(CXXC) -c -o $@ $(BASEDLL_CXXFLAGS) $(srcdir)/src/common/powercmn.cpp
  
+ basedll_devicechcmn.o: $(srcdir)/src/common/devicechcmn.cpp $(BASEDLL_ODEP)
+ 	$(CXXC) -c -o $@ $(BASEDLL_CXXFLAGS) $(srcdir)/src/common/devicechcmn.cpp
+ 
  basedll_process.o: $(srcdir)/src/common/process.cpp $(BASEDLL_ODEP)
  	$(CXXC) -c -o $@ $(BASEDLL_CXXFLAGS) $(srcdir)/src/common/process.cpp
  
***************
*** 21528,21533 ****
--- 21538,21546 ----
  baselib_powercmn.o: $(srcdir)/src/common/powercmn.cpp $(BASELIB_ODEP)
  	$(CXXC) -c -o $@ $(BASELIB_CXXFLAGS) $(srcdir)/src/common/powercmn.cpp
  
+ baselib_devicechcmn.o: $(srcdir)/src/common/devicechcmn.cpp $(BASELIB_ODEP)
+ 	$(CXXC) -c -o $@ $(BASELIB_CXXFLAGS) $(srcdir)/src/common/devicechcmn.cpp
+ 
  baselib_process.o: $(srcdir)/src/common/process.cpp $(BASELIB_ODEP)
  	$(CXXC) -c -o $@ $(BASELIB_CXXFLAGS) $(srcdir)/src/common/process.cpp
  
diff -crbN ../org/wxMSW-2.8.7/build/bakefiles/files.bkl ../wxMSW-2.8.7/build/bakefiles/files.bkl
*** ../org/wxMSW-2.8.7/build/bakefiles/files.bkl	Wed Nov 21 12:39:10 2007
--- ../wxMSW-2.8.7/build/bakefiles/files.bkl	Tue Sep  2 11:30:18 2008
***************
*** 334,339 ****
--- 334,340 ----
      src/common/object.cpp
      src/common/platinfo.cpp
      src/common/powercmn.cpp
+     src/common/devicechcmn.cpp
      src/common/process.cpp
      src/common/regex.cpp
      src/common/stdpbase.cpp
diff -crbN ../org/wxMSW-2.8.7/build/msw/wx_base.dsp ../wxMSW-2.8.7/build/msw/wx_base.dsp
*** ../org/wxMSW-2.8.7/build/msw/wx_base.dsp	Wed Nov 21 12:39:10 2007
--- ../wxMSW-2.8.7/build/msw/wx_base.dsp	Tue Sep  2 11:30:18 2008
***************
*** 643,648 ****
--- 643,652 ----
  # End Source File
  # Begin Source File
  
+ SOURCE=..\..\src\common\devicechcmn.cpp
+ # End Source File
+ # Begin Source File
+ 
  SOURCE=..\..\src\common\process.cpp
  # End Source File
  # Begin Source File
diff -crbN ../org/wxMSW-2.8.7/src/common/devicechcmn.cpp ../wxMSW-2.8.7/src/common/devicechcmn.cpp
*** ../org/wxMSW-2.8.7/src/common/devicechcmn.cpp	Thu Jan  1 01:00:00 1970
--- ../wxMSW-2.8.7/src/common/devicechcmn.cpp	Tue Sep  2 13:55:57 2008
***************
*** 0 ****
--- 1,139 ----
+ ///////////////////////////////////////////////////////////////////////////////
+ // Name:        src/common/powercmn.cpp
+ // Purpose:     power event types and stubs for power functions
+ // Author:      Vadim Zeitlin
+ // Modified by:
+ // Created:     2006-05-27
+ // RCS-ID:      $Id: powercmn.cpp 48811 2007-09-19 23:11:28Z RD $
+ // Copyright:   (c) 2006 Vadim Zeitlin <vadim@wxwindows.org>
+ // Licence:     wxWindows licence
+ ///////////////////////////////////////////////////////////////////////////////
+ 
+ // ============================================================================
+ // declarations
+ // ============================================================================
+ 
+ // ----------------------------------------------------------------------------
+ // headers
+ // ----------------------------------------------------------------------------
+ 
+ // for compilers that support precompilation, includes "wx.h".
+ #include "wx/wxprec.h"
+ 
+ #ifdef __BORLANDC__
+     #pragma hdrstop
+ #endif
+ 
+ #ifndef WX_PRECOMP
+ #endif //WX_PRECOMP
+ 
+ #include "wx/devicech.h"
+ 
+ // ============================================================================
+ // implementation
+ // ============================================================================
+ 
+ #ifdef wxHAS_DOCKCHANGE_EVENTS
+ DEFINE_EVENT_TYPE(wxEVT_DOCKCHANGE_CANCELED)
+ DEFINE_EVENT_TYPE(wxEVT_DOCKCHANGE_CHANGED )
+ DEFINE_EVENT_TYPE(wxEVT_DOCKCHANGE_QUERY   )
+ IMPLEMENT_ABSTRACT_CLASS(wxDockChangeEvent, wxEvent)
+ #endif
+ 
+ 
+ 
+ // ============================================================================
+ // implementation
+ // ============================================================================
+ 
+ #ifdef wxHAS_DEVICECHANGE_EVENTS
+     DEFINE_EVENT_TYPE(wxEVT_DEVICECHANGE_ARRIVAL             )
+     DEFINE_EVENT_TYPE(wxEVT_DEVICECHANGE_QUERYREMOVE         )
+     DEFINE_EVENT_TYPE(wxEVT_DEVICECHANGE_QUERYREMOVEFAILED   )
+     DEFINE_EVENT_TYPE(wxEVT_DEVICECHANGE_QUERYREMOVECOMPLETED)
+     DEFINE_EVENT_TYPE(wxEVT_DEVICECHANGE_REMOVEPENDING       )
+     DEFINE_EVENT_TYPE(wxEVT_DEVICECHANGE_DEVNODES_CHANGED    )
+     IMPLEMENT_ABSTRACT_CLASS(wxDeviceChangeEvent, wxEvent)
+ #endif
+     
+ // provide stubs for the systems not implementing these functions
+ #ifdef __WXMSW__
+ 
+ #include "wx\msw\registry.h"
+ 
+ wxDockState wxGetDockState()
+ {
+     /*
+     "HKLM\SYSTEM\CurrentControlSet\Control\IDConfigDB\CurrentDockInfo\DockingState"
+     value of 0 'Workstation or Server
+     value of 1 'Undocked Laptop
+     value of 2 'Docked Laptop
+     */
+     
+     wxRegKey k("HKLM\\SYSTEM\\CurrentControlSet\\Control\\IDConfigDB\\CurrentDockInfo");
+     long value = 0;
+     if (!k.QueryValue("DockingState", &value)) {
+         value = 0;
+     }
+     if (value == 1) {
+         return wxDOCK_UNDOCKED;
+     } else if (value == 2) {
+         return wxDOCK_DOCKED;
+     }
+     return wxDOCK_NONE;
+ }
+ 
+ long wxGetDockId()
+ {
+     wxRegKey k("HKLM\\SYSTEM\\CurrentControlSet\\Control\\IDConfigDB\\CurrentDockInfo");
+     long value = 0;
+     if (!k.QueryValue("DockID", &value)) {
+         value = 0;
+     }
+     return value;
+ }
+ 
+ long wxGetDockSerialNumber()
+ {
+     wxRegKey k("HKLM\\SYSTEM\\CurrentControlSet\\Control\\IDConfigDB\\CurrentDockInfo");
+     long value = 0;
+     if (!k.QueryValue("SerialNumber", &value)) {
+         value = 0;
+     }
+     return value;
+ }
+ 
+ long wxGetDockCapabilities()
+ {
+     wxRegKey k("HKLM\\SYSTEM\\CurrentControlSet\\Control\\IDConfigDB\\CurrentDockInfo");
+     long value = 0;
+     if (!k.QueryValue("Capabilities", &value)) {
+         value = 0;
+     }
+     return value;
+ }
+ 
+ long wxGetDockAcpiSerialNumber()
+ {
+     wxRegKey k("HKLM\\SYSTEM\\CurrentControlSet\\Control\\IDConfigDB\\CurrentDockInfo");
+     long value = 0;
+     if (!k.QueryValue("AcpiSerialNumber", &value)) {
+         value = 0;
+     }
+     return value;
+ }
+ 
+ long wxGetDockEjectableDocks()
+ {
+     wxRegKey k("HKLM\\SYSTEM\\CurrentControlSet\\Control\\IDConfigDB\\CurrentDockInfo");
+     long value = 0;
+     if (!k.QueryValue("EjectableDocks", &value)) {
+         value = 0;
+     }
+     return value;
+ }
+ 
+ 
+ 
+ #endif // systems without power management functions
+ 
diff -crbN ../org/wxMSW-2.8.7/include/wx/devicech.h ../wxMSW-2.8.7/include/wx/devicech.h
*** ../org/wxMSW-2.8.7/include/wx/devicech.h	Thu Jan  1 01:00:00 1970
--- ../wxMSW-2.8.7/include/wx/devicech.h	Tue Sep  2 13:57:00 2008
***************
*** 0 ****
--- 1,180 ----
+ ///////////////////////////////////////////////////////////////////////////////
+ // Name:        wx/devicech.h
+ // Purpose:     functions and classes for system devicech management
+ // Author:      Vadim Zeitlin
+ // Modified by:
+ // Created:     2006-05-27
+ // RCS-ID:      $Id: devicech.h 48811 2007-09-19 23:11:28Z RD $
+ // Copyright:   (c) 2006 Vadim Zeitlin <vadim@wxwindows.org>
+ // Licence:     wxWindows licence
+ ///////////////////////////////////////////////////////////////////////////////
+ 
+ #ifndef _WX_DEVICECH_H_
+ #define _WX_DEVICECH_H_
+ 
+ #include "wx/event.h"
+ 
+ 
+ // ----------------------------------------------------------------------------
+ // wxDockChangeEvent is generated when the system dock status changes
+ // ----------------------------------------------------------------------------
+ 
+ enum wxDockState
+ {
+     wxDOCK_NONE,
+     wxDOCK_DOCKED,
+     wxDOCK_UNDOCKED
+ };
+ 
+ 
+ 
+ // currently the dock events are only available under Windows, to avoid
+ // compiling in the code for handling them which is never going to be invoked
+ // under the other platforms, we define wxHAS_DOCKCHANGE_EVENTS symbol if this event
+ // is available, it should be used to guard all code using wxDeviceChangeEvent
+ #ifdef __WXMSW__
+ 
+ #define wxHAS_DOCKCHANGE_EVENTS
+ 
+ class WXDLLIMPEXP_BASE wxDockChangeEvent : public wxEvent
+ {
+ public:
+     wxDockChangeEvent(wxEventType evtType) : wxEvent(wxID_NONE, evtType)
+     {
+         m_veto = false;
+     }
+ 
+     // Veto the operation (only makes sense with EVT_DEVICECHANGE_SUSPENDING)
+     void Veto() { m_veto = true; }
+ 
+     bool IsVetoed() const { return m_veto; }
+ 
+ 
+     // default copy ctor, assignment operator and dtor are ok
+ 
+     virtual wxEvent *Clone() const { return new wxDockChangeEvent(*this); }
+ 
+ private:
+     bool m_veto;
+ 
+ #if wxABI_VERSION >= 20806
+     DECLARE_ABSTRACT_CLASS(wxDockChangeEvent)
+ #endif
+ };
+ 
+ 
+ 
+ BEGIN_DECLARE_EVENT_TYPES()
+     DECLARE_EXPORTED_EVENT_TYPE(WXDLLIMPEXP_BASE, wxEVT_DOCKCHANGE_CANCELED, 450)
+     DECLARE_EXPORTED_EVENT_TYPE(WXDLLIMPEXP_BASE, wxEVT_DOCKCHANGE_CHANGED , 451)
+     DECLARE_EXPORTED_EVENT_TYPE(WXDLLIMPEXP_BASE, wxEVT_DOCKCHANGE_QUERY   , 452)
+ END_DECLARE_EVENT_TYPES()
+ 
+ typedef void (wxEvtHandler::*wxDockChangeEventFunction)(wxDockChangeEvent&);
+ 
+ #define wxDockChangeEventHandler(func) \
+     (wxObjectEventFunction)(wxEventFunction) \
+         wxStaticCastEvent(wxDockChangeEventFunction, &func)
+ 
+ #define EVT_DOCKCHANGE_CANCELED(func) \
+     wx__DECLARE_EVT0(wxEVT_DOCKCHANGE_CANCELED, wxDockChangeEventHandler(func))
+ #define EVT_DOCKCHANGE_CHANGED(func) \
+     wx__DECLARE_EVT0(wxEVT_DOCKCHANGE_CHANGED, wxDockChangeEventHandler(func))
+ #define EVT_DOCKCHANGE_QUERY(func) \
+     wx__DECLARE_EVT0(wxEVT_DOCKCHANGE_QUERY, wxDockChangeEventHandler(func))
+ 
+ #else // no support for power events
+     #undef wxHAS_DOCKCHANGE_EVENTS
+ #endif // support for power events/no support
+ 
+ // ----------------------------------------------------------------------------
+ // docking functions
+ // ----------------------------------------------------------------------------
+ 
+ // return the current dock state: 
+ WXDLLIMPEXP_BASE wxDockState wxGetDockState();
+ WXDLLIMPEXP_BASE long wxGetDockId();
+ WXDLLIMPEXP_BASE long wxGetDockSerialNumber();
+ WXDLLIMPEXP_BASE long wxGetDockCapabilities();
+ WXDLLIMPEXP_BASE long wxGetDockAcpiSerialNumber();
+ WXDLLIMPEXP_BASE long wxGetDockEjectableDocks();
+ 
+ 
+ 
+ 
+ 
+ // ----------------------------------------------------------------------------
+ // wxDeviceChangeEvent is generated when the system devices changes
+ // ----------------------------------------------------------------------------
+ 
+ // currently the device change events are only available under Windows, to avoid
+ // compiling in the code for handling them which is never going to be invoked
+ // under the other platforms, we define wxHAS_DEVICECHANGE_EVENTS symbol if this event
+ // is available, it should be used to guard all code using wxDeviceChangeEvent
+ 
+ // !!!
+ // !!! TODO: an argument must be inserted to indentifi which device in changed/removed/inserted
+ // !!!
+ #ifdef __WXMSW__
+ 
+ #define wxHAS_DEVICECHANGE_EVENTS
+ 
+ class WXDLLIMPEXP_BASE wxDeviceChangeEvent : public wxEvent
+ {
+ public:
+     wxDeviceChangeEvent(wxEventType evtType) : wxEvent(wxID_NONE, evtType)
+     {
+         m_veto = false;
+     }
+     
+     // Veto the operation (only makes sense with EVT_DEVICECHANGE_SUSPENDING)
+     void Veto() { m_veto = true; }
+     
+     bool IsVetoed() const { return m_veto; }
+     
+     
+     // default copy ctor, assignment operator and dtor are ok
+     
+     virtual wxEvent *Clone() const { return new wxDeviceChangeEvent(*this); }
+     
+ private:
+     bool m_veto;
+     
+ #if wxABI_VERSION >= 20806
+     DECLARE_ABSTRACT_CLASS(wxDeviceChangeEvent)
+ #endif
+ };
+ 
+ BEGIN_DECLARE_EVENT_TYPES()
+ DECLARE_EXPORTED_EVENT_TYPE(WXDLLIMPEXP_BASE, wxEVT_DEVICECHANGE_ARRIVAL             , 460)
+ DECLARE_EXPORTED_EVENT_TYPE(WXDLLIMPEXP_BASE, wxEVT_DEVICECHANGE_QUERYREMOVE         , 461)
+ DECLARE_EXPORTED_EVENT_TYPE(WXDLLIMPEXP_BASE, wxEVT_DEVICECHANGE_QUERYREMOVEFAILED   , 462)
+ DECLARE_EXPORTED_EVENT_TYPE(WXDLLIMPEXP_BASE, wxEVT_DEVICECHANGE_QUERYREMOVECOMPLETED, 463)
+ DECLARE_EXPORTED_EVENT_TYPE(WXDLLIMPEXP_BASE, wxEVT_DEVICECHANGE_REMOVEPENDING       , 464)
+ DECLARE_EXPORTED_EVENT_TYPE(WXDLLIMPEXP_BASE, wxEVT_DEVICECHANGE_DEVNODES_CHANGED    , 465)
+ END_DECLARE_EVENT_TYPES()
+ 
+ typedef void (wxEvtHandler::*wxDeviceChangeEventFunction)(wxDeviceChangeEvent&);
+ 
+ #define wxDeviceChangeEventHandler(func) \
+     (wxObjectEventFunction)(wxEventFunction) \
+ wxStaticCastEvent(wxDeviceChangeEventFunction, &func)
+ 
+ #define EVT_DEVICECHANGE_ARRIVAL(func) \
+ wx__DECLARE_EVT0(wxEVT_DEVICECHANGE_ARRIVAL, wxDeviceChangeEventHandler(func))
+ #define EVT_DEVICECHANGE_QUERYREMOVE(func) \
+ wx__DECLARE_EVT0(wxEVT_DEVICECHANGE_QUERYREMOVE, wxDeviceChangeEventHandler(func))
+ #define EVT_DEVICECHANGE_QUERYREMOVEFAILED(func) \
+ wx__DECLARE_EVT0(wxEVT_DEVICECHANGE_QUERYREMOVEFAILED, wxDeviceChangeEventHandler(func))
+ #define EVT_DEVICECHANGE_QUERYREMOVECOMPLETED(func) \
+ wx__DECLARE_EVT0(wxEVT_DEVICECHANGE_QUERYREMOVECOMPLETED, wxDeviceChangeEventHandler(func))
+ #define EVT_DEVICECHANGE_REMOVEPENDING(func) \
+ wx__DECLARE_EVT0(wxEVT_DEVICECHANGE_REMOVEPENDING, wxDeviceChangeEventHandler(func))
+ #define EVT_DEVICECHANGE_DEVNODES_CHANGED(func) \
+ wx__DECLARE_EVT0(wxEVT_DEVICECHANGE_DEVNODES_CHANGED, wxDeviceChangeEventHandler(func))
+ 
+ #else // no support for power events
+ #undef wxHAS_DEVICECHANGE_EVENTS
+ #endif // support for power events/no support
+ 
+ #endif // _WX_DEVICECH_H_
diff -crbN ../org/wxMSW-2.8.7/src/msw/window.cpp ../wxMSW-2.8.7/src/msw/window.cpp
*** ../org/wxMSW-2.8.7/src/msw/window.cpp	Wed Nov 21 12:38:58 2007
--- ../wxMSW-2.8.7/src/msw/window.cpp	Tue Sep  2 14:07:32 2008
***************
*** 58,63 ****
--- 58,64 ----
  #endif
  
  #include "wx/evtloop.h"
+ #include "wx/devicech.h"
  #include "wx/power.h"
  #include "wx/sysopt.h"
  
***************
*** 107,113 ****
  #endif
  
  #if !defined __WXWINCE__ && !defined NEED_PBT_H
!     #include <pbt.h>
  #endif
  
  #if defined(__WXWINCE__)
--- 108,118 ----
  #endif
  
  #if !defined __WXWINCE__ && !defined NEED_PBT_H
! #include <pbt.h>
! #endif
! 
! #if !defined __WXWINCE__ && !defined NEED_DBT_H
! #include <dbt.h>
  #endif
  
  #if defined(__WXWINCE__)
***************
*** 3299,3304 ****
--- 3304,3316 ----
                  rc.result = processed && vetoed ? BROADCAST_QUERY_DENY : TRUE;
              }
              break;
+         case WM_DEVICECHANGE:
+             {
+                 bool vetoed;
+                 processed = HandleDeviceChange(wParam, lParam, &vetoed);
+                 rc.result = processed && vetoed ? BROADCAST_QUERY_DENY : TRUE;
+             }
+             break;
  #endif // __WXWINCE__
  
  #if wxUSE_UXTHEME
***************
*** 4096,4101 ****
--- 4108,4195 ----
      return false;
  }
  
+ bool wxWindowMSW::HandleDeviceChange(WXWPARAM WXUNUSED_IN_WINCE(wParam),
+                               WXLPARAM WXUNUSED(lParam),
+                               bool *WXUNUSED_IN_WINCE(vetoed))
+ {
+ #ifdef __WXWINCE__
+     // FIXME
+     return false;
+ #else
+     wxEventType evtType = wxEVT_NULL;
+     switch ( wParam )
+     {
+     case DBT_CONFIGCHANGECANCELED:    // A request to change the current configuration (dock or undock) has been canceled.
+         evtType = wxEVT_DOCKCHANGE_CANCELED;
+         break;
+     case DBT_CONFIGCHANGED:           // The current configuration has changed, due to a dock or undock.
+         evtType = wxEVT_DOCKCHANGE_CHANGED;
+         break;
+     case DBT_QUERYCHANGECONFIG:       // Permission is requested to change the current configuration (dock or undock).
+         evtType = wxEVT_DOCKCHANGE_QUERY;
+         break;
+     
+     case DBT_DEVICEARRIVAL:           // A device or piece of media has been inserted and is now available.
+         evtType = wxEVT_DEVICECHANGE_ARRIVAL;
+         break;
+     case DBT_DEVICEQUERYREMOVE:       // Permission is requested to remove a device or piece of media. Any application can deny this request and cancel the removal.
+         evtType = wxEVT_DEVICECHANGE_QUERYREMOVE;
+         break;
+     case DBT_DEVICEQUERYREMOVEFAILED: // A request to remove a device or piece of media has been canceled.
+         evtType = wxEVT_DEVICECHANGE_QUERYREMOVEFAILED;
+         break;
+     case DBT_DEVICEREMOVECOMPLETE:    // A device or piece of media has been removed.
+         evtType = wxEVT_DEVICECHANGE_QUERYREMOVECOMPLETED;
+         break;
+     case DBT_DEVICEREMOVEPENDING:     // A device or piece of media is about to be removed. Cannot be denied.
+         evtType = wxEVT_DEVICECHANGE_REMOVEPENDING;
+         break;
+     case DBT_DEVNODES_CHANGED:        // A device has been added to or removed from the system.
+         evtType = wxEVT_DEVICECHANGE_DEVNODES_CHANGED;
+         break;
+ 
+     default:
+         wxLogDebug(_T("Unknown WM_DEVICECHANGE(%d) event"), wParam);
+         
+     case DBT_DEVICETYPESPECIFIC:      // A device-specific event has occurred.
+     case DBT_USERDEFINED:             // The meaning of this message is user-defined.
+     case DBT_CUSTOMEVENT:             // A custom event has occurred.
+         evtType = wxEVT_NULL;
+         break;
+     }
+     
+     // don't handle unknown messages
+     if ( evtType == wxEVT_NULL )
+         return false;
+ 
+ 
+     if ((evtType == wxEVT_DOCKCHANGE_CANCELED) ||
+         (evtType == wxEVT_DOCKCHANGE_CHANGED ) ||
+         (evtType == wxEVT_DOCKCHANGE_QUERY   )) {
+         wxDockChangeEvent event(evtType);
+         if ( !GetEventHandler()->ProcessEvent(event) )
+             return false;
+    
+         *vetoed = event.IsVetoed();
+     } else if ((evtType == wxEVT_DEVICECHANGE_ARRIVAL             ) ||
+                (evtType == wxEVT_DEVICECHANGE_QUERYREMOVE         ) ||
+                (evtType == wxEVT_DEVICECHANGE_QUERYREMOVEFAILED   ) ||
+                (evtType == wxEVT_DEVICECHANGE_QUERYREMOVECOMPLETED) ||
+                (evtType == wxEVT_DEVICECHANGE_REMOVEPENDING       ) ||
+                (evtType == wxEVT_DEVICECHANGE_DEVNODES_CHANGED    )) {
+         wxDockChangeEvent event(evtType);
+         if ( !GetEventHandler()->ProcessEvent(event) )
+             return false;
+ 
+         *vetoed = event.IsVetoed();
+     } else {
+         return false;
+     }
+     
+     return true;
+ #endif
+ }
+ 
  bool wxWindowMSW::HandlePower(WXWPARAM WXUNUSED_IN_WINCE(wParam),
                                WXLPARAM WXUNUSED(lParam),
                                bool *WXUNUSED_IN_WINCE(vetoed))
***************
*** 4104,4110 ****
      // FIXME
      return false;
  #else
!     wxEventType evtType;
      switch ( wParam )
      {
          case PBT_APMQUERYSUSPEND:
--- 4198,4204 ----
      // FIXME
      return false;
  #else
!     wxEventType evtType = wxEVT_NULL;
      switch ( wParam )
      {
          case PBT_APMQUERYSUSPEND:
***************
*** 4147,4152 ****
--- 4241,4247 ----
      if ( evtType == wxEVT_NULL )
          return false;
  
+ 
      // TODO: notify about PBTF_APMRESUMEFROMFAILURE in case of resume events?
  
      wxPowerEvent event(evtType);
diff -crbN ../org/wxMSW-2.8.7/include/wx/msw/window.h ../wxMSW-2.8.7/include/wx/msw/window.h
*** ../org/wxMSW-2.8.7/include/wx/msw/window.h	Wed Nov 21 12:39:28 2007
--- ../wxMSW-2.8.7/include/wx/msw/window.h	Tue Sep  2 10:29:18 2008
***************
*** 359,364 ****
--- 359,365 ----
      bool HandleSetCursor(WXHWND hWnd, short nHitTest, int mouseMsg);
  
      bool HandlePower(WXWPARAM wParam, WXLPARAM lParam, bool *vetoed);
+     bool HandleDeviceChange(WXWPARAM wParam, WXLPARAM lParam, bool *vetoed);
  
  
      // Window procedure

Index: include/wx/msw/private.h
===================================================================
--- include/wx/msw/private.h	(revision 65298)
+++ include/wx/msw/private.h	(working copy)
@@ -1005,21 +1005,11 @@
     return (void *)::GetWindowLongPtr(hwnd, GWLP_WNDPROC);
 }
 
-inline void *wxGetWindowUserData(HWND hwnd)
-{
-    return (void *)::GetWindowLongPtr(hwnd, GWLP_USERDATA);
-}
-
 inline WNDPROC wxSetWindowProc(HWND hwnd, WNDPROC func)
 {
     return (WNDPROC)::SetWindowLongPtr(hwnd, GWLP_WNDPROC, (LONG_PTR)func);
 }
 
-inline void *wxSetWindowUserData(HWND hwnd, void *data)
-{
-    return (void *)::SetWindowLongPtr(hwnd, GWLP_USERDATA, (LONG_PTR)data);
-}
-
 #else // __WIN32__
 
 // note that the casts to LONG_PTR here are required even on 32-bit machines
@@ -1029,21 +1019,11 @@
     return (WNDPROC)(LONG_PTR)::GetWindowLong(hwnd, GWL_WNDPROC);
 }
 
-inline void *wxGetWindowUserData(HWND hwnd)
-{
-    return (void *)(LONG_PTR)::GetWindowLong(hwnd, GWL_USERDATA);
-}
-
 inline WNDPROC wxSetWindowProc(HWND hwnd, WNDPROC func)
 {
     return (WNDPROC)(LONG_PTR)::SetWindowLong(hwnd, GWL_WNDPROC, (LONG_PTR)func);
 }
 
-inline void *wxSetWindowUserData(HWND hwnd, void *data)
-{
-    return (void *)(LONG_PTR)::SetWindowLong(hwnd, GWL_USERDATA, (LONG_PTR)data);
-}
-
 #endif // __WIN64__/__WIN32__
 
 #endif // wxUSE_GUI
Index: include/wx/msw/radiobox.h
===================================================================
--- include/wx/msw/radiobox.h	(revision 65298)
+++ include/wx/msw/radiobox.h	(working copy)
@@ -123,6 +123,8 @@
     void SetLabelFont(const wxFont& WXUNUSED(font)) {}
     void SetButtonFont(const wxFont& font) { SetFont(font); }
 
+    static wxRadioBox *GetRadioBoxFromHWND(WXHWND hwnd);
+
     // implementation only from now on
     // -------------------------------
 
Index: include/wx/msw/spinctrl.h
===================================================================
--- include/wx/msw/spinctrl.h	(revision 65298)
+++ include/wx/msw/spinctrl.h	(working copy)
@@ -98,6 +98,7 @@
 
     // return the spinctrl object whose buddy is the given window or NULL
     static wxSpinCtrl *GetSpinForTextCtrl(WXHWND hwndBuddy);
+    static wxSpinCtrl *GetSpinCtrlFromHWND(WXHWND hwnd);
 
     // process a WM_COMMAND generated by the buddy text control
     bool ProcessTextCommand(WXWORD cmd, WXWORD id);
@@ -105,6 +106,7 @@
     // recognize buddy window as part of this control at wx level
     virtual bool ContainsHWND(WXHWND hWnd) const { return hWnd == m_hwndBuddy; }
 
+
 protected:
     virtual void DoGetPosition(int *x, int *y) const;
     virtual void DoMoveWindow(int x, int y, int width, int height);
@@ -130,8 +132,7 @@
     // called to ensure that the value is in the correct range
     virtual void NormalizeValue();
 
-
-    // the value of the control before the latest change (which might not have
+     // the value of the control before the latest change (which might not have
     // changed anything in fact -- this is why we need this field)
     int m_oldValue;
 
Index: src/msw/mediactrl_qt.cpp
===================================================================
--- src/msw/mediactrl_qt.cpp	(revision 65298)
+++ src/msw/mediactrl_qt.cpp	(working copy)
@@ -436,11 +436,22 @@
 };
 
 
+// ---------------------------------------------------------------------------
+// global vars
+// ---------------------------------------------------------------------------
+
+// hash containing all our wxQTMediaBackend's, it uses HWND keys and wxQTMediaBackend* values
+WX_DECLARE_HASH_MAP(HWND, wxQTMediaBackend *,
+                    wxPointerHash, wxPointerEqual,
+                    QTMediaBackendHandles);
+
+QTMediaBackendHandles gs_QTMediaBackendHandles;
+
+
 //===========================================================================
 //  IMPLEMENTATION
 //===========================================================================
 
-
 //---------------------------------------------------------------------------
 // wxQTMediaBackend
 //
@@ -556,8 +567,17 @@
 LRESULT CALLBACK wxQTMediaBackend::QTWndProc(HWND hWnd, UINT nMsg,
                                              WPARAM wParam, LPARAM lParam)
 {
-    wxQTMediaBackend* pThis = (wxQTMediaBackend*)wxGetWindowUserData(hWnd);
+    wxQTMediaBackend* pThis=NULL;
 
+    QTMediaBackendHandles::iterator it=gs_QTMediaBackendHandles.find(hWnd);
+    if( it != gs_QTMediaBackendHandles.end() ) pThis = it->second;
+
+    if( pThis==NULL )
+    {
+        // is this the correct fallback behavior?
+        return ::DefWindowProc(hWnd, nMsg, wParam, lParam);
+    }
+
     MSG msg;
     msg.hwnd = hWnd;
     msg.message = nMsg;
@@ -574,7 +594,7 @@
 }
 
 //---------------------------------------------------------------------------
-// wxQTMediaBackend Destructor
+// wxQTMediaBackend Constructor
 //
 // Sets m_timer to NULL signifying we havn't loaded anything yet
 //---------------------------------------------------------------------------
@@ -620,6 +640,8 @@
         //the docs are fuzzy on whether or not TerminateQTML is
         m_lib.ExitMovies();
         m_lib.TerminateQTML();
+
+        if( m_ctrl ) gs_QTMediaBackendHandles.erase( m_ctrl->GetHWND() );
     }
 }
 
@@ -1149,8 +1171,8 @@
             // intercept the wndproc of our control window
             wxSetWindowProc((HWND)m_ctrl->GetHWND(), wxQTMediaBackend::QTWndProc);
 
-            // set the user data of our window
-            wxSetWindowUserData((HWND)m_ctrl->GetHWND(), this);
+            // store pointer to ourselves in hashtable
+            gs_QTMediaBackendHandles[m_ctrl->GetHWND()]=this;
         }
     }
 
Index: src/msw/radiobox.cpp
===================================================================
--- src/msw/radiobox.cpp	(revision 65298)
+++ src/msw/radiobox.cpp	(working copy)
@@ -113,10 +113,26 @@
 // the pointer to standard radio button wnd proc
 static WXFARPROC s_wndprocRadioBtn = (WXFARPROC)NULL;
 
+// hash containing all our wxRadioBoxes, it uses HWND keys and wxRadioBox* values
+WX_DECLARE_HASH_MAP(HWND, wxRadioBox *,
+                    wxPointerHash, wxPointerEqual,
+                    RadioBoxHandles);
+
+RadioBoxHandles gs_radioBoxHandles;
+
 // ===========================================================================
 // implementation
 // ===========================================================================
 
+/* static */
+wxRadioBox* wxRadioBox::GetRadioBoxFromHWND(WXHWND hwnd)
+{
+    RadioBoxHandles::iterator it=gs_radioBoxHandles.find(hwnd);
+    if( it != gs_radioBoxHandles.end() ) return it->second;
+
+    return NULL;
+}
+
 // ---------------------------------------------------------------------------
 // wxRadioBox creation
 // ---------------------------------------------------------------------------
@@ -253,9 +269,16 @@
 {
     SendDestroyEvent();
 
+    // remove all entries we put into the hashtable
+    for ( size_t item = 0; item < m_radioButtons->GetCount(); item++ )
+    {
+        gs_radioBoxHandles.erase( m_radioButtons->Get(item) );
+    }
     delete m_radioButtons;
+
     if ( m_dummyHwnd )
         DestroyWindow((HWND)m_dummyHwnd);
+
     delete[] m_radioWidth;
     delete[] m_radioHeight;
 }
@@ -270,7 +293,7 @@
         s_wndprocRadioBtn = (WXFARPROC)wxGetWindowProc(hwndBtn);
 
     wxSetWindowProc(hwndBtn, wxRadioBtnWndProc);
-    wxSetWindowUserData(hwndBtn, this);
+    gs_radioBoxHandles[hwndBtn]=this;
 }
 
 // ----------------------------------------------------------------------------
@@ -745,139 +768,133 @@
                                            WPARAM wParam,
                                            LPARAM lParam)
 {
-    switch ( message )
-    {
-        case WM_GETDLGCODE:
-            // we must tell IsDialogMessage()/our kbd processing code that we
-            // want to process arrows ourselves because neither of them is
-            // smart enough to handle arrows properly for us
-            {
-                long lDlgCode = ::CallWindowProc(CASTWNDPROC s_wndprocRadioBtn, hwnd,
-                                                 message, wParam, lParam);
 
-                return lDlgCode | DLGC_WANTARROWS;
-            }
+    wxRadioBox *radiobox = wxRadioBox::GetRadioBoxFromHWND(hwnd);
 
-        case WM_KEYDOWN:
-            {
-                wxRadioBox *radiobox = (wxRadioBox *)wxGetWindowUserData(hwnd);
+    // not our radiobox, then this message is not intended for us
+    if( radiobox != NULL )
+    {
+        switch ( message )
+        {
+            case WM_GETDLGCODE:
+                // we must tell IsDialogMessage()/our kbd processing code that we
+                // want to process arrows ourselves because neither of them is
+                // smart enough to handle arrows properly for us
+                {
+                    long lDlgCode = ::CallWindowProc(CASTWNDPROC s_wndprocRadioBtn, hwnd,
+                                                    message, wParam, lParam);
 
-                wxCHECK_MSG( radiobox, 0, wxT("radio button without radio box?") );
+                    return lDlgCode | DLGC_WANTARROWS;
+                }
 
-                bool processed = true;
-
-                wxDirection dir;
-                switch ( wParam )
+            case WM_KEYDOWN:
                 {
-                    case VK_UP:
-                        dir = wxUP;
-                        break;
+                    bool processed = true;
 
-                    case VK_LEFT:
-                        dir = wxLEFT;
-                        break;
+                    wxDirection dir;
+                    switch ( wParam )
+                    {
+                        case VK_UP:
+                            dir = wxUP;
+                            break;
 
-                    case VK_DOWN:
-                        dir = wxDOWN;
-                        break;
+                        case VK_LEFT:
+                            dir = wxLEFT;
+                            break;
 
-                    case VK_RIGHT:
-                        dir = wxRIGHT;
-                        break;
+                        case VK_DOWN:
+                            dir = wxDOWN;
+                            break;
 
-                    default:
-                        processed = false;
+                        case VK_RIGHT:
+                            dir = wxRIGHT;
+                            break;
 
-                        // just to suppress the compiler warning
-                        dir = wxALL;
-                }
+                        default:
+                            processed = false;
 
-                if ( processed )
-                {
-                    int selOld = radiobox->GetSelection();
-                    int selNew = radiobox->GetNextItem
-                                 (
-                                  selOld,
-                                  dir,
-                                  radiobox->GetWindowStyle()
-                                 );
+                            // just to suppress the compiler warning
+                            dir = wxALL;
+                    }
 
-                    if ( selNew != selOld )
+                    if ( processed )
                     {
-                        radiobox->SetSelection(selNew);
-                        radiobox->SetFocus();
+                        int selOld = radiobox->GetSelection();
+                        int selNew = radiobox->GetNextItem
+                                    (
+                                    selOld,
+                                    dir,
+                                    radiobox->GetWindowStyle()
+                                    );
 
-                        // emulate the button click
-                        radiobox->SendNotificationEvent();
+                        if ( selNew != selOld )
+                        {
+                            radiobox->SetSelection(selNew);
+                            radiobox->SetFocus();
 
-                        return 0;
+                            // emulate the button click
+                            radiobox->SendNotificationEvent();
+
+                            return 0;
+                        }
                     }
                 }
-            }
-            break;
+                break;
 
-        case WM_SETFOCUS:
-        case WM_KILLFOCUS:
-            {
-                wxRadioBox *radiobox = (wxRadioBox *)wxGetWindowUserData(hwnd);
+            case WM_SETFOCUS:
+            case WM_KILLFOCUS:
+                {
+                    // if we don't do this, no focus events are generated for the
+                    // radiobox and, besides, we need to notify the parent about
+                    // the focus change, otherwise the focus handling logic in
+                    // wxControlContainer doesn't work
+                    if ( message == WM_SETFOCUS )
+                        radiobox->HandleSetFocus((WXHWND)wParam);
+                    else
+                        radiobox->HandleKillFocus((WXHWND)wParam);
+                }
+                break;
 
-                wxCHECK_MSG( radiobox, 0, wxT("radio button without radio box?") );
-
-                // if we don't do this, no focus events are generated for the
-                // radiobox and, besides, we need to notify the parent about
-                // the focus change, otherwise the focus handling logic in
-                // wxControlContainer doesn't work
-                if ( message == WM_SETFOCUS )
-                    radiobox->HandleSetFocus((WXHWND)wParam);
-                else
-                    radiobox->HandleKillFocus((WXHWND)wParam);
-            }
-            break;
-
 #ifndef __WXWINCE__
-        case WM_HELP:
-            {
-                wxRadioBox *radiobox = (wxRadioBox *)wxGetWindowUserData(hwnd);
+            case WM_HELP:
+                {
+                    bool processed = false;
 
-                wxCHECK_MSG( radiobox, 0, wxT("radio button without radio box?") );
+                    wxEvtHandler * const handler = radiobox->GetEventHandler();
 
-                bool processed = false;
-
-                wxEvtHandler * const handler = radiobox->GetEventHandler();
-
-                HELPINFO* info = (HELPINFO*) lParam;
-                if ( info->iContextType == HELPINFO_WINDOW )
-                {
-                    for ( wxWindow* subjectOfHelp = radiobox;
-                          subjectOfHelp;
-                          subjectOfHelp = subjectOfHelp->GetParent() )
+                    HELPINFO* info = (HELPINFO*) lParam;
+                    if ( info->iContextType == HELPINFO_WINDOW )
                     {
-                        wxHelpEvent helpEvent(wxEVT_HELP,
-                                              subjectOfHelp->GetId(),
-                                              wxPoint(info->MousePos.x,
-                                                      info->MousePos.y));
-                        helpEvent.SetEventObject(radiobox);
-                        if ( handler->ProcessEvent(helpEvent) )
+                        for ( wxWindow* subjectOfHelp = radiobox;
+                            subjectOfHelp;
+                            subjectOfHelp = subjectOfHelp->GetParent() )
                         {
-                            processed = true;
-                            break;
+                            wxHelpEvent helpEvent(wxEVT_HELP,
+                                                subjectOfHelp->GetId(),
+                                                wxPoint(info->MousePos.x,
+                                                        info->MousePos.y));
+                            helpEvent.SetEventObject(radiobox);
+                            if ( handler->ProcessEvent(helpEvent) )
+                            {
+                                processed = true;
+                                break;
+                            }
                         }
                     }
+                    else if (info->iContextType == HELPINFO_MENUITEM)
+                    {
+                        wxHelpEvent helpEvent(wxEVT_HELP, info->iCtrlId);
+                        helpEvent.SetEventObject(radiobox);
+                        processed = handler->ProcessEvent(helpEvent);
+                    }
+
+                    if ( processed )
+                        return 0;
                 }
-                else if (info->iContextType == HELPINFO_MENUITEM)
-                {
-                    wxHelpEvent helpEvent(wxEVT_HELP, info->iCtrlId);
-                    helpEvent.SetEventObject(radiobox);
-                    processed = handler->ProcessEvent(helpEvent);
-                }
-
-                if ( processed )
-                    return 0;
-            }
-            break;
+                break;
 #endif // !__WXWINCE__
+        }
     }
-
     return ::CallWindowProc(CASTWNDPROC s_wndprocRadioBtn, hwnd, message, wParam, lParam);
 }
 
Index: src/msw/spinctrl.cpp
===================================================================
--- src/msw/spinctrl.cpp	(revision 65298)
+++ src/msw/spinctrl.cpp	(working copy)
@@ -129,12 +129,34 @@
 // font size?)
 static const int MARGIN_BETWEEN = 1;
 
+
+// ---------------------------------------------------------------------------
+// global vars
+// ---------------------------------------------------------------------------
+
+// hash containing all our wxSpinCtrls, it uses HWND keys and wxSpinCtrl* values
+WX_DECLARE_HASH_MAP(HWND, wxSpinCtrl *,
+                    wxPointerHash, wxPointerEqual,
+                    SpinCtrlHandles);
+
+SpinCtrlHandles gs_spinCtrlHandles;
+
+
 // ============================================================================
 // implementation
 // ============================================================================
 
 wxArraySpins wxSpinCtrl::ms_allSpins;
 
+/* static */ wxSpinCtrl* wxSpinCtrl::GetSpinCtrlFromHWND(HWND hwnd)
+{
+   SpinCtrlHandles::iterator it=gs_spinCtrlHandles.find(hwnd);
+    if( it != gs_spinCtrlHandles.end() ) return it->second;
+
+    return NULL;
+}
+
+
 // ----------------------------------------------------------------------------
 // wnd proc for the buddy text ctrl
 // ----------------------------------------------------------------------------
@@ -144,53 +166,56 @@
                                             WPARAM wParam,
                                             LPARAM lParam)
 {
-    wxSpinCtrl *spin = (wxSpinCtrl *)wxGetWindowUserData(hwnd);
+    wxSpinCtrl *spin = wxSpinCtrl::GetSpinCtrlFromHWND(hwnd);
 
-    // forward some messages (mostly the key and focus ones) to the spin ctrl
-    switch ( message )
+    if( spin!=NULL )
     {
-        case WM_SETFOCUS:
-            // if the focus comes from the spin control itself, don't set it
-            // back to it -- we don't want to go into an infinite loop
-            if ( (WXHWND)wParam == spin->GetHWND() )
-                break;
-            //else: fall through
+        // forward some messages (mostly the key and focus ones) to the spin ctrl
+        switch ( message )
+        {
+            case WM_SETFOCUS:
+                // if the focus comes from the spin control itself, don't set it
+                // back to it -- we don't want to go into an infinite loop
+                if ( (WXHWND)wParam == spin->GetHWND() )
+                    break;
+                //else: fall through
 
-        case WM_KILLFOCUS:
-        case WM_CHAR:
-        case WM_DEADCHAR:
-        case WM_KEYUP:
-        case WM_KEYDOWN:
-#ifdef WM_HELP
-        // we need to forward WM_HELP too to ensure that the context help
-        // associated with wxSpinCtrl is shown when the text control part of it
-        // is clicked with the "?" cursor
-        case WM_HELP:
-#endif
-            spin->MSWWindowProc(message, wParam, lParam);
+            case WM_KILLFOCUS:
+            case WM_CHAR:
+            case WM_DEADCHAR:
+            case WM_KEYUP:
+            case WM_KEYDOWN:
+    #ifdef WM_HELP
+            // we need to forward WM_HELP too to ensure that the context help
+            // associated with wxSpinCtrl is shown when the text control part of it
+            // is clicked with the "?" cursor
+            case WM_HELP:
+    #endif
+                spin->MSWWindowProc(message, wParam, lParam);
 
-            // The control may have been deleted at this point, so check.
-            if ( !::IsWindow(hwnd) || wxGetWindowUserData(hwnd) != spin )
-                return 0;
-            break;
+                // The control may have been deleted at this point, so check.
+                //if ( !::IsWindow(hwnd) || wxGetWindowUserData(hwnd) != spin )
+                if ( !::IsWindow(hwnd) )
+                    return 0;
+                break;
 
-        case WM_GETDLGCODE:
-            if ( spin->HasFlag(wxTE_PROCESS_ENTER) )
-            {
-                long dlgCode = ::CallWindowProc
-                                 (
-                                    CASTWNDPROC spin->GetBuddyWndProc(),
-                                    hwnd,
-                                    message,
-                                    wParam,
-                                    lParam
-                                 );
-                dlgCode |= DLGC_WANTMESSAGE;
-                return dlgCode;
-            }
-            break;
+            case WM_GETDLGCODE:
+                if ( spin->HasFlag(wxTE_PROCESS_ENTER) )
+                {
+                    long dlgCode = ::CallWindowProc
+                                    (
+                                        CASTWNDPROC spin->GetBuddyWndProc(),
+                                        hwnd,
+                                        message,
+                                        wParam,
+                                        lParam
+                                    );
+                    dlgCode |= DLGC_WANTMESSAGE;
+                    return dlgCode;
+                }
+                break;
+        }
     }
-
     return ::CallWindowProc(CASTWNDPROC spin->GetBuddyWndProc(),
                             hwnd, message, wParam, lParam);
 }
@@ -198,10 +223,10 @@
 /* static */
 wxSpinCtrl *wxSpinCtrl::GetSpinForTextCtrl(WXHWND hwndBuddy)
 {
-    wxSpinCtrl *spin = (wxSpinCtrl *)wxGetWindowUserData((HWND)hwndBuddy);
+    wxSpinCtrl *spin = wxSpinCtrl::GetSpinCtrlFromHWND(hwndBuddy);
+    if( spin==NULL ) return NULL;
 
     int i = ms_allSpins.Index(spin);
-
     if ( i == wxNOT_FOUND )
         return NULL;
 
@@ -399,7 +424,8 @@
     wxSpinButtonBase::SetRange(min, max);
 
     // subclass the text ctrl to be able to intercept some events
-    wxSetWindowUserData(GetBuddyHwnd(), this);
+    gs_spinCtrlHandles[GetBuddyHwnd()]=this;
+
     m_wndProcBuddy = (WXFARPROC)wxSetWindowProc(GetBuddyHwnd(),
                                                 wxBuddyTextWndProc);
 
@@ -458,7 +484,9 @@
 
     // destroy the buddy window because this pointer which wxBuddyTextWndProc
     // uses will not soon be valid any more
-    ::DestroyWindow(GetBuddyHwnd());
+    ::DestroyWindow( GetBuddyHwnd() );
+
+    gs_spinCtrlHandles.erase( GetBuddyHwnd() );
 }
 
 // ----------------------------------------------------------------------------
Index: src/msw/window.cpp
===================================================================
--- src/msw/window.cpp	(revision 65298)
+++ src/msw/window.cpp	(working copy)
@@ -93,6 +93,10 @@
     #include "wx/spinctrl.h"
 #endif // wxUSE_SPINCTRL
 
+#if wxUSE_RADIOBOX
+    #include "wx/radiobox.h"
+#endif // wxUSE_RADIOBOX
+
 #include "wx/notebook.h"
 #include "wx/listctrl.h"
 #include "wx/dynlib.h"
@@ -6381,7 +6385,7 @@
             // do it as well, win would be already non NULL
             if ( ::SendMessage(hwnd, WM_GETDLGCODE, 0, 0) & DLGC_RADIOBUTTON )
             {
-                win = (wxWindow *)wxGetWindowUserData(hwnd);
+                win = wxRadioBox::GetRadioBoxFromHWND(hwnd);
             }
             //else: it's a wxRadioButton, not a radiobutton from wxRadioBox
 #endif // wxUSE_RADIOBOX

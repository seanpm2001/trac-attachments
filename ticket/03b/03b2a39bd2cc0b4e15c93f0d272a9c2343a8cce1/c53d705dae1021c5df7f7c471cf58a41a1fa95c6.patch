Index: src/osx/cocoa/dataview.mm
===================================================================
--- src/osx/cocoa/dataview.mm	(revision 69985)
+++ src/osx/cocoa/dataview.mm	(working copy)
@@ -168,13 +168,7 @@
     // or progress cells in the columns using the corresponding types even for
     // the container rows which is wrong
 
-    // half of the problem is just finding the objects we need from the column
-    // pointer which is itself stashed inside wxPointerObject which we use as
-    // our identifier
-    const wxDataViewColumn * const
-        dvCol = static_cast<wxDataViewColumn *>(
-                    [(wxPointerObject *)[self identifier] pointer]
-                );
+    const wxDataViewColumn * const dvCol = reinterpret_cast<wxDataViewColumn*>([(NSString*)[self identifier] integerValue]);
 
     const wxDataViewCtrl * const dvc = dvCol->GetOwner();
     const wxCocoaDataViewControl * const
@@ -311,16 +305,15 @@
 
 NSTableColumn* CreateNativeColumn(const wxDataViewColumn *column)
 {
-    wxDataViewRenderer * const renderer = column->GetRenderer();
+    wxDataViewRenderer* const renderer = column->GetRenderer();
 
     wxCHECK_MSG( renderer, NULL, "column should have a renderer" );
 
-    wxDVCNSTableColumn * const nativeColumn(
-        [[wxDVCNSTableColumn alloc] initWithIdentifier:
-            [[[wxPointerObject alloc] initWithPointer:
-                const_cast<wxDataViewColumn*>(column)]
-             autorelease]]
-    );
+  // The outline view allows to store for each column an identifier. This identifier is of type string.
+  // The identifier is used to store a pointer of wxWidget's column object so that a link can be made from the native column to wxWidget's column object.
+  // As the identifier is of type string the pointer cannot directly be stored but has to be converted to a string first.
+  // Using the number format %lu ensures that the size of the number is large enough for 32 bit or 64 bit compilation target settings.
+    wxDVCNSTableColumn* const nativeColumn = [[wxDVCNSTableColumn alloc] initWithIdentifier:[NSString stringWithFormat:@"%lu",reinterpret_cast<NSUInteger>(column)]];
 
     // setting the size related parameters:
     int resizingMask;
@@ -664,7 +657,7 @@
 
     wxCHECK_MSG( model, nil, "Valid model in data source does not exist." );
 
-    wxDataViewColumn* col(static_cast<wxDataViewColumn*>([(wxPointerObject*)[tableColumn identifier] pointer]));
+    wxDataViewColumn* col(reinterpret_cast<wxDataViewColumn*>([(NSString*)[tableColumn identifier] integerValue]));
     const unsigned colIdx = col->GetModelColumn();
 
     wxDataViewItem dataViewItem(wxDataViewItemFromItem(item));
@@ -687,7 +680,7 @@
 {
     wxUnusedVar(outlineView);
 
-    wxDataViewColumn* col(static_cast<wxDataViewColumn*>([(wxPointerObject*)[tableColumn identifier] pointer]));
+    wxDataViewColumn* col(reinterpret_cast<wxDataViewColumn*>([(NSString*)[tableColumn identifier] integerValue]));
 
     col->GetRenderer()->
         OSXOnCellChanged(object, wxDataViewItemFromItem(item), col->GetModelColumn());
@@ -1624,7 +1617,7 @@
 //
 -(void) outlineView:(NSOutlineView*)outlineView mouseDownInHeaderOfTableColumn:(NSTableColumn*)tableColumn
 {
-    wxDataViewColumn* const col(static_cast<wxDataViewColumn*>([(wxPointerObject*)[tableColumn identifier] pointer]));
+    wxDataViewColumn* const col(reinterpret_cast<wxDataViewColumn*>([(NSString*)[tableColumn identifier] integerValue]));
 
     wxDataViewCtrl* const dvc = implementation->GetDataViewCtrl();
 
@@ -1719,7 +1712,7 @@
     wxDataViewCtrl * const dvc = implementation->GetDataViewCtrl();
     wxDataViewModel * const model = dvc->GetModel();
 
-    wxDataViewColumn* const dvCol(static_cast<wxDataViewColumn*>([(wxPointerObject*)[tableColumn identifier] pointer]));
+    wxDataViewColumn* const dvCol(reinterpret_cast<wxDataViewColumn*>([(NSString*)[tableColumn identifier] integerValue]));
     const unsigned colIdx = dvCol->GetModelColumn();
 
     wxDataViewItem dvItem(wxDataViewItemFromItem(item));
@@ -1756,7 +1749,7 @@
 {
     int const newColumnPosition = [[[notification userInfo] objectForKey:@"NSNewColumn"] intValue];
 
-    wxDataViewColumn* const col(static_cast<wxDataViewColumn*>([(wxPointerObject*)[[[self tableColumns] objectAtIndex:newColumnPosition] identifier] pointer]));
+    wxDataViewColumn* const col(reinterpret_cast<wxDataViewColumn*>([(NSString*)[[[self tableColumns] objectAtIndex:newColumnPosition] identifier] integerValue]));
 
     wxDataViewCtrl* const dvc = implementation->GetDataViewCtrl();
 
@@ -1823,9 +1816,7 @@
     currentlyEditedColumn = [self editedColumn];
     currentlyEditedRow = [self editedRow];
 
-    wxDataViewColumn* const col =
-        static_cast<wxDataViewColumn*>(
-                [(wxPointerObject*)[[[self tableColumns] objectAtIndex:currentlyEditedColumn] identifier] pointer]);
+    wxDataViewColumn* const col = reinterpret_cast<wxDataViewColumn*>([(NSString*)[[[self tableColumns] objectAtIndex:currentlyEditedColumn] identifier] integerValue]);
 
     wxDataViewCtrl* const dvc = implementation->GetDataViewCtrl();
 
@@ -1861,9 +1852,7 @@
     // been sent the last edited column/row are valid:
     if ( currentlyEditedColumn != -1 && currentlyEditedRow != -1 )
     {
-        wxDataViewColumn* const col =
-            static_cast<wxDataViewColumn*>(
-                    [(wxPointerObject*)[[[self tableColumns] objectAtIndex:currentlyEditedColumn] identifier] pointer]);
+        wxDataViewColumn* const col = reinterpret_cast<wxDataViewColumn*>([(NSString*)[[[self tableColumns] objectAtIndex:currentlyEditedColumn] identifier] integerValue]);
 
         wxDataViewCtrl* const dvc = implementation->GetDataViewCtrl();
 
@@ -1965,7 +1954,7 @@
         [m_OutlineView setOutlineTableColumn:nil]; // due to a bug this does not work
     [m_OutlineView removeTableColumn:columnPtr->GetNativeData()->GetNativeColumnPtr()]; // due to a confirmed bug #6555162 the deletion does not work for
     // outline table columns (... and there is no workaround)
-    return (([m_OutlineView columnWithIdentifier:[[[wxPointerObject alloc] initWithPointer:columnPtr] autorelease]]) == -1);
+    return ([m_OutlineView columnWithIdentifier:[NSString stringWithFormat:@"%lu",reinterpret_cast<NSUInteger>(columnPtr)]] == -1);
 }
 
 void wxCocoaDataViewControl::DoSetExpanderColumn(const wxDataViewColumn *columnPtr)
@@ -1975,12 +1964,18 @@
 
 wxDataViewColumn* wxCocoaDataViewControl::GetColumn(unsigned int pos) const
 {
-    return static_cast<wxDataViewColumn*>([(wxPointerObject*)[[[m_OutlineView tableColumns] objectAtIndex:pos] identifier] pointer]);
+  // The outline view allows to store for each column an identifier. This identifier is of type string.
+  // The identifier is used to store a pointer of wxWidget's column object so that a link can be made from the native column to wxWidget's column object.
+  // But as the identifier of type string the pointer cannot directly be stored but has to be converted to a string first.
+  // To retrieve wxWidget's column object from the native column the stored identifier is converted back from a string to a pointer. Using the method
+  // [NSString integerValue] ensures that the storage space for the number is large enough for 32 bit and 64 bit pointers (depending on the compilation target settings)
+  // because the type NSInteger is also either 32 bit or 64 bit (depending on the compilation target settings).
+    return reinterpret_cast<wxDataViewColumn*>([(NSString*)[[[m_OutlineView tableColumns] objectAtIndex:pos] identifier] integerValue]);
 }
 
 int wxCocoaDataViewControl::GetColumnPosition(const wxDataViewColumn *columnPtr) const
 {
-    return [m_OutlineView columnWithIdentifier:[[[wxPointerObject alloc] initWithPointer:const_cast<wxDataViewColumn*>(columnPtr)] autorelease]];
+    return [m_OutlineView columnWithIdentifier:[NSString stringWithFormat:@"%lu",reinterpret_cast<NSUInteger>(columnPtr)]];
 }
 
 bool wxCocoaDataViewControl::InsertColumn(unsigned int pos, wxDataViewColumn* columnPtr)
@@ -2324,7 +2319,7 @@
 
     for (UInt32 i=0; i<noOfColumns; ++i)
         if ([[columns objectAtIndex:i] sortDescriptorPrototype] != nil)
-            return static_cast<wxDataViewColumn*>([(wxPointerObject*)[[columns objectAtIndex:i] identifier] pointer]);
+            return reinterpret_cast<wxDataViewColumn*>([(NSString*)[[[m_OutlineView tableColumns] objectAtIndex:i] identifier] integerValue]);
     return NULL;
 }
 
@@ -2347,6 +2342,16 @@
     [m_OutlineView setIndentationPerLevel:static_cast<CGFloat>(indent)];
 }
 
+int wxCocoaDataViewControl::GetRowHeight(void) const
+{
+  return static_cast<int>([m_OutlineView rowHeight]);
+}
+
+int wxCocoaDataViewControl::GetRowHeight(wxDataViewItem const& WXUNUSED(item)) const
+{
+  return static_cast<int>([m_OutlineView rowHeight]);
+}
+
 void wxCocoaDataViewControl::HitTest(const wxPoint& point, wxDataViewItem& item, wxDataViewColumn*& columnPtr) const
 {
     NSPoint const nativePoint = wxToNSPoint((NSScrollView*) GetWXWidget(),point);
@@ -2359,7 +2364,7 @@
     indexRow    = [m_OutlineView rowAtPoint:   nativePoint];
     if ((indexColumn >= 0) && (indexRow >= 0))
     {
-        columnPtr = static_cast<wxDataViewColumn*>([(wxPointerObject*)[[[m_OutlineView tableColumns] objectAtIndex:indexColumn] identifier] pointer]);
+        columnPtr = GetColumn(indexColumn);
         item      = wxDataViewItem([[m_OutlineView itemAtRow:indexRow] pointer]);
     }
     else
@@ -2369,11 +2374,18 @@
     }
 }
 
-void wxCocoaDataViewControl::SetRowHeight(const wxDataViewItem& WXUNUSED(item), unsigned int WXUNUSED(height))
-    // Not supported by the native control
+bool wxCocoaDataViewControl::SetRowHeight(int height)
 {
+  [m_OutlineView setRowHeight:static_cast<CGFloat>(height)];
+  return true;
 }
 
+bool wxCocoaDataViewControl::SetRowHeight(const wxDataViewItem& WXUNUSED(item), int WXUNUSED(height))
+    // Not supported by the native control; setting the row height is only supported from 10.6 and higher and uses a callback mechanism
+{
+  return false;
+}
+
 void wxCocoaDataViewControl::OnSize()
 {
     if ([m_OutlineView numberOfColumns] == 1)
Index: src/osx/dataview_osx.cpp
===================================================================
--- src/osx/dataview_osx.cpp	(revision 69985)
+++ src/osx/dataview_osx.cpp	(working copy)
@@ -20,7 +20,7 @@
     #include "wx/dcclient.h"
     #include "wx/icon.h"
 #endif
-#if wxOSX_USE_CARBON
+#if (defined(wxOSX_USE_CARBON) && (wxOSX_USE_CARBON != 0))
 #include "wx/osx/carbon/dataview.h"
 #endif
 
@@ -538,6 +538,11 @@
     return wxRect();
 }
 
+int wxDataViewCtrl::GetRowHeight(wxDataViewItem const& item) const
+{
+  return GetDataViewPeer()->GetRowHeight(item);
+}
+
 int wxDataViewCtrl::GetSelectedItemsCount() const
 {
   return GetDataViewPeer()->GetSelectedItemsCount();
@@ -572,6 +577,11 @@
   GetDataViewPeer()->SelectAll();
 }
 
+bool wxDataViewCtrl::SetRowHeight(int rowHeight)
+{
+  return this->GetDataViewPeer()->SetRowHeight(rowHeight);
+}
+
 void wxDataViewCtrl::SetSelections(wxDataViewItemArray const& sel)
 {
     size_t const noOfSelections = sel.GetCount();
@@ -709,7 +719,7 @@
 {
     event.Skip();
 
-#if wxOSX_USE_CARBON
+#if (defined(wxOSX_USE_CARBON) && (wxOSX_USE_CARBON != 0))
     if (GetModel() == NULL)
         return;
 
Index: src/osx/carbon/dataview.cpp
===================================================================
--- src/osx/carbon/dataview.cpp	(revision 69985)
+++ src/osx/carbon/dataview.cpp	(working copy)
@@ -484,14 +484,19 @@
   return ::GetDataBrowserListViewHeaderBtnHeight(m_controlRef,height);
 }
 
+OSStatus wxMacDataBrowserTableViewControl::GetItemRowHeight(DataBrowserItemID item, UInt16* height) const
+{
+  return ::GetDataBrowserTableViewItemRowHeight(m_controlRef,item,height);
+}
+
 OSStatus wxMacDataBrowserTableViewControl::GetPartBounds(DataBrowserItemID item, DataBrowserPropertyID propertyID, DataBrowserPropertyPart part, Rect* bounds)
 {
   return ::GetDataBrowserItemPartBounds(m_controlRef,item,propertyID,part,bounds);
 }
 
-OSStatus wxMacDataBrowserTableViewControl::GetRowHeight(DataBrowserItemID item, UInt16* height) const
+OSStatus wxMacDataBrowserTableViewControl::GetRowHeight(UInt16* height) const
 {
-  return ::GetDataBrowserTableViewItemRowHeight(m_controlRef,item,height);
+  return ::GetDataBrowserTableViewRowHeight(m_controlRef,height);
 }
 
 OSStatus wxMacDataBrowserTableViewControl::GetScrollPosition( UInt32 *top , UInt32 *left ) const
@@ -544,6 +549,11 @@
   return ::SetDataBrowserTableViewItemRowHeight(m_controlRef,item,height);
 }
 
+OSStatus wxMacDataBrowserTableViewControl::SetRowHeight(UInt16 height)
+{
+  return ::SetDataBrowserTableViewRowHeight(m_controlRef,height);
+}
+
 OSStatus wxMacDataBrowserTableViewControl::SetScrollPosition(UInt32 top, UInt32 left)
 {
   return ::SetDataBrowserScrollPosition(m_controlRef,top,left);
@@ -1218,6 +1228,29 @@
 //
 // other methods (inherited from wxDataViewWidgetImpl)
 //
+void wxMacDataViewDataBrowserListViewControl::DoSetIndent(int indent)
+{
+  SetIndent(static_cast<float>(indent));
+}
+
+int wxMacDataViewDataBrowserListViewControl::GetRowHeight(wxDataViewItem const& item) const
+{
+  UInt16 height;
+
+
+  wxCHECK_MSG(GetItemRowHeight(reinterpret_cast<DataBrowserItemID>(item.GetID()),&height) == noErr,0,_("Could not determine row height"));
+  return static_cast<int>(height);
+}
+
+int wxMacDataViewDataBrowserListViewControl::GetRowHeight(void) const
+{
+  UInt16 height;
+  
+  
+  wxCHECK_MSG(this->wxMacDataBrowserTableViewControl::GetRowHeight(&height) == noErr,0,_("Could not determine row height"));
+  return static_cast<int>(height);
+}
+
 void
 wxMacDataViewDataBrowserListViewControl::HitTest(const wxPoint& WXUNUSED(point),
                                                  wxDataViewItem& item,
@@ -1228,14 +1261,14 @@
   columnPtr = NULL;
 }
 
-void wxMacDataViewDataBrowserListViewControl::DoSetIndent(int indent)
+bool wxMacDataViewDataBrowserListViewControl::SetRowHeight(int height)
 {
-  SetIndent(static_cast<float>(indent));
+  return (SetRowHeight(static_cast<UInt16>(height)) == noErr);
 }
 
-void wxMacDataViewDataBrowserListViewControl::SetRowHeight(wxDataViewItem const& item, unsigned int height)
+bool wxMacDataViewDataBrowserListViewControl::SetRowHeight(wxDataViewItem const& item, int height)
 {
-  SetItemRowHeight(reinterpret_cast<DataBrowserItemID>(item.GetID()),static_cast<UInt16>(height));
+  return (SetItemRowHeight(reinterpret_cast<DataBrowserItemID>(item.GetID()),static_cast<UInt16>(height)) == noErr);
 }
 
 void wxMacDataViewDataBrowserListViewControl::OnSize()
Index: include/wx/dataview.h
===================================================================
--- include/wx/dataview.h	(revision 69985)
+++ include/wx/dataview.h	(working copy)
@@ -691,6 +691,7 @@
     virtual void HitTest( const wxPoint & point, wxDataViewItem &item, wxDataViewColumn* &column ) const = 0;
     virtual wxRect GetItemRect( const wxDataViewItem & item, const wxDataViewColumn *column = NULL ) const = 0;
 
+    virtual int GetRowHeight(wxDataViewItem const& WXUNUSED(item)) const {return 0;}
     virtual bool SetRowHeight( int WXUNUSED(rowHeight) ) { return false; }
 
     virtual void StartEditor( const wxDataViewItem & WXUNUSED(item),
Index: include/wx/osx/cocoa/dataview.h
===================================================================
--- include/wx/osx/cocoa/dataview.h	(revision 69985)
+++ include/wx/osx/cocoa/dataview.h	(working copy)
@@ -492,10 +492,13 @@
     // other methods (inherited from wxDataViewWidgetImpl)
     //
     virtual void DoSetIndent(int indent);
+    virtual int GetRowHeight(void) const;
+    virtual int GetRowHeight(wxDataViewItem const& item) const;
     virtual void HitTest(const wxPoint& point,
                          wxDataViewItem& item,
                          wxDataViewColumn*& columnPtr) const;
-    virtual void SetRowHeight(const wxDataViewItem& item, unsigned int height);
+    virtual bool SetRowHeight(int rowHeight);
+    virtual bool SetRowHeight(const wxDataViewItem& item, int height);
     virtual void OnSize();
     
     virtual void StartEditor( const wxDataViewItem & item, unsigned int column );
Index: include/wx/osx/core/dataview.h
===================================================================
--- include/wx/osx/core/dataview.h	(revision 69985)
+++ include/wx/osx/core/dataview.h	(working copy)
@@ -107,8 +107,11 @@
  // other methods
  //
   virtual void DoSetIndent (int indent)                                                                     = 0; // sets the indention in the native control
+  virtual int  GetRowHeight(void) const                                                                     = 0; // returns the row height
+  virtual int  GetRowHeight(wxDataViewItem const& item) const                                               = 0; // returns the row height
   virtual void HitTest     (wxPoint const& point, wxDataViewItem& item, wxDataViewColumn*& columnPtr) const = 0; // return the item and column pointer that contains with the passed point
-  virtual void SetRowHeight(wxDataViewItem const& item, unsigned int height)                                = 0; // sets the height of the row containg the passed item in the native control
+  virtual bool SetRowHeight(int rowHeight)                                                                  = 0; // sets the height for all rows
+  virtual bool SetRowHeight(wxDataViewItem const& item, int height)                                         = 0; // sets the height of the row containg the passed item in the native control
   virtual void OnSize      (void)                                                                           = 0; // updates the layout of the native control after a size event
   virtual void StartEditor( const wxDataViewItem & item, unsigned int column )                              = 0; // starts editing the passed in item and column
 };
Index: include/wx/osx/dataview.h
===================================================================
--- include/wx/osx/dataview.h	(revision 69985)
+++ include/wx/osx/dataview.h	(working copy)
@@ -175,6 +175,7 @@
 
   virtual unsigned int GetCount() const;
   virtual wxRect GetItemRect(const wxDataViewItem& item, const wxDataViewColumn* columnPtr) const;
+  virtual int GetRowHeight(wxDataViewItem const& item) const;
   virtual int GetSelectedItemsCount() const;
   virtual int GetSelections(wxDataViewItemArray& sel) const;
 
@@ -184,6 +185,7 @@
 
   virtual void SelectAll();
   virtual void Select(const wxDataViewItem& item);
+  virtual bool SetRowHeight(int rowHeight);
   virtual void SetSelections(const wxDataViewItemArray& sel);
 
   virtual void Unselect(const wxDataViewItem& item);
Index: include/wx/osx/carbon/dataview.h
===================================================================
--- include/wx/osx/carbon/dataview.h	(revision 69985)
+++ include/wx/osx/carbon/dataview.h	(working copy)
@@ -164,7 +164,8 @@
   OSStatus GetDefaultRowHeight  (UInt16 * height ) const;
   OSStatus GetHeaderButtonHeight(UInt16 *height );
   OSStatus GetPartBounds        (DataBrowserItemID item, DataBrowserPropertyID property, DataBrowserPropertyPart part, Rect* bounds);
-  OSStatus GetRowHeight         (DataBrowserItemID item , UInt16 *height) const;
+  OSStatus GetItemRowHeight     (DataBrowserItemID item , UInt16 *height) const;
+  OSStatus GetRowHeight         (UInt16 *height) const;
   OSStatus GetScrollPosition    (UInt32* top, UInt32 *left) const;
 
 #if MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_4
@@ -178,6 +179,7 @@
   OSStatus SetHiliteStyle(DataBrowserTableViewHiliteStyle hiliteStyle);
   OSStatus SetIndent(float Indent);
   OSStatus SetItemRowHeight( DataBrowserItemID item , UInt16 height);
+  OSStatus SetRowHeight(UInt16 height);
   OSStatus SetScrollPosition( UInt32 top , UInt32 left );
 
 //
@@ -424,8 +426,11 @@
  // other methods (inherited from wxDataViewWidgetImpl)
  //
   virtual void DoSetIndent (int indent);
+  virtual int  GetRowHeight(wxDataViewItem const& item) const;
+  virtual int  GetRowHeight(void) const;
   virtual void HitTest     (wxPoint const& point, wxDataViewItem& item, wxDataViewColumn*& columnPtr) const;
-  virtual void SetRowHeight(wxDataViewItem const& item, unsigned int height);
+  virtual bool SetRowHeight(wxDataViewItem const& item, int height);
+  virtual bool SetRowHeight(int rowHeight);
   virtual void OnSize      ();
 
   virtual void StartEditor( const wxDataViewItem & item, unsigned int column );

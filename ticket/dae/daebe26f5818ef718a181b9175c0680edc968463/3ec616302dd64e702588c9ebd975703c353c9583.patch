Index: docs/latex/wx/pathlist.tex
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/docs/latex/wx/pathlist.tex,v
retrieving revision 1.8
diff -bu2 -r1.8 docs/latex/wx/pathlist.tex
--- docs/latex/wx/pathlist.tex
+++ docs/latex/wx/pathlist.tex
@@ -3,10 +3,8 @@
 The path list is a convenient way of storing a number of directories, and
 when presented with a filename without a directory, searching for an existing file
-in those directories.  Storing the filename only in an application's files and
-using a locally-defined list of directories makes the application and its files more
-portable.
+in those directories.
 
-Use the \helpref{wxFileName::SplitPath}{wxfilenamesplitpath} global function 
-to extract the filename from the path.
+Be sure to look also at \helpref{wxStandardPaths}{wxstandardpaths} if you only
+want to search files in some standard paths.
 
 \wxheading{Derived from}
@@ -41,5 +39,5 @@
 
 Finds the value of the given environment variable, and adds all paths
-to the path list. Useful for finding files in the PATH variable, for
+to the path list. Useful for finding files in the {\tt PATH} variable, for
 example.
 
@@ -47,9 +45,11 @@
 \membersection{wxPathList::Add}\label{wxpathlistadd}
 
-\func{void}{Add}{\param{const wxString\& }{path}}
+\func{bool}{Add}{\param{const wxString\& }{path}}
 
 \func{void}{Add}{\param{const wxArrayString\& }{arr}}
 
 The first form adds the given directory to the path list, if the path is not already in the list.
+If the path cannot be normalized for some reason, it returns \false.
+
 The second form just calls the first form on all elements of the given array.
 
@@ -64,9 +64,10 @@
 \membersection{wxPathList::EnsureFileAccessible}\label{wxpathlistensurefileaccessible}
 
-\func{void}{EnsureFileAccessible}{\param{const wxString\& }{filename}}
+\func{bool}{EnsureFileAccessible}{\param{const wxString\& }{filename}}
+
+Given a full filename (with path), ensures that the file exists and
+then calls \helpref{Add}{wxpathlistadd} with the path of the file.
 
-Given a full filename (with path), ensures that files in the same path
-can be accessed using the pathlist. It does this by stripping the
-filename and adding the path to the list if not already there.
+Returns \false if the file does not exist (and in this case its path won't be added).
 
 
@@ -75,7 +76,8 @@
 \constfunc{wxString}{FindAbsoluteValidPath}{\param{const wxString\& }{file}}
 
-Searches for a full (i.e. absolute) path for an existing file by appending {\it file} to
-successive members of the path list.  If the file wasn't found, an empty
-string is returned.
+Like \helpref{FindValidPath}{wxpathlistfindvalidpath} but this function always
+returns an absolute path (eventually prepending the current working directory
+to the value returned \helpref{FindValidPath}{wxpathlistfindvalidpath}) or an
+empty string.
 
 
@@ -84,9 +86,9 @@
 \constfunc{wxString}{FindValidPath}{\param{const wxString\& }{file}}
 
-Searches for a path for an existing file by appending {\it file} to
-successive members of the path list.
-If the file wasn't found, an empty string is returned.
+Searches the given file in all paths stored in this class.
+The first path which concatenated to the given string points to an existing
+file (see \helpref{wxFileExists}{wxfileexists}) is returned.
 
-The returned path may be relative to the current working directory.
+If the file wasn't found in any of the stored paths, an empty string is returned.
 
 The given string must be a file name, eventually with a path prefix (if the path
@@ -95,2 +97,8 @@
 otherwise an assertion will fail.
 
+The returned path may be relative to the current working directory.
+Note in fact that wxPathList can be used to store both relative and absolute paths so that
+if you \helpref{Add()}{wxpathlistadd}ed relative paths, then the current working directory
+(see \helpref{wxGetCwd}{wxgetcwd} and \helpref{wxSetWorkingDirectory}{wxsetworkingdirectory})
+may affect the value returned by this function!
+
Index: include/wx/filefn.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/filefn.h,v
retrieving revision 1.149
diff -bu2 -r1.149 include/wx/filefn.h
--- include/wx/filefn.h
+++ include/wx/filefn.h
@@ -670,5 +670,5 @@
 
     // Adds given path to this list
-    void Add(const wxString& path);
+    bool Add(const wxString& path);
     void Add(const wxArrayString &paths);
 
@@ -681,8 +681,10 @@
 
     // Given full path and filename, add path to list
-    void EnsureFileAccessible(const wxString& path);
+    bool EnsureFileAccessible(const wxString& path);
 
+#if WXWIN_COMPATIBILITY_2_6
     // Returns true if the path is in the list
     wxDEPRECATED( bool Member(const wxString& path) const );
+#endif
 };
 
Index: src/common/filefn.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/filefn.cpp,v
retrieving revision 1.282
diff -bu2 -r1.282 src/common/filefn.cpp
--- src/common/filefn.cpp
+++ src/common/filefn.cpp
@@ -157,5 +157,5 @@
 // ----------------------------------------------------------------------------
 
-void wxPathList::Add(const wxString& path)
+bool wxPathList::Add(const wxString& path)
 {
     // add a path separator to force wxFileName to interpret it always as a directory
@@ -165,9 +165,15 @@
 
     // add only normalized relative/absolute paths
-    fn.Normalize(wxPATH_NORM_DOTS|wxPATH_NORM_TILDE|wxPATH_NORM_LONG|wxPATH_NORM_ENV_VARS);
+    // NB: we won't do wxPATH_NORM_DOTS in order to avoid problems when trying to
+    //     normalize paths which starts with ".." (which can be normalized only if
+    //     we use also wxPATH_NORM_ABSOLUTE - which we don't want to use).
+    if (!fn.Normalize(wxPATH_NORM_TILDE|wxPATH_NORM_LONG|wxPATH_NORM_ENV_VARS))
+        return false;
 
     wxString toadd = fn.GetPath();
     if (Index(toadd) == wxNOT_FOUND)
         wxArrayString::Add(toadd);      // do not add duplicates
+
+    return true;
 }
 
@@ -208,19 +214,15 @@
 // be accessed again USING FILENAME ONLY by adding the path
 // to the list if not already there.
-void wxPathList::EnsureFileAccessible (const wxString& path)
+bool wxPathList::EnsureFileAccessible (const wxString& path)
 {
-    wxString path_only(wxPathOnly(path));
-    if ( !path_only.empty() )
-    {
-        if ( Index(path_only) == wxNOT_FOUND )
-            Add(path_only);
-    }
+    return Add(wxPathOnly(path));
 }
 
-// deprecated !
+#if WXWIN_COMPATIBILITY_2_6
 bool wxPathList::Member (const wxString& path) const
 {
     return Index(path) != wxNOT_FOUND;
 }
+#endif
 
 wxString wxPathList::FindValidPath (const wxString& file) const
@@ -231,6 +233,11 @@
     wxString strend;
 
-    // NB: normalize without making absolute !
-    fn.Normalize(wxPATH_NORM_DOTS|wxPATH_NORM_TILDE|wxPATH_NORM_LONG|wxPATH_NORM_ENV_VARS);
+    // NB: normalize without making absolute otherwise calling this function with
+    //     e.g. "b/c.txt" would result in removing the directory 'b' and the for loop
+    //     below would only add to the paths of this list the 'c.txt' part when doing
+    //     the existence checks...
+    // NB: we don't use wxPATH_NORM_DOTS here, too (see wxPathList::Add for more info)
+    if (!fn.Normalize(wxPATH_NORM_TILDE|wxPATH_NORM_LONG|wxPATH_NORM_ENV_VARS))
+        return wxEmptyString;
 
     wxASSERT_MSG(!fn.IsDir(), wxT("Cannot search for directories; only for files"));

 	  	 

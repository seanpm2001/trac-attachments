Index: src/unix/threadpsx.cpp
===================================================================
--- src/unix/threadpsx.cpp	(revision 76110)
+++ src/unix/threadpsx.cpp	(working copy)
@@ -1364,26 +1364,49 @@
 
         case STATE_RUNNING:
         case STATE_PAUSED:
+            {
 #ifdef HAVE_THREAD_PRIORITY_FUNCTIONS
 #if defined(__LINUX__)
-            // On Linux, pthread_setschedparam with SCHED_OTHER does not allow
-            // a priority other than 0.  Instead, we use the BSD setpriority
-            // which alllows us to set a 'nice' value between 20 to -20.  Only
-            // super user can set a value less than zero (more negative yields
-            // higher priority).  setpriority set the static priority of a
-            // process, but this is OK since Linux is configured as a thread
-            // per process.
-            //
-            // FIXME this is not true for 2.6!!
+                // mapping of wxwidgets priority values to pthreads scheduling
+                // params is as follows:
+                //     0..20 to SCHED_IDLE
+                //     21..40 to SCHED_BATCH
+                //     41..60 to SCHED_OTHER 
+                //     61..80 to SCHED_RR
+                //     81..100 to SCHED_FIFO
+                // for SCHED_RR and SCHED_FIFO policies, Linux accepts a priority
+                // number (from 1 to 99) as a second specifier, which is instead
+                // ignored for the former three.
+                // When used, the scheduling priority is computed as an (almost)
+                // linear correspondence from the twenty values that are free in
+                // the same policy range to the 99 values considered by the
+                // kernel.
+                // Note that a change in the range of priority values
+                // (currently from 1 to 100) requires a rework of this mapping
+                // of values
+                struct sched_param sparam = {};
 
-            // map wx priorites 0..100 to Unix priorities 20..-20
-            if ( setpriority(PRIO_PROCESS, 0, -(2*(int)prio)/5 + 20) == -1 )
-            {
-                wxLogError(_("Failed to set thread priority %d."), prio);
-            }
+                int policy = SCHED_FIFO;
+                switch ( (int(prio)-1) / 20 )
+                {
+                    case 0: policy = SCHED_IDLE; break;
+                    case 1: policy = SCHED_BATCH; break;
+                    case 2: policy = SCHED_OTHER; break;
+                    case 3:
+                        policy = SCHED_RR; /* falltrough! */
+                    case 4:
+                        sparam.sched_priority = ((prio-1) % 20)*5;
+                        if (sparam.sched_priority == 0) sparam.sched_priority = 1;
+                        else if (sparam.sched_priority == 100) sparam.sched_priority = 99;
+                }
+
+                if ( pthread_setschedparam(m_internal->GetId(),
+                                           policy, &sparam) != 0 )
+                {
+                    wxLogError(_("Failed to set thread priority %d."), prio);
+                }
 #else // __LINUX__
-            {
-                struct sched_param sparam;
+                struct sched_param sparam = {};
                 sparam.sched_priority = prio;
 
                 if ( pthread_setschedparam(m_internal->GetId(),
@@ -1391,9 +1414,9 @@
                 {
                     wxLogError(_("Failed to set thread priority %d."), prio);
                 }
-            }
 #endif // __LINUX__
 #endif // HAVE_THREAD_PRIORITY_FUNCTIONS
+            }
             break;
 
         case STATE_EXITED:

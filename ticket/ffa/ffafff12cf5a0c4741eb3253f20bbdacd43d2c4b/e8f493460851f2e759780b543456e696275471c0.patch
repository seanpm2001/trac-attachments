Index: include/wx/window.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/window.h,v
retrieving revision 1.184
diff -u -4 -r1.184 window.h
--- include/wx/window.h	2005/05/04 18:52:06	1.184
+++ include/wx/window.h	2005/05/07 22:00:06
@@ -72,8 +72,10 @@
 #if wxUSE_ACCESSIBILITY
 class WXDLLEXPORT wxAccessible;
 #endif
 
+class WXDLLEXPORT wxWindowExtraData;
+
 // ----------------------------------------------------------------------------
 // helper stuff used by wxWindow
 // ----------------------------------------------------------------------------
 
@@ -1311,10 +1313,11 @@
 
     // implements the window variants
     virtual void DoSetWindowVariant( wxWindowVariant variant ) ;
 
-    // Reserved for future use
-    void* m_windowReserved;
+    // Was a reserved pointer in 2.6.0, now used to hold extra data members
+    // without breaking compatibility.
+    wxWindowExtraData* m_extraData;
 
 private:
     // contains the last id generated by NewControlId
     static int ms_lastControlId;
Index: src/common/wincmn.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/wincmn.cpp,v
retrieving revision 1.228
diff -u -4 -r1.228 wincmn.cpp
--- src/common/wincmn.cpp	2005/04/17 15:49:27	1.228
+++ src/common/wincmn.cpp	2005/05/07 22:00:08
@@ -215,10 +215,10 @@
 
     // VZ: this one shouldn't exist...
     m_isBeingDeleted = false;
     
-    // Reserved for future use
-    m_windowReserved = NULL;
+    // Can be used in derived classes for holding extra data memebers
+    m_extraData = NULL;
 }
 
 // common part of window creation process
 bool wxWindowBase::CreateBase(wxWindowBase *parent,
Index: src/msw/window.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/msw/window.cpp,v
retrieving revision 1.610
diff -u -4 -r1.610 window.cpp
--- src/msw/window.cpp	2005/05/07 19:12:23	1.610
+++ src/msw/window.cpp	2005/05/07 22:00:10
@@ -231,8 +231,30 @@
 }
 #endif
 
 // ---------------------------------------------------------------------------
+// wxWindowExtraData
+// ---------------------------------------------------------------------------
+
+#if USE_DEFER_BUG_WORKAROUND
+// This class is used to hold additional data memebers that were added after
+// the stable 2.6.0 release.  They should be moved into wxWindow for 2.7 after
+// binary compatibility is no longer being maintained.
+
+class wxWindowExtraData {
+public:
+    wxWindowExtraData()
+        : m_pendingPosition(wxDefaultPosition),
+          m_pendingSize(wxDefaultSize)
+    {}
+    
+    wxPoint     m_pendingPosition;
+    wxSize      m_pendingSize;
+};
+
+#endif
+
+// ---------------------------------------------------------------------------
 // event tables
 // ---------------------------------------------------------------------------
 
 // in wxUniv/MSW this class is abstract because it doesn't have DoPopupMenu()
@@ -464,8 +486,12 @@
     m_lastMouseX =
     m_lastMouseY = -1;
     m_lastMouseEvent = -1;
 #endif // wxUSE_MOUSEEVENT_HACK
+
+#if USE_DEFER_BUG_WORKAROUND
+    m_extraData = new wxWindowExtraData;
+#endif
 }
 
 // Destructor
 wxWindowMSW::~wxWindowMSW()
@@ -511,8 +537,12 @@
         wxRemoveHandleAssociation(this);
     }
 
     delete m_childrenDisabled;
+
+#if USE_DEFER_BUG_WORKAROUND
+    delete m_extraData;
+#endif    
 }
 
 // real construction (Init() must have been called before!)
 bool wxWindowMSW::Create(wxWindow *parent,
@@ -1552,8 +1582,20 @@
     wxWindowMSW *parent = GetParent();
 
 #if USE_DEFERRED_SIZING
     HDWP hdwp = parent && !IsTopLevel() ? (HDWP)parent->m_hDWP : NULL;
+#if USE_DEFER_BUG_WORKAROUND
+    if (hdwp)
+    {
+        m_extraData->m_pendingPosition = wxPoint(x, y);
+        m_extraData->m_pendingSize = wxSize(width, height);
+    }
+    else
+    {
+        m_extraData->m_pendingPosition = wxDefaultPosition;
+        m_extraData->m_pendingSize = wxDefaultSize;
+    }
+#endif
 #else
     HDWP hdwp = 0;
 #endif
 
@@ -1577,11 +1619,30 @@
 void wxWindowMSW::DoSetSize(int x, int y, int width, int height, int sizeFlags)
 {
     // get the current size and position...
     int currentX, currentY;
+    int currentW, currentH;
+
+#if USE_DEFER_BUG_WORKAROUND
+    currentX = m_extraData->m_pendingPosition.x;
+    if (currentX == wxDefaultCoord)
+        GetPosition(&currentX, NULL);
+    
+    currentY = m_extraData->m_pendingPosition.y;
+    if (currentY == wxDefaultCoord)
+        GetPosition(NULL, &currentY);
+    
+    currentW = m_extraData->m_pendingSize.x;
+    if (currentW == wxDefaultCoord)
+        GetSize(&currentW, NULL);
+
+    currentH = m_extraData->m_pendingSize.y;
+    if (currentH == wxDefaultCoord)
+        GetSize(NULL, &currentH);
+#else    
     GetPosition(&currentX, &currentY);
-    int currentW,currentH;
     GetSize(&currentW, &currentH);
+#endif
 
     // ... and don't do anything (avoiding flicker) if it's already ok
     if ( x == currentX && y == currentY &&
          width == currentW && height == currentH )
@@ -4235,25 +4296,16 @@
             wxLogLastError(_T("EndDeferWindowPos"));
         }
 
 #if USE_DEFER_BUG_WORKAROUND
-        // Seems to be a bug in DeferWindowPos such that going from (a) to (b) to (a)
-        // doesn't work (omits last position/size). So check if there's a disparity,
-        // and correct.
+        // Reset our children's pending pos/size values.
         for ( wxWindowList::compatibility_iterator node = GetChildren().GetFirst();
               node;
               node = node->GetNext() )
         {
             wxWindow *child = node->GetData();
-            wxSizer* sizer = child->GetContainingSizer();
-            if (sizer)
-            {
-                wxSizerItem* item = sizer->GetItem(child, true);
-                if (item->GetRect().GetPosition() != child->GetPosition())
-                {
-                    child->Move(item->GetRect().GetPosition());
-                }
-            }
+            child->m_extraData->m_pendingPosition = wxDefaultPosition;
+            child->m_extraData->m_pendingSize = wxDefaultSize;
         }
 #endif
     }
 #endif

 	  	 

Index: docs/latex/wx/db.tex
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/docs/latex/wx/db.tex,v
retrieving revision 1.49
diff -b -u -2 -r1.49 db.tex
--- docs/latex/wx/db.tex	2005/12/10 00:28:16	1.49
+++ docs/latex/wx/db.tex	2005/12/23 17:41:04
@@ -3573,4 +3573,6 @@
     DB_DATA_TYPE_FLOAT          : floating point numbers
     DB_DATA_TYPE_DATE           : dates
+    DB_DATA_TYPE_BLOB           : binary large objects
+    DB_DATA_TYPE_MEMO           : large strings
 \end{verbatim}
 
Index: include/wx/db.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/db.h,v
retrieving revision 1.100
diff -b -u -2 -r1.100 db.h
--- include/wx/db.h	2005/11/19 01:07:37	1.100
+++ include/wx/db.h	2005/12/23 17:36:06
@@ -159,4 +159,5 @@
 const int DB_DATA_TYPE_DATE           = 4;
 const int DB_DATA_TYPE_BLOB           = 5;
+const int DB_DATA_TYPE_MEMO           = 6;
 
 const int DB_SELECT_KEYFIELDS         = 1;
@@ -556,4 +557,5 @@
     wxDbSqlTypeInfo typeInfDate;
     wxDbSqlTypeInfo typeInfBlob;
+    wxDbSqlTypeInfo typeInfMemo;
 #endif
 
@@ -695,4 +697,5 @@
     wxDbSqlTypeInfo GetTypeInfDate()       {return typeInfDate;}
     wxDbSqlTypeInfo GetTypeInfBlob()       {return typeInfBlob;}
+    wxDbSqlTypeInfo GetTypeInfMemo()       {return typeInfMemo;}
 
     // tableName can refer to a table, view, alias or synonym
Index: src/common/db.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/db.cpp,v
retrieving revision 1.127
diff -b -u -2 -r1.127 db.cpp
--- src/common/db.cpp	2005/12/10 00:37:05	1.127
+++ src/common/db.cpp	2005/12/23 17:36:38
@@ -533,4 +533,10 @@
     typeInfBlob.MaximumScale  = 0;
 
+    typeInfMemo.TypeName.Empty();
+    typeInfMemo.FsqlType      = 0;
+    typeInfMemo.Precision     = 0;
+    typeInfMemo.CaseSensitive = 0;
+    typeInfMemo.MaximumScale  = 0;
+
     // Error reporting is turned OFF by default
     silent = true;
@@ -651,4 +657,14 @@
     };
 
+    // These are the possible SQL types we check for use agains the datasource we are connected
+    // to for the purpose of determining which data type to use for the MEMO column types
+	// (a type which allow to store large strings; like VARCHAR just with a bigger precision)
+    //
+    // NOTE: The first type in this enumeration that is determined to be supported by the
+    //       datasource/driver is the one that will be used.
+    SWORD PossibleSqlMemoTypes[] = {
+        SQL_LONGVARCHAR,
+    };
+
 
     // Query the data source regarding data type information
@@ -757,4 +773,14 @@
         return false;
 
+    // --------------- MEMO ---------------
+    for (iIndex = 0; iIndex < WXSIZEOF(PossibleSqlMemoTypes) &&
+                     !getDataTypeInfo(PossibleSqlMemoTypes[iIndex], typeInfMemo); ++iIndex)
+    {}
+
+    if (iIndex < WXSIZEOF(PossibleSqlMemoTypes))
+        typeInfMemo.FsqlType = PossibleSqlMemoTypes[iIndex];
+    else if (failOnDataTypeUnsupported)
+        return false;
+
     return true;
 }  // wxDb::determineDataTypes
@@ -791,4 +817,5 @@
     cout << wxT("DATE    DATA TYPE: ") << typeInfDate.TypeName << endl;
     cout << wxT("BLOB    DATA TYPE: ") << typeInfBlob.TypeName << endl;
+    cout << wxT("MEMO    DATA TYPE: ") << typeInfMemo.TypeName << endl;
     cout << endl;
 #endif
@@ -1051,4 +1078,11 @@
     typeInfBlob.MaximumScale     = copyDb->typeInfBlob.MaximumScale;
 
+    // Memo
+    typeInfMemo.FsqlType         = copyDb->typeInfMemo.FsqlType;
+    typeInfMemo.TypeName         = copyDb->typeInfMemo.TypeName;
+    typeInfMemo.Precision        = copyDb->typeInfMemo.Precision;
+    typeInfMemo.CaseSensitive    = copyDb->typeInfMemo.CaseSensitive;
+    typeInfMemo.MaximumScale     = copyDb->typeInfMemo.MaximumScale;
+
 #ifdef DBDEBUG_CONSOLE
     cout << wxT("VARCHAR DATA TYPE: ") << typeInfVarchar.TypeName << endl;
@@ -1057,4 +1091,5 @@
     cout << wxT("DATE    DATA TYPE: ") << typeInfDate.TypeName << endl;
     cout << wxT("BLOB    DATA TYPE: ") << typeInfBlob.TypeName << endl;
+    cout << wxT("MEMO    DATA TYPE: ") << typeInfMemo.TypeName << endl;
     cout << endl;
 #endif
@@ -2287,4 +2322,7 @@
                 pColInf[colNum].dbDataType = DB_DATA_TYPE_VARCHAR;
                 break;
+            case SQL_LONGVARCHAR:
+                pColInf[colNum].dbDataType = DB_DATA_TYPE_MEMO;
+				break;
             case SQL_TINYINT:
             case SQL_SMALLINT:
@@ -3070,4 +3108,7 @@
                             colInf[colNo].dbDataType = DB_DATA_TYPE_VARCHAR;
                         break;
+                        case SQL_LONGVARCHAR:                        
+                            colInf[colNo].dbDataType = DB_DATA_TYPE_MEMO;
+							break;
                         case SQL_TINYINT:
                         case SQL_SMALLINT:
Index: src/common/dbtable.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/dbtable.cpp,v
retrieving revision 1.106
diff -b -u -2 -r1.106 dbtable.cpp
--- src/common/dbtable.cpp	2005/09/23 12:52:46	1.106
+++ src/common/dbtable.cpp	2005/12/23 17:36:46
@@ -414,4 +414,5 @@
     {
         case DB_DATA_TYPE_VARCHAR:
+        case DB_DATA_TYPE_MEMO:
             if (colDefs[columnIndex].Null)
                 colDefs[columnIndex].CbValue = SQL_NULL_DATA;
@@ -419,4 +420,5 @@
                 colDefs[columnIndex].CbValue = SQL_NTS;
             break;
+            break;
         case DB_DATA_TYPE_INTEGER:
             if (colDefs[columnIndex].Null)
@@ -485,4 +487,9 @@
                 scale = 0;
                 break;
+            case DB_DATA_TYPE_MEMO:
+                fSqlType = pDb->GetTypeInfMemo().FsqlType;
+                precision = colDefs[i].SzDataObj;
+                scale = 0;
+                break;
             case DB_DATA_TYPE_INTEGER:
                 fSqlType = pDb->GetTypeInfInteger().FsqlType;
@@ -1415,4 +1422,7 @@
                 cout << pDb->GetTypeInfVarchar().TypeName << wxT("(") << (int)(colDefs[i].SzDataObj / sizeof(wxChar)) << wxT(")");
                 break;
+            case DB_DATA_TYPE_MEMO:
+                cout << pDb->GetTypeInfMemo().TypeName;
+                break;
             case DB_DATA_TYPE_INTEGER:
                 cout << pDb->GetTypeInfInteger().TypeName;
@@ -1456,4 +1466,7 @@
                 sqlStmt += pDb->GetTypeInfVarchar().TypeName;
                 break;
+            case DB_DATA_TYPE_MEMO:
+                sqlStmt += pDb->GetTypeInfMemo().TypeName;
+                break;
             case DB_DATA_TYPE_INTEGER:
                 sqlStmt += pDb->GetTypeInfInteger().TypeName;
@@ -2346,4 +2359,9 @@
             {
                 case DB_DATA_TYPE_VARCHAR:
+                   pColDataPtrs[index].PtrDataObj = new wxChar[pColInfs[index].bufferSize+(1*sizeof(wxChar))];
+                   pColDataPtrs[index].SzDataObj  = pColInfs[index].bufferSize+(1*sizeof(wxChar));
+                   pColDataPtrs[index].SqlCtype   = SQL_C_WXCHAR;
+                   break;
+                case DB_DATA_TYPE_MEMO:
                    pColDataPtrs[index].PtrDataObj = new wxChar[pColInfs[index].bufferSize+(1*sizeof(wxChar))];
                    pColDataPtrs[index].SzDataObj  = pColInfs[index].bufferSize+(1*sizeof(wxChar));

 	  	 

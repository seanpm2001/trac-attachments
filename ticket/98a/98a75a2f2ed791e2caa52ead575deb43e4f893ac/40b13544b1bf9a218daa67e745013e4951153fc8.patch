Index: include/wx/image.h
===================================================================
--- include/wx/image.h	(revision 54028)
+++ include/wx/image.h	(working copy)
@@ -352,6 +352,9 @@
     int GetWidth() const;
     int GetHeight() const;
 
+    // Gets the type of image found by LoadFile or specified with SaveFile
+    wxBitmapType GetType() const;
+
     // these functions provide fastest access to wxImage data but should be
     // used carefully as no checks are done
     unsigned char *GetData() const;
Index: interface/image.h
===================================================================
--- interface/image.h	(revision 54028)
+++ interface/image.h	(working copy)
@@ -627,6 +627,12 @@
     wxImage GetSubImage(const wxRect& rect) const;
 
     /**
+        Gets the type of image found by LoadFile or specified with SaveFile
+        @since 2.9.0
+    */
+    wxBitmapType GetType() const;
+
+    /**
         Gets the width of the image in pixels.
 
         @see GetHeight()
Index: src/common/image.cpp
===================================================================
--- src/common/image.cpp	(revision 54028)
+++ src/common/image.cpp	(working copy)
@@ -64,6 +64,7 @@
 
     int             m_width;
     int             m_height;
+    wxBitmapType    m_type;
     unsigned char  *m_data;
 
     bool            m_hasMask;
@@ -94,6 +95,7 @@
 {
     m_width = 0;
     m_height = 0;
+    m_type = wxBITMAP_TYPE_INVALID;
     m_data =
     m_alpha = (unsigned char *) NULL;
 
@@ -1459,6 +1461,13 @@
     return M_IMGDATA->m_height;
 }
 
+wxBitmapType wxImage::GetType() const
+{
+    wxCHECK_MSG( IsOk(), wxBITMAP_TYPE_INVALID, wxT("invalid image") );
+
+    return M_IMGDATA->m_type;
+}
+
 long wxImage::XYToIndex(int x, int y) const
 {
     if ( Ok() &&
@@ -2215,6 +2224,7 @@
              if ( handler->CanRead(stream) &&
                     handler->LoadFile(this, stream, true/*verbose*/, index) )
              {
+                 M_IMGDATA->m_type = handler->GetType();
                  return true;
              }
 
@@ -2227,19 +2237,28 @@
     //else: have specific type
 
     handler = FindHandler(type);
-    if ( !handler )
+    bool ok = (NULL != handler);
+    if (ok)
     {
-        wxLogWarning( _("No image handler for type %ld defined."), type );
-        return false;
+       ok = !( stream.IsSeekable() && !handler->CanRead(stream) );
+       if (ok)
+       {
+           ok = handler->LoadFile(this, stream, true/*verbose*/, index);
+           if (ok)
+           {
+               M_IMGDATA->m_type = type;
+           }
+       }
+       else
+       {
+           wxLogError(_("Image file is not of type %ld."), type);
+       }
     }
-
-    if ( stream.IsSeekable() && !handler->CanRead(stream) )
+    else
     {
-        wxLogError(_("Image file is not of type %ld."), type);
-        return false;
+        wxLogWarning( _("No image handler for type %ld defined."), type );
     }
-
-    return handler->LoadFile(this, stream, true/*verbose*/, index);
+    return ok;
 }
 
 bool wxImage::LoadFile( wxInputStream& stream, const wxString& mimetype, int index )
@@ -2250,19 +2269,28 @@
 
     wxImageHandler *handler = FindHandlerMime(mimetype);
 
-    if ( !handler )
+    bool ok = (NULL != handler);
+    if (ok)
     {
-        wxLogWarning( _("No image handler for type %s defined."), mimetype.GetData() );
-        return false;
+        ok = !( stream.IsSeekable() && !handler->CanRead(stream) );
+        if (ok)
+        {
+            ok = handler->LoadFile( this, stream, true/*verbose*/, index );
+            if (ok)
+            {
+                M_IMGDATA->m_type = handler->GetType();
+            }
+        }
+        else
+        {
+            wxLogError(_("Image file is not of type %s."), mimetype);
+        }
     }
-
-    if ( stream.IsSeekable() && !handler->CanRead(stream) )
+    else
     {
-        wxLogError(_("Image file is not of type %s."), mimetype);
-        return false;
+        wxLogWarning( _("No image handler for type %s defined."), mimetype.GetData() );
     }
-
-    return handler->LoadFile( this, stream, true/*verbose*/, index );
+    return ok;
 }
 
 bool wxImage::SaveFile( wxOutputStream& stream, wxBitmapType type ) const
@@ -2270,13 +2298,20 @@
     wxCHECK_MSG( Ok(), false, wxT("invalid image") );
 
     wxImageHandler *handler = FindHandler(type);
-    if ( !handler )
+    bool ok = (NULL != handler);
+    if (ok)
     {
+        ok = handler->SaveFile( (wxImage*)this, stream );
+        if (ok)
+        {
+            M_IMGDATA->m_type = handler->GetType();
+        }
+    }
+    else
+    {
         wxLogWarning( _("No image handler for type %d defined."), type );
-        return false;
     }
-
-    return handler->SaveFile( (wxImage*)this, stream );
+    return ok;
 }
 
 bool wxImage::SaveFile( wxOutputStream& stream, const wxString& mimetype ) const
@@ -2284,12 +2319,20 @@
     wxCHECK_MSG( Ok(), false, wxT("invalid image") );
 
     wxImageHandler *handler = FindHandlerMime(mimetype);
-    if ( !handler )
+    bool ok = (NULL != handler);
+    if (ok)
     {
+        ok = handler->SaveFile( (wxImage*)this, stream );
+        if (ok)
+        {
+            M_IMGDATA->m_type = handler->GetType();
+        }
+    }
+    else
+    {
         wxLogWarning( _("No image handler for type %s defined."), mimetype.GetData() );
     }
-
-    return handler->SaveFile( (wxImage*)this, stream );
+    return ok;
 }
 
 #endif // wxUSE_STREAMS

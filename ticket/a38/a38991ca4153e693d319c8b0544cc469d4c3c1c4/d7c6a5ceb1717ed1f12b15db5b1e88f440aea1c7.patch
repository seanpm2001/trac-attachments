Index: docs/latex/wx/text.tex
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/docs/latex/wx/text.tex,v
retrieving revision 1.81
diff -bu2 -r1.81 docs/latex/wx/text.tex
--- docs/latex/wx/text.tex
+++ docs/latex/wx/text.tex
@@ -219,7 +219,8 @@
 \begin{twocollist}\itemsep=0pt
 \twocolitem{{\bf EVT\_TEXT(id, func)}}{Respond to a wxEVT\_COMMAND\_TEXT\_UPDATED event,
-generated when the text changes. Notice that this event will always be sent
+generated when the text changes. Notice that this event will be sent
 when the text controls contents changes - whether this is due to user input or
-comes from the program itself (for example, if SetValue() is called)}
+comes from the program itself (for example, if SetValue() is called); see ChangeValue() for
+a function which does not send this event.}
 \twocolitem{{\bf EVT\_TEXT\_ENTER(id, func)}}{Respond to a wxEVT\_COMMAND\_TEXT\_ENTER event,
 generated when enter is pressed in a text control (which must have
@@ -970,4 +971,25 @@
 event.
 
+This function is deprecated and should not be used in new code. Please use the
+\helpref{ChangeValue}{wxtextctrlchangevalue} function instead.
+
+\wxheading{Parameters}
+
+\docparam{value}{The new value to set. It may contain newline characters if the text control is multi-line.}
+
+
+\membersection{wxTextCtrl::ChangeValue}\label{wxtextctrlchangevalue}
+
+\func{virtual void}{ChangeValue}{\param{const wxString\& }{ value}}
+
+Sets the text value and marks the control as not-modified (which means that
+\helpref{IsModified}{wxtextctrlismodified} would return {\tt false} immediately
+after the call to SetValue).
+
+Note that this function will NOT generate a {\tt wxEVT\_COMMAND\_TEXT\_UPDATED}
+event.
+This is the only difference with \helpref{SetValue}{wxtextctrlsetvalue}.
+See \helpref{this topic}{progevent} for more info.
+
 \wxheading{Parameters}
 
Index: include/wx/textctrl.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/textctrl.h,v
retrieving revision 1.85
diff -bu2 -r1.85 include/wx/textctrl.h
--- include/wx/textctrl.h
+++ include/wx/textctrl.h
@@ -295,4 +295,6 @@
     virtual void SetValue(const wxString& value) = 0;
 
+    virtual void ChangeValue(const wxString &value) = 0;
+
     virtual wxString GetRange(long from, long to) const;
 
Index: include/wx/cocoa/textctrl.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/cocoa/textctrl.h,v
retrieving revision 1.6
diff -bu2 -r1.6 include/wx/cocoa/textctrl.h
--- include/wx/cocoa/textctrl.h
+++ include/wx/cocoa/textctrl.h
@@ -58,4 +58,6 @@
     virtual void SetValue(const wxString& value);
 
+    virtual void ChangeValue(const wxString &value);
+
     virtual int GetLineLength(long lineNo) const;
     virtual wxString GetLineText(long lineNo) const;
Index: include/wx/gtk/textctrl.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/gtk/textctrl.h,v
retrieving revision 1.67
diff -bu2 -r1.67 include/wx/gtk/textctrl.h
--- include/wx/gtk/textctrl.h
+++ include/wx/gtk/textctrl.h
@@ -46,4 +46,6 @@
     virtual void SetValue(const wxString& value);
 
+    virtual void ChangeValue(const wxString &value);
+
     virtual int GetLineLength(long lineNo) const;
     virtual wxString GetLineText(long lineNo) const;
@@ -156,5 +158,5 @@
 
     // tell the control to ignore next text changed signal
-    void IgnoreNextTextUpdate() { m_ignoreNextUpdate = true; }
+    void IgnoreNextTextUpdate(int n = 1) { m_ignoreNextUpdate = n; }
 
     // should we ignore the changed signal? always resets the flag
@@ -204,7 +206,8 @@
 
     bool        m_modified:1;
-    bool        m_ignoreNextUpdate:1;
     bool        m_dontMarkDirty:1;
 
+    int         m_ignoreNextUpdate;
+
     // Our text buffer. Convenient, and holds the buffer while using
     // a dummy one when m_frozenness > 0
Index: include/wx/gtk1/textctrl.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/gtk1/textctrl.h,v
retrieving revision 1.59
diff -bu2 -r1.59 include/wx/gtk1/textctrl.h
--- include/wx/gtk1/textctrl.h
+++ include/wx/gtk1/textctrl.h
@@ -46,4 +46,6 @@
     virtual void SetValue(const wxString& value);
 
+    virtual void ChangeValue(const wxString &value);
+
     virtual int GetLineLength(long lineNo) const;
     virtual wxString GetLineText(long lineNo) const;
Index: include/wx/mac/carbon/textctrl.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/mac/carbon/textctrl.h,v
retrieving revision 1.18
diff -bu2 -r1.18 include/wx/mac/carbon/textctrl.h
--- include/wx/mac/carbon/textctrl.h
+++ include/wx/mac/carbon/textctrl.h
@@ -64,4 +64,6 @@
     virtual void SetValue(const wxString& value);
 
+    virtual void ChangeValue(const wxString &value);
+
     virtual int GetLineLength(long lineNo) const;
     virtual wxString GetLineText(long lineNo) const;
Index: include/wx/mac/classic/textctrl.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/mac/classic/textctrl.h,v
retrieving revision 1.7
diff -bu2 -r1.7 include/wx/mac/classic/textctrl.h
--- include/wx/mac/classic/textctrl.h
+++ include/wx/mac/classic/textctrl.h
@@ -49,5 +49,8 @@
   // ---------
   virtual wxString GetValue() const ;
-  virtual void SetValue(const wxString& value);
+  virtual void SetValue(const wxString& value)
+    { ChangeValue(value); /* TODO: send event */ }
+
+  virtual void ChangeValue(const wxString &value);
 
   virtual int GetLineLength(long lineNo) const;
Index: include/wx/motif/textctrl.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/motif/textctrl.h,v
retrieving revision 1.26
diff -bu2 -r1.26 include/wx/motif/textctrl.h
--- include/wx/motif/textctrl.h
+++ include/wx/motif/textctrl.h
@@ -44,5 +44,8 @@
     // ---------
     virtual wxString GetValue() const;
-    virtual void SetValue(const wxString& value);
+    virtual void SetValue(const wxString& value)
+        { ChangeValue(value); /* TODO: send event here */}
+
+    virtual void ChangeValue(const wxString &value);
 
     virtual int GetLineLength(long lineNo) const;
Index: include/wx/msw/textctrl.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/msw/textctrl.h,v
retrieving revision 1.72
diff -bu2 -r1.72 include/wx/msw/textctrl.h
--- include/wx/msw/textctrl.h
+++ include/wx/msw/textctrl.h
@@ -48,4 +48,6 @@
     virtual void SetValue(const wxString& value);
 
+    virtual void ChangeValue(const wxString &value);
+
     virtual wxString GetRange(long from, long to) const;
 
@@ -230,5 +232,5 @@
     // replace the contents of the selection or of the entire control with the
     // given text
-    void DoWriteText(const wxString& text, bool selectionOnly = true);
+    void DoWriteText(const wxString& text, bool selectionOnly = true, bool sendEvent = true);
 
     // set the selection possibly without scrolling the caret into view
Index: include/wx/msw/wince/textctrlce.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/msw/wince/textctrlce.h,v
retrieving revision 1.7
diff -bu2 -r1.7 include/wx/msw/wince/textctrlce.h
--- include/wx/msw/wince/textctrlce.h
+++ include/wx/msw/wince/textctrlce.h
@@ -53,4 +53,6 @@
     virtual void SetValue(const wxString& value);
 
+    virtual void ChangeValue(const wxString &value);
+
     virtual wxString GetRange(long from, long to) const;
 
@@ -188,5 +190,5 @@
     // replace the contents of the selection or of the entire control with the
     // given text
-    void DoWriteText(const wxString& text, bool selectionOnly = true);
+    void DoWriteText(const wxString& text, bool selectionOnly = true, bool sendEvent = true);
 
     // set the selection possibly without scrolling the caret into view
Index: include/wx/os2/textctrl.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/os2/textctrl.h,v
retrieving revision 1.21
diff -bu2 -r1.21 include/wx/os2/textctrl.h
--- include/wx/os2/textctrl.h
+++ include/wx/os2/textctrl.h
@@ -50,4 +50,6 @@
     virtual void SetValue(const wxString& rsValue);
 
+    virtual void ChangeValue(const wxString &value);
+
     virtual int      GetLineLength(long nLineNo) const;
     virtual wxString GetLineText(long nLineNo) const;
@@ -181,4 +183,7 @@
                                 ,WXDWORD* dwExstyle
                                ) const;
+
+    bool m_bSkipUpdate;
+
 private:
     bool                            m_bIsMLE;
Index: include/wx/palmos/textctrl.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/palmos/textctrl.h,v
retrieving revision 1.8
diff -bu2 -r1.8 include/wx/palmos/textctrl.h
--- include/wx/palmos/textctrl.h
+++ include/wx/palmos/textctrl.h
@@ -48,4 +48,6 @@
     virtual void SetValue(const wxString& value);
 
+    virtual void ChangeValue(const wxString &value);
+
     virtual int GetLineLength(long lineNo) const;
     virtual wxString GetLineText(long lineNo) const;
Index: include/wx/univ/textctrl.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/univ/textctrl.h,v
retrieving revision 1.22
diff -bu2 -r1.22 include/wx/univ/textctrl.h
--- include/wx/univ/textctrl.h
+++ include/wx/univ/textctrl.h
@@ -108,4 +108,6 @@
     virtual void SetValue(const wxString& value);
 
+    virtual void ChangeValue(const wxString &value);
+
     virtual int GetLineLength(wxTextCoord lineNo) const;
     virtual wxString GetLineText(wxTextCoord lineNo) const;
Index: include/wx/x11/textctrl.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/x11/textctrl.h,v
retrieving revision 1.16
diff -bu2 -r1.16 include/wx/x11/textctrl.h
--- include/wx/x11/textctrl.h
+++ include/wx/x11/textctrl.h
@@ -118,5 +118,8 @@
 
     virtual wxString GetValue() const;
-    virtual void SetValue(const wxString& value);
+    virtual void SetValue(const wxString& value)
+        { ChangeValue(value); /* TODO: send event here */}
+
+    virtual void ChangeValue(const wxString &value);
 
     virtual int GetLineLength(long lineNo) const;
Index: samples/text/text.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/samples/text/text.cpp,v
retrieving revision 1.89
diff -bu2 -r1.89 samples/text/text.cpp
--- samples/text/text.cpp
+++ samples/text/text.cpp
@@ -948,5 +948,5 @@
             wxLogMessage(_T("IsModified() before SetValue(): %d"),
                          IsModified());
-            SetValue(_T("SetValue() has been called"));
+            ChangeValue(_T("ChangeValue() has been called"));
             wxLogMessage(_T("IsModified() after SetValue(): %d"),
                          IsModified());
Index: src/gtk/textctrl.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/gtk/textctrl.cpp,v
retrieving revision 1.257
diff -bu2 -r1.257 src/gtk/textctrl.cpp
--- src/gtk/textctrl.cpp
+++ src/gtk/textctrl.cpp
@@ -441,5 +441,8 @@
 {
     if ( win->IgnoreTextUpdate() )
+    {
+        //wxLogDebug(wxT("Ignoring a text-changed update"));  // very useful for debug
         return;
+    }
 
     if (!win->m_hasVMT) return;
@@ -547,7 +550,8 @@
 {
     m_dontMarkDirty =
-    m_ignoreNextUpdate =
     m_modified = false;
 
+    m_ignoreNextUpdate = 0;
+
     SetUpdateFont(false);
 
@@ -869,4 +873,55 @@
 }
 
+
+void wxTextCtrl::ChangeValue( const wxString &value )
+{
+    wxCHECK_RET( m_text != NULL, wxT("invalid text ctrl") );
+
+    // the control won't be modified any more as we programmatically replace
+    // all the existing text, so reset the flag and don't set it again (and do
+    // it now, before the text event handler is ran so that IsModified() called
+    // from there returns the expected value)
+    m_modified = false;
+    DontMarkDirtyOnNextChange();
+
+    if ( IsMultiLine() )
+    {
+        const wxCharBuffer buffer(wxGTK_CONV_ENC(value, GetTextEncoding()));
+        if ( !buffer )
+        {
+            // see comment in WriteText() as to why we must warn the user about
+            // this
+            wxLogWarning(_("Failed to set text in the text control."));
+            return;
+        }
+
+        // if the control is not empty, two "changed" signals are emitted
+        if (gtk_text_buffer_get_char_count(m_buffer) != 0)
+            IgnoreNextTextUpdate(2);
+        else
+            IgnoreNextTextUpdate(1);        // skip only one
+
+        gtk_text_buffer_set_text( m_buffer, buffer, strlen(buffer) );
+    }
+    else // single line
+    {
+
+        // gtk_entry_set_text() emits two "changed" signals if the control is
+        // not empty because internally it calls gtk_editable_delete_text() and
+        // gtk_editable_insert_text()
+        if ( !GetValue().empty() )
+            IgnoreNextTextUpdate(2);
+        else
+            IgnoreNextTextUpdate(1);        // if we are empty, skip only one event
+
+        gtk_entry_set_text( GTK_ENTRY(m_text), wxGTK_CONV(value) );
+    }
+
+    // GRG, Jun/2000: Changed this after a lot of discussion in
+    //   the lists. wxWidgets 2.2 will have a set of flags to
+    //   customize this behaviour.
+    SetInsertionPoint(0);
+}
+
 void wxTextCtrl::WriteText( const wxString &text )
 {
@@ -1183,7 +1238,7 @@
 bool wxTextCtrl::IgnoreTextUpdate()
 {
-    if ( m_ignoreNextUpdate )
+    if ( m_ignoreNextUpdate > 0 )
     {
-        m_ignoreNextUpdate = false;
+        m_ignoreNextUpdate--;
 
         return true;
Index: src/gtk1/textctrl.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/gtk1/textctrl.cpp,v
retrieving revision 1.229
diff -bu2 -r1.229 src/gtk1/textctrl.cpp
--- src/gtk1/textctrl.cpp
+++ src/gtk1/textctrl.cpp
@@ -145,4 +145,7 @@
 gtk_scrollbar_changed_callback( GtkWidget *WXUNUSED(widget), wxTextCtrl *win )
 {
+    if ( win->IgnoreTextUpdate() )
+        return;
+
     if (!win->m_hasVMT) return;
 
@@ -437,4 +440,31 @@
 }
 
+void wxTextCtrl::ChangeValue( const wxString &value )
+{
+    wxCHECK_RET( m_text != NULL, wxT("invalid text ctrl") );
+
+    // do not generate events
+    IgnoreNextTextUpdate();
+
+    if (m_windowStyle & wxTE_MULTILINE)
+    {
+        gint len = gtk_text_get_length( GTK_TEXT(m_text) );
+        gtk_editable_delete_text( GTK_EDITABLE(m_text), 0, len );
+        len = 0;
+        gtk_editable_insert_text( GTK_EDITABLE(m_text), value.mbc_str(), value.length(), &len );
+    }
+    else
+    {
+        gtk_entry_set_text( GTK_ENTRY(m_text), wxGTK_CONV( value ) );
+    }
+
+    // GRG, Jun/2000: Changed this after a lot of discussion in
+    //   the lists. wxWidgets 2.2 will have a set of flags to
+    //   customize this behaviour.
+    SetInsertionPoint(0);
+
+    m_modified = false;
+}
+
 void wxTextCtrl::WriteText( const wxString &text )
 {
Index: src/mac/carbon/textctrl.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/mac/carbon/textctrl.cpp,v
retrieving revision 1.201
diff -bu2 -r1.201 src/mac/carbon/textctrl.cpp
--- src/mac/carbon/textctrl.cpp
+++ src/mac/carbon/textctrl.cpp
@@ -568,4 +568,13 @@
 }
 
+void wxTextCtrl::ChangeValue(const wxString& str)
+{
+    // optimize redraws
+    if ( GetValue() == str )
+        return ;
+
+    GetPeer()->SetStringValue( str ) ;
+}
+
 void wxTextCtrl::SetMaxLength(unsigned long len)
 {
Index: src/mac/classic/textctrl.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/mac/classic/textctrl.cpp,v
retrieving revision 1.23
diff -bu2 -r1.23 src/mac/classic/textctrl.cpp
--- src/mac/classic/textctrl.cpp
+++ src/mac/classic/textctrl.cpp
@@ -907,5 +907,5 @@
 }
 
-void wxTextCtrl::SetValue(const wxString& str)
+void wxTextCtrl::ChangeValue(const wxString& str)
 {
     wxString st = str ;
Index: src/motif/textctrl.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/motif/textctrl.cpp,v
retrieving revision 1.56
diff -bu2 -r1.56 src/motif/textctrl.cpp
--- src/motif/textctrl.cpp
+++ src/motif/textctrl.cpp
@@ -241,5 +241,5 @@
 }
 
-void wxTextCtrl::SetValue(const wxString& text)
+void wxTextCtrl::ChangeValue(const wxString& text)
 {
     m_inSetValue = true;
Index: src/msw/textctrl.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/msw/textctrl.cpp,v
retrieving revision 1.270
diff -u -r1.270 textctrl.cpp
--- src/msw/textctrl.cpp	2006/09/07 19:01:32	1.270
+++ src/msw/textctrl.cpp	2006/09/10 16:25:08
@@ -134,9 +134,13 @@
     UpdatesCountFilter(int& count)
         : m_count(count)
     {
-        wxASSERT_MSG( m_count == -1, _T("wrong initial m_updatesCount value") );
+        wxASSERT_MSG( m_count == -1 || m_count == -2, 
+                      _T("wrong initial m_updatesCount value") );
 
-        m_count = 0;
+        if (m_count != -2)
+            m_count = 0;
+        //else: we don't want to count how many update events we get as we're going
+        //      to ignore all of them
     }
 
     ~UpdatesCountFilter()
@@ -811,6 +815,33 @@
     }
 }
 
+void wxTextCtrl::ChangeValue(const wxString& value)
+{
+    // if the text is long enough, it's faster to just set it instead of first
+    // comparing it with the old one (chances are that it will be different
+    // anyhow, this comparison is there to avoid flicker for small single-line
+    // edit controls mostly)
+    if ( (value.length() > 0x400) || (value != GetValue()) )
+    {
+        DoWriteText(value, false /* not selection only */, false /* no events ! */);
+
+        // mark the control as being not dirty - we changed its text, not the
+        // user
+        DiscardEdits();
+
+        // for compatibility, don't move the cursor when doing SetValue()
+        SetInsertionPoint(0);
+    }
+    else // same text
+    {
+        // still reset the modified flag even if the value didn't really change
+        // because now it comes from the program and not the user (and do it
+        // before generating the event so that the event handler could get the
+        // expected value from IsModified())
+        DiscardEdits();
+    }
+}
+
 #if wxUSE_RICHEDIT && (!wxUSE_UNICODE || wxUSE_UNICODE_MSLU)
 
 // TODO: using memcpy() would improve performance a lot for big amounts of text
@@ -1005,7 +1036,7 @@
     DoWriteText(value);
 }
 
-void wxTextCtrl::DoWriteText(const wxString& value, bool selectionOnly)
+void wxTextCtrl::DoWriteText(const wxString& value, bool selectionOnly, bool sendEvent)
 {
     wxString valueDos;
     if ( m_windowStyle & wxTE_MULTILINE )
@@ -1070,13 +1101,16 @@
         // we generate exactly one of them by ignoring all but the first one in
         // SendUpdateEvent() and generating one ourselves if we hadn't got any
         // notifications from Windows
+        if (!sendEvent)
+            m_updatesCount = -2;        // suppress any update event
+
         UpdatesCountFilter ucf(m_updatesCount);
 
         ::SendMessage(GetHwnd(), selectionOnly ? EM_REPLACESEL : WM_SETTEXT,
                       // EM_REPLACESEL takes 1 to indicate the operation should be redoable
                       selectionOnly ? 1 : 0, (LPARAM)valueDos.c_str());
 
-        if ( !ucf.GotUpdate() )
+        if ( !ucf.GotUpdate() && sendEvent )
         {
             SendUpdateEvent();
         }
@@ -1971,6 +2005,11 @@
             // we hadn't updated the control ourselves, this event comes from
             // the user, don't need to ignore it nor update the count
             break;
+
+        case -2:
+            // the control was updated programmatically and we do NOT want to
+            // send events
+            return false;
     }
 
     wxCommandEvent event(wxEVT_COMMAND_TEXT_UPDATED, GetId());
Index: src/msw/wince/textctrlce.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/msw/wince/textctrlce.cpp,v
retrieving revision 1.8
diff -bu2 -r1.8 src/msw/wince/textctrlce.cpp
--- src/msw/wince/textctrlce.cpp
+++ src/msw/wince/textctrlce.cpp
@@ -422,4 +422,25 @@
 }
 
+void wxTextCtrl::ChangeValue(const wxString& value)
+{
+    // if the text is long enough, it's faster to just set it instead of first
+    // comparing it with the old one (chances are that it will be different
+    // anyhow, this comparison is there to avoid flicker for small single-line
+    // edit controls mostly)
+    if ( (value.length() > 0x400) || (value != GetValue()) )
+    {
+        DoWriteText(value, false, false /* no events ! */);
+
+        // for compatibility, don't move the cursor when doing SetValue()
+        SetInsertionPoint(0);
+    }
+
+    // we should reset the modified flag even if the value didn't really change
+
+    // mark the control as being not dirty - we changed its text, not the
+    // user
+    DiscardEdits();
+}
+
 void wxTextCtrl::WriteText(const wxString& value)
 {
@@ -427,5 +448,5 @@
 }
 
-void wxTextCtrl::DoWriteText(const wxString& value, bool selectionOnly)
+void wxTextCtrl::DoWriteText(const wxString& value, bool selectionOnly, bool sendevent)
 {
     wxString valueDos;
@@ -447,5 +468,5 @@
                   0, (LPARAM)valueDos.c_str());
 
-    if ( !selectionOnly )
+    if ( !selectionOnly && !sendevent )
     {
         // Windows already sends an update event for single-line
Index: src/os2/textctrl.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/os2/textctrl.cpp,v
retrieving revision 1.49
diff -bu2 -r1.49 src/os2/textctrl.cpp
--- src/os2/textctrl.cpp
+++ src/os2/textctrl.cpp
@@ -126,4 +126,5 @@
     m_windowStyle = lStyle;
     m_bIsMLE = false;
+    m_bSkipUpdate = false;
 
     long                            lSstyle = WS_VISIBLE | WS_TABSTOP;
@@ -361,4 +362,23 @@
 } // end of wxTextCtrl::SetValue
 
+void wxTextCtrl::ChangeValue(
+        const wxString&                   rsValue
+                         )
+{
+    //
+    // If the text is long enough, it's faster to just set it instead of first
+    // comparing it with the old one (chances are that it will be different
+    // anyhow, this comparison is there to avoid flicker for small single-line
+    // edit controls mostly)
+    //
+    if ((rsValue.length() > 0x400) || (rsValue != GetValue()))
+    {
+        m_bSkipUpdate = true;
+
+        ::WinSetWindowText(GetHwnd(), (PSZ)rsValue.c_str());
+        AdjustSpaceLimit();
+    }
+} // end of wxTextCtrl::ChangeValue
+
 void wxTextCtrl::WriteText(
   const wxString&                   rsValue
@@ -1095,4 +1115,10 @@
         case EN_CHANGE:
             {
+                if (m_bSkipUpdate)
+                {
+                    m_bSkipUpdate = false;
+                    break;
+                }
+
                 wxCommandEvent      vEvent( wxEVT_COMMAND_TEXT_UPDATED
                                            ,m_windowId
Index: src/palmos/textctrl.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/palmos/textctrl.cpp,v
retrieving revision 1.12
diff -bu2 -r1.12 src/palmos/textctrl.cpp
--- src/palmos/textctrl.cpp
+++ src/palmos/textctrl.cpp
@@ -234,4 +234,8 @@
 }
 
+void wxTextCtrl::ChangeValue(const wxString& value)
+{
+}
+
 #if wxUSE_RICHEDIT && (!wxUSE_UNICODE || wxUSE_UNICODE_MSLU)
 
Index: src/univ/textctrl.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/univ/textctrl.cpp,v
retrieving revision 1.44
diff -bu2 -r1.44 src/univ/textctrl.cpp
--- src/univ/textctrl.cpp
+++ src/univ/textctrl.cpp
@@ -752,5 +752,5 @@
 // ----------------------------------------------------------------------------
 
-void wxTextCtrl::SetValue(const wxString& value)
+void wxTextCtrl::ChangeValue(const wxString& value)
 {
     if ( IsSingleLine() && (value == GetValue()) )
@@ -766,6 +766,11 @@
         SetInsertionPoint(0);
     }
+}
+
+void wxTextCtrl::SetValue(const wxString& value)
+{
+    ChangeValue(value);
 
-    // TODO: should we generate the event or not, finally?
+    // TODO: generate the event
 }
 
Index: src/x11/textctrl.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/x11/textctrl.cpp,v
retrieving revision 1.35
diff -bu2 -r1.35 src/x11/textctrl.cpp
--- src/x11/textctrl.cpp
+++ src/x11/textctrl.cpp
@@ -278,5 +278,5 @@
 }
 
-void wxTextCtrl::SetValue(const wxString& value)
+void wxTextCtrl::ChangeValue(const wxString& value)
 {
     m_modified = false;

 	  	 

Index: docs/latex/wx/text.tex
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/docs/latex/wx/text.tex,v
retrieving revision 1.81
diff -u2 -r1.81 docs/latex/wx/text.tex
--- docs/latex/wx/text.tex
+++ docs/latex/wx/text.tex
@@ -219,7 +219,8 @@
 \begin{twocollist}\itemsep=0pt
 \twocolitem{{\bf EVT\_TEXT(id, func)}}{Respond to a wxEVT\_COMMAND\_TEXT\_UPDATED event,
-generated when the text changes. Notice that this event will always be sent
+generated when the text changes. Notice that this event will be sent
 when the text controls contents changes - whether this is due to user input or
-comes from the program itself (for example, if SetValue() is called)}
+comes from the program itself (for example, if SetValue() is called); see ChangeValue() for
+a function which does not send this event.}
 \twocolitem{{\bf EVT\_TEXT\_ENTER(id, func)}}{Respond to a wxEVT\_COMMAND\_TEXT\_ENTER event,
 generated when enter is pressed in a text control (which must have
@@ -970,4 +971,25 @@
 event.
 
+This function is deprecated and should not be used in new code. Please use the
+\helpref{ChangeValue}{wxtextctrlchangevalue} function instead.
+
+\wxheading{Parameters}
+
+\docparam{value}{The new value to set. It may contain newline characters if the text control is multi-line.}
+
+
+\membersection{wxTextCtrl::ChangeValue}\label{wxtextctrlchangevalue}
+
+\func{virtual void}{ChangeValue}{\param{const wxString\& }{ value}}
+
+Sets the text value and marks the control as not-modified (which means that
+\helpref{IsModified}{wxtextctrlismodified} would return {\tt false} immediately
+after the call to SetValue).
+
+Note that this function will NOT generate a {\tt wxEVT\_COMMAND\_TEXT\_UPDATED}
+event.
+This is the only difference with \helpref{SetValue}{wxtextctrlsetvalue}.
+See \helpref{this topic}{progevent} for more info.
+
 \wxheading{Parameters}
 
Index: include/wx/textctrl.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/textctrl.h,v
retrieving revision 1.86
diff -u2 -r1.86 include/wx/textctrl.h
--- include/wx/textctrl.h
+++ include/wx/textctrl.h
@@ -295,4 +295,6 @@
     virtual void SetValue(const wxString& value) = 0;
 
+    virtual void ChangeValue(const wxString &value) = 0;
+
     virtual wxString GetRange(long from, long to) const;
 
@@ -422,4 +424,16 @@
 #endif // wxHAS_TEXT_WINDOW_STREAM
 
+    // typically, wxTextCtrl classes will use a DoSetValue() function
+    // to implement SetValue() and ChangeValue() functions.
+    // these flags make DoSetValue() more readable
+    enum wxEventMode
+    {
+        wxDontSendEvent = 0,
+        wxSendEvent = 1
+    };
+
+    // generate the wxEVT_COMMAND_TEXT_UPDATED event
+    void SendTextUpdatedEvent();
+
     // the name of the last file loaded with LoadFile() which will be used by
     // SaveFile() by default
Index: include/wx/cocoa/textctrl.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/cocoa/textctrl.h,v
retrieving revision 1.6
diff -u2 -r1.6 include/wx/cocoa/textctrl.h
--- include/wx/cocoa/textctrl.h
+++ include/wx/cocoa/textctrl.h
@@ -58,4 +58,6 @@
     virtual void SetValue(const wxString& value);
 
+    virtual void ChangeValue(const wxString &value);
+
     virtual int GetLineLength(long lineNo) const;
     virtual wxString GetLineText(long lineNo) const;
Index: include/wx/gtk/textctrl.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/gtk/textctrl.h,v
retrieving revision 1.67
diff -u2 -r1.67 include/wx/gtk/textctrl.h
--- include/wx/gtk/textctrl.h
+++ include/wx/gtk/textctrl.h
@@ -44,5 +44,7 @@
 
     virtual wxString GetValue() const;
-    virtual void SetValue(const wxString& value);
+    virtual void SetValue(const wxString& value) { DoSetValue(value, wxSendEvent); }
+
+    virtual void ChangeValue(const wxString &value) { DoSetValue(value, wxDontSendEvent); }
 
     virtual int GetLineLength(long lineNo) const;
@@ -156,5 +158,5 @@
 
     // tell the control to ignore next text changed signal
-    void IgnoreNextTextUpdate() { m_ignoreNextUpdate = true; }
+    void IgnoreNextTextUpdate(int n = 1) { m_ignoreNextUpdate = n; }
 
     // should we ignore the changed signal? always resets the flag
@@ -190,4 +192,6 @@
     bool IsFrozen() const { return m_frozenness > 0; }
 
+    void DoSetValue(const wxString &value, wxEventMode send_event);
+
 private:
     // change the font for everything in this control
@@ -204,7 +208,8 @@
 
     bool        m_modified:1;
-    bool        m_ignoreNextUpdate:1;
     bool        m_dontMarkDirty:1;
 
+    int         m_ignoreNextUpdate;
+
     // Our text buffer. Convenient, and holds the buffer while using
     // a dummy one when m_frozenness > 0
Index: include/wx/gtk1/textctrl.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/gtk1/textctrl.h,v
retrieving revision 1.59
diff -u2 -r1.59 include/wx/gtk1/textctrl.h
--- include/wx/gtk1/textctrl.h
+++ include/wx/gtk1/textctrl.h
@@ -44,5 +44,7 @@
 
     virtual wxString GetValue() const;
-    virtual void SetValue(const wxString& value);
+    virtual void SetValue(const wxString& value) { DoSetValue(value, wxSendEvent); }
+
+    virtual void ChangeValue(const wxString &value) { DoSetValue(value, wxDontSendEvent); }
 
     virtual int GetLineLength(long lineNo) const;
@@ -183,4 +185,6 @@
     virtual bool UseGTKStyleBase() const { return true; }
 
+    void DoSetValue(const wxString &value, wxEventMode send_event);
+
 private:
     // change the font for everything in this control
Index: include/wx/mac/carbon/textctrl.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/mac/carbon/textctrl.h,v
retrieving revision 1.19
diff -u2 -r1.19 include/wx/mac/carbon/textctrl.h
--- include/wx/mac/carbon/textctrl.h
+++ include/wx/mac/carbon/textctrl.h
@@ -64,4 +64,6 @@
     virtual void SetValue(const wxString& value);
 
+    virtual void ChangeValue(const wxString &value);
+
     virtual int GetLineLength(long lineNo) const;
     virtual wxString GetLineText(long lineNo) const;
Index: include/wx/motif/textctrl.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/motif/textctrl.h,v
retrieving revision 1.26
diff -u2 -r1.26 include/wx/motif/textctrl.h
--- include/wx/motif/textctrl.h
+++ include/wx/motif/textctrl.h
@@ -44,5 +44,8 @@
     // ---------
     virtual wxString GetValue() const;
-    virtual void SetValue(const wxString& value);
+    virtual void SetValue(const wxString& value)
+        { ChangeValue(value); SendTextUpdatedEvent(); }
+
+    virtual void ChangeValue(const wxString &value);
 
     virtual int GetLineLength(long lineNo) const;
Index: include/wx/msw/textctrl.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/msw/textctrl.h,v
retrieving revision 1.73
diff -u2 -r1.73 include/wx/msw/textctrl.h
--- include/wx/msw/textctrl.h
+++ include/wx/msw/textctrl.h
@@ -46,5 +46,6 @@
 
     virtual wxString GetValue() const;
-    virtual void SetValue(const wxString& value);
+    virtual void SetValue(const wxString& value) { DoSetValue(value, wxSendEvent); }
+    virtual void ChangeValue(const wxString &value) { DoSetValue(value, wxDontSendEvent); }
 
     virtual wxString GetRange(long from, long to) const;
@@ -209,4 +210,6 @@
     void Init();
 
+    void DoSetValue(const wxString &value, wxEventMode send_event);
+
     // return true if this control has a user-set limit on amount of text (i.e.
     // the limit is due to a previous call to SetMaxLength() and not built in)
@@ -231,5 +234,5 @@
     // replace the contents of the selection or of the entire control with the
     // given text
-    void DoWriteText(const wxString& text, bool selectionOnly = true);
+    void DoWriteText(const wxString& text, bool selectionOnly = true, wxEventMode sendEvent = wxSendEvent);
 
     // set the selection possibly without scrolling the caret into view
Index: include/wx/msw/wince/textctrlce.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/msw/wince/textctrlce.h,v
retrieving revision 1.7
diff -u2 -r1.7 include/wx/msw/wince/textctrlce.h
--- include/wx/msw/wince/textctrlce.h
+++ include/wx/msw/wince/textctrlce.h
@@ -51,5 +51,7 @@
 
     virtual wxString GetValue() const;
-    virtual void SetValue(const wxString& value);
+    virtual void SetValue(const wxString& value) { DoSetValue(value, wxSendEvent); }
+
+    virtual void ChangeValue(const wxString &value) { DoSetValue(value, wxDontSendEvent); }
 
     virtual wxString GetRange(long from, long to) const;
@@ -186,7 +188,9 @@
     bool AdjustSpaceLimit();
 
+    void DoSetValue(const wxString &value, wxEventMode send_event);
+
     // replace the contents of the selection or of the entire control with the
     // given text
-    void DoWriteText(const wxString& text, bool selectionOnly = true);
+    void DoWriteText(const wxString& text, bool selectionOnly = true, wxEventMode sendEvent = wxSendEvent);
 
     // set the selection possibly without scrolling the caret into view
Index: include/wx/os2/textctrl.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/os2/textctrl.h,v
retrieving revision 1.21
diff -u2 -r1.21 include/wx/os2/textctrl.h
--- include/wx/os2/textctrl.h
+++ include/wx/os2/textctrl.h
@@ -48,5 +48,7 @@
     //
     virtual      wxString GetValue(void) const;
-    virtual void SetValue(const wxString& rsValue);
+    virtual void SetValue(const wxString& value) { DoSetValue(value, wxSendEvent); }
+
+    virtual void ChangeValue(const wxString &value) { DoSetValue(value, wxDontSendEvent); }
 
     virtual int      GetLineLength(long nLineNo) const;
@@ -181,4 +183,9 @@
                                 ,WXDWORD* dwExstyle
                                ) const;
+
+    void DoSetValue(const wxString &value, wxEventMode send_event);
+
+    bool m_bSkipUpdate;
+
 private:
     bool                            m_bIsMLE;
Index: include/wx/palmos/textctrl.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/palmos/textctrl.h,v
retrieving revision 1.8
diff -u2 -r1.8 include/wx/palmos/textctrl.h
--- include/wx/palmos/textctrl.h
+++ include/wx/palmos/textctrl.h
@@ -48,4 +48,6 @@
     virtual void SetValue(const wxString& value);
 
+    virtual void ChangeValue(const wxString &value);
+
     virtual int GetLineLength(long lineNo) const;
     virtual wxString GetLineText(long lineNo) const;
Index: include/wx/univ/textctrl.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/univ/textctrl.h,v
retrieving revision 1.23
diff -u2 -r1.23 include/wx/univ/textctrl.h
--- include/wx/univ/textctrl.h
+++ include/wx/univ/textctrl.h
@@ -108,4 +108,6 @@
     virtual void SetValue(const wxString& value);
 
+    virtual void ChangeValue(const wxString &value);
+
     virtual int GetLineLength(wxTextCoord lineNo) const;
     virtual wxString GetLineText(wxTextCoord lineNo) const;
Index: include/wx/x11/textctrl.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/x11/textctrl.h,v
retrieving revision 1.16
diff -u2 -r1.16 include/wx/x11/textctrl.h
--- include/wx/x11/textctrl.h
+++ include/wx/x11/textctrl.h
@@ -118,5 +118,8 @@
 
     virtual wxString GetValue() const;
-    virtual void SetValue(const wxString& value);
+    virtual void SetValue(const wxString& value)
+        { ChangeValue(value); SendTextUpdatedEvent(); }
+
+    virtual void ChangeValue(const wxString &value);
 
     virtual int GetLineLength(long lineNo) const;
Index: samples/text/text.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/samples/text/text.cpp,v
retrieving revision 1.89
diff -u2 -r1.89 samples/text/text.cpp
--- samples/text/text.cpp
+++ samples/text/text.cpp
@@ -948,5 +948,5 @@
             wxLogMessage(_T("IsModified() before SetValue(): %d"),
                          IsModified());
-            SetValue(_T("SetValue() has been called"));
+            ChangeValue(_T("ChangeValue() has been called"));
             wxLogMessage(_T("IsModified() after SetValue(): %d"),
                          IsModified());
Index: src/gtk/textctrl.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/gtk/textctrl.cpp,v
retrieving revision 1.257
diff -u2 -r1.257 src/gtk/textctrl.cpp
--- src/gtk/textctrl.cpp
+++ src/gtk/textctrl.cpp
@@ -441,5 +441,8 @@
 {
     if ( win->IgnoreTextUpdate() )
+    {
+        //wxLogDebug(wxT("Ignoring a text-changed update"));  // very useful for debug
         return;
+    }
 
     if (!win->m_hasVMT) return;
@@ -547,7 +550,8 @@
 {
     m_dontMarkDirty =
-    m_ignoreNextUpdate =
     m_modified = false;
 
+    m_ignoreNextUpdate = 0;
+
     SetUpdateFont(false);
 
@@ -825,5 +829,5 @@
 }
 
-void wxTextCtrl::SetValue( const wxString &value )
+void wxTextCtrl::DoSetValue( const wxString &value, wxEventMode send_event )
 {
     wxCHECK_RET( m_text != NULL, wxT("invalid text ctrl") );
@@ -847,6 +851,18 @@
         }
 
-        if (gtk_text_buffer_get_char_count(m_buffer) != 0)
-            IgnoreNextTextUpdate();
+
+        // if the control is not empty, two "changed" signals are emitted
+        if (send_event)
+        {
+            if (gtk_text_buffer_get_char_count(m_buffer) != 0)
+                IgnoreNextTextUpdate();
+        }
+        else
+        {
+            if (gtk_text_buffer_get_char_count(m_buffer) != 0)
+                IgnoreNextTextUpdate(2);
+            else
+                IgnoreNextTextUpdate(1);        // skip only one
+        }
 
         gtk_text_buffer_set_text( m_buffer, buffer, strlen(buffer) );
@@ -856,7 +872,17 @@
         // gtk_entry_set_text() emits two "changed" signals if the control is
         // not empty because internally it calls gtk_editable_delete_text() and
-        // gtk_editable_insert_text() but we want to have only one event
-        if ( !GetValue().empty() )
-            IgnoreNextTextUpdate();
+        // gtk_editable_insert_text()
+        if (send_event)
+        {
+            if ( !GetValue().empty() )
+                IgnoreNextTextUpdate();
+        }
+        else
+        {
+            if ( !GetValue().empty() )
+                IgnoreNextTextUpdate(2);
+            else
+                IgnoreNextTextUpdate(1);        // if we are empty, skip only one event
+        }
 
         gtk_entry_set_text( GTK_ENTRY(m_text), wxGTK_CONV(value) );
@@ -1183,7 +1209,7 @@
 bool wxTextCtrl::IgnoreTextUpdate()
 {
-    if ( m_ignoreNextUpdate )
+    if ( m_ignoreNextUpdate > 0 )
     {
-        m_ignoreNextUpdate = false;
+        m_ignoreNextUpdate--;
 
         return true;
Index: src/gtk1/textctrl.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/gtk1/textctrl.cpp,v
retrieving revision 1.229
diff -u2 -r1.229 src/gtk1/textctrl.cpp
--- src/gtk1/textctrl.cpp
+++ src/gtk1/textctrl.cpp
@@ -145,4 +145,7 @@
 gtk_scrollbar_changed_callback( GtkWidget *WXUNUSED(widget), wxTextCtrl *win )
 {
+    if ( win->IgnoreTextUpdate() )
+        return;
+
     if (!win->m_hasVMT) return;
 
@@ -413,8 +416,14 @@
 }
 
-void wxTextCtrl::SetValue( const wxString &value )
+void wxTextCtrl::DoSetValue( const wxString &value, wxEventMode send_event )
 {
     wxCHECK_RET( m_text != NULL, wxT("invalid text ctrl") );
 
+    if (!send_event)
+    {
+        // do not generate events
+        IgnoreNextTextUpdate();
+    }
+
     if (m_windowStyle & wxTE_MULTILINE)
     {
Index: src/mac/carbon/textctrl.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/mac/carbon/textctrl.cpp,v
retrieving revision 1.202
diff -u2 -r1.202 src/mac/carbon/textctrl.cpp
--- src/mac/carbon/textctrl.cpp
+++ src/mac/carbon/textctrl.cpp
@@ -565,4 +565,13 @@
 }
 
+void wxTextCtrl::ChangeValue(const wxString& str)
+{
+    // optimize redraws
+    if ( GetValue() == str )
+        return ;
+
+    GetPeer()->SetStringValue( str ) ;
+}
+
 void wxTextCtrl::SetMaxLength(unsigned long len)
 {
Index: src/motif/textctrl.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/motif/textctrl.cpp,v
retrieving revision 1.56
diff -u2 -r1.56 src/motif/textctrl.cpp
--- src/motif/textctrl.cpp
+++ src/motif/textctrl.cpp
@@ -241,5 +241,5 @@
 }
 
-void wxTextCtrl::SetValue(const wxString& text)
+void wxTextCtrl::ChangeValue(const wxString& text)
 {
     m_inSetValue = true;
Index: src/msw/textctrl.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/msw/textctrl.cpp,v
retrieving revision 1.271
diff -u2 -r1.271 src/msw/textctrl.cpp
--- src/msw/textctrl.cpp
+++ src/msw/textctrl.cpp
@@ -135,7 +135,11 @@
         : m_count(count)
     {
-        wxASSERT_MSG( m_count == -1, _T("wrong initial m_updatesCount value") );
+        wxASSERT_MSG( m_count == -1 || m_count == -2,
+                      _T("wrong initial m_updatesCount value") );
 
-        m_count = 0;
+        if (m_count != -2)
+            m_count = 0;
+        //else: we don't want to count how many update events we get as we're going
+        //      to ignore all of them
     }
 
@@ -782,5 +786,5 @@
 }
 
-void wxTextCtrl::SetValue(const wxString& value)
+void wxTextCtrl::DoSetValue(const wxString& value, wxEventMode send_event)
 {
     // if the text is long enough, it's faster to just set it instead of first
@@ -790,5 +794,5 @@
     if ( (value.length() > 0x400) || (value != GetValue()) )
     {
-        DoWriteText(value, false /* not selection only */);
+        DoWriteText(value, false /* not selection only */, send_event);
 
         // mark the control as being not dirty - we changed its text, not the
@@ -808,5 +812,6 @@
 
         // still send an event for consistency
-        SendUpdateEvent();
+        if (send_event)
+            SendUpdateEvent();
     }
 }
@@ -1006,5 +1011,5 @@
 }
 
-void wxTextCtrl::DoWriteText(const wxString& value, bool selectionOnly)
+void wxTextCtrl::DoWriteText(const wxString& value, bool selectionOnly, wxEventMode send_event)
 {
     wxString valueDos;
@@ -1071,4 +1076,7 @@
         // SendUpdateEvent() and generating one ourselves if we hadn't got any
         // notifications from Windows
+        if (!send_event)
+            m_updatesCount = -2;        // suppress any update event
+
         UpdatesCountFilter ucf(m_updatesCount);
 
@@ -1077,5 +1085,5 @@
                       selectionOnly ? 1 : 0, (LPARAM)valueDos.c_str());
 
-        if ( !ucf.GotUpdate() )
+        if ( !ucf.GotUpdate() && send_event )
         {
             SendUpdateEvent();
@@ -1972,4 +1980,9 @@
             // the user, don't need to ignore it nor update the count
             break;
+
+        case -2:
+            // the control was updated programmatically and we do NOT want to
+            // send events
+            return false;
     }
 
Index: src/msw/wince/textctrlce.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/msw/wince/textctrlce.cpp,v
retrieving revision 1.9
diff -u2 -r1.9 src/msw/wince/textctrlce.cpp
--- src/msw/wince/textctrlce.cpp
+++ src/msw/wince/textctrlce.cpp
@@ -394,5 +394,5 @@
 }
 
-void wxTextCtrl::SetValue(const wxString& value)
+void wxTextCtrl::DoSetValue(const wxString& value, wxEventMode send_event)
 {
     // if the text is long enough, it's faster to just set it instead of first
@@ -402,5 +402,5 @@
     if ( (value.length() > 0x400) || (value != GetValue()) )
     {
-        DoWriteText(value, false);
+        DoWriteText(value, false, send_event);
 
         // for compatibility, don't move the cursor when doing SetValue()
@@ -410,5 +410,6 @@
     {
         // still send an event for consistency
-        SendUpdateEvent();
+        if (send_event)
+            SendUpdateEvent();
     }
 
@@ -425,5 +426,5 @@
 }
 
-void wxTextCtrl::DoWriteText(const wxString& value, bool selectionOnly)
+void wxTextCtrl::DoWriteText(const wxString& value, bool selectionOnly, wxEventMode send_event)
 {
     wxString valueDos;
@@ -445,5 +446,5 @@
                   0, (LPARAM)valueDos.c_str());
 
-    if ( !selectionOnly )
+    if ( !selectionOnly && !send_event )
     {
         // Windows already sends an update event for single-line
Index: src/os2/textctrl.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/os2/textctrl.cpp,v
retrieving revision 1.49
diff -u2 -r1.49 src/os2/textctrl.cpp
--- src/os2/textctrl.cpp
+++ src/os2/textctrl.cpp
@@ -126,4 +126,5 @@
     m_windowStyle = lStyle;
     m_bIsMLE = false;
+    m_bSkipUpdate = false;
 
     long                            lSstyle = WS_VISIBLE | WS_TABSTOP;
@@ -344,6 +345,7 @@
 } // end of wxTextCtrl::GetValue
 
-void wxTextCtrl::SetValue(
-  const wxString&                   rsValue
+void wxTextCtrl::DoSetValue(
+  const wxString&                   rsValue,
+  bool                              send_event
 )
 {
@@ -356,4 +358,7 @@
     if ((rsValue.length() > 0x400) || (rsValue != GetValue()))
     {
+        if (send_event)
+            m_bSkipUpdate = true;
+
         ::WinSetWindowText(GetHwnd(), (PSZ)rsValue.c_str());
         AdjustSpaceLimit();
@@ -1095,4 +1100,10 @@
         case EN_CHANGE:
             {
+                if (m_bSkipUpdate)
+                {
+                    m_bSkipUpdate = false;
+                    break;
+                }
+
                 wxCommandEvent      vEvent( wxEVT_COMMAND_TEXT_UPDATED
                                            ,m_windowId
Index: src/palmos/textctrl.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/palmos/textctrl.cpp,v
retrieving revision 1.12
diff -u2 -r1.12 src/palmos/textctrl.cpp
--- src/palmos/textctrl.cpp
+++ src/palmos/textctrl.cpp
@@ -234,4 +234,8 @@
 }
 
+void wxTextCtrl::ChangeValue(const wxString& value)
+{
+}
+
 #if wxUSE_RICHEDIT && (!wxUSE_UNICODE || wxUSE_UNICODE_MSLU)
 
Index: src/univ/textctrl.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/univ/textctrl.cpp,v
retrieving revision 1.45
diff -u2 -r1.45 src/univ/textctrl.cpp
--- src/univ/textctrl.cpp
+++ src/univ/textctrl.cpp
@@ -779,5 +779,5 @@
 // ----------------------------------------------------------------------------
 
-void wxTextCtrl::SetValue(const wxString& value)
+void wxTextCtrl::ChangeValue(const wxString& value)
 {
     if ( IsSingleLine() && (value == GetValue()) )
@@ -793,6 +793,10 @@
         SetInsertionPoint(0);
     }
+}
 
-    // TODO: should we generate the event or not, finally?
+void wxTextCtrl::SetValue(const wxString& value)
+{
+    ChangeValue(value);
+    SendTextUpdatedEvent();
 }
 
Index: src/x11/textctrl.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/x11/textctrl.cpp,v
retrieving revision 1.35
diff -u2 -r1.35 src/x11/textctrl.cpp
--- src/x11/textctrl.cpp
+++ src/x11/textctrl.cpp
@@ -278,5 +278,5 @@
 }
 
-void wxTextCtrl::SetValue(const wxString& value)
+void wxTextCtrl::ChangeValue(const wxString& value)
 {
     m_modified = false;

 	  	 

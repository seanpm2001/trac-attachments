Index: src/common/fileconf.cpp
===================================================================
--- src/common/fileconf.cpp	(revision 47541)
+++ src/common/fileconf.cpp	(working copy)
@@ -41,6 +41,7 @@
 #include  "wx/config.h"
 #include  "wx/fileconf.h"
 #include  "wx/filefn.h"
+#include  "wx/tokenzr.h"
 
 #include "wx/base64.h"
 
@@ -471,37 +472,25 @@
     }
 
 
-    // translate everything to the current (platform-dependent) line
-    // termination character
-    str = wxTextBuffer::Translate(str);
+    // translate everything to UNIX line termination characters to avoid
+    // dealing with line termination characters bigger than 1 character.
+    // This will let us use wxStringTokenizer later on. We won't need
+    // the line termination characters later anyway, so lets just make
+    // them consistent.
+    str = wxTextBuffer::Translate(str, wxTextFileType_Unix);
 
-    wxMemoryText memText;
+    // Get the UNIX EOL character (\n)
+    const wxChar *pEOL = wxTextBuffer::GetEOL(wxTextFileType_Unix);
 
-    // Now we can add the text to the memory text. To do this we extract line
-    // by line from the translated string, until we've reached the end.
-    //
-    // VZ: all this is horribly inefficient, we should do the translation on
-    //     the fly in one pass saving both memory and time (TODO)
-
-    const wxChar *pEOL = wxTextBuffer::GetEOL(wxTextBuffer::typeDefault);
-    const size_t EOLLen = wxStrlen(pEOL);
-
-    int posLineStart = str.Find(pEOL);
-    while ( posLineStart != -1 )
+    // Now we can add the text to a memory text object. To do this we
+    // tokenize the translated string, until we've reached the end.
+    wxMemoryText memText;
+    wxStringTokenizer toker(str, pEOL);
+    while ( toker.HasMoreTokens() )
     {
-        wxString line(str.Left(posLineStart));
-
-        memText.AddLine(line);
-
-        str = str.Mid(posLineStart + EOLLen);
-
-        posLineStart = str.Find(pEOL);
+        memText.AddLine(toker.GetNextToken());
     }
 
-    // also add whatever we have left in the translated string.
-    if ( !str.empty() )
-        memText.AddLine(str);
-
     // Finally we can parse it all.
     Parse(memText, true /* local */);
 

 	  	 

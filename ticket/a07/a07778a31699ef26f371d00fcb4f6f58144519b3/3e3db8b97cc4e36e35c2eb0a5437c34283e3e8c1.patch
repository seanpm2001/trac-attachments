? buildUNIV
? art/.xvpics
? art/help.xpm
? art/preview.xpm
? art/save.xpm
? art/saveas.xpm
? src/cp.sh
Index: include/wx/image.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/image.h,v
retrieving revision 1.94
diff -b -u -2 -r1.94 image.h
--- include/wx/image.h	2004/09/16 18:13:25	1.94
+++ include/wx/image.h	2004/10/11 09:40:37
@@ -32,4 +32,16 @@
 
 #define wxIMAGE_OPTION_FILENAME wxString(_T("FileName"))
+// defines for wxImage::SetOption
+#define wxIMAGE_OPTION_RESOLUTION            wxString(_T("Resolution"))
+#define wxIMAGE_OPTION_RESOLUTIONX           wxString(_T("ResolutionX"))
+#define wxIMAGE_OPTION_RESOLUTIONY           wxString(_T("ResolutionY"))
+
+#define wxIMAGE_OPTION_RESOLUTIONUNIT        wxString(_T("ResolutionUnit"))
+
+enum
+{
+    wxIMAGE_RESOLUTION_INCHES = 1,
+    wxIMAGE_RESOLUTION_CM = 2
+};
 
 //-----------------------------------------------------------------------------
Index: include/wx/imagjpeg.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/imagjpeg.h,v
retrieving revision 1.9
diff -b -u -2 -r1.9 imagjpeg.h
--- include/wx/imagjpeg.h	2004/09/16 18:13:25	1.9
+++ include/wx/imagjpeg.h	2004/10/11 09:40:37
@@ -1,3 +1,3 @@
-/////////////////////////////////////////////////////////////////////////////
+////////////////////////////////////////////////////////////////////////
 // Name:        imagjpeg.h
 // Purpose:     wxImage JPEG handler
@@ -17,13 +17,4 @@
 #include "wx/image.h"
 
-// defines for wxImage::SetOption
-#define wxIMAGE_OPTION_RESOLUTION            wxString(_T("Resolution"))
-#define wxIMAGE_OPTION_RESOLUTIONUNIT        wxString(_T("ResolutionUnit"))
-
-enum
-{
-    wxIMAGE_RESOLUTION_INCHES = 1,
-    wxIMAGE_RESOLUTION_CM = 2
-};
 
 //-----------------------------------------------------------------------------
Index: include/wx/imagtiff.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/imagtiff.h,v
retrieving revision 1.11
diff -b -u -2 -r1.11 imagtiff.h
--- include/wx/imagtiff.h	2004/09/16 18:13:25	1.11
+++ include/wx/imagtiff.h	2004/10/11 09:40:37
@@ -17,4 +17,19 @@
 #include "wx/image.h"
 
+// defines for wxImage::SetOption
+#define wxIMAGE_OPTION_RESOLUTIONX            wxString(_T("ResolutionX"))
+#define wxIMAGE_OPTION_RESOLUTIONY            wxString(_T("ResolutionY"))
+#define wxIMAGE_OPTION_RESOLUTIONUNIT         wxString(_T("ResolutionUnit"))
+#define wxIMAGE_OPTION_BITSPERSAMPLE               wxString(_T("BitsPerSample"))
+#define wxIMAGE_OPTION_SAMPLESPERPIXEL             wxString(_T("SamplesPerPixel"))
+#define wxIMAGE_OPTION_COMPRESSION                 wxString(_T("Compression"))
+#define wxIMAGE_OPTION_IMAGEDESCRIPTOR             wxString(_T("ImageDescriptor"))
+/*
+enum
+{
+    wxIMAGE_RESOLUTION_INCHES = 1,
+    wxIMAGE_RESOLUTION_CM = 2
+};
+*/
 
 //-----------------------------------------------------------------------------
Index: src/common/imagjpeg.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/common/imagjpeg.cpp,v
retrieving revision 1.43
diff -b -u -2 -r1.43 imagjpeg.cpp
--- src/common/imagjpeg.cpp	2004/09/16 18:13:31	1.43
+++ src/common/imagjpeg.cpp	2004/10/11 09:40:48
@@ -366,5 +366,12 @@
         cinfo.Y_density = image->GetOptionInt(wxIMAGE_OPTION_RESOLUTION);
     }
+    // sebb 2004-08-18 sets the resolution fields in the output file independently
+    if (image->HasOption(wxIMAGE_OPTION_RESOLUTIONX)&&image->HasOption(wxIMAGE_OPTION_RESOLUTIONY))
+    {   
+        cinfo.X_density = image->GetOptionInt(wxIMAGE_OPTION_RESOLUTIONX);
+        cinfo.Y_density = image->GetOptionInt(wxIMAGE_OPTION_RESOLUTIONY);
+    }
 
+    
     // sets the resolution unit field in the output file
     // wxIMAGE_RESOLUTION_INCHES for inches
Index: src/common/imagtiff.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/common/imagtiff.cpp,v
retrieving revision 1.28
diff -b -u -2 -r1.28 imagtiff.cpp
--- src/common/imagtiff.cpp	2004/09/16 18:13:31	1.28
+++ src/common/imagtiff.cpp	2004/10/11 09:40:48
@@ -333,18 +333,60 @@
         return false;
     }
-
+    //static defaults
+    TIFFSetField(tif, TIFFTAG_ORIENTATION, ORIENTATION_TOPLEFT);
     TIFFSetField(tif, TIFFTAG_IMAGEWIDTH,  (uint32)image->GetWidth());
     TIFFSetField(tif, TIFFTAG_IMAGELENGTH, (uint32)image->GetHeight());
     TIFFSetField(tif, TIFFTAG_ORIENTATION, ORIENTATION_TOPLEFT);
-    TIFFSetField(tif, TIFFTAG_SAMPLESPERPIXEL, 3);
-    TIFFSetField(tif, TIFFTAG_BITSPERSAMPLE, 8);
     TIFFSetField(tif, TIFFTAG_PLANARCONFIG, PLANARCONFIG_CONTIG);
-    TIFFSetField(tif, TIFFTAG_PHOTOMETRIC, PHOTOMETRIC_RGB);
-    TIFFSetField(tif, TIFFTAG_COMPRESSION, COMPRESSION_LZW);
+    
+
+
+    //s.hueltenschmidt / delta h Ingenieurgesellschaft 2004-08-18
+    //enhanced to honour different types of tiff
+    //set default to be working transparently
+    if (image->HasOption(wxIMAGE_OPTION_RESOLUTIONX)&&image->HasOption(wxIMAGE_OPTION_RESOLUTIONY))
+    {   
+        TIFFSetField(tif, TIFFTAG_XRESOLUTION,image->GetOptionInt(wxIMAGE_OPTION_RESOLUTIONX));
+        TIFFSetField(tif, TIFFTAG_YRESOLUTION,image->GetOptionInt(wxIMAGE_OPTION_RESOLUTIONY));
+    }
+    
+    int spp,bpp,photo,compression;
+    
+    if (image->HasOption(wxIMAGE_OPTION_SAMPLESPERPIXEL))
+        spp=image->GetOptionInt(wxIMAGE_OPTION_SAMPLESPERPIXEL);
+    else
+        spp=3;
+    if (image->HasOption(wxIMAGE_OPTION_BITSPERSAMPLE)) 
+        bpp=image->GetOptionInt(wxIMAGE_OPTION_BITSPERSAMPLE);
+    else
+        bpp=8;
+    
+    if (image->HasOption(wxIMAGE_OPTION_COMPRESSION))
+        compression=image->GetOptionInt(wxIMAGE_OPTION_COMPRESSION);
+    else
+        compression=COMPRESSION_LZW;
+    
+    if((spp * bpp)==1)
+        photo=PHOTOMETRIC_MINISBLACK;
+    else
+        photo=PHOTOMETRIC_RGB;
 
-    tsize_t linebytes = (tsize_t)image->GetWidth() * 3;
+    
+    TIFFSetField(tif, TIFFTAG_SAMPLESPERPIXEL,spp);
+    TIFFSetField(tif, TIFFTAG_BITSPERSAMPLE, bpp);
+    TIFFSetField(tif, TIFFTAG_PHOTOMETRIC, photo);
+    TIFFSetField(tif, TIFFTAG_COMPRESSION, compression);
+    
+    
+    
+    //scanlinesize if determined by spp and bpp
+    tsize_t linebytes = (tsize_t)image->GetWidth() * spp * bpp / 8;
+    
+    if (( image->GetWidth() % 8 > 0 ) && ( spp * bpp < 8))
+        linebytes+=1;
+    
     unsigned char *buf;
 
-    if (TIFFScanlineSize(tif) > linebytes)
+    if (TIFFScanlineSize(tif) > linebytes || (spp * bpp < 24))
     {
         buf = (unsigned char *)_TIFFmalloc(TIFFScanlineSize(tif));
@@ -364,12 +406,34 @@
     }
 
-    TIFFSetField(tif, TIFFTAG_ROWSPERSTRIP,
-        TIFFDefaultStripSize(tif, (uint32) -1));
+    TIFFSetField(tif, TIFFTAG_ROWSPERSTRIP,TIFFDefaultStripSize(tif, (uint32) -1));
 
+    uint8 bitmask;
+    
     unsigned char *ptr = image->GetData();
     for (int row = 0; row < image->GetHeight(); row++)
     {
-        if (buf)
+        if(( ( spp * bpp ) > 1 ) && (buf)) // this is color
             memcpy(buf, ptr, image->GetWidth());
+        else //this is bw 
+        {
+            for (int column=0;column<linebytes ;column++)
+			{
+				uint8 reverse=0;
+				bitmask=1;
+				for (int bp=0;bp<8 ;bp++)
+				{
+					if (ptr[column*24 + bp*3] > 0) //check only red as this is sufficient
+						reverse = reverse | 128>>bp;
+					bitmask <<= 1;
+				}
+#ifdef __WXGTK__
+				buf[column]=~reverse;
+				
+#else //(MSW)
+				buf[column]=reverse;
+#endif
+			}
+
+        }
 
         if (TIFFWriteScanline(tif, buf ? buf : ptr, (uint32)row, 0) < 0)
Index: src/gtk/bitmap.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/gtk/bitmap.cpp,v
retrieving revision 1.80
diff -b -u -2 -r1.80 bitmap.cpp
--- src/gtk/bitmap.cpp	2004/08/22 18:32:55	1.80
+++ src/gtk/bitmap.cpp	2004/10/11 09:40:52
@@ -445,5 +445,5 @@
         {
             char outbyte = 0;
-            int old_x = -1;
+            long old_x = -1;
             guint32 old_pixval = 0;
 
@@ -451,5 +451,5 @@
             {
                 guint32 pixval;
-                int x = tablex[w];
+                long x = tablex[w];
                 if (x == old_x)
                     pixval = old_pixval;
Index: src/gtk/dcclient.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/gtk/dcclient.cpp,v
retrieving revision 1.187
diff -b -u -2 -r1.187 dcclient.cpp
--- src/gtk/dcclient.cpp	2004/10/07 17:05:30	1.187
+++ src/gtk/dcclient.cpp	2004/10/11 09:40:57
@@ -482,4 +482,6 @@
     wxBitmap bitmap(1, 1);
     memdc.SelectObject(bitmap);
+
+    
     memdc.Blit(0, 0, 1, 1, (wxDC*) this, x1, y1);
     memdc.SelectObject(wxNullBitmap);
@@ -1309,5 +1311,5 @@
         // Scale bitmap if required
         wxBitmap use_bitmap;
-        if ((bm_width != bm_ww) || (bm_height != bm_hh))
+        if ((  memDC->m_selected.GetWidth()!= bm_ww) || ( memDC->m_selected.GetHeight()!= bm_hh))
         {
             // This indicates that the blitting code below will get
@@ -1379,5 +1381,5 @@
         // drawing a mono-bitmap (XBitmap) we use the current text GC
 
-        if (is_mono)
+        if (is_mono )
         {
 #ifdef __WXGTK20__
@@ -1427,5 +1429,5 @@
     else // use_bitmap_method
     {
-        if ((width != ww) || (height != hh))
+        if (( memDC->m_selected.GetWidth() != ww) || (memDC->m_selected.GetHeight() != hh))
         {
             // get clip coords

 	  	 

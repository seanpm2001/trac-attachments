Index: contrib/samples/gizmos/led/led.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/contrib/samples/gizmos/led/led.cpp,v
retrieving revision 1.6
diff -u -r1.6 led.cpp
--- contrib/samples/gizmos/led/led.cpp	2004/06/08 19:27:37	1.6
+++ contrib/samples/gizmos/led/led.cpp	2004/08/11 06:50:46
@@ -54,6 +54,7 @@
 
 private:
     wxLEDNumberCtrl    *m_led;
+    wxBoxSizer         *m_sizer;
 };
 
 // Define a new application type, each program should derive a class from wxApp
@@ -161,7 +162,7 @@
 {
     // create the main application window
     MyFrame *frame = new MyFrame(_T("LED App"),
-                                 wxPoint(50, 50), wxSize(450, 340));
+                                 wxPoint(50, 50), wxSize(450, 120));
 
     // and show it (the frames, unlike simple controls, are not shown when
     // created initially)
@@ -278,47 +279,47 @@
                 : wxPanel(frame, MY_PANEL)
 {
     m_led = new wxLEDNumberCtrl(this, MY_LED,
-                                wxPoint(20, 20), wxSize(300, 200),
+                                wxPoint(20,20), wxSize(300,200),
                                 wxLED_ALIGN_LEFT | wxLED_DRAW_FADED);
 
-    m_led->SetValue(_T("50"));
+    m_led->SetValue(_T("01.23 7-8-9"));
+
+    m_sizer = new wxBoxSizer(wxVERTICAL);
+    m_sizer->Add(m_led, 1, wxEXPAND|wxALL, 10);
+    m_sizer->Fit(this);
+
+    SetSizer(m_sizer);
+    SetAutoLayout(true);
 }
 
 void MyPanel::OnIncrement()
 {
     wxString strValue = m_led->GetValue();
-    if ( strValue == _T("99") )
-        return;
 
-    long lValue;
-    strValue.ToLong(&lValue);
-    ++lValue;
-    m_led->SetValue(wxString::Format(_T("%ld"), lValue));
+    double dValue;
+    strValue.ToDouble(&dValue);
+    dValue += 0.01;
+    m_led->SetValue(wxString::Format(_T("%.2f"), dValue));
 }
 
 void MyPanel::OnDecrement()
 {
     wxString strValue = m_led->GetValue();
-
-    long lValue;
-    strValue.ToLong(&lValue);
-    if (lValue == 0)
-        return;
 
-    --lValue;
-    m_led->SetValue(wxString::Format(_T("%ld"), lValue));
+    double dValue;
+    strValue.ToDouble(&dValue);
+    dValue -= 0.01;
+    m_led->SetValue(wxString::Format(_T("%.2f"), dValue));
 }
 
 void MyPanel::OnSetValue()
 {
     wxString strValue = m_led->GetValue();
 
-    long lValue;
-    strValue.ToLong(&lValue);
-    lValue = ::wxGetNumberFromUser(_T("Please enter a number between 0 and 99"), _T(""), _T("Please enter a number"), lValue, 0, 99, this);
+    strValue = ::wxGetTextFromUser(_T("Please enter a number for LED display"), _T("Please enter a number"), strValue, this);
 
-    if (lValue != -1)
-        m_led->SetValue(wxString::Format(_T("%ld"), lValue));
+    if (strValue != _T(""))
+        m_led->SetValue(strValue);
 }
 
 void MyPanel::OnAlignLeft()
Index: contrib/src/gizmos/ledctrl.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/contrib/src/gizmos/ledctrl.cpp,v
retrieving revision 1.5
diff -u -r1.5 ledctrl.cpp
--- contrib/src/gizmos/ledctrl.cpp	2004/06/08 19:27:42	1.5
+++ contrib/src/gizmos/ledctrl.cpp	2004/08/11 06:50:46
@@ -41,6 +41,7 @@
 const int LINE5 = 16;
 const int LINE6 = 32;
 const int LINE7 = 64;
+const int DECIMAL = 128;
 
 const int DIGIT0 = LINE1 | LINE2 | LINE3 | LINE4 | LINE5 | LINE6;
 const int DIGIT1 = LINE2 | LINE3;
@@ -139,7 +140,7 @@
         {
             for(size_t i=0; i<Value.Length(); i++) {
                 wxChar ch = Value[i];
-                wxASSERT_MSG((ch>='0' && ch<='9') || ch=='-' || ch==' ',
+                wxASSERT_MSG((ch>='0' && ch<='9') || ch=='-' || ch==' ' || ch=='.',
                              wxT("wxLEDNumberCtrl can only display numeric string values."));
             }
         }
@@ -186,14 +187,16 @@
 
     // Iterate each digit in the value, and draw.
     const int DigitCount = m_Value.Len();
-    for (int i = 0; i < DigitCount; ++i)
+    for (int offset=0, i = 0; offset < DigitCount; ++offset, ++i)
     {
+        char c = m_Value.GetChar(offset);
+
         // Draw faded lines if wanted.
-        if (m_DrawFaded)
+        if (m_DrawFaded && (c != '.'))
             DrawDigit(MemDc, DIGITALL, i);
 
         // Draw the digits.
-        switch (m_Value.GetChar(i))
+        switch (c)
         {
             case '0' :
                 DrawDigit(MemDc, DIGIT0, i);
@@ -228,6 +231,11 @@
             case '-' :
                 DrawDigit(MemDc, DASH, i);
                 break;
+            case '.' :
+                // Display the decimal in the previous segment
+                i--;
+                DrawDigit(MemDc, DECIMAL, i);
+                break;
             case ' ' :
                 // just skip it
                 break;
@@ -257,11 +265,8 @@
 
         LineColor.Set(R, G, B);
     }
-
-    int XPos = m_LeftStartPos;
 
-    if (Column > 0)
-        XPos += (Column * m_LineLength) + (m_DigitMargin) * Column;
+    int XPos = m_LeftStartPos + Column * (m_LineLength + m_DigitMargin);
 
     // Create a pen and draw the lines.
     wxPen Pen(LineColor, m_LineWidth, wxSOLID);
@@ -309,6 +314,12 @@
             XPos + m_LineMargin + m_LineLength - m_LineMargin, m_LineLength + (m_LineMargin*3));
     }
 
+    if (Digit & DECIMAL)
+    {
+        Dc.DrawLine(XPos + m_LineLength + m_LineMargin*3, m_LineLength*2 + (m_LineMargin*4),
+            XPos + m_LineLength + m_LineMargin*3, m_LineLength*2 + (m_LineMargin*4));
+    }
+
     Dc.SetPen(wxNullPen);
 }
 
@@ -331,16 +342,22 @@
 
     m_DigitMargin = m_LineMargin * 4;
 
-    const int ValueWidth = (m_LineLength + m_DigitMargin) * m_Value.Len();
+    // Count the number of characters in the string; '.' characters are not
+    // included because they do not take up space in the display
+    int count = 0;
+    for (unsigned int i = 0; i < m_Value.Len(); i++)
+        if (m_Value.GetChar(i) != '.')
+            count++;
+    const int ValueWidth = (m_LineLength + m_DigitMargin) * count;
     const int ClientWidth = CurrentSize.GetWidth();
 
     switch (m_Alignment)
     {
         case wxLED_ALIGN_LEFT :
-            m_LeftStartPos = 0;
+            m_LeftStartPos = m_LineMargin;
             break;
         case wxLED_ALIGN_RIGHT :
-            m_LeftStartPos = ClientWidth - ValueWidth;
+            m_LeftStartPos = ClientWidth - ValueWidth - m_LineMargin;
             break;
         case wxLED_ALIGN_CENTER :
             m_LeftStartPos = (ClientWidth - ValueWidth) / 2;

 	  	 

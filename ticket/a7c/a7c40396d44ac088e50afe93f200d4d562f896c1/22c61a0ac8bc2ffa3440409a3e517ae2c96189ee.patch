? contrib/Makefile
? contrib/samples/Makefile
? contrib/samples/animate/Makefile
? contrib/samples/applet/Makefile
? contrib/samples/deprecated/Makefile
? contrib/samples/deprecated/proplist/.deps
? contrib/samples/deprecated/proplist/Makefile
? contrib/samples/deprecated/resource/.deps
? contrib/samples/deprecated/resource/Makefile
? contrib/samples/deprecated/resource/resource
? contrib/samples/deprecated/treelay/.deps
? contrib/samples/deprecated/treelay/Makefile
? contrib/samples/fl/.deps
? contrib/samples/fl/Makefile
? contrib/samples/foldbar/foldpanelbar/Makefile
? contrib/samples/gizmos/Makefile
? contrib/samples/gizmos/dynsash/.deps
? contrib/samples/gizmos/dynsash/Makefile
? contrib/samples/gizmos/dynsash/dynsash
? contrib/samples/gizmos/dynsash_switch/.deps
? contrib/samples/gizmos/dynsash_switch/Makefile
? contrib/samples/gizmos/dynsash_switch/dynsash_switch
? contrib/samples/gizmos/editlbox/.deps
? contrib/samples/gizmos/editlbox/Makefile
? contrib/samples/gizmos/editlbox/test
? contrib/samples/gizmos/led/.deps
? contrib/samples/gizmos/led/Makefile
? contrib/samples/gizmos/led/led
? contrib/samples/gizmos/multicell/.deps
? contrib/samples/gizmos/multicell/Makefile
? contrib/samples/gizmos/multicell/mtest
? contrib/samples/gizmos/splittree/.deps
? contrib/samples/gizmos/splittree/Makefile
? contrib/samples/gizmos/splittree/splittree
? contrib/samples/mmedia/.deps
? contrib/samples/mmedia/Makefile
? contrib/samples/mmedia/mmboard
? contrib/samples/ogl/Makefile
? contrib/samples/ogl/ogledit/.deps
? contrib/samples/ogl/ogledit/Makefile
? contrib/samples/ogl/ogledit/ogledit
? contrib/samples/ogl/studio/.deps
? contrib/samples/ogl/studio/Makefile
? contrib/samples/ogl/studio/studio
? contrib/samples/plot/.deps
? contrib/samples/plot/Makefile
? contrib/samples/plot/plot
? contrib/samples/stc/.deps
? contrib/samples/stc/Makefile
? contrib/samples/stc/stctest
? contrib/samples/svg/.deps
? contrib/samples/svg/Makefile
? contrib/samples/svg/svgtest
? contrib/samples/xrc/.deps
? contrib/samples/xrc/Makefile
? contrib/samples/xrc/xrcdemo
? contrib/src/Makefile
? contrib/src/animate/.deps
? contrib/src/animate/Makefile
? contrib/src/applet/Makefile
? contrib/src/deprecated/.deps
? contrib/src/deprecated/Makefile
? contrib/src/fl/.deps
? contrib/src/fl/Makefile
? contrib/src/foldbar/Makefile
? contrib/src/gizmos/.deps
? contrib/src/gizmos/Makefile
? contrib/src/gizmos/layout.patch
? contrib/src/gizmos/ledctrl.cpp.decimal
? contrib/src/gizmos/ledctrl.cpp.layout
? contrib/src/mmedia/.deps
? contrib/src/mmedia/Makefile
? contrib/src/net/Makefile
? contrib/src/ogl/.deps
? contrib/src/ogl/Makefile
? contrib/src/plot/.deps
? contrib/src/plot/Makefile
? contrib/src/stc/.deps
? contrib/src/stc/Makefile
? contrib/src/svg/.deps
? contrib/src/svg/Makefile
? contrib/src/xrc/.deps
? contrib/src/xrc/Makefile
? contrib/utils/Makefile
? contrib/utils/convertrc/Makefile
? contrib/utils/wxrc/Makefile
? contrib/utils/wxrcedit/Makefile
Index: contrib/samples/gizmos/led/led.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/contrib/samples/gizmos/led/led.cpp,v
retrieving revision 1.6
diff -u -r1.6 led.cpp
--- contrib/samples/gizmos/led/led.cpp	2004/06/08 19:27:37	1.6
+++ contrib/samples/gizmos/led/led.cpp	2004/08/11 07:30:05
@@ -54,6 +54,7 @@
 
 private:
     wxLEDNumberCtrl    *m_led;
+    wxBoxSizer         *m_sizer;
 };
 
 // Define a new application type, each program should derive a class from wxApp
@@ -161,7 +162,7 @@
 {
     // create the main application window
     MyFrame *frame = new MyFrame(_T("LED App"),
-                                 wxPoint(50, 50), wxSize(450, 340));
+                                 wxPoint(50, 50), wxSize(450, 120));
 
     // and show it (the frames, unlike simple controls, are not shown when
     // created initially)
@@ -278,47 +279,47 @@
                 : wxPanel(frame, MY_PANEL)
 {
     m_led = new wxLEDNumberCtrl(this, MY_LED,
-                                wxPoint(20, 20), wxSize(300, 200),
+                                wxPoint(20,20), wxSize(300,200),
                                 wxLED_ALIGN_LEFT | wxLED_DRAW_FADED);
 
-    m_led->SetValue(_T("50"));
+    m_led->SetValue(_T("01.23 7-8-9"));
+
+    m_sizer = new wxBoxSizer(wxVERTICAL);
+    m_sizer->Add(m_led, 1, wxEXPAND|wxALL, 10);
+    m_sizer->Fit(this);
+
+    SetSizer(m_sizer);
+    SetAutoLayout(true);
 }
 
 void MyPanel::OnIncrement()
 {
     wxString strValue = m_led->GetValue();
-    if ( strValue == _T("99") )
-        return;
 
-    long lValue;
-    strValue.ToLong(&lValue);
-    ++lValue;
-    m_led->SetValue(wxString::Format(_T("%ld"), lValue));
+    double dValue;
+    strValue.ToDouble(&dValue);
+    dValue += 0.01;
+    m_led->SetValue(wxString::Format(_T("%.2f"), dValue));
 }
 
 void MyPanel::OnDecrement()
 {
     wxString strValue = m_led->GetValue();
-
-    long lValue;
-    strValue.ToLong(&lValue);
-    if (lValue == 0)
-        return;
 
-    --lValue;
-    m_led->SetValue(wxString::Format(_T("%ld"), lValue));
+    double dValue;
+    strValue.ToDouble(&dValue);
+    dValue -= 0.01;
+    m_led->SetValue(wxString::Format(_T("%.2f"), dValue));
 }
 
 void MyPanel::OnSetValue()
 {
     wxString strValue = m_led->GetValue();
 
-    long lValue;
-    strValue.ToLong(&lValue);
-    lValue = ::wxGetNumberFromUser(_T("Please enter a number between 0 and 99"), _T(""), _T("Please enter a number"), lValue, 0, 99, this);
+    strValue = ::wxGetTextFromUser(_T("Please enter a number for LED display"), _T("Please enter a number"), strValue, this);
 
-    if (lValue != -1)
-        m_led->SetValue(wxString::Format(_T("%ld"), lValue));
+    if (strValue != _T(""))
+        m_led->SetValue(strValue);
 }
 
 void MyPanel::OnAlignLeft()
Index: contrib/src/gizmos/ledctrl.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/contrib/src/gizmos/ledctrl.cpp,v
retrieving revision 1.5
diff -u -r1.5 ledctrl.cpp
--- contrib/src/gizmos/ledctrl.cpp	2004/06/08 19:27:42	1.5
+++ contrib/src/gizmos/ledctrl.cpp	2004/08/11 07:30:06
@@ -41,6 +41,7 @@
 const int LINE5 = 16;
 const int LINE6 = 32;
 const int LINE7 = 64;
+const int DECIMAL = 128;
 
 const int DIGIT0 = LINE1 | LINE2 | LINE3 | LINE4 | LINE5 | LINE6;
 const int DIGIT1 = LINE2 | LINE3;
@@ -139,7 +140,7 @@
         {
             for(size_t i=0; i<Value.Length(); i++) {
                 wxChar ch = Value[i];
-                wxASSERT_MSG((ch>='0' && ch<='9') || ch=='-' || ch==' ',
+                wxASSERT_MSG((ch>='0' && ch<='9') || ch=='-' || ch==' ' || ch=='.',
                              wxT("wxLEDNumberCtrl can only display numeric string values."));
             }
         }
@@ -186,14 +187,16 @@
 
     // Iterate each digit in the value, and draw.
     const int DigitCount = m_Value.Len();
-    for (int i = 0; i < DigitCount; ++i)
+    for (int offset=0, i = 0; offset < DigitCount; ++offset, ++i)
     {
+        char c = m_Value.GetChar(offset);
+
         // Draw faded lines if wanted.
-        if (m_DrawFaded)
+        if (m_DrawFaded && (c != '.'))
             DrawDigit(MemDc, DIGITALL, i);
 
         // Draw the digits.
-        switch (m_Value.GetChar(i))
+        switch (c)
         {
             case '0' :
                 DrawDigit(MemDc, DIGIT0, i);
@@ -228,6 +231,11 @@
             case '-' :
                 DrawDigit(MemDc, DASH, i);
                 break;
+            case '.' :
+                // Display the decimal in the previous segment
+                i--;
+                DrawDigit(MemDc, DECIMAL, i);
+                break;
             case ' ' :
                 // just skip it
                 break;
@@ -251,17 +259,14 @@
 
     if (Digit == DIGITALL)
     {
-        const int R = LineColor.Red() / 3;
-        const int G = LineColor.Green() / 3;
-        const int B = LineColor.Blue() / 3;
+        const int R = LineColor.Red() / 16;
+        const int G = LineColor.Green() / 16;
+        const int B = LineColor.Blue() / 16;
 
         LineColor.Set(R, G, B);
     }
-
-    int XPos = m_LeftStartPos;
 
-    if (Column > 0)
-        XPos += (Column * m_LineLength) + (m_DigitMargin) * Column;
+    int XPos = m_LeftStartPos + Column * (m_LineLength + m_DigitMargin);
 
     // Create a pen and draw the lines.
     wxPen Pen(LineColor, m_LineWidth, wxSOLID);
@@ -270,31 +275,31 @@
     if ((Digit & LINE1))
     {
         Dc.DrawLine(XPos + m_LineMargin*2, m_LineMargin,
-            XPos + m_LineLength, m_LineMargin);
+            XPos + m_LineLength + m_LineMargin*2, m_LineMargin);
     }
 
     if (Digit & LINE2)
     {
-        Dc.DrawLine(XPos + m_LineLength + m_LineMargin, m_LineMargin*2,
-            XPos + m_LineLength + m_LineMargin, m_LineLength + (m_LineMargin*2));
+        Dc.DrawLine(XPos + m_LineLength + m_LineMargin*3, m_LineMargin*2,
+            XPos + m_LineLength + m_LineMargin*3, m_LineLength + (m_LineMargin*2));
     }
 
     if (Digit & LINE3)
     {
-        Dc.DrawLine(XPos + m_LineLength + m_LineMargin, m_LineLength + (m_LineMargin*4),
-            XPos + m_LineLength + m_LineMargin, m_LineLength*2 + (m_LineMargin*3));
+        Dc.DrawLine(XPos + m_LineLength + m_LineMargin*3, m_LineLength + (m_LineMargin*4),
+            XPos + m_LineLength + m_LineMargin*3, m_LineLength*2 + (m_LineMargin*4));
     }
 
     if (Digit & LINE4)
     {
-        Dc.DrawLine(XPos + m_LineMargin*2, m_LineLength*2 + (m_LineMargin*4),
-            XPos + m_LineLength, m_LineLength*2 + (m_LineMargin*4));
+        Dc.DrawLine(XPos + m_LineMargin*2, m_LineLength*2 + (m_LineMargin*5),
+            XPos + m_LineLength + m_LineMargin*2, m_LineLength*2 + (m_LineMargin*5));
     }
 
     if (Digit & LINE5)
     {
         Dc.DrawLine(XPos + m_LineMargin, m_LineLength + (m_LineMargin*4),
-            XPos + m_LineMargin, m_LineLength*2 + (m_LineMargin*3));
+            XPos + m_LineMargin, m_LineLength*2 + (m_LineMargin*4));
     }
 
     if (Digit & LINE6)
@@ -306,7 +311,13 @@
     if (Digit & LINE7)
     {
         Dc.DrawLine(XPos + m_LineMargin*2, m_LineLength + (m_LineMargin*3),
-            XPos + m_LineMargin + m_LineLength - m_LineMargin, m_LineLength + (m_LineMargin*3));
+            XPos + m_LineMargin*2 + m_LineLength, m_LineLength + (m_LineMargin*3));
+    }
+
+    if (Digit & DECIMAL)
+    {
+        Dc.DrawLine(XPos + m_LineLength + m_LineMargin*4, m_LineLength*2 + (m_LineMargin*5),
+            XPos + m_LineLength + m_LineMargin*4, m_LineLength*2 + (m_LineMargin*5));
     }
 
     Dc.SetPen(wxNullPen);
@@ -315,32 +326,60 @@
 
 void wxLEDNumberCtrl::RecalcInternals(const wxSize &CurrentSize)
 {
+    // Dimensions of LED segments
+    //
+    // Size of character is based on the HEIGH of the widget, NOT the width.
+    // Segment height is calculated as follows:
+    // Each segment is m_LineLength pixels long.
+    // There is m_LineMargin pixels at the top and bottom of each line segment
+    // There is m_LineMargin pixels at the top and bottom of each digit
+    //
+    //  Therefore, the heigth of each character is:
+    //  m_LineMargin                            : Top digit boarder
+    //  m_LineMargin+m_LineLength+m_LineMargin  : Top half of segment
+    //  m_LineMargin+m_LineLength+m_LineMargin  : Bottom half of segment
+    //  m_LineMargin                            : Bottom digit boarder
+    //  ----------------------
+    //  m_LineMargin*6 + m_LineLength*2 == Total height of digit.
+    //  Therefore, (m_LineMargin*6 + m_LineLength*2) must equal Height
+    //
+    //  Spacing between characters can then be calculated as follows:
+    //  m_LineMargin                            : before the digit,
+    //  m_LineMargin+m_LineLength+m_LineMargin  : for the digit width
+    //  m_LineMargin                            : after the digit
+    //  = m_LineMargin*4 + m_LineLength
     const int Height = CurrentSize.GetHeight();
 
-    if ((Height * 0.07) < 1)
+    if ((Height * 0.075) < 1)
         m_LineMargin = 1;
     else
-        m_LineMargin = (int)(Height * 0.07);
+        m_LineMargin = (int)(Height * 0.075);
 
-    if ((Height * 0.35) < 1)
+    if ((Height * 0.275) < 1)
         m_LineLength = 1;
     else
-        m_LineLength = (int)(Height * 0.35);
+        m_LineLength = (int)(Height * 0.275);
 
     m_LineWidth = m_LineMargin;
 
     m_DigitMargin = m_LineMargin * 4;
 
-    const int ValueWidth = (m_LineLength + m_DigitMargin) * m_Value.Len();
+    // Count the number of characters in the string; '.' characters are not
+    // included because they do not take up space in the display
+    int count = 0;
+    for (unsigned int i = 0; i < m_Value.Len(); i++)
+        if (m_Value.GetChar(i) != '.')
+            count++;
+    const int ValueWidth = (m_LineLength + m_DigitMargin) * count;
     const int ClientWidth = CurrentSize.GetWidth();
 
     switch (m_Alignment)
     {
         case wxLED_ALIGN_LEFT :
-            m_LeftStartPos = 0;
+            m_LeftStartPos = m_LineMargin;
             break;
         case wxLED_ALIGN_RIGHT :
-            m_LeftStartPos = ClientWidth - ValueWidth;
+            m_LeftStartPos = ClientWidth - ValueWidth - m_LineMargin;
             break;
         case wxLED_ALIGN_CENTER :
             m_LeftStartPos = (ClientWidth - ValueWidth) / 2;

 	  	 

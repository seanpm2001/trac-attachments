Index: include/wx/gifdecod.h
===================================================================
--- include/wx/gifdecod.h	(revision 65591)
+++ include/wx/gifdecod.h	(working copy)
@@ -51,11 +51,11 @@
 public:
     // constructor, destructor, etc.
     wxGIFDecoder();
-    ~wxGIFDecoder();
+    virtual ~wxGIFDecoder();
 
     // get data of current frame
-    unsigned char* GetData(unsigned int frame) const;
-    unsigned char* GetPalette(unsigned int frame) const;
+    wxUint8* GetData(unsigned int frame) const;
+    wxUint8* GetPalette(unsigned int frame) const;
     unsigned int GetNcolours(unsigned int frame) const;
     int GetTransparentColourIndex(unsigned int frame) const;
     wxColour GetTransparentColour(unsigned int frame) const;
@@ -103,8 +103,8 @@
     int           m_restbits;       // remaining valid bits
     unsigned int  m_restbyte;       // remaining bytes in this block
     unsigned int  m_lastbyte;       // last byte read
-    unsigned char m_buffer[256];    // buffer for reading
-    unsigned char *m_bufp;          // pointer to next byte in buffer
+    wxUint8       m_buffer[256];    // buffer for reading
+    wxUint8      *m_bufp;          // pointer to next byte in buffer
 
     wxDECLARE_NO_COPY_CLASS(wxGIFDecoder);
 };
Index: src/common/gifdecod.cpp
===================================================================
--- src/common/gifdecod.cpp	(revision 65591)
+++ src/common/gifdecod.cpp	(working copy)
@@ -29,7 +29,16 @@
 #include "wx/scopedptr.h"
 #include "wx/scopeguard.h"
 
+enum
+{
+    GIF_MARKER_EXT       = '!', // 0x21
+    GIF_MARKER_ENDOFDATA = ';', // 0x3B
+    GIF_MARKER_SEP       = ',', // 0x2C
 
+    GIF_MARKER_EXT_GRAPHICS_CONTROL = 0xF9,
+    GIF_MARKER_EXT_COMMENT          = 0xFE,
+    GIF_MARKER_EXT_APP              = 0xFF
+};
 
 //---------------------------------------------------------------------------
 // GIFImage
@@ -49,8 +58,8 @@
     int transparent;                // transparent color index (-1 = none)
     wxAnimationDisposal disposal;   // disposal method
     long delay;                     // delay in ms (-1 = unused)
-    unsigned char *p;               // bitmap
-    unsigned char *pal;             // palette
+    wxUint8 *p;                     // bitmap
+    wxUint8 *pal;                   // palette
     unsigned int ncolours;          // number of colours
 
     wxDECLARE_NO_COPY_CLASS(GIFImage);
@@ -72,8 +81,8 @@
     transparent = 0;
     disposal = wxANIM_DONOTREMOVE;
     delay = -1;
-    p = (unsigned char *) NULL;
-    pal = (unsigned char *) NULL;
+    p = (wxUint8 *) NULL;
+    pal = (wxUint8 *) NULL;
     ncolours = 0;
 }
 
@@ -114,7 +123,7 @@
 
 bool wxGIFDecoder::ConvertToImage(unsigned int frame, wxImage *image) const
 {
-    unsigned char *src, *dst, *pal;
+    wxUint8 *src, *dst, *pal;
     unsigned long i;
     int      transparent;
 
@@ -126,7 +135,7 @@
     image->Create(sz.GetWidth(), sz.GetHeight());
     image->SetType(wxBITMAP_TYPE_GIF);
 
-    if (!image->Ok())
+    if (!image->IsOk())
         return false;
 
     pal = GetPalette(frame);
@@ -157,9 +166,9 @@
         image->SetMask(false);
 
 #if wxUSE_PALETTE
-    unsigned char r[256];
-    unsigned char g[256];
-    unsigned char b[256];
+    wxUint8 r[256];
+    wxUint8 g[256];
+    wxUint8 b[256];
 
     for (i = 0; i < 256; i++)
     {
@@ -215,7 +224,7 @@
 
 wxColour wxGIFDecoder::GetTransparentColour(unsigned int frame) const
 {
-    unsigned char *pal = GetFrame(frame)->pal;
+    wxUint8 *pal = GetFrame(frame)->pal;
     int n = GetFrame(frame)->transparent;
     if (n == -1)
         return wxNullColour;
@@ -225,8 +234,8 @@
                     pal[n*3 + 2]);
 }
 
-unsigned char* wxGIFDecoder::GetData(unsigned int frame) const    { return (GetFrame(frame)->p); }
-unsigned char* wxGIFDecoder::GetPalette(unsigned int frame) const { return (GetFrame(frame)->pal); }
+wxUint8* wxGIFDecoder::GetData(unsigned int frame) const    { return (GetFrame(frame)->p); }
+wxUint8* wxGIFDecoder::GetPalette(unsigned int frame) const { return (GetFrame(frame)->pal); }
 unsigned int wxGIFDecoder::GetNcolours(unsigned int frame) const  { return (GetFrame(frame)->ncolours); }
 int wxGIFDecoder::GetTransparentColourIndex(unsigned int frame) const  { return (GetFrame(frame)->transparent); }
 
@@ -254,7 +263,7 @@
         // if no bytes left in this block, read the next block
         if (m_restbyte == 0)
         {
-            m_restbyte = (unsigned char)stream.GetC();
+            m_restbyte = (wxUint8)stream.GetC();
 
             /* Some encoders are a bit broken: instead of issuing
              * an end-of-image symbol (ab_fin) they come up with
@@ -278,7 +287,7 @@
         }
 
         // read next byte and isolate the bits we need
-        m_lastbyte = (unsigned char) (*m_bufp++);
+        m_lastbyte = (wxUint8) (*m_bufp++);
         mask       = (1 << (bits - m_restbits)) - 1;
         code       = code + ((m_lastbyte & mask) << m_restbits);
         m_restbyte--;
@@ -577,7 +586,7 @@
 //
 bool wxGIFDecoder::DoCanRead(wxInputStream &stream) const
 {
-    unsigned char buf[3];
+    wxUint8 buf[3];
 
     if ( !stream.Read(buf, WXSIZEOF(buf)) )
         return false;
@@ -602,9 +611,9 @@
     wxAnimationDisposal disposal;
     long          size;
     long          delay;
-    unsigned char type = 0;
-    unsigned char pal[768];
-    unsigned char buf[16];
+    wxUint8 type = 0;
+    wxUint8 pal[768];
+    wxUint8 buf[16];
     bool anim = true;
 
     // check GIF signature
@@ -667,11 +676,11 @@
     bool done = false;
     while (!done)
     {
-        type = (unsigned char)stream.GetC();
+        type = (wxUint8)stream.GetC();
 
         /*
         If the end of file has been reached (or an error) and a ";"
-        (0x3B) hasn't been encountered yet, exit the loop. (Without this
+        (GIF_MARKER_ENDOFDATA) hasn't been encountered yet, exit the loop. (Without this
         check the while loop would loop endlessly.) Later on, in the next while
         loop, the file will be treated as being truncated (But still
         be decoded as far as possible). returning wxGIF_TRUNCATED is not
@@ -686,150 +695,147 @@
             break; // Alternative : "return wxGIF_INVFORMAT;"
         }
 
-        // end of data?
-        if (type == 0x3B)
+        switch (type)
         {
-            done = true;
-        }
-        else
-        // extension block?
-        if (type == 0x21)
-        {
-            if (((unsigned char)stream.GetC()) == 0xF9)
-            // graphics control extension, parse it
-            {
-                static const unsigned int gceSize = 6;
-                stream.Read(buf, gceSize);
-                if (stream.LastRead() != gceSize)
+            case GIF_MARKER_ENDOFDATA:
+                done = true;
+                break;
+            case GIF_MARKER_EXT:
+                if (((wxUint8)stream.GetC()) == GIF_MARKER_EXT_GRAPHICS_CONTROL)
+                // graphics control extension, parse it
                 {
-                    Destroy();
-                    return wxGIF_INVFORMAT;
-                }
+                    static const unsigned int gceSize = 6;
+                    stream.Read(buf, gceSize);
+                    if (stream.LastRead() != gceSize)
+                    {
+                        Destroy();
+                        return wxGIF_INVFORMAT;
+                    }
 
-                // read delay and convert from 1/100 of a second to ms
-                delay = 10 * (buf[2] + 256 * buf[3]);
+                    // read delay and convert from 1/100 of a second to ms
+                    delay = 10 * (buf[2] + 256 * buf[3]);
 
-                // read transparent colour index, if used
-                transparent = buf[1] & 0x01 ? buf[4] : -1;
+                    // read transparent colour index, if used
+                    transparent = buf[1] & 0x01 ? buf[4] : -1;
 
-                // read disposal method
-                disposal = (wxAnimationDisposal)(((buf[1] & 0x1C) >> 2) - 1);
-            }
-            else
-            // other extension, skip
-            {
-                while ((i = (unsigned char)stream.GetC()) != 0)
+                    // read disposal method
+                    disposal = (wxAnimationDisposal)(((buf[1] & 0x1C) >> 2) - 1);
+                }
+                else
+                // other extension, skip
                 {
-                    if (stream.Eof() || (stream.LastRead() == 0) ||
-                        stream.SeekI(i, wxFromCurrent) == wxInvalidOffset)
+                    while ((i = (wxUint8)stream.GetC()) != 0)
                     {
-                        done = true;
-                        break;
+                        if (stream.Eof() || (stream.LastRead() == 0) ||
+                            stream.SeekI(i, wxFromCurrent) == wxInvalidOffset)
+                        {
+                            done = true;
+                            break;
+                        }
                     }
                 }
-            }
-        }
-        else
-        // image descriptor block?
-        if (type == 0x2C)
-        {
-            // allocate memory for IMAGEN struct
-            GIFImagePtr pimg(new GIFImage());
+                break;
+            case GIF_MARKER_SEP:
+            {
+                // allocate memory for IMAGEN struct
+                GIFImagePtr pimg(new GIFImage());
 
-            wxScopeGuard guardDestroy = wxMakeObjGuard(*this, &wxGIFDecoder::Destroy);
+                wxScopeGuard guardDestroy = wxMakeObjGuard(*this, &wxGIFDecoder::Destroy);
 
-            if ( !pimg.get() )
-                return wxGIF_MEMERR;
+                if ( !pimg.get() )
+                    return wxGIF_MEMERR;
 
-            // fill in the data
-            static const unsigned int idbSize = (2 + 2 + 2 + 2 + 1);
-            stream.Read(buf, idbSize);
-            if (stream.LastRead() != idbSize)
-                return wxGIF_INVFORMAT;
+                // fill in the data
+                static const unsigned int idbSize = (2 + 2 + 2 + 2 + 1);
+                stream.Read(buf, idbSize);
+                if (stream.LastRead() != idbSize)
+                    return wxGIF_INVFORMAT;
 
-            pimg->left = buf[0] + 256 * buf[1];
-            pimg->top = buf[2] + 256 * buf[3];
-/*
-            pimg->left = buf[4] + 256 * buf[5];
-            pimg->top = buf[4] + 256 * buf[5];
-*/
-            pimg->w = buf[4] + 256 * buf[5];
-            pimg->h = buf[6] + 256 * buf[7];
+                pimg->left = buf[0] + 256 * buf[1];
+                pimg->top = buf[2] + 256 * buf[3];
+    /*
+                pimg->left = buf[4] + 256 * buf[5];
+                pimg->top = buf[4] + 256 * buf[5];
+    */
+                pimg->w = buf[4] + 256 * buf[5];
+                pimg->h = buf[6] + 256 * buf[7];
 
-            if ( anim )
-            {
-                // some GIF images specify incorrect animation size but we can
-                // still open them if we fix up the animation size, see #9465
-                if ( m_nFrames == 0 )
+                if ( anim )
                 {
-                    if ( pimg->w > (unsigned)m_szAnimation.x )
-                        m_szAnimation.x = pimg->w;
-                    if ( pimg->h > (unsigned)m_szAnimation.y )
-                        m_szAnimation.y = pimg->h;
-                }
-                else // subsequent frames
-                {
-                    // check that we have valid size
-                    if ( (!pimg->w || pimg->w > (unsigned)m_szAnimation.x) ||
-                            (!pimg->h || pimg->h > (unsigned)m_szAnimation.y) )
+                    // some GIF images specify incorrect animation size but we can
+                    // still open them if we fix up the animation size, see #9465
+                    if ( m_nFrames == 0 )
                     {
-                        wxLogError(_("Incorrect GIF frame size (%u, %d) for "
-                                     "the frame #%u"),
-                                   pimg->w, pimg->h, m_nFrames);
-                        return wxGIF_INVFORMAT;
+                        if ( pimg->w > (unsigned)m_szAnimation.x )
+                            m_szAnimation.x = pimg->w;
+                        if ( pimg->h > (unsigned)m_szAnimation.y )
+                            m_szAnimation.y = pimg->h;
                     }
+                    else // subsequent frames
+                    {
+                        // check that we have valid size
+                        if ( (!pimg->w || pimg->w > (unsigned)m_szAnimation.x) ||
+                                (!pimg->h || pimg->h > (unsigned)m_szAnimation.y) )
+                        {
+                            wxLogError(_("Incorrect GIF frame size (%u, %d) for "
+                                         "the frame #%u"),
+                                       pimg->w, pimg->h, m_nFrames);
+                            return wxGIF_INVFORMAT;
+                        }
+                    }
                 }
-            }
 
-            interl = ((buf[8] & 0x40)? 1 : 0);
-            size = pimg->w * pimg->h;
+                interl = ((buf[8] & 0x40)? 1 : 0);
+                size = pimg->w * pimg->h;
 
-            pimg->transparent = transparent;
-            pimg->disposal = disposal;
-            pimg->delay = delay;
+                pimg->transparent = transparent;
+                pimg->disposal = disposal;
+                pimg->delay = delay;
 
-            // allocate memory for image and palette
-            pimg->p   = (unsigned char *) malloc((unsigned int)size);
-            pimg->pal = (unsigned char *) malloc(768);
+                // allocate memory for image and palette
+                pimg->p   = (wxUint8 *) malloc((unsigned int)size);
+                pimg->pal = (wxUint8 *) malloc(768);
 
-            if ((!pimg->p) || (!pimg->pal))
-                return wxGIF_MEMERR;
+                if ((!pimg->p) || (!pimg->pal))
+                    return wxGIF_MEMERR;
 
-            // load local color map if available, else use global map
-            if ((buf[8] & 0x80) == 0x80)
-            {
-                unsigned int local_ncolors = 2 << (buf[8] & 0x07);
-                unsigned int numBytes = 3 * local_ncolors;
-                stream.Read(pimg->pal, numBytes);
-                pimg->ncolours = local_ncolors;
-                if (stream.LastRead() != numBytes)
+                // load local color map if available, else use global map
+                if ((buf[8] & 0x80) == 0x80)
+                {
+                    unsigned int local_ncolors = 2 << (buf[8] & 0x07);
+                    unsigned int numBytes = 3 * local_ncolors;
+                    stream.Read(pimg->pal, numBytes);
+                    pimg->ncolours = local_ncolors;
+                    if (stream.LastRead() != numBytes)
+                        return wxGIF_INVFORMAT;
+                }
+                else
+                {
+                    memcpy(pimg->pal, pal, 768);
+                    pimg->ncolours = global_ncolors;
+                }
+
+                // get initial code size from first byte in raster data
+                bits = (wxUint8)stream.GetC();
+                if (bits == 0)
                     return wxGIF_INVFORMAT;
-            }
-            else
-            {
-                memcpy(pimg->pal, pal, 768);
-                pimg->ncolours = global_ncolors;
-            }
 
-            // get initial code size from first byte in raster data
-            bits = (unsigned char)stream.GetC();
-            if (bits == 0)
-                return wxGIF_INVFORMAT;
+                // decode image
+                wxGIFErrorCode result = dgif(stream, pimg.get(), interl, bits);
+                if (result != wxGIF_OK)
+                    return result;
 
-            // decode image
-            wxGIFErrorCode result = dgif(stream, pimg.get(), interl, bits);
-            if (result != wxGIF_OK)
-                return result;
+                guardDestroy.Dismiss();
 
-            guardDestroy.Dismiss();
+                // add the image to our frame array
+                m_frames.Add(pimg.release());
+                m_nFrames++;
 
-            // add the image to our frame array
-            m_frames.Add(pimg.release());
-            m_nFrames++;
-
-            // if this is not an animated GIF, exit after first image
-            if (!anim)
-                done = true;
+                // if this is not an animated GIF, exit after first image
+                if (!anim)
+                    done = true;
+                break;
+            }
         }
     }
 
@@ -840,76 +846,81 @@
     }
 
     // try to read to the end of the stream
-    while (type != 0x3B)
+    while (type != GIF_MARKER_ENDOFDATA)
     {
         if (!stream.IsOk())
             return wxGIF_TRUNCATED;
 
-        type = (unsigned char)stream.GetC();
+        type = (wxUint8)stream.GetC();
 
-        if (type == 0x21)
+        switch (type)
         {
-            // extension type
-            (void) stream.GetC();
+            case GIF_MARKER_EXT:
+                // extension type
+                (void) stream.GetC();
 
-            // skip all data
-            while ((i = (unsigned char)stream.GetC()) != 0)
+                // skip all data
+                while ((i = (wxUint8)stream.GetC()) != 0)
+                {
+                    if (stream.Eof() || (stream.LastRead() == 0) ||
+                        stream.SeekI(i, wxFromCurrent) == wxInvalidOffset)
+                    {
+                        Destroy();
+                        return wxGIF_INVFORMAT;
+                    }
+                }
+                break;
+            case GIF_MARKER_SEP:
             {
-                if (stream.Eof() || (stream.LastRead() == 0) ||
-                    stream.SeekI(i, wxFromCurrent) == wxInvalidOffset)
+                // image descriptor block
+                static const unsigned int idbSize = (2 + 2 + 2 + 2 + 1);
+                stream.Read(buf, idbSize);
+                if (stream.LastRead() != idbSize)
                 {
                     Destroy();
                     return wxGIF_INVFORMAT;
                 }
-            }
-        }
-        else if (type == 0x2C)
-        {
-            // image descriptor block
-            static const unsigned int idbSize = (2 + 2 + 2 + 2 + 1);
-            stream.Read(buf, idbSize);
-            if (stream.LastRead() != idbSize)
-            {
-                Destroy();
-                return wxGIF_INVFORMAT;
-            }
 
-            // local color map
-            if ((buf[8] & 0x80) == 0x80)
-            {
-                unsigned int local_ncolors = 2 << (buf[8] & 0x07);
-                wxFileOffset numBytes = 3 * local_ncolors;
-                if (stream.SeekI(numBytes, wxFromCurrent) == wxInvalidOffset)
+                // local color map
+                if ((buf[8] & 0x80) == 0x80)
                 {
+                    unsigned int local_ncolors = 2 << (buf[8] & 0x07);
+                    wxFileOffset numBytes = 3 * local_ncolors;
+                    if (stream.SeekI(numBytes, wxFromCurrent) == wxInvalidOffset)
+                    {
+                        Destroy();
+                        return wxGIF_INVFORMAT;
+                    }
+                }
+
+                // initial code size
+                (void) stream.GetC();
+                if (stream.Eof() || (stream.LastRead() == 0))
+                {
                     Destroy();
                     return wxGIF_INVFORMAT;
                 }
-            }
 
-            // initial code size
-            (void) stream.GetC();
-            if (stream.Eof() || (stream.LastRead() == 0))
-            {
-                Destroy();
-                return wxGIF_INVFORMAT;
+                // skip all data
+                while ((i = (wxUint8)stream.GetC()) != 0)
+                {
+                    if (stream.Eof() || (stream.LastRead() == 0) ||
+                        stream.SeekI(i, wxFromCurrent) == wxInvalidOffset)
+                    {
+                        Destroy();
+                        return wxGIF_INVFORMAT;
+                    }
+                }
+                break;
             }
-
-            // skip all data
-            while ((i = (unsigned char)stream.GetC()) != 0)
-            {
-                if (stream.Eof() || (stream.LastRead() == 0) ||
-                    stream.SeekI(i, wxFromCurrent) == wxInvalidOffset)
+            default:
+                if ((type != GIF_MARKER_ENDOFDATA) && (type != 00)) // testing
                 {
-                    Destroy();
-                    return wxGIF_INVFORMAT;
+                    // images are OK, but couldn't read to the end of the stream
+                    return wxGIF_TRUNCATED;
                 }
-            }
+                break;
         }
-        else if ((type != 0x3B) && (type != 00)) // testing
-        {
-            // images are OK, but couldn't read to the end of the stream
-            return wxGIF_TRUNCATED;
-        }
     }
 
     return wxGIF_OK;

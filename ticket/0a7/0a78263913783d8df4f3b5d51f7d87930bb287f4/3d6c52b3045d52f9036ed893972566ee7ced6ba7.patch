Index: include/wx/aui/floatpane.h
===================================================================
--- include/wx/aui/floatpane.h	(revision 51890)
+++ include/wx/aui/floatpane.h	(working copy)
@@ -21,7 +21,10 @@
 #if wxUSE_AUI
 
 #include "wx/frame.h"
+
+#if wxUSE_WEAKREF
 #include "wx/weakref.h"
+#endif // wxUSE_WEAKREF
 
 #if defined( __WXMSW__ ) || defined( __WXMAC__ ) ||  defined( __WXGTK__ )
 #include "wx/minifram.h"
@@ -32,6 +35,10 @@
 
 class WXDLLIMPEXP_AUI wxAuiFloatingFrame : public wxAuiFloatingFrameBaseClass
 {
+#ifndef wxUSE_WEAKREF
+     friend class wxAuiManager; 	 
+#endif // wxUSE_WEAKREF
+
 public:
     wxAuiFloatingFrame(wxWindow* parent,
                    wxAuiManager* owner_mgr,
@@ -46,6 +53,10 @@
     wxAuiManager* GetOwnerManager() const;
     
 protected:
+#ifndef wxUSE_WEAKREF
+     void SetOwnerManager(wxAuiManager* owner_mgr);
+#endif // wxUSE_WEAKREF
+
     virtual void OnMoveStart();
     virtual void OnMoving(const wxRect& window_rect, wxDirection dir);
     virtual void OnMoveFinished();
@@ -68,7 +79,12 @@
     wxSize m_last_size;
     wxDirection m_lastDirection;
 
+#if wxUSE_WEAKREF
     wxWeakRef<wxAuiManager> m_owner_mgr;
+#else
+   wxAuiManager* m_owner_mgr;
+#endif  //wxUSE_WEAKREF
+
     wxAuiManager m_mgr;
 
 #ifndef SWIG
Index: include/wx/aui/framemanager.h
===================================================================
--- include/wx/aui/framemanager.h	(revision 51890)
+++ include/wx/aui/framemanager.h	(working copy)
@@ -121,6 +121,11 @@
 
 
 // forwards and array declarations
+
+#ifndef wxUSE_WEAKREF
+class WXDLLIMPEXP_FWD_AUI wxAuiFloatingFrame;
+#endif
+
 class wxAuiDockUIPart;
 class wxAuiPaneButton;
 class wxAuiPaneInfo;
@@ -133,6 +138,11 @@
 WX_DECLARE_USER_EXPORTED_OBJARRAY(wxAuiDockUIPart, wxAuiDockUIPartArray, WXDLLIMPEXP_AUI);
 WX_DECLARE_USER_EXPORTED_OBJARRAY(wxAuiPaneButton, wxAuiPaneButtonArray, WXDLLIMPEXP_AUI);
 WX_DECLARE_USER_EXPORTED_OBJARRAY(wxAuiPaneInfo, wxAuiPaneInfoArray, WXDLLIMPEXP_AUI);
+
+#ifndef wxUSE_WEAKREF
+WX_DEFINE_USER_EXPORTED_ARRAY_PTR(wxAuiFloatingFrame*, wxAuiFloatingFramePtrArray, class WXDLLIMPEXP_AUI);
+#endif
+
 WX_DEFINE_USER_EXPORTED_ARRAY_PTR(wxAuiPaneInfo*, wxAuiPaneInfoPtrArray, class WXDLLIMPEXP_AUI);
 WX_DEFINE_USER_EXPORTED_ARRAY_PTR(wxAuiDockInfo*, wxAuiDockInfoPtrArray, class WXDLLIMPEXP_AUI);
 #endif // SWIG
@@ -419,7 +429,9 @@
 
 
 
+#ifdef wxUSE_WEAKREF
 class WXDLLIMPEXP_FWD_AUI wxAuiFloatingFrame;
+#endif
 
 class WXDLLIMPEXP_AUI wxAuiManager : public wxEvtHandler
 {
@@ -511,6 +523,16 @@
 
 protected:
 
+#ifndef wxUSE_WEAKREF
+
+// Sometimes floating frames are deleted after wxAuiManager, so we need 	 
+// to clear m_owner_mgr in the floating frame to avoid a crash. To do so, 	 
+// we register frames with wxAuiManager so it can keep track. 	 
+	void RegisterFloatingFrame(wxAuiFloatingFrame* frame); 	 
+	void UnregisterFloatingFrame(wxAuiFloatingFrame* frame); 	 
+
+#endif
+
     void UpdateHintWindowConfig();
 
     void DoFrameLayout();
@@ -601,6 +623,9 @@
     wxAuiPaneInfoArray m_panes;     // array of panes structures
     wxAuiDockInfoArray m_docks;     // array of docks structures
     wxAuiDockUIPartArray m_uiparts; // array of UI parts (captions, buttons, etc)
+#ifndef wxUSE_WEAKREF
+     wxAuiFloatingFramePtrArray m_floating_frames; // array of floating frames
+#endif
 
     int m_action;                // current mouse action
     wxPoint m_action_start;      // position where the action click started
Index: src/aui/floatpane.cpp
===================================================================
--- src/aui/floatpane.cpp	(revision 51890)
+++ src/aui/floatpane.cpp	(working copy)
@@ -73,11 +73,17 @@
 wxAuiFloatingFrame::~wxAuiFloatingFrame()
 {
     // if we do not do this, then we can crash...
+#ifdef wxUSE_WEAKREF
     if (m_owner_mgr && m_owner_mgr->m_action_window == this)
+       m_owner_mgr->m_action_window = NULL;
+#else
+    if(m_owner_mgr)
     {
+        if(m_owner_mgr->m_action_window == this)
         m_owner_mgr->m_action_window = NULL;
+        m_owner_mgr->UnregisterFloatingFrame(this);
     }
-
+#endif
     m_mgr.UnInit();
 }
 
@@ -151,6 +157,13 @@
     return m_owner_mgr;
 }
 
+#ifndef wxUSE_WEAKREF
+void wxAuiFloatingFrame::SetOwnerManager(wxAuiManager* owner_mgr)
+{
+    // we want to allow for NULL here to avoid crashing in dtor
+    m_owner_mgr = owner_mgr;
+}
+#endif
 
 void wxAuiFloatingFrame::OnSize(wxSizeEvent& event)
 {
Index: src/aui/framemanager.cpp
===================================================================
--- src/aui/framemanager.cpp	(revision 51890)
+++ src/aui/framemanager.cpp	(working copy)
@@ -610,6 +610,19 @@
     }
 #endif
 
+#ifndef wxUSE_WEAKREF
+    // We need to remove any reference to this wxAuiManager in any of the
+    // wxAuiFloatingFrames associated with this manager in case they haven't
+    // been deleted just yet.
+    // We need an array copy since Unregister removes the items.
+    wxAuiFloatingFramePtrArray array_copy = m_floating_frames;
+    int i, count = array_copy.GetCount();
+    for (i = 0; i < count; ++i)
+    {
+        UnregisterFloatingFrame(array_copy.Item(i));
+    }
+#endif
+
     delete m_art;
 }
 
@@ -617,7 +630,13 @@
 wxAuiFloatingFrame* wxAuiManager::CreateFloatingFrame(wxWindow* parent,
                                                       const wxAuiPaneInfo& pane_info)
 {
+#ifdef wxUSE_WEAKREF
     return new wxAuiFloatingFrame(parent, this, pane_info);
+#else
+    wxAuiFloatingFrame* frame = new wxAuiFloatingFrame(parent, this, pane_info);
+    RegisterFloatingFrame(frame);
+    return frame;
+#endif
 }
 
 bool wxAuiManager::CanDockPanel(const wxAuiPaneInfo & WXUNUSED(p))
@@ -627,6 +646,39 @@
     return !(wxGetKeyState(WXK_CONTROL) || wxGetKeyState(WXK_ALT));
 }
 
+#ifndef wxUSE_WEAKREF
+// registers a floating frame with this manager (see header)
+void wxAuiManager::RegisterFloatingFrame(wxAuiFloatingFrame* frame)
+{
+    frame->SetOwnerManager(this);
+    int i, count = m_floating_frames.GetCount();
+    for (i = 0; i < count; ++i)
+    {
+        wxAuiFloatingFrame* f = m_floating_frames.Item(i);
+        if (f == frame)
+            // this frame is already registered
+            return;
+    }
+    m_floating_frames.Add(frame);
+}
+
+// unregisters a floating frame from this manager (see header)
+void wxAuiManager::UnregisterFloatingFrame(wxAuiFloatingFrame* frame)
+{
+    frame->SetOwnerManager(NULL);
+    int i, count = m_floating_frames.GetCount();
+    for (i = 0; i < count; ++i)
+    {
+        wxAuiFloatingFrame* f = m_floating_frames.Item(i);
+        if (f == frame)
+        {
+            m_floating_frames.Remove(f);
+            return;
+        }
+    }
+}
+#endif
+
 // GetPane() looks up a wxAuiPaneInfo structure based
 // on the supplied window pointer.  Upon failure, GetPane()
 // returns an empty wxAuiPaneInfo, a condition which can be checked

 	  	 

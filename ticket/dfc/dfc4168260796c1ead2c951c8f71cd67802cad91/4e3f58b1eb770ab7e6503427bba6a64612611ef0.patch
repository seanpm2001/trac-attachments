Index: include/wx/aui/auibar.h
===================================================================
--- include/wx/aui/auibar.h	(revision 75363)
+++ include/wx/aui/auibar.h	(working copy)
@@ -473,7 +473,7 @@
                 wxWindowID id = wxID_ANY,
                 const wxPoint& pos = wxDefaultPosition,
                 const wxSize& size = wxDefaultSize,
-                long style = wxAUI_TB_DEFAULT_STYLE);
+                long style = -1);
 
     virtual void SetWindowStyleFlag(long style);
 
Index: samples/aui/auidemo.cpp
===================================================================
--- samples/aui/auidemo.cpp	(revision 75363)
+++ samples/aui/auidemo.cpp	(working copy)
@@ -85,6 +85,7 @@
         ID_HorizontalGradient,
         ID_LiveUpdate,
         ID_AllowToolbarResizing,
+        ID_ToolbarPlainBackground,
         ID_Settings,
         ID_CustomizeToolbar,
         ID_DropDownToolbarItem,
@@ -159,6 +160,7 @@
 
     void OnGradient(wxCommandEvent& evt);
     void OnToolbarResizing(wxCommandEvent& evt);
+    void OnToolbarPlainBackground(wxCommandEvent& evt);
     void OnManagerFlag(wxCommandEvent& evt);
     void OnNotebookFlag(wxCommandEvent& evt);
     void OnUpdateUI(wxUpdateUIEvent& evt);
@@ -173,6 +175,8 @@
     long m_notebook_style;
     long m_notebook_theme;
 
+    long m_toolbar_style;
+
     DECLARE_EVENT_TABLE()
 };
 
@@ -613,6 +617,7 @@
     EVT_MENU(ID_VerticalGradient, MyFrame::OnGradient)
     EVT_MENU(ID_HorizontalGradient, MyFrame::OnGradient)
     EVT_MENU(ID_AllowToolbarResizing, MyFrame::OnToolbarResizing)
+    EVT_MENU(ID_ToolbarPlainBackground, MyFrame::OnToolbarPlainBackground)
     EVT_MENU(ID_Settings, MyFrame::OnSettings)
     EVT_MENU(ID_CustomizeToolbar, MyFrame::OnCustomizeToolbar)
     EVT_MENU(ID_GridContent, MyFrame::OnChangeContentPane)
@@ -713,6 +718,7 @@
     options_menu->AppendRadioItem(ID_HorizontalGradient, _("Horizontal Caption Gradient"));
     options_menu->AppendSeparator();
     options_menu->AppendCheckItem(ID_AllowToolbarResizing, _("Allow Toolbar Resizing"));
+    options_menu->AppendCheckItem(ID_ToolbarPlainBackground, _("Toolbar with Plain Background"));
     options_menu->AppendSeparator();
     options_menu->Append(ID_Settings, _("Settings Pane"));
 
@@ -777,10 +783,10 @@
     item.SetLabel(_("Customize..."));
     append_items.Add(item);
 
+    m_toolbar_style = wxAUI_TB_DEFAULT_STYLE | wxAUI_TB_OVERFLOW;
 
     // create some toolbars
-    wxAuiToolBar* tb1 = new wxAuiToolBar(this, wxID_ANY, wxDefaultPosition, wxDefaultSize,
-                                         wxAUI_TB_DEFAULT_STYLE | wxAUI_TB_OVERFLOW);
+    wxAuiToolBar* tb1 = new wxAuiToolBar(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, m_toolbar_style);
     tb1->SetToolBitmapSize(wxSize(48,48));
     tb1->AddTool(ID_SampleItem+1, wxT("Test"), wxArtProvider::GetBitmap(wxART_ERROR));
     tb1->AddSeparator();
@@ -791,9 +797,12 @@
     tb1->SetCustomOverflowItems(prepend_items, append_items);
     tb1->Realize();
 
+    wxAuiToolBar* tb2 = new wxAuiToolBar();
 
-    wxAuiToolBar* tb2 = new wxAuiToolBar(this, wxID_ANY, wxDefaultPosition, wxDefaultSize,
-                                         wxAUI_TB_DEFAULT_STYLE | wxAUI_TB_OVERFLOW | wxAUI_TB_HORIZONTAL);
+    tb2->SetWindowStyleFlag(m_toolbar_style | wxAUI_TB_HORIZONTAL);
+
+    tb2->Create(this);
+
     tb2->SetToolBitmapSize(wxSize(16,16));
 
     wxBitmap tb2_bmp1 = wxArtProvider::GetBitmap(wxART_QUESTION, wxART_OTHER, wxSize(16,16));
@@ -814,8 +823,7 @@
     tb2->Realize();
 
 
-    wxAuiToolBar* tb3 = new wxAuiToolBar(this, wxID_ANY, wxDefaultPosition, wxDefaultSize,
-                                         wxAUI_TB_DEFAULT_STYLE | wxAUI_TB_OVERFLOW);
+    wxAuiToolBar* tb3 = new wxAuiToolBar(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, m_toolbar_style);
     tb3->SetToolBitmapSize(wxSize(16,16));
     wxBitmap tb3_bmp1 = wxArtProvider::GetBitmap(wxART_FOLDER, wxART_OTHER, wxSize(16,16));
     tb3->AddTool(ID_SampleItem+16, wxT("Check 1"), tb3_bmp1, wxT("Check 1"), wxITEM_CHECK);
@@ -834,11 +842,7 @@
     tb3->Realize();
 
 
-    wxAuiToolBar* tb4 = new wxAuiToolBar(this, wxID_ANY, wxDefaultPosition, wxDefaultSize,
-                                         wxAUI_TB_DEFAULT_STYLE |
-                                         wxAUI_TB_OVERFLOW |
-                                         wxAUI_TB_TEXT |
-                                         wxAUI_TB_HORZ_TEXT);
+    wxAuiToolBar* tb4 = new wxAuiToolBar(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, m_toolbar_style | wxAUI_TB_TEXT | wxAUI_TB_HORZ_TEXT);
     tb4->SetToolBitmapSize(wxSize(16,16));
     wxBitmap tb4_bmp1 = wxArtProvider::GetBitmap(wxART_NORMAL_FILE, wxART_OTHER, wxSize(16,16));
     tb4->AddTool(ID_DropDownToolbarItem, wxT("Item 1"), tb4_bmp1);
@@ -859,8 +863,7 @@
     tb4->Realize();
 
 
-    wxAuiToolBar* tb5 = new wxAuiToolBar(this, wxID_ANY, wxDefaultPosition, wxDefaultSize,
-                                         wxAUI_TB_DEFAULT_STYLE | wxAUI_TB_OVERFLOW | wxAUI_TB_VERTICAL);
+    wxAuiToolBar* tb5 = new wxAuiToolBar(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, m_toolbar_style | wxAUI_TB_VERTICAL);
     tb5->SetToolBitmapSize(wxSize(48,48));
     tb5->AddTool(ID_SampleItem+30, wxT("Test"), wxArtProvider::GetBitmap(wxART_ERROR));
     tb5->AddSeparator();
@@ -1081,6 +1084,27 @@
     m_mgr.Update();
 }
 
+void MyFrame::OnToolbarPlainBackground(wxCommandEvent& WXUNUSED(evt))
+{
+  wxAuiPaneInfoArray& all_panes = m_mgr.GetAllPanes();
+  const size_t count = all_panes.GetCount();
+  for (size_t i = 0; i < count; ++i)
+  {
+      wxAuiToolBar* toolbar = wxDynamicCast(all_panes[i].window, wxAuiToolBar);
+      if (toolbar)
+      {
+          if (toolbar->GetWindowStyleFlag() & wxAUI_TB_PLAIN_BACKGROUND) {
+            toolbar->SetWindowStyleFlag(toolbar->GetWindowStyleFlag() & ~wxAUI_TB_PLAIN_BACKGROUND);
+          }
+          else {
+            toolbar->SetWindowStyleFlag(toolbar->GetWindowStyleFlag() | wxAUI_TB_PLAIN_BACKGROUND);
+          }
+      }
+  }
+
+  m_mgr.Update();
+}
+
 void MyFrame::OnManagerFlag(wxCommandEvent& event)
 {
     unsigned int flag = 0;
Index: src/aui/auibar.cpp
===================================================================
--- src/aui/auibar.cpp	(revision 75363)
+++ src/aui/auibar.cpp	(working copy)
@@ -830,6 +830,7 @@
     m_overflowVisible = false;
     m_overflowState = 0;
     m_orientation = wxHORIZONTAL;
+    m_windowStyle = 0;
 }
 
 bool wxAuiToolBar::Create(wxWindow* parent,
@@ -838,17 +839,18 @@
                            const wxSize& size,
                            long style)
 {
-    style = style|wxBORDER_NONE;
+    if (style != -1)
+        m_windowStyle = style;
 
-    if (!wxControl::Create(parent, id, pos, size, style))
+    m_windowStyle |= wxBORDER_NONE;
+
+    if (!wxControl::Create(parent, id, pos, size, m_windowStyle))
         return false;
 
-    m_windowStyle = style;
+    m_gripperVisible  = (m_windowStyle & wxAUI_TB_GRIPPER) ? true : false;
+    m_overflowVisible = (m_windowStyle & wxAUI_TB_OVERFLOW) ? true : false;
 
-    m_gripperVisible  = (style & wxAUI_TB_GRIPPER) ? true : false;
-    m_overflowVisible = (style & wxAUI_TB_OVERFLOW) ? true : false;
-
-    m_orientation = GetOrientation(style);
+    m_orientation = GetOrientation(m_windowStyle);
     if (m_orientation == wxBOTH)
     {
         m_orientation = wxHORIZONTAL;

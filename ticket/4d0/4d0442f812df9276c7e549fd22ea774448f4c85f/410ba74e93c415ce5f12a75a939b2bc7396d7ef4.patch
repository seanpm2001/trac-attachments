Index: include/wx/mediactrl.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/mediactrl.h,v
retrieving revision 1.22
diff -b -u -2 -r1.22 mediactrl.h
--- include/wx/mediactrl.h	2005/04/17 16:42:17	1.22
+++ include/wx/mediactrl.h	2005/05/18 19:51:14
@@ -191,4 +191,7 @@
     bool SetPlaybackRate(double dRate); //All but MCI & GStreamer
 
+    double GetVolume();                 //DirectShow only
+    bool   SetVolume(double dVolume);   //DirectShow only
+
 protected:
     static wxClassInfo* NextBackend();
@@ -270,7 +273,10 @@
     virtual wxMediaState GetState()
     {   return wxMEDIASTATE_STOPPED;    }
+
+    virtual double GetVolume()
+    {   return 0.0;                     }
+    virtual bool SetVolume(double WXUNUSED(dVolume))
+    {   return false;                   }
 
-    virtual void RESERVED1() {}
-    virtual void RESERVED2() {}
     virtual void RESERVED3() {}
     virtual void RESERVED4() {}
Index: src/common/mediactrlcmn.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/mediactrlcmn.cpp,v
retrieving revision 1.13
diff -b -u -2 -r1.13 mediactrlcmn.cpp
--- src/common/mediactrlcmn.cpp	2005/05/17 18:29:31	1.13
+++ src/common/mediactrlcmn.cpp	2005/05/18 19:33:56
@@ -312,4 +312,6 @@
 // wxMediaCtrl::GetState
 // wxMediaCtrl::DoGetBestSize
+// wxMediaCtrl::SetVolume
+// wxMediaCtrl::GetVolume
 //
 // 1) Check to see whether the backend exists and is loading
@@ -401,4 +403,18 @@
         return m_imp->GetVideoSize();
     return wxSize(0,0);
+}
+
+double wxMediaCtrl::GetVolume() 
+{
+    if(m_imp && m_bLoaded)
+        return m_imp->GetVolume();
+    return 0.0;
+}
+
+bool wxMediaCtrl::SetVolume(double dVolume) 
+{
+    if(m_imp && m_bLoaded)
+        return m_imp->SetVolume(dVolume);
+    return false;
 }
 
Index: src/msw/mediactrl.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/msw/mediactrl.cpp,v
retrieving revision 1.26
diff -b -u -2 -r1.26 mediactrl.cpp
--- src/msw/mediactrl.cpp	2005/03/18 19:46:53	1.26
+++ src/msw/mediactrl.cpp	2005/05/18 20:51:18
@@ -28,4 +28,6 @@
 #pragma hdrstop
 #endif
+#define wxUSE_DIRECTSHOW 0
+#define wxUSE_QUICKTIME 0
 
 //---------------------------------------------------------------------------
@@ -737,4 +739,7 @@
     virtual bool SetPlaybackRate(double);
 
+    virtual double GetVolume();
+    virtual bool SetVolume(double);
+
     void Cleanup();
 
@@ -809,4 +814,7 @@
     virtual bool SetPlaybackRate(double dRate);
 
+    virtual double GetVolume();
+    virtual bool SetVolume(double);
+
     static LRESULT CALLBACK NotifyWndProc(HWND hWnd, UINT nMsg,
                                              WPARAM wParam, LPARAM lParam);
@@ -979,4 +987,6 @@
     wxDL_METHOD_DEFINE(long, GetMovieTime, (Movie m, void* cruft), (m,cruft), 0);
     wxDL_VOIDMETHOD_DEFINE(SetMovieTime, (Movie m, TimeRecord* tr), (m,tr) );
+    wxDL_METHOD_DEFINE(short, GetMovieVolume, (Movie m), (m), 0);
+    wxDL_VOIDMETHOD_DEFINE(SetMovieVolume, (Movie m, short sVolume), (m,sVolume) );
 };
 
@@ -1023,4 +1033,6 @@
     wxDL_METHOD_LOAD( m_dll, GetMovieTime, bOk );
     wxDL_METHOD_LOAD( m_dll, SetMovieTime, bOk );
+    wxDL_METHOD_LOAD( m_dll, GetMovieVolume, bOk );
+    wxDL_METHOD_LOAD( m_dll, SetMovieVolume, bOk );
     
     m_ok = true;
@@ -1063,4 +1075,7 @@
     virtual bool SetPlaybackRate(double dRate);
 
+    virtual double GetVolume();
+    virtual bool SetVolume(double);
+
     void Cleanup();
     void FinishLoad();
@@ -1288,6 +1303,11 @@
     }
 
+#if defined(_WIN32)
+    ::SetWindowLong(m_hNotifyWnd, GWL_WNDPROC,
+                       (LONG)wxAMMediaBackend::NotifyWndProc);
+#else
     ::SetWindowLongPtr(m_hNotifyWnd, GWLP_WNDPROC,
                        (LONG_PTR)wxAMMediaBackend::NotifyWndProc);
+#endif
 
     ::SetWindowLong(m_hNotifyWnd, GWL_USERDATA,
@@ -1391,4 +1411,31 @@
 
 //---------------------------------------------------------------------------
+// wxAMMediaBackend::SetVolume
+//
+// Sets the volume through the IBasicAudio interface -
+// value ranges from 0 (MAX volume) to -10000 (minimum volume).
+// -100 per decibel.
+//---------------------------------------------------------------------------
+bool wxAMMediaBackend::SetVolume(double dVolume) 
+{ 
+    return SUCCEEDED(m_pBA->put_Volume( (long) ((dVolume-1.0) * 10000.0) )); 
+} 
+
+//---------------------------------------------------------------------------
+// wxAMMediaBackend::GetVolume
+//
+// Gets the volume through the IBasicAudio interface -
+// value ranges from 0 (MAX volume) to -10000 (minimum volume).
+// -100 per decibel.
+//---------------------------------------------------------------------------
+double wxAMMediaBackend::GetVolume()
+{
+    long lVolume;
+    if ( SUCCEEDED(m_pBA->get_Volume(&lVolume)) )
+        return (((double)(lVolume + 10000)) / 10000.0);
+    return 0.0;
+}
+ 
+//---------------------------------------------------------------------------
 // wxAMMediaBackend::GetDuration
 //
@@ -1647,4 +1694,13 @@
 } MCI_DGV_SET_PARMS;
 
+typedef struct {
+    DWORD_PTR   dwCallback;
+    DWORD   dwItem;
+    DWORD   dwValue;
+    DWORD   dwOver;
+    wxChar*   lpstrAlgorithm;
+    wxChar*   lpstrQuality;
+} MCI_DGV_SETAUDIO_PARMS;
+
 //---------------------------------------------------------------------------
 // wxMCIMediaBackend Constructor
@@ -1783,6 +1839,11 @@
     }
 
+#if defined(_WIN32)
     ::SetWindowLong(m_hNotifyWnd, GWL_WNDPROC,
                        (LONG)wxMCIMediaBackend::NotifyWndProc);
+#else
+    ::SetWindowLongPtr(m_hNotifyWnd, GWLP_WNDPROC,
+                       (LONG_PTR)wxMCIMediaBackend::NotifyWndProc);
+#endif
 
     ::SetWindowLong(m_hNotifyWnd, GWL_USERDATA,
@@ -1936,4 +1997,46 @@
 
 //---------------------------------------------------------------------------
+// wxMCIMediaBackend::GetVolume
+//
+// Gets the volume of the current media via the MCI_DGV_STATUS_VOLUME
+// message.  Value ranges from 0 (minimum) to 1000 (maximum volume).
+//---------------------------------------------------------------------------
+double wxMCIMediaBackend::GetVolume()
+{
+    MCI_STATUS_PARMS statusParms;
+    statusParms.dwCallback = NULL;
+    statusParms.dwItem = 0x4019; //MCI_DGV_STATUS_VOLUME
+
+    if (mciSendCommand(m_hDev, MCI_STATUS, MCI_STATUS_ITEM,
+                       (DWORD)(LPSTR)&statusParms) != 0)
+        return 0;
+
+    return ((double)statusParms.dwReturn) / 1000.0;
+}
+
+//---------------------------------------------------------------------------
+// wxMCIMediaBackend::SetVolume
+//
+// Sets the volume of the current media via the MCI_DGV_SETAUDIO_VOLUME
+// message.  Value ranges from 0 (minimum) to 1000 (maximum volume).
+//---------------------------------------------------------------------------
+bool wxMCIMediaBackend::SetVolume(double dVolume)
+{
+    MCI_DGV_SETAUDIO_PARMS audioParms;
+    audioParms.dwCallback = NULL;
+    audioParms.dwItem = 0x4002; //MCI_DGV_SETAUDIO_VOLUME
+    audioParms.dwValue = (DWORD) (dVolume * 1000.0);
+    audioParms.dwOver = 0;
+    audioParms.lpstrAlgorithm = NULL;
+    audioParms.lpstrQuality = NULL;
+
+    if (mciSendCommand(m_hDev, 0x0873, //MCI_SETAUDIO 
+                        0x00800000L | 0x01000000L, //MCI_DGV_SETAUDIO+(_ITEM | _VALUE)
+                       (DWORD)(LPSTR)&audioParms) != 0)
+        return false;
+    return true;
+}
+
+//---------------------------------------------------------------------------
 // wxMCIMediaBackend::GetDuration
 //
@@ -2449,4 +2552,52 @@
 {
     return m_lib.GetMovieTime(m_movie, NULL);
+}
+
+//---------------------------------------------------------------------------
+// wxQTMediaBackend::GetVolume
+//
+// Gets the volume through GetMovieVolume - which returns a 16 bit short -
+//
+// +--------+--------+
+// +   (1)  +   (2)  +
+// +--------+--------+
+//
+// (1) first 8 bits are value before decimal
+// (2) second 8 bits are value after decimal
+//
+// Volume ranges from -1.0 (gain but no sound), 0 (no sound and no gain) to
+// 1 (full gain and sound)
+//---------------------------------------------------------------------------
+double wxQTMediaBackend::GetVolume()
+{
+    short sVolume = m_lib.GetMovieVolume(m_movie);
+    
+    if(sVolume & (128 << 8)) //negative - no sound
+        return 0.0;
+
+    return (sVolume & (127 << 8)) ? 1.0 : ((double)(sVolume & 255)) / 255.0;
+}
+
+//---------------------------------------------------------------------------
+// wxQTMediaBackend::SetVolume
+//
+// Sets the volume through SetMovieVolume - which takes a 16 bit short -
+//
+// +--------+--------+
+// +   (1)  +   (2)  +
+// +--------+--------+
+//
+// (1) first 8 bits are value before decimal
+// (2) second 8 bits are value after decimal
+//
+// Volume ranges from -1.0 (gain but no sound), 0 (no sound and no gain) to
+// 1 (full gain and sound)
+//---------------------------------------------------------------------------
+bool wxQTMediaBackend::SetVolume(double dVolume)
+{
+    short sVolume = (dVolume >= .9999 ? 1 << 8 : 
+                                       (short) (dVolume * 255));
+    m_lib.SetMovieVolume(m_movie, sVolume);
+    return true;
 }
 

 	  	 

Index: src/common/sizer.cpp
===================================================================
--- src/common/sizer.cpp	(revision 64952)
+++ src/common/sizer.cpp	(working copy)
@@ -42,6 +42,7 @@
 IMPLEMENT_CLASS(wxSizer, wxObject)
 IMPLEMENT_CLASS(wxGridSizer, wxSizer)
 IMPLEMENT_CLASS(wxFlexGridSizer, wxGridSizer)
+IMPLEMENT_CLASS(wxAutoFlexGridSizer, wxFlexGridSizer)
 IMPLEMENT_CLASS(wxBoxSizer, wxSizer)
 #if wxUSE_STATBOX
 IMPLEMENT_CLASS(wxStaticBoxSizer, wxBoxSizer)
@@ -1980,6 +1981,91 @@
 }
 
 //---------------------------------------------------------------------------
+// wxAutoFlexGridSizer
+//---------------------------------------------------------------------------
+
+wxAutoFlexGridSizer::wxAutoFlexGridSizer( int vgap, int hgap )
+: wxFlexGridSizer( 0, 0, vgap, hgap )
+{
+}
+
+wxAutoFlexGridSizer::~wxAutoFlexGridSizer()
+{
+}
+
+void wxAutoFlexGridSizer::RecalcSizes()
+{
+    UpdateRowsCols();
+
+    __super::RecalcSizes();
+}
+
+wxSize wxAutoFlexGridSizer::CalcMin()
+{
+    UpdateRowsCols();
+
+    return __super::CalcMin();
+}
+
+void wxAutoFlexGridSizer::UpdateRowsCols()
+{
+    int width = m_containingWindow->GetClientSize().x;
+
+    int numColumns = 1;
+    int maxColumns = (int) m_children.GetCount();
+    int i = 1;
+    for ( ; i <= maxColumns; ++i )
+    {
+        if ( GetMaxColumnWidth( i ) > width )
+        {
+            break;
+        }
+
+        numColumns = i;
+    }
+
+    m_rows = 0;
+    if ( m_cols != numColumns )
+    {
+        m_cols = numColumns;
+    }
+}
+
+int wxAutoFlexGridSizer::GetMaxColumnWidth( int numItems )
+{
+    int maxWidth = 0;
+
+    int currentWidth = 0;
+    int currentIndex = 0;
+
+    wxSizerItemList::compatibility_iterator node = m_children.GetFirst();
+    while ( node )
+    {
+        if ( currentIndex >= numItems )
+        {
+            maxWidth = wxMax( maxWidth, currentWidth );
+            currentIndex = 0;
+            currentWidth = 0;
+        }
+
+        wxSizerItem *item = node->GetData();
+        wxSize itemSize( item->CalcMin() );
+
+        if ( currentWidth )
+        {
+            currentWidth += m_hgap;
+        }
+
+        currentWidth += itemSize.x;
+        ++currentIndex;
+
+        node = node->GetNext();
+    }
+
+    return wxMax( maxWidth, currentWidth );
+}
+
+//---------------------------------------------------------------------------
 // wxBoxSizer
 //---------------------------------------------------------------------------
 
Index: include/wx/sizer.h
===================================================================
--- include/wx/sizer.h	(revision 64952)
+++ include/wx/sizer.h	(working copy)
@@ -906,6 +906,27 @@
 };
 
 //---------------------------------------------------------------------------
+// wxAutoFlexGridSizer
+//---------------------------------------------------------------------------
+class WXDLLIMPEXP_CORE wxAutoFlexGridSizer : public wxFlexGridSizer
+{
+public:
+    wxAutoFlexGridSizer( int vgap = 0, int hgap = 0 );
+    virtual ~wxAutoFlexGridSizer();
+
+    virtual void RecalcSizes();
+    virtual wxSize CalcMin();
+  
+protected:
+    void UpdateRowsCols();
+    int GetMaxColumnWidth( int numItems );
+    
+private:
+    DECLARE_CLASS(wxAutoFlexGridSizer)
+    wxDECLARE_NO_COPY_CLASS(wxAutoFlexGridSizer);    
+};
+
+//---------------------------------------------------------------------------
 // wxBoxSizer
 //---------------------------------------------------------------------------
 
Index: interface/wx/sizer.h
===================================================================
--- interface/wx/sizer.h	(revision 64952)
+++ interface/wx/sizer.h	(working copy)
@@ -1582,7 +1582,35 @@
     void SetNonFlexibleGrowMode(wxFlexSizerGrowMode mode);
 };
 
+/**
+    @class wxAutoFlexGridSizer
 
+    This class is an extension of the wxFlexGridSizer.  It automatically adds and removes
+    cells based on the available area for controls.  An example usage is a 'toolbox' as
+    seen in popular imaging and media programs where tools automatically fill the box
+    appropriately as it is resized.
+    
+    @library{wxcore}
+    @category{winlayout}
+
+    @see wxFlexGridSizer, @see wxSizer, @ref overview_sizer
+*/
+class wxAutoFlexGridSizer : public wxFlexGridSizer
+{
+public:
+    //@{
+    /**
+        wxAutoFlexGridSizer constructor.
+        
+        The constructor takes two arguments, the @a vgap and @a hgap which, respectively,
+        specify the desired gap between controls vertically and horizontally.
+    */
+    wxAutoFlexGridSizer( int vgap = 0, int hgap = 0 );
+    //@}
+
+};
+
+
 /**
     @class wxGridSizer
 
Index: samples/layout/layout.cpp
===================================================================
--- samples/layout/layout.cpp	(revision 64952)
+++ samples/layout/layout.cpp	(working copy)
@@ -33,6 +33,9 @@
 #include "wx/wrapsizer.h"
 #include "wx/generic/stattextg.h"
 
+#include "wx/tglbtn.h"
+#include "wx/artprov.h"
+
 #include "layout.h"
 
 #ifndef __WXMSW__
@@ -69,6 +72,7 @@
 
   EVT_MENU(LAYOUT_TEST_PROPORTIONS, MyFrame::TestProportions)
   EVT_MENU(LAYOUT_TEST_SIZER, MyFrame::TestFlexSizers)
+  EVT_MENU(LAYOUT_TEST_AUTOFLEXSIZER, MyFrame::TestAutoFlexSizer)
   EVT_MENU(LAYOUT_TEST_NB_SIZER, MyFrame::TestNotebookSizers)
   EVT_MENU(LAYOUT_TEST_GB_SIZER, MyFrame::TestGridBagSizer)
   EVT_MENU(LAYOUT_TEST_SET_MINIMAL, MyFrame::TestSetMinimal)
@@ -87,11 +91,12 @@
 
     file_menu->Append(LAYOUT_TEST_PROPORTIONS, wxT("&Proportions demo...\tF1"));
     file_menu->Append(LAYOUT_TEST_SIZER, wxT("Test wx&FlexSizer...\tF2"));
-    file_menu->Append(LAYOUT_TEST_NB_SIZER, wxT("Test &notebook sizers...\tF3"));
-    file_menu->Append(LAYOUT_TEST_GB_SIZER, wxT("Test &gridbag sizer...\tF4"));
-    file_menu->Append(LAYOUT_TEST_SET_MINIMAL, wxT("Test Set&ItemMinSize...\tF5"));
-    file_menu->Append(LAYOUT_TEST_NESTED, wxT("Test nested sizer in a wxPanel...\tF6"));
-    file_menu->Append(LAYOUT_TEST_WRAP, wxT("Test wrap sizers...\tF7"));
+    file_menu->Append(LAYOUT_TEST_AUTOFLEXSIZER, wxT("Test wx&AutoFlexGridSizer...\tF3"));
+    file_menu->Append(LAYOUT_TEST_NB_SIZER, wxT("Test &notebook sizers...\tF4"));
+    file_menu->Append(LAYOUT_TEST_GB_SIZER, wxT("Test &gridbag sizer...\tF5"));
+    file_menu->Append(LAYOUT_TEST_SET_MINIMAL, wxT("Test Set&ItemMinSize...\tF6"));
+    file_menu->Append(LAYOUT_TEST_NESTED, wxT("Test nested sizer in a wxPanel...\tF7"));
+    file_menu->Append(LAYOUT_TEST_WRAP, wxT("Test wrap sizers...\tF8"));
 
     file_menu->AppendSeparator();
     file_menu->Append(LAYOUT_QUIT, wxT("E&xit"), wxT("Quit program"));
@@ -207,6 +212,12 @@
     newFrame->Show(true);
 }
 
+void MyFrame::TestAutoFlexSizer( wxCommandEvent& WXUNUSED(event) )
+{
+    MyAutoFlexSizerFrame *newFrame = new MyAutoFlexSizerFrame(wxT("Auto Flex Sizer Test Frame"), 50, 50);
+    newFrame->Show(true);
+}
+
 void MyFrame::TestNotebookSizers(wxCommandEvent& WXUNUSED(event) )
 {
     MySizerDialog dialog( this, wxT("Notebook Sizer Test Dialog") );
@@ -405,6 +416,27 @@
 }
 
 // ----------------------------------------------------------------------------
+//  MyAutoFlexSizerFrame
+// ----------------------------------------------------------------------------
+
+MyAutoFlexSizerFrame::MyAutoFlexSizerFrame(const wxString &title, int x, int y )
+            : wxFrame(NULL, wxID_ANY, title, wxPoint(x, y) )
+{
+    wxAutoFlexGridSizer *sizer = new wxAutoFlexGridSizer();
+    sizer->SetFlexibleDirection( wxBOTH );
+    sizer->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
+
+    int i = 0;
+    for ( ; i < 30; ++i )
+    {
+        wxBitmapToggleButton* btn = new wxBitmapToggleButton( this, wxID_ANY, wxArtProvider::GetBitmap( wxART_INFORMATION ), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT | wxBU_AUTODRAW );
+        sizer->Add( btn, 0, wxALL, 0 );
+    }
+
+    SetSizer( sizer );
+}
+
+// ----------------------------------------------------------------------------
 // MySizerDialog
 // ----------------------------------------------------------------------------
 
Index: samples/layout/layout.h
===================================================================
--- samples/layout/layout.h	(revision 64952)
+++ samples/layout/layout.h	(working copy)
@@ -25,6 +25,7 @@
 
     void TestProportions(wxCommandEvent& event);
     void TestFlexSizers(wxCommandEvent& event);
+    void TestAutoFlexSizer(wxCommandEvent& event );
     void TestNotebookSizers(wxCommandEvent& event);
     void TestGridBagSizer(wxCommandEvent& event);
     void TestNested(wxCommandEvent& event);
@@ -64,6 +65,11 @@
     void InitFlexSizer(wxFlexGridSizer *sizer, wxWindow* parent);
 };
 
+class MyAutoFlexSizerFrame : public wxFrame
+{
+public:
+    MyAutoFlexSizerFrame( const wxString& title, int x, int y );
+};
 
 // a dialog using notebook sizer for layout
 class MySizerDialog : public wxDialog
@@ -139,6 +145,7 @@
 enum
 {
     LAYOUT_TEST_SIZER = 101,
+    LAYOUT_TEST_AUTOFLEXSIZER,
     LAYOUT_TEST_NB_SIZER,
     LAYOUT_TEST_GB_SIZER,
     LAYOUT_TEST_PROPORTIONS,

diff --git a/samples/dll/my_dll.cpp b/samples/dll/my_dll.cpp
index bfd6ed5..8d31263 100644
--- a/samples/dll/my_dll.cpp
+++ b/samples/dll/my_dll.cpp
@@ -22,8 +22,8 @@
     #pragma hdrstop
 #endif
 
-#ifndef __WXMSW__
-    #error "This sample is MSW-only"
+#ifndef __WINDOWS__
+    #error "This sample is Windows-only"
 #endif
 
 #include "wx/app.h"
diff --git a/samples/dll/wx_exe.cpp b/samples/dll/wx_exe.cpp
index a4b5263..c48d674 100644
--- a/samples/dll/wx_exe.cpp
+++ b/samples/dll/wx_exe.cpp
@@ -31,8 +31,8 @@
 #include "wx/stattext.h"
 #include "wx/button.h"
 
-#ifndef __WXMSW__
-    #error "This sample is MSW-only"
+#ifndef __WINDOWS__
+    #error "This sample is Windows-only"
 #endif
 
 #ifdef WXUSINGDLL
diff --git a/samples/oleauto/oleauto.cpp b/samples/oleauto/oleauto.cpp
index 2fdcf0d..1bd9e97 100644
--- a/samples/oleauto/oleauto.cpp
+++ b/samples/oleauto/oleauto.cpp
@@ -32,7 +32,7 @@
 
 #include "wx/msw/ole/automtn.h"
 
-#ifndef __WXMSW__
+#ifndef __WINDOWS__
 #error "Sorry, this sample works under Windows only."
 #endif
 
diff --git a/samples/regtest/regtest.cpp b/samples/regtest/regtest.cpp
index cae2f05..a1147ca 100644
--- a/samples/regtest/regtest.cpp
+++ b/samples/regtest/regtest.cpp
@@ -31,7 +31,7 @@
 #include "wx/imaglist.h"
 #include "wx/tokenzr.h"
 
-#if wxUSE_CONFIG_NATIVE && defined( __WXMSW__ )
+#if wxUSE_CONFIG_NATIVE && defined( __WINDOWS__ )
 #   define DO_REGTEST 1
 #else
 #   define DO_REGTEST 0
diff --git a/samples/toolbar/toolbar.cpp b/samples/toolbar/toolbar.cpp
index 172fd95..8f8da74 100644
--- a/samples/toolbar/toolbar.cpp
+++ b/samples/toolbar/toolbar.cpp
@@ -37,7 +37,7 @@
 
 // define this to use XPMs everywhere (by default, BMPs are used under Win)
 // BMPs use less space, but aren't compiled into the executable on other platforms
-#ifdef __WXMSW__
+#ifdef __WINDOWS__
     #define USE_XPM_BITMAPS 0
 #else
     #define USE_XPM_BITMAPS 1
diff --git a/tests/archive/archivetest.cpp b/tests/archive/archivetest.cpp
index b567770..bbe235d 100644
--- a/tests/archive/archivetest.cpp
+++ b/tests/archive/archivetest.cpp
@@ -409,7 +409,7 @@ void TempDir::RemoveDir(wxString& path)
 #   define WXARC_pclose(fp)
 #endif
 
-#ifdef __WXMSW__
+#ifdef __WINDOWS__
 #   define WXARC_b "b"
 #else
 #   define WXARC_b
@@ -661,7 +661,7 @@ void ArchiveTestCase<ClassFactoryT>::CreateArchive(wxOutputStream& out,
         wxFileName fn(i->first, wxPATH_UNIX);
         TestEntry& entry = *i->second;
         wxDateTime dt = entry.GetDateTime();
-#ifdef __WXMSW__
+#ifdef __WINDOWS__
         if (fn.IsDir())
             entry.SetDateTime(wxDateTime());
         else
@@ -806,7 +806,7 @@ void ArchiveTestCase<ClassFactoryT>::ExtractArchive(wxInputStream& in)
 
         const TestEntry& testEntry = *it->second;
 
-#ifndef __WXMSW__
+#ifndef __WINDOWS__
         // On Windows some archivers compensate for Windows DST handling, but
         // other don't, so disable the test for now.
         wxDateTime dt = testEntry.GetDateTime();
@@ -950,7 +950,7 @@ void ArchiveTestCase<ClassFactoryT>::VerifyDir(wxString& path,
 
             const TestEntry& testEntry = *it->second;
 
-#if 0 //ndef __WXMSW__
+#if 0 //ndef __WINDOWS__
             CPPUNIT_ASSERT_MESSAGE("timestamp check" + error_context,
                                    testEntry.GetDateTime() ==
                                    wxFileName(path).GetModificationTime());
@@ -1300,7 +1300,7 @@ void ArchiveTestSuite::AddCmd(wxArrayString& cmdlist, const wxString& cmd)
 bool ArchiveTestSuite::IsInPath(const wxString& cmd)
 {
     wxString c = cmd.BeforeFirst(wxT(' '));
-#ifdef __WXMSW__
+#ifdef __WINDOWS__
     c += wxT(".exe");
 #endif
     return !m_path.FindValidPath(c).empty();
diff --git a/tests/benchmarks/strings.cpp b/tests/benchmarks/strings.cpp
index 616e371..b1ee269 100644
--- a/tests/benchmarks/strings.cpp
+++ b/tests/benchmarks/strings.cpp
@@ -356,7 +356,7 @@ BENCHMARK_FUNC(StringCmpNoCase)
 // Also benchmark various native functions under MSW. Surprisingly/annoyingly
 // they sometimes have vastly better performance than alternatives, especially
 // for case-sensitive comparison (see #10375).
-#ifdef __WXMSW__
+#ifdef __WINDOWS__
 
 #include "wx/msw/wrapwin.h"
 
@@ -400,7 +400,7 @@ BENCHMARK_FUNC(MSWCompareStringIgnoreCase)
              ) == CSTR_EQUAL;
 }
 
-#endif // __WXMSW__
+#endif // __WINDOWS__
 
 // ----------------------------------------------------------------------------
 // string buffers: wx[W]CharBuffer
diff --git a/tests/exec/exec.cpp b/tests/exec/exec.cpp
index 50c01ed..4355808 100644
--- a/tests/exec/exec.cpp
+++ b/tests/exec/exec.cpp
@@ -27,7 +27,7 @@
     #define ASYNC_COMMAND "xclock"
     #define SHELL_COMMAND "echo hi from shell>/dev/null"
     #define COMMAND_NO_OUTPUT "echo -n"
-#elif defined(__WXMSW__)
+#elif defined(__WINDOWS__)
     #define COMMAND "cmd.exe /c \"echo hi\""
     #define ASYNC_COMMAND "notepad"
     #define SHELL_COMMAND "echo hi > nul:"
diff --git a/tests/file/dir.cpp b/tests/file/dir.cpp
index c109213..caffd17 100644
--- a/tests/file/dir.cpp
+++ b/tests/file/dir.cpp
@@ -178,7 +178,7 @@ void DirTestCase::DirExists()
         { ".", true },
         { "..", true },
         { "$USER_DOCS_DIR", true },
-#if defined(__WXMSW__)
+#if defined(__WINDOWS__)
         { "$USER_DOCS_DIR\\", true },
         { "$USER_DOCS_DIR\\\\", true },
         { "..\\..", true },
@@ -202,20 +202,20 @@ void DirTestCase::DirExists()
 #endif
     };
 
-#ifdef __WXMSW__
+#ifdef __WINDOWS__
     wxString homedrive = wxGetenv("HOMEDRIVE");
     if ( homedrive.empty() )
         homedrive = "c:";
-#endif // __WXMSW__
+#endif // __WINDOWS__
 
     for ( size_t n = 0; n < WXSIZEOF(testData); n++ )
     {
         wxString dirname = testData[n].dirname;
         dirname.Replace("$USER_DOCS_DIR", wxStandardPaths::Get().GetDocumentsDir());
 
-#ifdef __WXMSW__
+#ifdef __WINDOWS__
         dirname.Replace("$MSW_DRIVE", homedrive);
-#endif // __WXMSW__
+#endif // __WINDOWS__
 
         std::string errDesc = wxString::Format("failed on directory '%s'", dirname).ToStdString();
         CPPUNIT_ASSERT_EQUAL_MESSAGE(errDesc, testData[n].shouldExist, wxDir::Exists(dirname));
diff --git a/tests/filename/filenametest.cpp b/tests/filename/filenametest.cpp
index aefd7fe..addf9ad 100644
--- a/tests/filename/filenametest.cpp
+++ b/tests/filename/filenametest.cpp
@@ -26,9 +26,9 @@
 #include "wx/stdpaths.h"
 #include "wx/scopeguard.h"
 
-#ifdef __WXMSW__
+#ifdef __WINDOWS__
     #include "wx/msw/registry.h"
-#endif // __WXMSW__
+#endif // __WINDOWS__
 
 #ifdef __UNIX__
     #include <unistd.h>
@@ -323,7 +323,7 @@ void FileNameTestCase::TestNormalize()
     } tests[] =
     {
         // test wxPATH_NORM_ENV_VARS
-#ifdef __WXMSW__
+#ifdef __WINDOWS__
         { "%ABCDEF%/g/h/i", wxPATH_NORM_ENV_VARS, "abcdef/g/h/i", wxPATH_UNIX },
 #else
         { "$(ABCDEF)/g/h/i", wxPATH_NORM_ENV_VARS, "abcdef/g/h/i", wxPATH_UNIX },
@@ -407,7 +407,7 @@ void FileNameTestCase::TestNormalize()
     // and also that the registry key was changed recently and didn't take
     // effect yet but these are marginal cases which we consciously choose to
     // ignore for now)
-#ifdef __WXMSW__
+#ifdef __WINDOWS__
     long shortNamesDisabled;
     if ( wxRegKey
          (
@@ -421,7 +421,7 @@ void FileNameTestCase::TestNormalize()
         CPPUNIT_ASSERT_EQUAL( "..\\mkinstalldirs", fn.GetFullPath() );
     }
     //else: when in doubt, don't run the test
-#endif // __WXMSW__
+#endif // __WINDOWS__
 }
 
 void FileNameTestCase::TestReplace()
@@ -605,7 +605,7 @@ void FileNameTestCase::TestCreateTempFileName()
         { "foo", "$SYSTEM_TEMP", true },
         { "..", "$SYSTEM_TEMP", true },
         { "../bar", "..", true },
-#ifdef __WXMSW__
+#ifdef __WINDOWS__
         { "$USER_DOCS_DIR\\", "$USER_DOCS_DIR", true },
         { "c:\\a\\directory\\which\\does\\not\\exist", "", false },
 #elif defined( __UNIX__ )
diff --git a/tests/fswatcher/fswatchertest.cpp b/tests/fswatcher/fswatchertest.cpp
index 8840342..a3fc759 100644
--- a/tests/fswatcher/fswatchertest.cpp
+++ b/tests/fswatcher/fswatchertest.cpp
@@ -428,9 +428,9 @@ private:
         CPPUNIT_TEST( TestEventModify );
 
         // MSW implementation doesn't detect file access events currently
-#ifndef __WXMSW__
+#ifndef __WINDOWS__
         CPPUNIT_TEST( TestEventAccess );
-#endif // __WXMSW__
+#endif // __WINDOWS__
 #endif // !wxHAS_KQUEUE
 
         CPPUNIT_TEST( TestNoEventsAfterRemove );
diff --git a/tests/interactive/output.cpp b/tests/interactive/output.cpp
index 3d6492c..2722ca8 100644
--- a/tests/interactive/output.cpp
+++ b/tests/interactive/output.cpp
@@ -90,7 +90,7 @@ CPPUNIT_TEST_SUITE_NAMED_REGISTRATION( InteractiveOutputTestCase, "InteractiveOu
 // wxDllLoader
 // ----------------------------------------------------------------------------
 
-#if !defined(__WXMSW__) && !defined(__UNIX__)
+#if !defined(__WINDOWS__) && !defined(__UNIX__)
     #undef TEST_DYNLIB
 #endif
 
diff --git a/tests/misc/dynamiclib.cpp b/tests/misc/dynamiclib.cpp
index bf33350..acd16c4 100644
--- a/tests/misc/dynamiclib.cpp
+++ b/tests/misc/dynamiclib.cpp
@@ -46,7 +46,7 @@ CPPUNIT_TEST_SUITE_NAMED_REGISTRATION( DynamicLibraryTestCase, "DynamicLibraryTe
 
 void DynamicLibraryTestCase::Load()
 {
-#if defined(__WXMSW__)
+#if defined(__WINDOWS__)
     static const wxChar *LIB_NAME = wxT("kernel32.dll");
     static const wxChar *FUNC_NAME = wxT("lstrlenA");
 #elif defined(__UNIX__)
@@ -74,7 +74,7 @@ void DynamicLibraryTestCase::Load()
     // Call the function dynamically loaded
     CPPUNIT_ASSERT( pfnStrlen("foo") == 3 );
 
-#ifdef __WXMSW__
+#ifdef __WINDOWS__
     static const wxChar *FUNC_NAME_AW = wxT("lstrlen");
 
     typedef int (wxSTDCALL *wxStrlenTypeAorW)(const wxChar *);
@@ -86,5 +86,5 @@ void DynamicLibraryTestCase::Load()
     CPPUNIT_ASSERT_MESSAGE( errMsg2.ToStdString(), pfnStrlenAorW );
 
     CPPUNIT_ASSERT( pfnStrlenAorW(wxT("foobar")) == 6 );
-#endif // __WXMSW__
+#endif // __WINDOWS__
 }
diff --git a/tests/net/ipc.cpp b/tests/net/ipc.cpp
index cb55490..9782867 100644
--- a/tests/net/ipc.cpp
+++ b/tests/net/ipc.cpp
@@ -262,4 +262,4 @@ void IPCTestCase::Disconnect()
 
 #endif // wxUSE_THREADS
 
-#endif // !__WXMSW__
+#endif // !__WINDOWS__
diff --git a/tests/streams/largefile.cpp b/tests/streams/largefile.cpp
index da11cca..9c8e0ca 100644
--- a/tests/streams/largefile.cpp
+++ b/tests/streams/largefile.cpp
@@ -35,7 +35,7 @@
 #include "wx/filename.h"
 #include "wx/wfstream.h"
 
-#ifdef __WXMSW__
+#ifdef __WINDOWS__
     #include "wx/msw/wrapwin.h"
     #ifdef __VISUALC__
         // 'nonstandard extension used : nameless struct/union' occurs inside
@@ -305,7 +305,7 @@ CppUnit::Test *largeFile::suite()
 // are picked up. However this is only possible when sparse files are
 // supported otherwise the tests require too much disk space.
 
-#ifdef __WXMSW__
+#ifdef __WINDOWS__
 
 #ifndef FILE_SUPPORTS_SPARSE_FILES
 #define FILE_SUPPORTS_SPARSE_FILES 0x00000040
@@ -400,7 +400,7 @@ CppUnit::Test* GetlargeFileSuite()
         return NULL;
 }
 
-#else // __WXMSW__
+#else // __WINDOWS__
 
 bool IsFAT(const wxString& WXUNUSED(path)) { return false; }
 void MakeSparse(const wxString& WXUNUSED(path), int WXUNUSED(fd)) { }
@@ -436,7 +436,7 @@ CppUnit::Test* GetlargeFileSuite()
         return NULL;
 }
 
-#endif // __WXMSW__
+#endif // __WINDOWS__
 
 CPPUNIT_TEST_SUITE_NAMED_REGISTRATION(largeFile, "largeFile");
 CPPUNIT_TEST_SUITE_NAMED_REGISTRATION(largeFile, "Streams.largeFile");
diff --git a/tests/streams/textstreamtest.cpp b/tests/streams/textstreamtest.cpp
index 1d1ec03..aa08998 100644
--- a/tests/streams/textstreamtest.cpp
+++ b/tests/streams/textstreamtest.cpp
@@ -93,7 +93,7 @@ TextStreamTestCase::TextStreamTestCase()
 {
 }
 
-#if defined(__WXMSW__) || defined(__WXPM__)
+#if defined(__WINDOWS__) || defined(__WXPM__)
 #   define NEWLINE "\r\n"
 #   define NEWLINELEN 2
 #elif defined(__WXMAC__) && !defined(__DARWIN__)
diff --git a/tests/strings/vararg.cpp b/tests/strings/vararg.cpp
index 14fb85f..df44cff 100644
--- a/tests/strings/vararg.cpp
+++ b/tests/strings/vararg.cpp
@@ -272,7 +272,7 @@ void VarArgTestCase::ArgsValidation()
 
     // check size_t handling
     size_t len = sizeof(*this);
-#ifdef __WXMSW__
+#ifdef __WINDOWS__
     wxString::Format("%Iu", len);
 #else
     wxString::Format("%zu", len);
diff --git a/tests/strings/vsnprintf.cpp b/tests/strings/vsnprintf.cpp
index 5bae041..b37d0e5 100644
--- a/tests/strings/vsnprintf.cpp
+++ b/tests/strings/vsnprintf.cpp
@@ -425,7 +425,7 @@ void VsnprintfTestCase::LongLong()
 
     CMP3("123456789", "%llu", (wxULongLong_t)123456789);
 
-#ifdef __WXMSW__
+#ifdef __WINDOWS__
     CMP3("123456789", "%I64d", (wxLongLong_t)123456789);
     CMP3("123456789abcdef", "%I64x", wxLL(0x123456789abcdef));
 #endif
diff --git a/tests/test.cpp b/tests/test.cpp
index 983bc4f..bdd531d 100644
--- a/tests/test.cpp
+++ b/tests/test.cpp
@@ -45,7 +45,7 @@
 #include <exception>
 #include <iostream>
 
-#ifdef __WXMSW__
+#ifdef __WINDOWS__
     #include "wx/msw/msvcrt.h"
 #endif
 
diff --git a/tests/xlocale/xlocale.cpp b/tests/xlocale/xlocale.cpp
index 4c6f6c8..2b3474b 100644
--- a/tests/xlocale/xlocale.cpp
+++ b/tests/xlocale/xlocale.cpp
@@ -75,7 +75,7 @@ void XLocaleTestCase::TestCtor()
 
 #ifdef wxHAS_XLOCALE_SUPPORT
     CPPUNIT_ASSERT( wxXLocale(wxLANGUAGE_FRENCH).IsOk() );
-#ifdef __WXMSW__
+#ifdef __WINDOWS__
     CPPUNIT_ASSERT( wxXLocale("french").IsOk() );
 #else
     CPPUNIT_ASSERT( wxXLocale("fr_FR").IsOk() );

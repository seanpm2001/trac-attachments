Index: src/msw/listctrl.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/msw/listctrl.cpp,v
retrieving revision 1.145
diff -u -r1.145 listctrl.cpp
--- src/msw/listctrl.cpp	2003/01/07 18:11:48	1.145
+++ src/msw/listctrl.cpp	2003/01/21 21:26:23
@@ -241,12 +241,12 @@
     m_imageListNormal = NULL;
     m_imageListSmall = NULL;
     m_imageListState = NULL;
-    m_ownsImageListNormal = m_ownsImageListSmall = m_ownsImageListState = FALSE;
+    m_ownsImageListNormal = m_ownsImageListSmall = m_ownsImageListState = false;
     m_baseStyle = 0;
     m_colCount = 0;
     m_textCtrl = NULL;
-    m_AnyInternalData = FALSE;
-    m_hasAnyAttr = FALSE;
+    m_AnyInternalData = false;
+    m_hasAnyAttr = false;
 }
 
 bool wxListCtrl::Create(wxWindow *parent,
@@ -294,12 +294,12 @@
     m_baseStyle = wstyle;
 
     if ( !DoCreateControl(x, y, width, height) )
-        return FALSE;
+        return false;
 
     if (parent)
         parent->AddChild(this);
 
-    return TRUE;
+    return true;
 }
 
 bool wxListCtrl::DoCreateControl(int x, int y, int w, int h)
@@ -332,7 +332,7 @@
     {
         wxLogError(_("Can't create list control window, check that comctl32.dll is installed."));
 
-        return FALSE;
+        return false;
     }
 
     // for comctl32.dll v 4.70+ we want to have this attribute because it's
@@ -348,7 +348,7 @@
 
     SubclassWin(m_hWnd);
 
-    return TRUE;
+    return true;
 }
 
 void wxListCtrl::UpdateStyle()
@@ -381,7 +381,7 @@
         for (i = 0; i < n; i++)
             wxDeleteInternalData(this, i);
 
-        m_AnyInternalData = FALSE;
+        m_AnyInternalData = false;
     }
 }
 
@@ -565,18 +565,18 @@
 bool wxListCtrl::SetForegroundColour(const wxColour& col)
 {
     if ( !wxWindow::SetForegroundColour(col) )
-        return FALSE;
+        return false;
 
     ListView_SetTextColor(GetHwnd(), wxColourToRGB(col));
 
-    return TRUE;
+    return true;
 }
 
 // Sets the background colour
 bool wxListCtrl::SetBackgroundColour(const wxColour& col)
 {
     if ( !wxWindow::SetBackgroundColour(col) )
-        return FALSE;
+        return false;
 
     // we set the same colour for both the "empty" background and the items
     // background
@@ -584,7 +584,7 @@
     ListView_SetBkColor(GetHwnd(), color);
     ListView_SetTextBkColor(GetHwnd(), color);
 
-    return TRUE;
+    return true;
 }
 
 // Gets information about this column
@@ -768,7 +768,7 @@
         if (! data)
         {
             // need to set it
-            m_AnyInternalData = TRUE;
+            m_AnyInternalData = true;
             data = new wxListItemInternalData();
             item.lParam = (LPARAM) data;
             item.mask |= LVIF_PARAM;
@@ -799,7 +799,7 @@
         {
             wxLogDebug(_T("ListView_SetItem() failed"));
 
-            return FALSE;
+            return false;
         }
     }
 
@@ -809,10 +809,10 @@
     // check whether it has any custom attributes
     if ( info.HasAttributes() )
     {
-        m_hasAnyAttr = TRUE;
+        m_hasAnyAttr = true;
 
         // if the colour has changed, we must redraw the item
-        updateNow = TRUE;
+        updateNow = true;
     }
 
     if ( updateNow )
@@ -821,7 +821,7 @@
         RefreshItem(item.iItem);
     }
 
-    return TRUE;
+    return true;
 }
 
 long wxListCtrl::SetItem(long index, int col, const wxString& label, int imageId)
@@ -886,7 +886,7 @@
     {
         wxLogLastError(_T("ListView_SetItemState"));
 
-        return FALSE;
+        return false;
     }
 
     if ( focusOld != -1 )
@@ -900,7 +900,7 @@
         }
     }
 
-    return TRUE;
+    return true;
 }
 
 // Sets the item image
@@ -1018,7 +1018,7 @@
 }
 
 // Retrieves the spacing between icons in pixels.
-// If small is TRUE, gets the spacing for the small icon
+// If small is true, gets the spacing for the small icon
 // view, otherwise the large icon view.
 int wxListCtrl::GetItemSpacing(bool isSmall) const
 {
@@ -1145,21 +1145,21 @@
         flags = LVSIL_NORMAL;
         if (m_ownsImageListNormal) delete m_imageListNormal;
         m_imageListNormal = imageList;
-        m_ownsImageListNormal = FALSE;
+        m_ownsImageListNormal = false;
     }
     else if ( which == wxIMAGE_LIST_SMALL )
     {
         flags = LVSIL_SMALL;
         if (m_ownsImageListSmall) delete m_imageListSmall;
         m_imageListSmall = imageList;
-        m_ownsImageListSmall = FALSE;
+        m_ownsImageListSmall = false;
     }
     else if ( which == wxIMAGE_LIST_STATE )
     {
         flags = LVSIL_STATE;
         if (m_ownsImageListState) delete m_imageListState;
         m_imageListState = imageList;
-        m_ownsImageListState = FALSE;
+        m_ownsImageListState = false;
     }
     ListView_SetImageList(GetHwnd(), (HIMAGELIST) imageList ? imageList->GetHIMAGELIST() : 0, flags);
 }
@@ -1168,11 +1168,11 @@
 {
     SetImageList(imageList, which);
     if ( which == wxIMAGE_LIST_NORMAL )
-        m_ownsImageListNormal = TRUE;
+        m_ownsImageListNormal = true;
     else if ( which == wxIMAGE_LIST_SMALL )
-        m_ownsImageListSmall = TRUE;
+        m_ownsImageListSmall = true;
     else if ( which == wxIMAGE_LIST_STATE )
-        m_ownsImageListState = TRUE;
+        m_ownsImageListState = true;
 }
 
 // ----------------------------------------------------------------------------
@@ -1201,7 +1201,7 @@
     if ( !ListView_DeleteItem(GetHwnd(), (int) item) )
     {
         wxLogLastError(_T("ListView_DeleteItem"));
-        return FALSE;
+        return false;
     }
 
     // the virtual list control doesn't refresh itself correctly, help it
@@ -1226,12 +1226,13 @@
         RefreshRect(rectWin);
     }
 
-    return TRUE;
+    return true;
 }
 
 // Deletes all items
 bool wxListCtrl::DeleteAllItems()
 {
+    FreeAllInternalData();
     return ListView_DeleteAllItems(GetHwnd()) != 0;
 }
 
@@ -1244,7 +1245,7 @@
         {
             wxLogLastError(wxT("ListView_DeleteColumn"));
 
-            return FALSE;
+            return false;
         }
 
         m_colCount--;
@@ -1252,7 +1253,7 @@
 
     wxASSERT_MSG( m_colCount == 0, wxT("no columns should be left") );
 
-    return TRUE;
+    return true;
 }
 
 // Deletes a column
@@ -1314,13 +1315,13 @@
 {
     wxFAIL_MSG( _T("not implemented") );
 
-    return FALSE;
+    return false;
 }
 
 // Ensures this item is visible
 bool wxListCtrl::EnsureVisible(long item)
 {
-    return ListView_EnsureVisible(GetHwnd(), (int) item, FALSE) != 0;
+    return ListView_EnsureVisible(GetHwnd(), (int) item, false) != 0;
 }
 
 // Find an item whose label matches this string, starting from the item after 'start'
@@ -1430,7 +1431,7 @@
     bool needInternalData = ((info.m_mask & wxLIST_MASK_DATA) || info.HasAttributes());
     if (needInternalData)
     {
-        m_AnyInternalData = TRUE;
+        m_AnyInternalData = true;
         item.mask |= LVIF_PARAM;
 
         // internal stucture that manages data
@@ -1552,10 +1553,10 @@
     {
         wxLogDebug(_T("ListView_Scroll(%d, %d) failed"), dx, dy);
 
-        return FALSE;
+        return false;
     }
 
-    return TRUE;
+    return true;
 }
 
 // Sort items.
@@ -1607,10 +1608,10 @@
     {
         wxLogDebug(_T("ListView_SortItems() failed"));
 
-        return FALSE;
+        return false;
     }
 
-    return TRUE;
+    return true;
 }
 
 
@@ -1626,17 +1627,17 @@
         wxCommandEvent event(wxEVT_COMMAND_TEXT_UPDATED, id);
         event.SetEventObject( this );
         ProcessCommand(event);
-        return TRUE;
+        return true;
     }
     else if (cmd == EN_KILLFOCUS)
     {
         wxCommandEvent event(wxEVT_KILL_FOCUS, id);
         event.SetEventObject( this );
         ProcessCommand(event);
-        return TRUE;
+        return true;
     }
     else
-        return FALSE;
+        return false;
 }
 
 bool wxListCtrl::MSWOnNotify(int idCtrl, WXLPARAM lParam, WXLPARAM *result)
@@ -1747,13 +1748,13 @@
                     // This is a fix for a strange bug under XP.
                     // Normally, info->iItem is a valid index, but
                     // sometimes this is a silly (large) number
-                    // and when we return FALSE via wxControl::MSWOnNotify
+                    // and when we return false via wxControl::MSWOnNotify
                     // to indicate that it hasn't yet been processed,
                     // there's a GPF in Windows.
-                    // By returning TRUE here, we avoid further processing
+                    // By returning true here, we avoid further processing
                     // of this strange message.
                     if (info->iItem > GetColumnCount())
-                        return TRUE;
+                        return true;
                 }
                 // fall through
 
@@ -1836,7 +1837,7 @@
                     wxConvertFromMSWListItem(NULL, event.m_item, item);
                     if ( ((LV_ITEM)item).pszText == NULL ||
                          ((LV_ITEM)item).iItem == -1 )
-                        return FALSE;
+                        return false;
 
                     event.m_itemIndex = event.m_item.m_itemId;
                 }
@@ -1848,7 +1849,7 @@
                     wxConvertFromMSWListItem(NULL, event.m_item, item);
                     if ( ((LV_ITEM)item).pszText == NULL ||
                          ((LV_ITEM)item).iItem == -1 )
-                        return FALSE;
+                        return false;
 
                     event.m_itemIndex = event.m_item.m_itemId;
                 }
@@ -1937,7 +1938,7 @@
                 if ( eventType == wxEVT_NULL )
                 {
                     // not an interesting event for us
-                    return FALSE;
+                    return false;
                 }
 
                 break;
@@ -1988,7 +1989,7 @@
                 // anything else
                 if ( wxControl::MSWOnNotify(idCtrl, lParam, result) )
                 {
-                    return TRUE;
+                    return true;
                 }
 
                 // else translate it into wxEVT_COMMAND_LIST_ITEM_ACTIVATED event
@@ -1996,7 +1997,7 @@
                 if ( iItem == -1 )
                 {
                     // not on item
-                    return FALSE;
+                    return false;
                 }
 
                 eventType = wxEVT_COMMAND_LIST_ITEM_ACTIVATED;
@@ -2010,7 +2011,7 @@
                 // don't do anything else
                 if ( wxControl::MSWOnNotify(idCtrl, lParam, result) )
                 {
-                    return TRUE;
+                    return true;
                 }
 
                 // else translate it into wxEVT_COMMAND_LIST_ITEM_RIGHT_CLICK event
@@ -2036,7 +2037,7 @@
             case NM_CUSTOMDRAW:
                 *result = OnCustomDraw(lParam);
 
-                return TRUE;
+                return true;
 #endif // _WIN32_IE >= 0x300
 
             case LVN_ODCACHEHINT:
@@ -2058,7 +2059,7 @@
                     }
                     else
                     {
-                        return FALSE;
+                        return false;
                     }
                 }
                 break;
@@ -2090,7 +2091,7 @@
                     wxASSERT_MSG( !(lvi.mask & LVIF_STATE),
                                   _T("we don't support state callbacks yet!") );
 
-                    return TRUE;
+                    return true;
                 }
                 // fall through
 
@@ -2101,7 +2102,7 @@
     else
     {
         // where did this one come from?
-        return FALSE;
+        return false;
     }
 
     // process the event
@@ -2110,7 +2111,7 @@
     event.SetEventType(eventType);
 
     if ( !GetEventHandler()->ProcessEvent(event) )
-        return FALSE;
+        return false;
 
     // post processing
     // ---------------
@@ -2118,12 +2119,12 @@
     switch ( nmhdr->code )
     {
         case LVN_DELETEALLITEMS:
-            // always return TRUE to suppress all additional LVN_DELETEITEM
+            // always return true to suppress all additional LVN_DELETEITEM
             // notifications - this makes deleting all items from a list ctrl
             // much faster
-            *result = TRUE;
+            *result = true;
 
-            return TRUE;
+            return true;
 
         case LVN_ENDLABELEDITA:
         case LVN_ENDLABELEDITW:
@@ -2141,12 +2142,12 @@
                 m_textCtrl = NULL;
             }
 
-            return TRUE;
+            return true;
     }
 
     *result = !event.IsAllowed();
 
-    return TRUE;
+    return true;
 }
 
 #if defined(_WIN32_IE) && _WIN32_IE >= 0x300
@@ -2435,13 +2436,13 @@
 
     long oldMask = lvItem.mask;
 
-    bool needText = FALSE;
+    bool needText = false;
     if (hwndListCtrl != 0)
     {
         if ( lvItem.mask & LVIF_TEXT )
-            needText = FALSE;
+            needText = false;
         else
-            needText = TRUE;
+            needText = true;
 
         if ( needText )
         {

 	  	 

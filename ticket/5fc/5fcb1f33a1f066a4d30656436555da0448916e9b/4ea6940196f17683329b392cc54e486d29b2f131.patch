 samples/aui/auidemo.cpp         |  6 +++---
 samples/dataview/mymodels.cpp   |  2 +-
 samples/grid/griddemo.cpp       |  4 ++--
 samples/splitter/splitter.cpp   |  6 ++----
 samples/stc/edit.cpp            | 10 +++++-----
 samples/text/text.cpp           |  3 +--
 samples/widgets/bmpcombobox.cpp |  2 +-
 samples/widgets/choice.cpp      |  2 +-
 samples/widgets/combobox.cpp    |  4 ++--
 samples/widgets/gauge.cpp       |  2 +-
 samples/widgets/listbox.cpp     |  2 +-
 samples/widgets/notebook.cpp    |  2 +-
 samples/widgets/odcombobox.cpp  |  6 +++---
 samples/widgets/radiobox.cpp    |  2 +-
 samples/widgets/slider.cpp      | 10 +++++-----
 samples/widgets/spinbtn.cpp     | 10 +++++-----
 samples/widgets/textctrl.cpp    |  2 +-
 17 files changed, 36 insertions(+), 39 deletions(-)

diff --git a/samples/aui/auidemo.cpp b/samples/aui/auidemo.cpp
index affb1a9..0b51b9d 100644
--- a/samples/aui/auidemo.cpp
+++ b/samples/aui/auidemo.cpp
@@ -290,7 +290,7 @@ public:
         //vert->Add(1, 1, 1, wxEXPAND);
 
         wxBoxSizer* s1 = new wxBoxSizer(wxHORIZONTAL);
-        m_border_size = new wxSpinCtrl(this, ID_PaneBorderSize, wxString::Format(wxT("%d"), frame->GetDockArt()->GetMetric(wxAUI_DOCKART_PANE_BORDER_SIZE)), wxDefaultPosition, wxSize(50,20), wxSP_ARROW_KEYS, 0, 100, frame->GetDockArt()->GetMetric(wxAUI_DOCKART_PANE_BORDER_SIZE));
+        m_border_size = new wxSpinCtrl(this, ID_PaneBorderSize, wxString::FromInt(frame->GetDockArt()->GetMetric(wxAUI_DOCKART_PANE_BORDER_SIZE)), wxDefaultPosition, wxSize(50,20), wxSP_ARROW_KEYS, 0, 100, frame->GetDockArt()->GetMetric(wxAUI_DOCKART_PANE_BORDER_SIZE));
         s1->Add(1, 1, 1, wxEXPAND);
         s1->Add(new wxStaticText(this, wxID_ANY, wxT("Pane Border Size:")));
         s1->Add(m_border_size);
@@ -299,7 +299,7 @@ public:
         //vert->Add(s1, 0, wxEXPAND | wxLEFT | wxBOTTOM, 5);
 
         wxBoxSizer* s2 = new wxBoxSizer(wxHORIZONTAL);
-        m_sash_size = new wxSpinCtrl(this, ID_SashSize, wxString::Format(wxT("%d"), frame->GetDockArt()->GetMetric(wxAUI_DOCKART_SASH_SIZE)), wxDefaultPosition, wxSize(50,20), wxSP_ARROW_KEYS, 0, 100, frame->GetDockArt()->GetMetric(wxAUI_DOCKART_SASH_SIZE));
+        m_sash_size = new wxSpinCtrl(this, ID_SashSize, wxString::FromInt(frame->GetDockArt()->GetMetric(wxAUI_DOCKART_SASH_SIZE)), wxDefaultPosition, wxSize(50,20), wxSP_ARROW_KEYS, 0, 100, frame->GetDockArt()->GetMetric(wxAUI_DOCKART_SASH_SIZE));
         s2->Add(1, 1, 1, wxEXPAND);
         s2->Add(new wxStaticText(this, wxID_ANY, wxT("Sash Size:")));
         s2->Add(m_sash_size);
@@ -308,7 +308,7 @@ public:
         //vert->Add(s2, 0, wxEXPAND | wxLEFT | wxBOTTOM, 5);
 
         wxBoxSizer* s3 = new wxBoxSizer(wxHORIZONTAL);
-        m_caption_size = new wxSpinCtrl(this, ID_CaptionSize, wxString::Format(wxT("%d"), frame->GetDockArt()->GetMetric(wxAUI_DOCKART_CAPTION_SIZE)), wxDefaultPosition, wxSize(50,20), wxSP_ARROW_KEYS, 0, 100, frame->GetDockArt()->GetMetric(wxAUI_DOCKART_CAPTION_SIZE));
+        m_caption_size = new wxSpinCtrl(this, ID_CaptionSize, wxString::FromInt(frame->GetDockArt()->GetMetric(wxAUI_DOCKART_CAPTION_SIZE)), wxDefaultPosition, wxSize(50,20), wxSP_ARROW_KEYS, 0, 100, frame->GetDockArt()->GetMetric(wxAUI_DOCKART_CAPTION_SIZE));
         s3->Add(1, 1, 1, wxEXPAND);
         s3->Add(new wxStaticText(this, wxID_ANY, wxT("Caption Size:")));
         s3->Add(m_caption_size);
diff --git a/samples/dataview/mymodels.cpp b/samples/dataview/mymodels.cpp
index c18f900..74a5d84 100644
--- a/samples/dataview/mymodels.cpp
+++ b/samples/dataview/mymodels.cpp
@@ -444,7 +444,7 @@ void MyListModel::GetValueByRow( wxVariant &variant,
             break;
 
         case Col_Custom:
-            variant = wxString::Format("%d", row % 100);
+            variant = wxString::FromInt(row % 100);
             break;
 
         case Col_Max:
diff --git a/samples/grid/griddemo.cpp b/samples/grid/griddemo.cpp
index 20eb366..990d2a2 100644
--- a/samples/grid/griddemo.cpp
+++ b/samples/grid/griddemo.cpp
@@ -1578,10 +1578,10 @@ wxString BugsGridTable::GetValue( int row, int col )
     switch ( col )
     {
         case Col_Id:
-            return wxString::Format(wxT("%d"), gd.id);
+            return wxString::FromInt(gd.id);
 
         case Col_Priority:
-            return wxString::Format(wxT("%d"), gd.prio);
+            return wxString::FromInt(gd.prio);
 
         case Col_Opened:
             return gd.opened ? wxT("1") : wxT("0");
diff --git a/samples/splitter/splitter.cpp b/samples/splitter/splitter.cpp
index 1eae2c9..f51a834 100644
--- a/samples/splitter/splitter.cpp
+++ b/samples/splitter/splitter.cpp
@@ -389,8 +389,7 @@ void MyFrame::ToggleFlag(int flag, bool enable)
 
 void MyFrame::OnSetPosition(wxCommandEvent& WXUNUSED(event) )
 {
-    wxString str;
-    str.Printf( wxT("%d"), m_splitter->GetSashPosition());
+    wxString str = wxString::FromInt(m_splitter->GetSashPosition());
 #if wxUSE_TEXTDLG
     str = wxGetTextFromUser(wxT("Enter splitter position:"), wxT(""), str, this);
 #endif
@@ -411,8 +410,7 @@ void MyFrame::OnSetPosition(wxCommandEvent& WXUNUSED(event) )
 
 void MyFrame::OnSetMinSize(wxCommandEvent& WXUNUSED(event) )
 {
-    wxString str;
-    str.Printf( wxT("%d"), m_splitter->GetMinimumPaneSize());
+    wxString str = wxString::FromInt(m_splitter->GetMinimumPaneSize());
 #if wxUSE_TEXTDLG
     str = wxGetTextFromUser(wxT("Enter minimal size for panes:"), wxT(""), str, this);
 #endif
diff --git a/samples/stc/edit.cpp b/samples/stc/edit.cpp
index 0b3e198..4665232 100644
--- a/samples/stc/edit.cpp
+++ b/samples/stc/edit.cpp
@@ -760,7 +760,7 @@ EditProperties::EditProperties (Edit *edit,
     textinfo->Add (new wxStaticText (this, wxID_ANY, _("Lexer-ID: "),
                                      wxDefaultPosition, wxSize(80, wxDefaultCoord)),
                    0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxLEFT, 4);
-    text = wxString::Format (wxT("%d"), edit->GetLexer());
+    text = wxString::FromInt(edit->GetLexer());
     textinfo->Add (new wxStaticText (this, wxID_ANY, text),
                    0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxRIGHT, 4);
     wxString EOLtype = wxEmptyString;
@@ -787,25 +787,25 @@ EditProperties::EditProperties (Edit *edit,
     statistic->Add (new wxStaticText (this, wxID_ANY, _("Total lines"),
                                      wxDefaultPosition, wxSize(80, wxDefaultCoord)),
                     0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxLEFT, 4);
-    text = wxString::Format (wxT("%d"), edit->GetLineCount());
+    text = wxString::FromInt(edit->GetLineCount());
     statistic->Add (new wxStaticText (this, wxID_ANY, text),
                     0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxRIGHT, 4);
     statistic->Add (new wxStaticText (this, wxID_ANY, _("Total chars"),
                                      wxDefaultPosition, wxSize(80, wxDefaultCoord)),
                     0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxLEFT, 4);
-    text = wxString::Format (wxT("%d"), edit->GetTextLength());
+    text = wxString::FromInt(edit->GetTextLength());
     statistic->Add (new wxStaticText (this, wxID_ANY, text),
                     0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxRIGHT, 4);
     statistic->Add (new wxStaticText (this, wxID_ANY, _("Current line"),
                                      wxDefaultPosition, wxSize(80, wxDefaultCoord)),
                     0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxLEFT, 4);
-    text = wxString::Format (wxT("%d"), edit->GetCurrentLine());
+    text = wxString::FromInt(edit->GetCurrentLine());
     statistic->Add (new wxStaticText (this, wxID_ANY, text),
                     0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxRIGHT, 4);
     statistic->Add (new wxStaticText (this, wxID_ANY, _("Current pos"),
                                      wxDefaultPosition, wxSize(80, wxDefaultCoord)),
                     0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxLEFT, 4);
-    text = wxString::Format (wxT("%d"), edit->GetCurrentPos());
+    text = wxString::FromInt(edit->GetCurrentPos());
     statistic->Add (new wxStaticText (this, wxID_ANY, text),
                     0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxRIGHT, 4);
 
diff --git a/samples/text/text.cpp b/samples/text/text.cpp
index fa48fd7..e720aa8 100644
--- a/samples/text/text.cpp
+++ b/samples/text/text.cpp
@@ -1502,8 +1502,7 @@ void MyFrame::OnSetTooltipDelay(wxCommandEvent& WXUNUSED(event))
 {
     static long s_delay = 5000;
 
-    wxString delay;
-    delay.Printf( wxT("%ld"), s_delay);
+    wxString delay = wxString::FromLong(s_delay);
 
     delay = wxGetTextFromUser(wxT("Enter delay (in milliseconds)"),
                               wxT("Set tooltip delay"),
diff --git a/samples/widgets/bmpcombobox.cpp b/samples/widgets/bmpcombobox.cpp
index 8c00519..bbb6e15 100644
--- a/samples/widgets/bmpcombobox.cpp
+++ b/samples/widgets/bmpcombobox.cpp
@@ -815,7 +815,7 @@ void BitmapComboBoxWidgetsPage::OnComboText(wxCommandEvent& event)
 void BitmapComboBoxWidgetsPage::OnComboBox(wxCommandEvent& event)
 {
     long sel = event.GetInt();
-    m_textDelete->SetValue(wxString::Format(wxT("%ld"), sel));
+    m_textDelete->SetValue(wxString::FromLong(sel));
 
     wxLogMessage(wxT("BitmapCombobox item %ld selected"), sel);
 
diff --git a/samples/widgets/choice.cpp b/samples/widgets/choice.cpp
index 3215358..2f53bdc 100644
--- a/samples/widgets/choice.cpp
+++ b/samples/widgets/choice.cpp
@@ -424,7 +424,7 @@ void ChoiceWidgetsPage::OnUpdateUIAddSeveral(wxUpdateUIEvent& event)
 void ChoiceWidgetsPage::OnChoice(wxCommandEvent& event)
 {
     long sel = event.GetSelection();
-    m_textDelete->SetValue(wxString::Format(wxT("%ld"), sel));
+    m_textDelete->SetValue(wxString::FromLong(sel));
 
     wxLogMessage(wxT("Choice item %ld selected"), sel);
 }
diff --git a/samples/widgets/combobox.cpp b/samples/widgets/combobox.cpp
index ab99471..7d15777 100644
--- a/samples/widgets/combobox.cpp
+++ b/samples/widgets/combobox.cpp
@@ -583,7 +583,7 @@ void ComboboxWidgetsPage::OnButtonAddSeveral(wxCommandEvent& WXUNUSED(event))
 void ComboboxWidgetsPage::OnUpdateUIInsertionPointText(wxUpdateUIEvent& event)
 {
     if (m_combobox)
-        event.SetText( wxString::Format(wxT("%ld"), m_combobox->GetInsertionPoint()) );
+        event.SetText( wxString::FromLong(m_combobox->GetInsertionPoint()) );
 }
 
 void ComboboxWidgetsPage::OnUpdateUIResetButton(wxUpdateUIEvent& event)
@@ -669,7 +669,7 @@ void ComboboxWidgetsPage::OnComboTextPasted(wxClipboardTextEvent& event)
 void ComboboxWidgetsPage::OnComboBox(wxCommandEvent& event)
 {
     long sel = event.GetInt();
-    const wxString selstr = wxString::Format(wxT("%ld"), sel);
+    const wxString selstr = wxString::FromLong(sel);
     m_textDelete->SetValue(selstr);
     m_textCur->SetValue(selstr);
 
diff --git a/samples/widgets/gauge.cpp b/samples/widgets/gauge.cpp
index 87ad1b5..17af51f 100644
--- a/samples/widgets/gauge.cpp
+++ b/samples/widgets/gauge.cpp
@@ -470,7 +470,7 @@ void GaugeWidgetsPage::OnIndeterminateProgressTimer(wxTimerEvent& WXUNUSED(event
 
 void GaugeWidgetsPage::OnUpdateUICurValueText(wxUpdateUIEvent& event)
 {
-    event.SetText( wxString::Format(wxT("%d"), m_gauge->GetValue()));
+    event.SetText(wxString::FromInt(m_gauge->GetValue()));
 }
 
 #endif
diff --git a/samples/widgets/listbox.cpp b/samples/widgets/listbox.cpp
index fba1742..ea4b44f 100644
--- a/samples/widgets/listbox.cpp
+++ b/samples/widgets/listbox.cpp
@@ -608,7 +608,7 @@ void ListboxWidgetsPage::OnUpdateUIAddSeveral(wxUpdateUIEvent& event)
 void ListboxWidgetsPage::OnListbox(wxCommandEvent& event)
 {
     long sel = event.GetSelection();
-    m_textDelete->SetValue(wxString::Format(wxT("%ld"), sel));
+    m_textDelete->SetValue(wxString::FromLong(sel));
 
     if (event.IsSelection())
     {
diff --git a/samples/widgets/notebook.cpp b/samples/widgets/notebook.cpp
index c8d94e8..03b5257 100644
--- a/samples/widgets/notebook.cpp
+++ b/samples/widgets/notebook.cpp
@@ -510,7 +510,7 @@ void BookWidgetsPage::OnUpdateUINumPagesText(wxUpdateUIEvent& event)
 void BookWidgetsPage::OnUpdateUICurSelectText(wxUpdateUIEvent& event)
 {
     if(m_book)
-        event.SetText( wxString::Format(wxT("%d"), m_book->GetSelection()) );
+        event.SetText(wxString::FromInt(m_book->GetSelection()) );
 }
 
 void BookWidgetsPage::OnCheckOrRadioBox(wxCommandEvent& WXUNUSED(event))
diff --git a/samples/widgets/odcombobox.cpp b/samples/widgets/odcombobox.cpp
index e3e9486..c36e6e2 100644
--- a/samples/widgets/odcombobox.cpp
+++ b/samples/widgets/odcombobox.cpp
@@ -698,13 +698,13 @@ void ODComboboxWidgetsPage::OnTextButtonAll(wxCommandEvent& WXUNUSED(event))
 void ODComboboxWidgetsPage::OnUpdateUICurText(wxUpdateUIEvent& event)
 {
     if (m_combobox)
-        event.SetText( wxString::Format(wxT("%d"), m_combobox->GetSelection()) );
+        event.SetText(wxString::FromInt(m_combobox->GetSelection()) );
 }
 
 void ODComboboxWidgetsPage::OnUpdateUIInsertionPointText(wxUpdateUIEvent& event)
 {
     if (m_combobox)
-        event.SetText( wxString::Format(wxT("%ld"), m_combobox->GetInsertionPoint()) );
+        event.SetText( wxString::FromLong(m_combobox->GetInsertionPoint()) );
 }
 
 void ODComboboxWidgetsPage::OnUpdateUIResetButton(wxUpdateUIEvent& event)
@@ -776,7 +776,7 @@ void ODComboboxWidgetsPage::OnComboText(wxCommandEvent& event)
 void ODComboboxWidgetsPage::OnComboBox(wxCommandEvent& event)
 {
     long sel = event.GetInt();
-    m_textDelete->SetValue(wxString::Format(wxT("%ld"), sel));
+    m_textDelete->SetValue(wxString::FromLong(sel));
 
     wxLogMessage(wxT("OwnerDrawnCombobox item %ld selected"), sel);
 
diff --git a/samples/widgets/radiobox.cpp b/samples/widgets/radiobox.cpp
index 1becd09..eb743bb 100644
--- a/samples/widgets/radiobox.cpp
+++ b/samples/widgets/radiobox.cpp
@@ -440,7 +440,7 @@ void RadioWidgetsPage::OnRadioBox(wxCommandEvent& event)
     wxASSERT_MSG( sel == event_sel,
                   wxT("selection should be the same in event and radiobox") );
 
-    m_textCurSel->SetValue(wxString::Format(wxT("%d"), sel));
+    m_textCurSel->SetValue(wxString::FromInt(sel));
 }
 
 void RadioWidgetsPage::OnButtonRecreate(wxCommandEvent& WXUNUSED(event))
diff --git a/samples/widgets/slider.cpp b/samples/widgets/slider.cpp
index 890e9fd..a32f054 100644
--- a/samples/widgets/slider.cpp
+++ b/samples/widgets/slider.cpp
@@ -311,8 +311,8 @@ void SliderWidgetsPage::CreateContent()
     m_textMax = new wxTextCtrl(this, SliderPage_MaxText, wxEmptyString);
     sizerRow->Add(m_textMax, 1, wxLEFT | wxALIGN_CENTRE_VERTICAL, 5);
 
-    m_textMin->SetValue( wxString::Format(wxT("%d"), m_min) );
-    m_textMax->SetValue( wxString::Format(wxT("%d"), m_max) );
+    m_textMin->SetValue( wxString::FromInt(m_min) );
+    m_textMax->SetValue( wxString::FromInt(m_max) );
 
     sizerMiddle->Add(sizerRow, 0, wxALL | wxGROW, 5);
 
@@ -354,8 +354,8 @@ void SliderWidgetsPage::CreateContent()
     Reset();
     CreateSlider();
 
-    m_textLineSize->SetValue(wxString::Format(wxT("%d"), m_slider->GetLineSize()));
-    m_textPageSize->SetValue(wxString::Format(wxT("%d"), m_slider->GetPageSize()));
+    m_textLineSize->SetValue(wxString::FromInt(m_slider->GetLineSize()));
+    m_textPageSize->SetValue(wxString::FromInt(m_slider->GetPageSize()));
 
     // the 3 panes panes compose the window
     sizerTop->Add(sizerLeft, 0, wxGROW | (wxALL & ~wxLEFT), 10);
@@ -674,7 +674,7 @@ void SliderWidgetsPage::OnCheckOrRadioBox(wxCommandEvent& WXUNUSED(event))
 
 void SliderWidgetsPage::OnUpdateUICurValueText(wxUpdateUIEvent& event)
 {
-    event.SetText( wxString::Format(wxT("%d"), m_slider->GetValue()) );
+    event.SetText(wxString::FromInt(m_slider->GetValue()));
 }
 
 void SliderWidgetsPage::OnUpdateUIRadioSides(wxUpdateUIEvent& event)
diff --git a/samples/widgets/spinbtn.cpp b/samples/widgets/spinbtn.cpp
index e947ebe..17e0adb 100644
--- a/samples/widgets/spinbtn.cpp
+++ b/samples/widgets/spinbtn.cpp
@@ -303,8 +303,8 @@ void SpinBtnWidgetsPage::CreateContent()
     m_textMax = new wxTextCtrl(this, SpinBtnPage_MaxText, wxEmptyString);
     sizerRow->Add(m_textMax, 1, wxLEFT | wxALIGN_CENTRE_VERTICAL, 5);
 
-    m_textMin->SetValue( wxString::Format(wxT("%d"), m_min) );
-    m_textMax->SetValue( wxString::Format(wxT("%d"), m_max) );
+    m_textMin->SetValue( wxString::FromInt(m_min) );
+    m_textMax->SetValue( wxString::FromInt(m_max) );
 
     sizerMiddle->Add(sizerRow, 0, wxALL | wxGROW, 5);
 
@@ -404,13 +404,13 @@ void SpinBtnWidgetsPage::CreateSpin()
     m_spinbtn->SetRange(m_min, m_max);
 
     m_spinctrl = new wxSpinCtrl(this, SpinBtnPage_SpinCtrl,
-                                wxString::Format(wxT("%d"), val),
+                                wxString::FromInt(val),
                                 wxDefaultPosition, wxDefaultSize,
                                 flags | textFlags,
                                 m_min, m_max, val);
 
     m_spinctrldbl = new wxSpinCtrlDouble(this, SpinBtnPage_SpinCtrlDouble,
-                                         wxString::Format(wxT("%d"), val),
+                                         wxString::FromInt(val),
                                          wxDefaultPosition, wxDefaultSize,
                                          flags | textFlags,
                                          m_min, m_max, val, 0.1);
@@ -543,7 +543,7 @@ void SpinBtnWidgetsPage::OnCheckOrRadioBox(wxCommandEvent& WXUNUSED(event))
 
 void SpinBtnWidgetsPage::OnUpdateUICurValueText(wxUpdateUIEvent& event)
 {
-    event.SetText( wxString::Format(wxT("%d"), m_spinbtn->GetValue()));
+    event.SetText(wxString::FromInt(m_spinbtn->GetValue()));
 }
 
 void SpinBtnWidgetsPage::OnSpinBtn(wxSpinEvent& event)
diff --git a/samples/widgets/textctrl.cpp b/samples/widgets/textctrl.cpp
index 311ca4d..c21bdbd 100644
--- a/samples/widgets/textctrl.cpp
+++ b/samples/widgets/textctrl.cpp
@@ -765,7 +765,7 @@ void TextWidgetsPage::OnIdle(wxIdleEvent& WXUNUSED(event))
     if ( m_textLineLast )
     {
         m_textLineLast->SetValue(
-                wxString::Format(wxT("%d"), m_text->GetNumberOfLines()) );
+                wxString::FromInt(m_text->GetNumberOfLines()) );
     }
 
     if ( m_textSelFrom && m_textSelTo )

diff --git a/samples/grid/griddemo.cpp b/samples/grid/griddemo.cpp
index aa6f348e5e..b6a44bc6ca 100644
--- a/samples/grid/griddemo.cpp
+++ b/samples/grid/griddemo.cpp
@@ -41,7 +41,8 @@
 #ifndef wxHAS_IMAGES_IN_RESOURCES
     #include "../sample.xpm"
 #endif
-
+#include <cinttypes>
+#include <map>
 // Custom renderer that renders column header cells without borders and in
 // italic
 class CustomColumnHeaderRenderer : public wxGridColumnHeaderRenderer
@@ -146,8 +147,9 @@ bool GridApp::OnInit()
 // ----------------------------------------------------------------------------
 // GridFrame
 // ----------------------------------------------------------------------------
-
+#define ID_SHOW_BUG wxID_HIGHEST
 wxBEGIN_EVENT_TABLE( GridFrame, wxFrame )
+    EVT_BUTTON(ID_SHOW_BUG, GridFrame::OnButton)
     EVT_MENU( ID_TOGGLEROWLABELS,  GridFrame::ToggleRowLabels )
     EVT_MENU( ID_TOGGLECOLLABELS,  GridFrame::ToggleColLabels )
     EVT_MENU( ID_TOGGLEEDIT, GridFrame::ToggleEditing )
@@ -429,7 +431,25 @@ GridFrame::GridFrame()
 
     m_addToSel = false;
 
-    grid = new wxGrid( this,
+    wxBoxSizer * const topSizer = new wxBoxSizer(wxVERTICAL);
+
+    m_pushToTriggerBugBtn = new wxButton(this, ID_SHOW_BUG, "Show bug");
+    topSizer->Add(m_pushToTriggerBugBtn);
+
+    m_nb = new wxNotebook(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, 0);
+
+    m_viewPanel = new wxPanel(m_nb);
+    wxBoxSizer* const viewPanelSizer = new wxBoxSizer(wxVERTICAL);
+    m_text = new wxTextCtrl(m_viewPanel, -1);
+    viewPanelSizer->Add(m_text, 1, wxALL | wxEXPAND, 5);
+    m_viewPanel->SetSizer(viewPanelSizer);
+    m_nb->AddPage(m_viewPanel, wxT("TextCtrl"), false);
+
+
+    m_editPanel = new wxPanel(m_nb);
+    wxBoxSizer* const editPanelSizer = new wxBoxSizer(wxVERTICAL);
+
+    grid = new wxGrid( m_editPanel,
                        wxID_ANY,
                        wxPoint( 0, 0 ),
                        wxSize( 400, 300 ) );
@@ -453,167 +473,19 @@ GridFrame::GridFrame()
 
     // this will create a grid and, by default, an associated grid
     // table for strings
-    grid->CreateGrid( 0, 0 );
-
-    grid->GetTable()->SetAttrProvider(new CustomColumnHeadersProvider());
-
-    grid->AppendRows(100);
-    grid->AppendCols(100);
-
-    int ir = grid->GetNumberRows();
-    grid->DeleteRows(0, ir);
-    grid->AppendRows(ir);
-
-    grid->SetRowSize( 0, 60 );
-    grid->SetCellValue( 0, 0, "Ctrl+Home\nwill go to\nthis cell" );
-
-    grid->SetCellValue( 0, 1, "A long piece of text to demonstrate wrapping." );
-    grid->SetCellRenderer(0 , 1, new wxGridCellAutoWrapStringRenderer);
-    grid->SetCellEditor( 0,  1 , new wxGridCellAutoWrapStringEditor);
-
-    grid->SetCellValue( 0, 2, "Blah" );
-    grid->SetCellValue( 0, 3, "Read only" );
-    grid->SetReadOnly( 0, 3 );
-
-    grid->SetCellValue( 0, 4, "Can veto edit this cell" );
-
-    grid->SetColSize(10, 150);
-    wxString longtext = "abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\n\n";
-    longtext += "With tabs :\n";
-    longtext += "Home,\t\thome\t\t\tagain\n";
-    longtext += "Long word at start :\n";
-    longtext += "ILikeToBeHereWhen I can\n";
-    longtext += "Long word in the middle :\n";
-    longtext += "When IComeHome,ColdAnd tired\n";
-    longtext += "Long last word :\n";
-    longtext += "It's GoodToWarmMyBonesBesideTheFire";
-    grid->SetCellValue( 0, 10, longtext );
-    grid->SetCellRenderer(0 , 10, new wxGridCellAutoWrapStringRenderer);
-    grid->SetCellEditor( 0,  10 , new wxGridCellAutoWrapStringEditor);
-    grid->SetCellValue( 0, 11, "K1 cell editor blocker" );
-
-    grid->SetCellValue( 0, 5, "Press\nCtrl+arrow\nto skip over\ncells" );
-
-    grid->SetRowSize( 99, 60 );
-    grid->SetCellValue(98, 98, "Test background colour setting");
-    grid->SetCellBackgroundColour(98, 99, wxColour(255, 127, 127));
-    grid->SetCellBackgroundColour(99, 98, wxColour(255, 127, 127));
-    grid->SetCellValue( 99, 99, "Ctrl+End\nwill go to\nthis cell" );
-    grid->SetCellValue( 1, 0, "This default cell will overflow into neighboring cells, but not if you turn overflow off.");
-
-    grid->SetCellTextColour(1, 2, *wxRED);
-    grid->SetCellBackgroundColour(1, 2, *wxGREEN);
-
-    grid->SetCellValue( 1, 4, "I'm in the middle");
-
-    grid->SetCellValue(2, 2, "red");
-
-    grid->SetCellTextColour(2, 2, *wxRED);
-    grid->SetCellValue(3, 3, "green on grey");
-    grid->SetCellTextColour(3, 3, *wxGREEN);
-    grid->SetCellBackgroundColour(3, 3, *wxLIGHT_GREY);
-
-    grid->SetCellValue(4, 4, "a weird looking cell");
-    grid->SetCellAlignment(4, 4, wxALIGN_CENTRE, wxALIGN_CENTRE);
-    grid->SetCellRenderer(4, 4, new MyGridCellRenderer);
-
-    grid->SetCellRenderer(3, 0, new wxGridCellBoolRenderer);
-    grid->SetCellEditor(3, 0, new wxGridCellBoolEditor);
-    grid->SetCellBackgroundColour(3, 0, wxColour(255, 127, 127));
-
-    wxGridCellAttr *attr;
-    attr = new wxGridCellAttr;
-    attr->SetTextColour(*wxBLUE);
-    grid->SetColAttr(5, attr);
-    attr = new wxGridCellAttr;
-    attr->SetBackgroundColour(*wxRED);
-    grid->SetRowAttr(5, attr);
-
-    grid->SetCellValue(2, 4, "a wider column");
-    grid->SetColSize(4, 120);
-    grid->SetColMinimalWidth(4, 120);
-
-    grid->SetCellTextColour(5, 8, *wxGREEN);
-    grid->SetCellValue(5, 8, "Bg from row attr\nText col from cell attr");
-    grid->SetCellValue(5, 5, "Bg from row attr Text col from col attr and this text is so long that it covers over many many empty cells but is broken by one that isn't");
-
-    // Some numeric columns with different formatting.
-    grid->SetColFormatFloat(6);
-    grid->SetCellValue(0, 6, "Default\nfloat format");
-    grid->SetCellValue(1, 6, wxString::Format("%g", 3.1415));
-    grid->SetCellValue(2, 6, wxString::Format("%g", 1415.0));
-    grid->SetCellValue(3, 6, wxString::Format("%g", 12345.67890));
-
-    grid->SetColFormatFloat(7, 6, 2);
-    grid->SetCellValue(0, 7, "Width 6\nprecision 2");
-    grid->SetCellValue(1, 7, wxString::Format("%g", 3.1415));
-    grid->SetCellValue(2, 7, wxString::Format("%g", 1415.0));
-    grid->SetCellValue(3, 7, wxString::Format("%g", 12345.67890));
-
-    grid->SetColFormatCustom(8,
-            wxString::Format("%s:%i,%i,%s", wxGRID_VALUE_FLOAT, -1, 4, "g"));
-    grid->SetCellValue(0, 8, "Compact\nformat");
-    grid->SetCellValue(1, 8, "31415e-4");
-    grid->SetCellValue(2, 8, "1415");
-    grid->SetCellValue(3, 8, "123456789e-4");
-
-    grid->SetColFormatNumber(9);
-    grid->SetCellValue(0, 9, "Integer\ncolumn");
-    grid->SetCellValue(1, 9, "17");
-    grid->SetCellValue(2, 9, "0");
-    grid->SetCellValue(3, 9, "-666");
-    grid->SetCellAlignment(3, 9, wxALIGN_CENTRE, wxALIGN_TOP);
-    grid->SetCellValue(3, 10, "<- This numeric cell should be centred");
-
-    grid->SetCellValue(0, 13, "Localized date\ncolumn");
-    grid->SetColFormatDate(13); // Localized by default.
-    grid->SetCellValue(1, 13, "Today");
-    grid->SetCellValue(0, 14, "ISO 8601 date\ncolumn");
-    grid->SetColFormatDate(14, "%Y-%m-%d"); // ISO 8601 date format.
-    grid->SetCellValue(1, 14, "Tomorrow");
-
-    grid->SetCellValue(13, 0, "Date cell:");
-    grid->SetCellValue(13, 1, "Today");
-    grid->SetCellRenderer(13, 1, new wxGridCellDateRenderer);
-    grid->SetCellEditor(13, 1, new wxGridCellDateEditor);
-    grid->SetCellValue(14, 0, "ISO date cell:");
-    grid->SetCellValue(14, 1, "Tomorrow");
-    grid->SetCellRenderer(14, 1, new wxGridCellDateRenderer("%Y-%m-%d"));
-    grid->SetCellEditor(14, 1, new wxGridCellDateEditor);
-
-    const wxString choices[] =
-    {
-        "Please select a choice",
-        "This takes two cells",
-        "Another choice",
-    };
-    grid->SetCellEditor(4, 2, new wxGridCellChoiceEditor(WXSIZEOF(choices), choices));
-    grid->SetCellSize(4, 2, 1, 2);
-    grid->SetCellValue(4, 2, choices[0]);
-    grid->SetCellOverflow(4, 2, false);
-
-    grid->SetCellSize(7, 1, 3, 4);
-    grid->SetCellAlignment(7, 1, wxALIGN_CENTRE, wxALIGN_CENTRE);
-    grid->SetCellValue(7, 1, "Big box!");
-
-    // create a separator-like row: it's grey and it's non-resizable
-    grid->DisableRowResize(10);
-    grid->SetRowSize(10, 30);
-    attr = new wxGridCellAttr;
-    attr->SetBackgroundColour(*wxLIGHT_GREY);
-    grid->SetRowAttr(10, attr);
-    grid->SetCellValue(10, 0, "You can't resize this row interactively -- try it");
-
-    // this does exactly nothing except testing that SetAttr() handles NULL
-    // attributes and does reference counting correctly
-    grid->SetAttr(11, 11, NULL);
-    grid->SetAttr(11, 11, new wxGridCellAttr);
-    grid->SetAttr(11, 11, NULL);
-
-    wxBoxSizer *topSizer = new wxBoxSizer( wxVERTICAL );
-    topSizer->Add( grid,
-                   1,
-                   wxEXPAND );
+    grid->CreateGrid( 0, 16 );
+    for (uint8_t i = 0U; i < 16U; ++i)
+    {
+        grid->SetColLabelValue(i, wxString::Format("%02" PRIX8, i));
+        grid->SetColSize(i, 24);
+    }
+    editPanelSizer->Add(grid, 1, wxALL | wxEXPAND, 5);
+    m_editPanel->SetSizer(editPanelSizer);
+    m_nb->AddPage(m_editPanel, wxT("Grid"), true);
+
+    topSizer->Add(m_nb, 1, wxEXPAND, 5);
+
+    m_nb->SetSelection(0);
 
 #if wxUSE_LOG
     topSizer->Add( logWin,
@@ -627,6 +499,35 @@ GridFrame::GridFrame()
     SetDefaults();
 }
 
+void GridFrame::OnButton(wxCommandEvent &event)
+{
+	uint8_t gridColIndex = 0U;
+	int rowIndex = 0;
+	uint32_t startAddress = 0;
+	std::map<uint32_t, uint8_t> memory;
+	for(int i = 0; i < 42; ++i)
+		memory[i]=i%0xFF;
+	for (std::map<uint32_t, uint8_t>::const_iterator it = memory.begin(); it != memory.end(); ++it)
+	{
+		if (gridColIndex == 0)
+		{
+			if(!grid->AppendRows( 1,/*updateLabels =*/ false))
+			{
+				return;
+			}
+			grid->SetRowLabelValue(rowIndex, wxString::Format("%08" PRIX32, startAddress));
+		}
+		grid->SetCellValue(rowIndex, gridColIndex, wxString::Format("%02" PRIX8, it->second));
+		++gridColIndex;
+		if (gridColIndex >= 16)
+		{
+			gridColIndex = 0U;
+			++rowIndex;
+			startAddress += 16U;
+			grid->SetRowLabelValue(rowIndex, wxString::Format("%08" PRIX32, startAddress));
+		}
+	}
+}
 
 GridFrame::~GridFrame()
 {
diff --git a/samples/grid/griddemo.h b/samples/grid/griddemo.h
index 9c7ab3e8f3..01fa9c0aed 100644
--- a/samples/grid/griddemo.h
+++ b/samples/grid/griddemo.h
@@ -11,6 +11,8 @@
 #ifndef griddemo_h
 #define griddemo_h
 
+#include <wx/notebook.h>
+
 class wxGrid;
 
 class GridApp : public wxApp
@@ -22,6 +24,11 @@ public:
 
 class GridFrame : public wxFrame
 {
+    wxButton* m_pushToTriggerBugBtn;
+    wxNotebook* m_nb;
+    wxPanel* m_viewPanel;
+    wxTextCtrl* m_text;
+    wxPanel* m_editPanel;
     wxGrid         *grid;
 #if wxUSE_LOG
     wxTextCtrl     *logWin;
@@ -29,7 +36,7 @@ class GridFrame : public wxFrame
 #endif // wxUSE_LOG
 
     void SetDefaults();
-
+    void OnButton(wxCommandEvent& );
     void ToggleRowLabels( wxCommandEvent& );
     void ToggleColLabels( wxCommandEvent& );
     void ToggleEditing( wxCommandEvent& );

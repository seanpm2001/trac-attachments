diff --git a/src/aui/auibar.cpp b/src/aui/auibar.cpp
index 2c5155a94b..77586a2793 100644
--- a/src/aui/auibar.cpp
+++ b/src/aui/auibar.cpp
@@ -70,12 +70,7 @@ wxBitmap wxAuiBitmapFromBits(const unsigned char bits[], int w, int h,
 
 static wxColor GetBaseColor()
 {
-
-#if defined( __WXMAC__ ) && wxOSX_USE_COCOA_OR_CARBON
-    wxColor baseColour = wxColour( wxMacCreateCGColorFromHITheme(kThemeBrushToolbarBackground));
-#else
     wxColor baseColour = wxSystemSettings::GetColour(wxSYS_COLOUR_3DFACE);
-#endif
 
     // the baseColour is too pale to use as our base colour,
     // so darken it a bit --
diff --git a/src/aui/dockart.cpp b/src/aui/dockart.cpp
index 0d4e2b7167..838f2d1114 100644
--- a/src/aui/dockart.cpp
+++ b/src/aui/dockart.cpp
@@ -156,11 +156,7 @@ wxString wxAuiChopText(wxDC& dc, const wxString& text, int max_size)
 
 wxAuiDefaultDockArt::wxAuiDefaultDockArt()
 {
-#if defined( __WXMAC__ ) && wxOSX_USE_COCOA_OR_CARBON
-    wxColor baseColour = wxColour( wxMacCreateCGColorFromHITheme(kThemeBrushToolbarBackground));
-#else
     wxColor baseColour = wxSystemSettings::GetColour(wxSYS_COLOUR_3DFACE);
-#endif
 
     // the baseColour is too pale to use as our base colour,
     // so darken it a bit --
@@ -183,7 +179,7 @@ wxAuiDefaultDockArt::wxAuiDefaultDockArt()
     m_activeCaptionTextColour = wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHTTEXT);
     m_inactiveCaptionColour = darker1Colour;
     m_inactiveCaptionGradientColour = baseColour.ChangeLightness(97);
-    m_inactiveCaptionTextColour = *wxBLACK;
+    m_inactiveCaptionTextColour = wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTIONTEXT);
 
     m_sashBrush = wxBrush(baseColour);
     m_backgroundBrush = wxBrush(baseColour);
@@ -379,22 +375,7 @@ wxFont wxAuiDefaultDockArt::GetFont(int id)
 
 void wxAuiDefaultDockArt::DrawSash(wxDC& dc, wxWindow *window, int orientation, const wxRect& rect)
 {
-#if defined( __WXMAC__ ) && wxOSX_USE_COCOA_OR_CARBON
-    wxUnusedVar(window);
-    wxUnusedVar(orientation);
-
-    HIRect splitterRect = CGRectMake( rect.x , rect.y , rect.width , rect.height );
-    CGContextRef cgContext ;
-    wxGCDCImpl *impl = (wxGCDCImpl*) dc.GetImpl();
-    cgContext = (CGContextRef) impl->GetGraphicsContext()->GetNativeContext() ;
-
-    HIThemeSplitterDrawInfo drawInfo ;
-    drawInfo.version = 0 ;
-    drawInfo.state = kThemeStateActive ;
-    drawInfo.adornment = kHIThemeSplitterAdornmentNone ;
-    HIThemeDrawPaneSplitter( &splitterRect , &drawInfo , cgContext , kHIThemeOrientationNormal ) ;
-
-#elif defined(__WXGTK__)
+#if defined(__WXGTK__)
     // clear out the rectangle first
     dc.SetPen(*wxTRANSPARENT_PEN);
     dc.SetBrush(m_sashBrush);
@@ -489,10 +470,10 @@ void wxAuiDefaultDockArt::DrawBorder(wxDC& dc, wxWindow* window, const wxRect& _
     {
         for (i = 0; i < border_width; ++i)
         {
-            dc.SetPen(*wxWHITE_PEN);
+            dc.SetPen(wxPen(wxSystemSettings::GetColour(wxSYS_COLOUR_3DLIGHT)));
             dc.DrawLine(rect.x, rect.y, rect.x+rect.width, rect.y);
             dc.DrawLine(rect.x, rect.y, rect.x, rect.y+rect.height);
-            dc.SetPen(m_borderPen);
+            dc.SetPen(wxPen(wxSystemSettings::GetColour(wxSYS_COLOUR_3DDKSHADOW)));
             dc.DrawLine(rect.x, rect.y+rect.height-1,
                         rect.x+rect.width, rect.y+rect.height-1);
             dc.DrawLine(rect.x+rect.width-1, rect.y,
diff --git a/src/aui/tabart.cpp b/src/aui/tabart.cpp
index 0a74494646..f7ac24c345 100644
--- a/src/aui/tabart.cpp
+++ b/src/aui/tabart.cpp
@@ -162,11 +162,7 @@ wxAuiGenericTabArt::wxAuiGenericTabArt()
     m_fixedTabWidth = 100;
     m_tabCtrlHeight = 0;
 
-#if defined( __WXMAC__ ) && wxOSX_USE_COCOA_OR_CARBON
-    wxColor baseColour = wxColour( wxMacCreateCGColorFromHITheme(kThemeBrushToolbarBackground));
-#else
     wxColor baseColour = wxSystemSettings::GetColour(wxSYS_COLOUR_3DFACE);
-#endif
 
     // the baseColour is too pale to use as our base colour,
     // so darken it a bit --
@@ -262,9 +258,20 @@ void wxAuiGenericTabArt::DrawBackground(wxDC& dc,
                                         const wxRect& rect)
 {
     // draw background
-
-    wxColor top_color       = m_baseColour.ChangeLightness(90);
-    wxColor bottom_color   = m_baseColour.ChangeLightness(170);
+    int topLightness = 90;
+    int bottomLightness = 170;
+    if ((m_baseColour.Red()) +
+        (m_baseColour.Green()) +
+        (m_baseColour.Blue()) < 128)
+    {
+        //dark mode, we cannot go very light
+        topLightness = 90;
+        bottomLightness = 110;
+    }
+    
+    
+    wxColor top_color       = m_baseColour.ChangeLightness(topLightness);
+    wxColor bottom_color   = m_baseColour.ChangeLightness(bottomLightness);
     wxRect r;
 
    if (m_flags &wxAUI_NB_BOTTOM)
@@ -415,7 +422,7 @@ void wxAuiGenericTabArt::DrawTab(wxDC& dc,
     int drawn_tab_yoff = border_points[1].y;
     int drawn_tab_height = border_points[0].y - border_points[1].y;
 
-
+    
     if (page.active)
     {
         // draw active tab
@@ -427,8 +434,17 @@ void wxAuiGenericTabArt::DrawTab(wxDC& dc,
         dc.DrawRectangle(r.x+1, r.y+1, r.width-1, r.height-4);
 
         // this white helps fill out the gradient at the top of the tab
-        dc.SetPen(*wxWHITE_PEN);
-        dc.SetBrush(*wxWHITE_BRUSH);
+        wxColor gradient = *wxWHITE;
+        if ((m_baseColour.Red()) +
+            (m_baseColour.Green()) +
+            (m_baseColour.Blue()) < 128)
+        {
+            //dark mode, we go darker
+            gradient = m_activeColour.ChangeLightness(70);
+        }
+        
+        dc.SetPen(wxPen(gradient));
+        dc.SetBrush(wxBrush(gradient));
         dc.DrawRectangle(r.x+2, r.y+1, r.width-3, r.height-4);
 
         // these two points help the rounded corners appear more antialiased
@@ -444,7 +460,7 @@ void wxAuiGenericTabArt::DrawTab(wxDC& dc,
         r.y -= 2;
 
         // draw gradient background
-        wxColor top_color = *wxWHITE;
+        wxColor top_color = gradient;
         wxColor bottom_color = m_activeColour;
         dc.GradientFillLinear(r, bottom_color, top_color, wxNORTH);
     }
@@ -466,6 +482,15 @@ void wxAuiGenericTabArt::DrawTab(wxDC& dc,
         // -- draw top gradient fill for glossy look
         wxColor top_color = m_baseColour;
         wxColor bottom_color = top_color.ChangeLightness(160);
+        if ((m_baseColour.Red()) +
+            (m_baseColour.Green()) +
+            (m_baseColour.Blue()) < 128)
+        {
+            //dark mode, we go darker
+            top_color = m_activeColour.ChangeLightness(70);
+            bottom_color = m_baseColour;
+        }
+        
         dc.GradientFillLinear(r, bottom_color, top_color, wxNORTH);
 
         r.y += r.height;
@@ -532,6 +557,14 @@ void wxAuiGenericTabArt::DrawTab(wxDC& dc,
                           tab_width - (text_offset-tab_x) - close_button_width);
 
     // draw tab text
+    if (page.active)
+    {
+        dc.SetTextForeground(wxSystemSettings::GetColour(wxSYS_COLOUR_CAPTIONTEXT));
+    }
+    else
+    {
+        dc.SetTextForeground(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTIONTEXT));
+    }
     dc.DrawText(draw_text,
                 text_offset,
                 drawn_tab_yoff + (drawn_tab_height)/2 - (texty/2) - 1);
diff --git a/src/osx/carbon/renderer.cpp b/src/osx/carbon/renderer.cpp
index f7cd333d38..f104054ad3 100644
--- a/src/osx/carbon/renderer.cpp
+++ b/src/osx/carbon/renderer.cpp
@@ -172,6 +172,10 @@ int wxRendererMac::DrawHeaderButton( wxWindow *win,
     wxHeaderSortIconType sortArrow,
     wxHeaderButtonParams* params )
 {
+    if ( wxPlatformInfo::Get().CheckOSVersion(10, 14) ) {
+        return wxRendererNative::GetGeneric().DrawHeaderButton(win, dc,  rect, flags, sortArrow, params);
+    }
+    
     const wxCoord x = rect.x;
     const wxCoord y = rect.y;
     const wxCoord w = rect.width;
@@ -373,7 +377,7 @@ void wxRendererMac::DrawSplitterSash( wxWindow *win,
             CGContextFillRect(cgContext,splitterRect);
         }
 
-        if ( win->HasFlag(wxSP_3DSASH) )
+        if ( win->HasFlag(wxSP_3DSASH) && !wxPlatformInfo::Get().CheckOSVersion(10, 14) )
         {
             HIThemeSplitterDrawInfo drawInfo;
             drawInfo.version = 0;
diff --git a/src/osx/cocoa/settings.mm b/src/osx/cocoa/settings.mm
index d59f9f7c0e..355b5f1d14 100644
--- a/src/osx/cocoa/settings.mm
+++ b/src/osx/cocoa/settings.mm
@@ -110,7 +110,7 @@ static int wxOSXGetUserDefault(NSString* key, int defaultValue)
         sysColor = [NSColor controlShadowColor];
         break;
     case wxSYS_COLOUR_3DLIGHT:
-        sysColor = [NSColor controlHighlightColor];
+        sysColor = [NSColor highlightColor];
         break;
     case wxSYS_COLOUR_HIGHLIGHTTEXT:
         sysColor = [NSColor selectedTextColor];
diff --git a/src/ribbon/art_aui.cpp b/src/ribbon/art_aui.cpp
index 7df2bfa702..4eb3144ba1 100644
--- a/src/ribbon/art_aui.cpp
+++ b/src/ribbon/art_aui.cpp
@@ -37,11 +37,7 @@
 wxRibbonAUIArtProvider::wxRibbonAUIArtProvider()
     : wxRibbonMSWArtProvider(false)
 {
-#if defined( __WXMAC__ ) && wxOSX_USE_COCOA_OR_CARBON
-    wxColor base_colour = wxColour( wxMacCreateCGColorFromHITheme(kThemeBrushToolbarBackground));
-#else
     wxColor base_colour = wxSystemSettings::GetColour(wxSYS_COLOUR_3DFACE);
-#endif
 
     SetColourScheme(base_colour,
         wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT),
diff --git a/src/stc/stc.cpp b/src/stc/stc.cpp
index 620e0b9197..b4602db8da 100644
--- a/src/stc/stc.cpp
+++ b/src/stc/stc.cpp
@@ -224,9 +224,8 @@ bool wxStyledTextCtrl::Create(wxWindow *parent,
     // STC doesn't support RTL languages at all
     SetLayoutDirection(wxLayout_LeftToRight);
 
-    // Rely on native double buffering by default, except under Mac where it
-    // doesn't work for some reason, see #18085.
-#if wxALWAYS_NATIVE_DOUBLE_BUFFER && !defined(__WXMAC__)
+    // Rely on native double buffering by default.
+#if wxALWAYS_NATIVE_DOUBLE_BUFFER
     SetBufferedDraw(false);
 #else
     SetBufferedDraw(true);

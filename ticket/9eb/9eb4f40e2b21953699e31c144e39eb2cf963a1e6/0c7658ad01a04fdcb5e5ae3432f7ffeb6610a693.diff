Index: include/wx/os2/control.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/os2/control.h,v
retrieving revision 1.22
diff -u -r1.22 control.h
--- include/wx/os2/control.h	2005/11/04 21:12:59	1.22
+++ include/wx/os2/control.h	2006/01/03 17:26:40
@@ -123,6 +123,7 @@
     int m_nYComp;

     wxString m_label;
+    WXDWORD  m_dwStyle;

     DECLARE_EVENT_TABLE()
 }; // end of wxControl
Index: include/wx/os2/gauge.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/os2/gauge.h,v
retrieving revision 1.11
diff -u -r1.11 gauge.h
--- include/wx/os2/gauge.h	2004/05/23 20:51:38	1.11
+++ include/wx/os2/gauge.h	2006/01/03 17:26:40
@@ -68,6 +68,10 @@
 protected:
     int                             m_nRangeMax;
     int                             m_nGaugePos;
+    int                             m_nWidth;
+    int                             m_nHeight;
+
+    wxSize wxGauge::DoGetBestSize(void) const;

 private:
     DECLARE_DYNAMIC_CLASS(wxGauge)
Index: include/wx/os2/radiobox.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/os2/radiobox.h,v
retrieving revision 1.20
diff -u -r1.20 radiobox.h
--- include/wx/os2/radiobox.h	2005/11/30 16:27:48	1.20
+++ include/wx/os2/radiobox.h	2006/01/03 17:26:42
@@ -126,22 +126,12 @@


            virtual int      GetCount(void) const;
-    inline         int      GetNumberOfRowsOrCols(void) const { return m_nNoRowsOrCols; }
-                   void     GetPosition( int* pnX
-                                        ,int* pnY
-                                       ) const;
     inline         WXHWND*  GetRadioButtons(void) const { return m_ahRadioButtons; }
                    int      GetSelection(void) const;
                    void     GetSize( int* pnX
                                     ,int* pnY
                                    ) const;
     inline         int      GetSizeFlags(void) const { return m_nSizeFlags; }
-                   void     AdjustButtons( int nX
-                                          ,int nY
-                                          ,int nWidth
-                                          ,int nHeight
-                                          ,int nSizeFlags
-                                         );
                    wxString GetString(int nIndex) const;
            virtual wxString GetStringSelection(void) const;

@@ -149,7 +139,6 @@
                    void     SetFocus(void);
            virtual bool     SetFont(const wxFont& rFont);
     inline         void     SetLabelFont(const wxFont& WXUNUSED(font)) {};
-    inline         void     SetNumberOfRowsOrCols(int nNum) { m_nNoRowsOrCols = nNum; }
                    void     SetSelection(int nIndex);
            virtual void     SetString( int             nNum
                                       ,const wxString& rsLabel
@@ -182,7 +171,6 @@
     int*    m_pnRadioWidth;  // for bitmaps
     int*    m_pnRadioHeight;
     int     m_nNoItems;
-    int     m_nNoRowsOrCols;
     int     m_nSelectedButton;
     int     m_nSizeFlags;

Index: src/generic/panelg.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/generic/panelg.cpp,v
retrieving revision 1.80
diff -u -r1.80 panelg.cpp
--- src/generic/panelg.cpp	2005/09/23 12:53:29	1.80
+++ src/generic/panelg.cpp	2006/01/03 17:27:51
@@ -150,7 +152,7 @@
         Layout();
 #if wxUSE_CONSTRAINTS
 #if defined(__WXPM__)
-    else
+/*    else
     {
         // Need to properly move child windows under OS/2

@@ -173,7 +175,7 @@
             pWinSwp->cx = vSwp.cx;
             pWinSwp->cy = vSwp.cy;
         }
-    }
+    }*/
 #endif
 #endif // wxUSE_CONSTRAINTS

Index: src/os2/choice.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/os2/choice.cpp,v
retrieving revision 1.32
diff -u -r1.32 choice.cpp
--- src/os2/choice.cpp	2005/09/27 17:05:20	1.32
+++ src/os2/choice.cpp	2006/01/03 17:27:59
@@ -94,18 +94,12 @@
     {
         Append(asChoices[i]);
     }
-    wxFont*                          pTextFont = new wxFont( 10
-                                                            ,wxMODERN
-                                                            ,wxNORMAL
-                                                            ,wxNORMAL
-                                                           );
-    SetFont(*pTextFont);
     SetSize( rPos.x
             ,rPos.y
             ,rSize.x
             ,rSize.y
            );
-    delete pTextFont;
     return true;
 } // end of wxChoice::Create

Index: src/os2/combobox.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/os2/combobox.cpp,v
retrieving revision 1.27
diff -u -r1.27 combobox.cpp
--- src/os2/combobox.cpp	2005/07/21 16:59:59	1.27
+++ src/os2/combobox.cpp	2006/01/03 17:28:00
@@ -156,10 +157,7 @@
     //
     SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_WINDOW));

-    SetFont(*wxSMALL_FONT);
-
-    int                             i;
-    for (i = 0; i < n; i++)
+    for (int i = 0; i < n; i++)
     {
         Append(asChoices[i]);
     }
Index: src/os2/control.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/os2/control.cpp,v
retrieving revision 1.39
diff -u -r1.39 control.cpp
--- src/os2/control.cpp	2005/11/04 21:13:02	1.39
+++ src/os2/control.cpp	2006/01/03 17:28:01
@@ -120,14 +120,20 @@
         zClass = WC_NOTEBOOK;
     else if ((wxStrcmp(zClassname, _T("CONTAINER"))) == 0)
         zClass = WC_CONTAINER;
-    dwStyle |= WS_VISIBLE;
-
+    if ((zClass == WC_STATIC) || (zClass == WC_BUTTON))
+        dwStyle |= DT_MNEMONIC;
+
+    m_dwStyle = dwStyle;
     m_label = rsLabel;
-    wxString label = ::wxPMTextToLabel(m_label);
+    wxString label;
+    if (dwStyle & DT_MNEMONIC)
+        label = ::wxPMTextToLabel(m_label);
+    else
+        label = m_label;

     m_hWnd = (WXHWND)::WinCreateWindow( (HWND)GetHwndOf(pParent) // Parent window handle
                                        ,(PSZ)zClass              // Window class
-                                       ,(PSZ)label.c_str()      // Initial Text
+                                       ,(PSZ)label.c_str()       // Initial Text
                                        ,(ULONG)dwStyle           // Style flags
                                        ,(LONG)0                  // X pos of origin
                                        ,(LONG)0                  // Y pos of origin
@@ -230,7 +236,11 @@
     if(rsLabel != m_label)
     {
         m_label = rsLabel;
-        wxString label = ::wxPMTextToLabel(rsLabel);
+        wxString label;
+        if (m_dwStyle & DT_MNEMONIC)
+            label = ::wxPMTextToLabel(m_label);
+        else
+            label = m_label;
         ::WinSetWindowText(GetHwnd(), (PSZ)label.c_str());
     }
 } // end of wxControl::SetLabel
Index: src/os2/dc.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/os2/dc.cpp,v
retrieving revision 1.74
diff -u -r1.74 dc.cpp
--- src/os2/dc.cpp	2005/10/27 16:01:44	1.74
+++ src/os2/dc.cpp	2006/01/03 17:28:07
@@ -1265,10 +1265,11 @@
 , wxCoord                           vY
 )
 {
     //
     // Need to copy back into a bitmap.  ::WinDrawPointer uses device coords
     // and I don't feel like figuring those out for scrollable windows so
-    // just convert to a bitmap then let the DoDrawBitmap routing display it
+    // just convert to a bitmap then let the DoDrawBitmap routine display it
     //
     if (rIcon.IsXpm())
     {
Index: src/os2/frame.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/os2/frame.cpp,v
retrieving revision 1.88
diff -u -r1.88 frame.cpp
--- src/os2/frame.cpp	2005/11/19 01:07:53	1.88
+++ src/os2/frame.cpp	2006/01/03 17:28:11
@@ -57,10 +57,6 @@
 extern wxMenu *wxCurrentPopupMenu;
 #endif

-extern void  wxAssociateWinWithHandle( HWND         hWnd
-                                      ,wxWindowOS2* pWin
-                                     );
-
 // ----------------------------------------------------------------------------
 // event tables
 // ----------------------------------------------------------------------------
@@ -129,7 +125,7 @@
                       const wxSize&   rSize,
                       long            lStyle,
                       const wxString& rsName )
-{
+{
     if (!wxTopLevelWindow::Create( pParent
                                   ,vId
                                   ,rsTitle
@@ -159,6 +155,7 @@
     wxTopLevelWindow::DoGetClientSize( pX
                                       ,pY
                                      );
+
     //
     // No need to use statusbar code as in WIN32 as the FORMATFRAME
     // window procedure ensures PM knows about the new frame client
@@ -258,7 +255,6 @@
     SWP                             vSwp;
     ERRORID                         vError;
     wxString                        sError;
-
     //
     // Native status bar positions itself
     //
@@ -566,7 +562,7 @@
         ::WinQueryWindowRect(HWND_DESKTOP, &vRect);
         nWidth = vRect.xRight - vRect.xLeft;
         //
-        // Rmember OS/2 is backwards!
+        // Remember OS/2 is backwards!
         //
         nHeight = vRect.yTop - vRect.yBottom;

Index: src/os2/gauge.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/os2/gauge.cpp,v
retrieving revision 1.20
diff -u -r1.20 gauge.cpp
--- src/os2/gauge.cpp	2005/04/27 01:19:40	1.20
+++ src/os2/gauge.cpp	2006/01/03 17:28:13
@@ -214,6 +214,8 @@
             ,nWidth
             ,nHeight
            );
+    m_nWidth  = nWidth;     // Save for GetBestSize
+    m_nHeight = nHeight;
     ::WinShowWindow((HWND)GetHWND(), TRUE);
     delete pTextFont;
     return TRUE;
@@ -304,4 +306,8 @@
     ::WinInvalidateRect(GetHwnd(), &vRect, FALSE);
 } // end of wxGauge::SetValue

+wxSize wxGauge::DoGetBestSize() const
+{
+    return wxSize(m_nWidth,m_nHeight);
+}

Index: src/os2/radiobox.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/os2/radiobox.cpp,v
retrieving revision 1.37
diff -u -r1.37 radiobox.cpp
--- src/os2/radiobox.cpp	2006/01/03 11:49:09	1.37
+++ src/os2/radiobox.cpp	2006/01/03 17:28:19
@@ -46,10 +46,11 @@
 // global vars
 // ---------------------------------------------------------------------------

-// the pointer to standard radio button wnd proc
 extern void  wxAssociateWinWithHandle( HWND         hWnd
                                       ,wxWindowOS2* pWin
                                      );
+extern void wxRemoveHandleAssociation( wxWindowOS2 *pWin );
+// the pointer to standard radio button & box wnd procs
 static WXFARPROC                    fnWndProcRadioBtn = NULL;
 static WXFARPROC                    fnWndProcRadioBox = NULL;

@@ -66,7 +67,6 @@
 {
     m_nSelectedButton = -1;
     m_nNoItems = 0;
-    m_nNoRowsOrCols = 0;
     m_ahRadioButtons = NULL;
     m_pnRadioWidth = NULL;
     m_pnRadioHeight = NULL;
@@ -76,11 +76,16 @@
 {
     m_isBeingDeleted = true;

+    if (m_hWnd)
+        wxRemoveHandleAssociation(this);
     if (m_ahRadioButtons)
     {
-        int                         i;
-        for (i = 0; i < m_nNoItems; i++)
+        for (int i = 0; i < m_nNoItems; i++)
+        {
+            wxWindow* pWin = wxFindWinFromHandle((WXHWND)m_ahRadioButtons[i]);
+            wxRemoveHandleAssociation(pWin);
             ::WinDestroyWindow((HWND)m_ahRadioButtons[i]);
+        }
         delete[] m_ahRadioButtons;
     }
     if (m_pnRadioWidth)
@@ -89,143 +94,6 @@
         delete[] m_pnRadioHeight;
 } // end of wxRadioBox::~wxRadioBox

-void wxRadioBox::AdjustButtons( int nX,
-                                int nY,
-                                int nWidth,
-                                int nHeight,
-                                int WXUNUSED(nSizeFlags) )
-{
-    wxSize vMaxSize;
-    int    nXOffset = nX;
-    int    nYOffset = nY + nHeight;
-    int    nCx1;
-    int    nCy1;
-    int    nStartX;
-    int    nStartY;
-    int    nMaxWidth;
-    int    nMaxHeight;
-    wxFont vFont = GetFont();
-
-    wxGetCharSize( m_hWnd
-                  ,&nCx1
-                  ,&nCy1
-                  ,&vFont
-                 );
-    vMaxSize   = GetMaxButtonSize();
-    nMaxWidth  = vMaxSize.x;
-    nMaxHeight = vMaxSize.y;
-
-    nXOffset += nCx1;
-    nYOffset -= (nMaxHeight + ((3*nCy1)/2));
-
-    nStartX = nXOffset;
-    nStartY = nYOffset;
-
-    for (int i = 0; i < m_nNoItems; i++)
-    {
-        //
-        // The last button in the row may be wider than the other ones as the
-        // radiobox may be wider than the sum of the button widths (as it
-        // happens, for example, when the radiobox label is very long)
-        //
-        bool                        bIsLastInTheRow;
-
-        if (m_windowStyle & wxRA_SPECIFY_COLS)
-        {
-            //
-            // Item is the last in its row if it is a multiple of the number of
-            // columns or if it is just the last item
-            //
-            int                     n = i + 1;
-
-            bIsLastInTheRow = ((n % GetMajorDim()) == 0) || (n == m_nNoItems);
-        }
-        else // winRA_SPECIFY_ROWS
-        {
-            //
-            // Item is the last in the row if it is in the last columns
-            //
-            bIsLastInTheRow = i >= (m_nNoItems/GetMajorDim()) * GetMajorDim();
-        }
-
-        //
-        // Is this the start of new row/column?
-        //
-        if (i && (i % GetMajorDim() == 0))
-        {
-            if (m_windowStyle & wxRA_SPECIFY_ROWS)
-            {
-
-                //
-                // Start of new column
-                //
-                nYOffset = nStartY;
-                nXOffset += nMaxWidth + nCx1;
-            }
-            else // start of new row
-            {
-                nXOffset = nStartX;
-                nYOffset -= nMaxHeight;
-                if (m_pnRadioWidth[0] > 0L)
-                    nYOffset -= nCy1/2;
-            }
-        }
-
-        int                         nWidthBtn;
-
-        if (bIsLastInTheRow)
-        {
-            //
-            // Make the button go to the end of radio box
-            //
-            nWidthBtn = nStartX + nWidth - nXOffset - (2 * nCx1);
-            if (nWidthBtn < nMaxWidth)
-                nWidthBtn = nMaxWidth;
-        }
-        else
-        {
-            //
-            // Normal button, always of the same size
-            //
-            nWidthBtn = nMaxWidth;
-        }
-
-        //
-        // Make all buttons of the same, maximal size - like this they
-        // cover the radiobox entirely and the radiobox tooltips are always
-        // shown (otherwise they are not when the mouse pointer is in the
-        // radiobox part not belonging to any radiobutton)
-        //
-        ::WinSetWindowPos( (HWND)m_ahRadioButtons[i]
-                          ,HWND_BOTTOM
-                          ,(LONG)nXOffset
-                          ,(LONG)nYOffset
-                          ,(LONG)nWidthBtn
-                          ,(LONG)nMaxHeight
-                          ,SWP_ZORDER | SWP_SIZE | SWP_MOVE | SWP_SHOW
-                         );
-        //
-        // Where do we put the next button?
-        //
-        if (m_windowStyle & wxRA_SPECIFY_ROWS)
-        {
-            //
-            // Below this one
-            //
-            nYOffset -= nMaxHeight;
-            if (m_pnRadioWidth[0] > 0)
-                nYOffset -= nCy1/2;
-        }
-        else
-        {
-            //
-            // To the right of this one
-            //
-            nXOffset += nWidthBtn + nCx1;
-        }
-    }
-} // end of wxRadioBox::AdjustButtons
-
 void wxRadioBox::Command (
   wxCommandEvent&                   rEvent
 )
@@ -284,6 +152,7 @@
 {
     wxColour                        vColour;
     LONG                            lColor;
+    HWND                            hWndParent = GetHwndOf(pParent);

     vColour.Set(wxString(wxT("BLACK")));
     m_backgroundColour = pParent->GetBackgroundColour();
@@ -317,12 +186,7 @@
     //
     m_nNoItems = nNum;
     SetMajorDim(nMajorDim == 0 ? nNum : nMajorDim, lStyle);
-    m_nNoRowsOrCols = nMajorDim;
-
-    //
-    // Some radio boxes test consecutive id.
-    //
-    (void)NewControlId();
+
     m_ahRadioButtons = new WXHWND[nNum];
     m_pnRadioWidth   = new int[nNum];
     m_pnRadioHeight  = new int[nNum];
@@ -330,43 +194,48 @@
     for (int i = 0; i < nNum; i++)
     {
         m_pnRadioWidth[i] = m_pnRadioHeight[i] = -1;
-
-        long                        lStyleBtn = BS_AUTORADIOBUTTON | WS_TABSTOP | WS_VISIBLE;
-        int                         nNewId = NewControlId();

+        int  nNewId = NewControlId();
+        long lStyleBtn = BS_AUTORADIOBUTTON | WS_VISIBLE;
         if (i == 0)
-            lStyleBtn |= WS_GROUP;
+            lStyleBtn |= WS_GROUP | WS_TABSTOP;

-        HWND                        hWndBtn = (WXHWND)::WinCreateWindow ( GetHwndOf(pParent)
-                                                                         ,WC_BUTTON
-                                                                         ,::wxPMTextToLabel(asChoices[i])
-                                                                         ,lStyleBtn
-                                                                         ,0, 0, 0, 0
-                                                                         ,GetWinHwnd(pParent)
-                                                                         ,HWND_BOTTOM
-                                                                         ,(HMENU)nNewId
-                                                                         ,NULL
-                                                                         ,NULL
-                                                                        );
+        wxString sLabel = ::wxPMTextToLabel(asChoices[i]);
+
+        HWND hWndBtn = ::WinCreateWindow ( hWndParent,
+                                           WC_BUTTON,
+                                           sLabel.c_str(),
+                                           lStyleBtn,
+                                           0, 0, 0, 0,
+                                           hWndParent,
+                                           HWND_BOTTOM,
+                                           (HMENU)nNewId,
+                                           NULL,
+                                           NULL
+                                         );
+        if (!hWndBtn)
+        {
+            return false;
+        }
         lColor = (LONG)vColour.GetPixel();
         ::WinSetPresParam( hWndBtn
                           ,PP_FOREGROUNDCOLOR
                           ,sizeof(LONG)
                           ,(PVOID)&lColor
                          );
-        lColor = (LONG)m_backgroundColour.GetPixel();

+        lColor = (LONG)m_backgroundColour.GetPixel();
         ::WinSetPresParam( hWndBtn
                           ,PP_BACKGROUNDCOLOR
                           ,sizeof(LONG)
                           ,(PVOID)&lColor
                          );
-        if (!hWndBtn)
-        {
-            return false;
-        }
         m_ahRadioButtons[i] = (WXHWND)hWndBtn;
         SubclassRadioButton((WXHWND)hWndBtn);
         wxAssociateWinWithHandle(hWndBtn, this);
@@ -378,22 +247,22 @@
     //
     // Create a dummy control to end the group.
     //
-    (void)::WinCreateWindow ( GetHwndOf(pParent),
+    (void)::WinCreateWindow ( hWndParent,
                               WC_BUTTON,
                               "",
                               WS_GROUP,
                               0, 0, 0, 0,
-                              GetWinHwnd(pParent),
+                              hWndParent,
                               HWND_TOP,
                               (HMENU)NewControlId(),
                               NULL,
                               NULL
                             );
-    SetFont(*wxSMALL_FONT);
     fnWndProcRadioBox = (WXFARPROC)::WinSubclassWindow( GetHwnd()
                                                        ,(PFNWP)wxRadioBoxWndProc
                                                       );
     ::WinSetWindowULong(GetHwnd(), QWL_USER, (ULONG)this);
+
     lColor = (LONG)vColour.GetPixel();
     ::WinSetPresParam( m_hWnd
                       ,PP_FOREGROUNDCOLOR
@@ -421,7 +290,7 @@
 wxSize wxRadioBox::DoGetBestSize() const
 {
     return (GetTotalButtonSize(GetMaxButtonSize()));
-} // end of WinGuiBase_CRadioBox::DoGetBestSize
+} // end of wxRadioBox::DoGetBestSize

 void wxRadioBox::DoSetSize(
   int                               nX
@@ -431,6 +300,9 @@
 , int                               nSizeFlags
 )
 {
+    //
+    // Input parameters assume wxWidgets coordinate system
+    //
     int                             nCurrentX;
     int                             nCurrentY;
     int                             nWidthOld;
@@ -504,23 +376,22 @@
         else
             nHeight = nHeightOld;
     }
-
-    wxWindowOS2*                    pParent = (wxWindowOS2*)GetParent();

+    //
+    // Now convert to OS/2 coordinate system
+    //
+    wxWindowOS2* pParent = (wxWindowOS2*)GetParent();
     if (pParent)
     {
-        int                         nOS2Height = GetOS2ParentHeight(pParent);
-
-        nYy = nOS2Height - (nYy + nHeight);
-        nYOffset = nYy + nHeight;
+        nYy = GetOS2ParentHeight(pParent) - nYy - nHeight;
     }
     else
     {
         RECTL                       vRect;
-
         ::WinQueryWindowRect(HWND_DESKTOP, &vRect);
-        nYy = vRect.yTop - (nYy + nHeight);
+        nYy = vRect.yTop - nYy - nHeight;
     }
+    nYOffset = nYy + nHeight;
     ::WinSetWindowPos( GetHwnd()
                       ,HWND_TOP
                       ,(LONG)nXx
@@ -582,7 +453,6 @@
         {
             if (m_windowStyle & wxRA_SPECIFY_ROWS)
             {
-
                 //
                 // Start of new column
                 //
@@ -724,53 +594,6 @@
     return maxsize;
 } // end of wxRadioBox::GetMaxButtonSize

-void wxRadioBox::GetPosition( int* pnX,
-                              int* WXUNUSED(pnY) ) const
-{
-    wxWindowOS2*                    pParent = GetParent();
-    RECT                            vRect = { -1, -1, -1, -1 };
-    POINTL                          vPoint;
-    int                             i;
-
-    for (i = 0; i < m_nNoItems; i++)
-        wxFindMaxSize( m_ahRadioButtons[i]
-                      ,&vRect
-                     );
-    if (m_hWnd)
-        wxFindMaxSize( m_hWnd
-                      ,&vRect
-                     );
-
-    //
-    // Since we now have the absolute screen coords, if there's a parent we
-    // must subtract its top left corner
-    //
-    vPoint.x = vRect.xLeft;
-    vPoint.y = vRect.yTop;
-    if (pParent)
-    {
-        SWP                             vSwp;
-
-        ::WinQueryWindowPos((HWND)pParent->GetHWND(), &vSwp);
-        vPoint.x = vSwp.x;
-        vPoint.y = vSwp.y;
-    }
-
-    //
-    // We may be faking the client origin. So a window that's really at (0, 30)
-    // may appear (to wxWin apps) to be at (0, 0).
-    //
-    if (GetParent())
-    {
-        wxPoint                     vPt(GetParent()->GetClientAreaOrigin());
-
-        vPoint.x = vPt.x;
-        vPoint.y = vPt.y;
-    }
-    if (pnX)
-        *pnX = vPoint.y;
-} // end of wxRadioBox::GetPosition
-
 // Get single selection, for single choice list items
 int wxRadioBox::GetSelection() const
 {
@@ -780,7 +603,6 @@
 void wxRadioBox::GetSize( int* pnWidth, int* pnHeight ) const
 {
     RECT                            vRect;
-    int                             i;

     vRect.xLeft   = -1;
     vRect.xRight  = -1;
@@ -792,7 +614,7 @@
                       ,&vRect
                      );

-    for (i = 0; i < m_nNoItems; i++)
+    for (int i = 0; i < m_nNoItems; i++)
         wxFindMaxSize( m_ahRadioButtons[i]
                       ,&vRect
                      );
@@ -808,6 +630,7 @@
   int                               nNum
 ) const
 {
+    wxCHECK_MSG( IsValid(nNum),wxString("") , wxT("invalid radiobox index") );
     return wxGetWindowText(m_ahRadioButtons[nNum]);
 } // end of wxRadioBox::GetString

@@ -887,7 +710,6 @@
         if (wId == GetId())
             return true;

-
         for (int i = 0; i < m_nNoItems; i++)
         {
             if (wId == wxGetWindowId(m_ahRadioButtons[i]))
@@ -1105,11 +926,11 @@

                         if (bProcessed)
                         {
-                            int             nSelOld = pRadiobox->GetSelection();
-                            int             nSelNew = pRadiobox->GetNextItem( nSelOld
-                                                                             ,eDir
-                                                                             ,pRadiobox->GetWindowStyleFlag()
-                                                                            );
+                            int nSelOld = pRadiobox->GetSelection();
+                            int nSelNew = pRadiobox->GetNextItem( nSelOld
+                                                                 ,eDir
+                                                                 ,pRadiobox->GetWindowStyleFlag()
+                                                                );

                             if (nSelNew != nSelOld)
                             {
Index: src/os2/slider.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/os2/slider.cpp,v
retrieving revision 1.30
diff -u -r1.30 slider.cpp
--- src/os2/slider.cpp	2006/01/02 16:17:43	1.30
+++ src/os2/slider.cpp	2006/01/03 17:28:22
@@ -495,6 +495,7 @@

     if (nOS2Height < 0)
         nOS2Height = 20;
+    CacheBestSize(wxSize(nWidth,nOS2Height));

     if (pParent)
     {
Index: src/os2/spinbutt.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/os2/spinbutt.cpp,v
retrieving revision 1.21
diff -u -r1.21 spinbutt.cpp
--- src/os2/spinbutt.cpp	2005/09/23 12:55:32	1.21
+++ src/os2/spinbutt.cpp	2006/01/03 17:28:23
@@ -117,7 +117,8 @@

     ::WinQueryWindowPos(m_hWnd, &vSwp);
     SetXComp(vSwp.x);
-    SetYComp(vSwp.y);
+    SetYComp(vSwp.y-5); // compensate for the associated TextControl border
+
     wxFont*                          pTextFont = new wxFont( 10
                                                             ,wxMODERN
                                                             ,wxNORMAL
@@ -126,11 +127,12 @@
     SetFont(*pTextFont);
     //
     // For OS/2 we want to hide the text portion so we can substitute an
-    // independent text ctrl in its place.  10 device units does this
+    // independent text ctrl in its place.
+    // Therefore we must override any user given width with our best guess.
     //
-    SetSize( nX
-            ,nY
-            ,10L
+    SetSize( nX - GetXComp()
+            ,nY - GetYComp()
+            ,nWidth
             ,nHeight
            );
     wxAssociateWinWithHandle( m_hWnd
@@ -158,11 +160,11 @@
 wxSize wxSpinButton::DoGetBestSize() const
 {
     //
-    // OS/2 PM does not really have system metrics so we'll just set  it to
-    // 24x20 which is the size of the buttons and the borders.
+    // OS/2 PM does not really have system metrics so we'll just set it to
+    // 26x20 which is the size of the buttons and the borders.
     // Also we have no horizontal spin buttons.
     //
-    wxSize best(24,20);
+    wxSize best(26,20);
     return best;
 } // end of wxSpinButton::DoGetBestSize

Index: src/os2/statbmp.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/os2/statbmp.cpp,v
retrieving revision 1.21
diff -u -r1.21 statbmp.cpp
--- src/os2/statbmp.cpp	2005/09/23 12:55:32	1.21
+++ src/os2/statbmp.cpp	2006/01/03 17:28:24
@@ -24,7 +24,7 @@
 #include <stdio.h>

 // ---------------------------------------------------------------------------
-// macors
+// macros
 // ---------------------------------------------------------------------------

 IMPLEMENT_DYNAMIC_CLASS(wxStaticBitmap, wxControl)
@@ -121,7 +121,10 @@
     }
     wxCHECK_MSG( m_hWnd, FALSE, wxT("Failed to create static bitmap") );
     m_pImage = ConvertImage(rBitmap);
-    m_pImage->SetHandle((WXHWND)::WinSendMsg(m_hWnd, SM_QUERYHANDLE, (MPARAM)0, (MPARAM)0));
+    ::WinSendMsg(   m_hWnd,
+                    SM_SETHANDLE,
+                    MPFROMHWND(rBitmap.GetHandle()),
+                    (MPARAM)0);

     // Subclass again for purposes of dialog editing mode
     SubclassWin(m_hWnd);
@@ -193,13 +196,15 @@

     GetPosition(&nX, &nY);
     GetSize(&nWidth, &nHeight);
+    // Convert to OS/2 coordinate system
+    nY = wxWindow::GetOS2ParentHeight(GetParent()) - nY - nHeight;

     RECTL                           vRect;

     vRect.xLeft   = nX;
-    vRect.yTop    = nY;
+    vRect.yTop    = nY + nHeight;
     vRect.xRight  = nX + nWidth;
-    vRect.yBottom = nY + nHeight;
+    vRect.yBottom = nY;

     ::WinInvalidateRect(GetHwndOf(GetParent()), &vRect, TRUE);
 }
Index: src/os2/statbox.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/os2/statbox.cpp,v
retrieving revision 1.19
diff -u -r1.19 statbox.cpp
--- src/os2/statbox.cpp	2005/11/27 21:30:40	1.19
+++ src/os2/statbox.cpp	2006/01/03 17:28:24
@@ -63,26 +63,22 @@
     // To be transparent we should have the same colour as the parent as well
     //
     SetBackgroundColour(GetParent()->GetBackgroundColour());
-
-    wxColour                        vColour;

+    wxColour vColour;
     vColour.Set(wxString(wxT("BLACK")));
-
-    LONG                            lColor = (LONG)vColour.GetPixel();
-
+    LONG lColor = (LONG)vColour.GetPixel();
     ::WinSetPresParam( m_hWnd
                       ,PP_FOREGROUNDCOLOR
                       ,sizeof(LONG)
                       ,(PVOID)&lColor
                      );
-    lColor = (LONG)m_backgroundColour.GetPixel();

+    lColor = (LONG)m_backgroundColour.GetPixel();
     ::WinSetPresParam( m_hWnd
                       ,PP_BACKGROUNDCOLOR
                       ,sizeof(LONG)
                       ,(PVOID)&lColor
                      );
-    SetFont(*wxSMALL_FONT);
     SetSize( rPos.x
             ,rPos.y
             ,rSize.x
Index: src/os2/stattext.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/os2/stattext.cpp,v
retrieving revision 1.22
diff -u -r1.22 stattext.cpp
--- src/os2/stattext.cpp	2005/09/23 12:55:33	1.22
+++ src/os2/stattext.cpp	2006/01/03 17:28:26
@@ -56,7 +56,10 @@

     long                            lSstyle = 0L;

-    lSstyle = WS_VISIBLE | SS_TEXT | DT_VCENTER | DT_MNEMONIC;
+    // Used to have DT_VCENTER but that doesn't work correctly with
+    // multiline strings and DT_WORDBREAK. Accept a reasonable
+    // compromise for now
+    lSstyle = WS_VISIBLE | SS_TEXT | DT_WORDBREAK | DT_MNEMONIC;
     if (m_windowStyle & wxALIGN_CENTRE)
         lSstyle |= DT_CENTER;
     else if (m_windowStyle & wxALIGN_RIGHT)
Index: src/os2/toplevel.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/os2/toplevel.cpp,v
retrieving revision 1.42
diff -u -r1.42 toplevel.cpp
--- src/os2/toplevel.cpp	2006/01/02 21:26:13	1.42
+++ src/os2/toplevel.cpp	2006/01/03 17:28:28
@@ -264,7 +264,6 @@
 WXHWND wxTopLevelWindowOS2::OS2GetParent() const
 {
     HWND                            hWndParent = NULL;
-
     //
     // For the frames without wxFRAME_FLOAT_ON_PARENT style we should use NULL
     // parent HWND or it would be always on top of its parent which is not what
@@ -310,7 +309,6 @@
                                         const wxSize&   rSize )
 {
     wxWindow*                       pParent = GetParent();
-
     //
     // For the dialogs without wxDIALOG_NO_PARENT style, use the top level
     // app window as parent - this avoids creating modal dialogs without
@@ -410,7 +408,7 @@
     }
     SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_APPWORKSPACE));

-    LONG                            lColor = (LONG)m_backgroundColour.GetPixel();
+    LONG lColor = (LONG)m_backgroundColour.GetPixel();

     if (!::WinSetPresParam( m_hWnd
                            ,PP_BACKGROUNDCOLOR
@@ -421,6 +419,9 @@
         return false;
     }

+    // Convert to OS/2 coordinates
+    nY = GetOS2ParentHeight(pParent) - nY - nHeight;
+
     ::WinSetWindowPos( GetHwnd()
                       ,HWND_TOP
                       ,nX
@@ -505,7 +506,7 @@

     SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_APPWORKSPACE));

-    LONG                            lColor = (LONG)m_backgroundColour.GetPixel();
+    LONG lColor = (LONG)m_backgroundColour.GetPixel();

     if (!::WinSetPresParam( m_hWnd
                            ,PP_BACKGROUNDCOLOR
@@ -530,17 +531,50 @@
     // Now size everything.  If adding a menu the client will need to be resized.
     //

-    if (pParent)
+
+    if (!OS2GetCreateWindowCoords( rPos
+                                  ,rSize
+                                  ,nX
+                                  ,nY
+                                  ,nWidth
+                                  ,nHeight
+                                 ))
     {
-        nY = pParent->GetSize().y - (nY + nHeight);
+        nX = nWidth = (int)CW_USEDEFAULT;
     }
-    else
+
+    //
+    // We can't use CW_USEDEFAULT here as we're not calling CreateWindow()
+    // and passing CW_USEDEFAULT to MoveWindow() results in resizing the
+    // window to (0, 0) size which breaks quite a lot of things, e.g. the
+    // sizer calculation in wxSizer::Fit()
+    //
+    if (nWidth == (int)CW_USEDEFAULT)
     {
-        RECTL                   vRect;
+        //
+        // The exact number doesn't matter, the dialog will be resized
+        // again soon anyhow but it should be big enough to allow
+        // calculation relying on "totalSize - clientSize > 0" work, i.e.
+        // at least greater than the title bar height
+        //
+        nWidth = nHeight = 100;
+    }
+    if (nX == (int)CW_USEDEFAULT)
+    {
+        //
+        // Centre it on the screen for now - what else can we do?
+        // TODO: We could try FCF_SHELLPOSITION but it will require moving
+        //       things around a bit.
+        //
+        wxSize                      vSizeDpy = wxGetDisplaySize();

-        ::WinQueryWindowRect(HWND_DESKTOP, &vRect);
-        nY = vRect.yTop - (nY + nHeight);
+        nX = (vSizeDpy.x - nWidth) / 2;
+        nY = (vSizeDpy.y - nHeight) / 2;
     }
+
+    // Convert to OS/2 coordinates
+    nY = GetOS2ParentHeight(pParent) - nY - nHeight;
+
     if (!::WinSetWindowPos( m_hFrame
                            ,HWND_TOP
                            ,nX
@@ -689,7 +723,6 @@

     if (pnX)
         *pnX -= vPt.x;
-
     if (pnY)
         *pnY += vPt.y;
 } // end of wxTopLevelWindowOS2::DoGetClientSize
@@ -751,12 +784,8 @@
         ::WinQueryWindowPos(m_hWnd, &m_vSwpClient);
         ::WinSendMsg(m_hFrame, WM_UPDATEFRAME, (MPARAM)~0, 0);
         ::WinQueryWindowPos(m_hWnd, &vSwp);
-        ::WinEnableWindow(m_hFrame, TRUE);
+        ::WinEnableWindow(m_hFrame, true);

-        //
-        // Deal with children
-        //
-        MoveChildren(m_vSwpClient.cy - vSwp.cy);
         vEvent.SetEventObject(this);
         GetEventHandler()->ProcessEvent(vEvent);
     }
@@ -771,7 +800,7 @@

             ::WinQueryWindowPos(hWndParent, &vSwp);
             m_bIconized = (vSwp.fl & SWP_MINIMIZE)==SWP_MINIMIZE;
-            ::WinEnableWindow(hWndParent, TRUE);
+            ::WinEnableWindow(hWndParent, true);
         }
     }
     return true;
Index: src/os2/window.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/os2/window.cpp,v
retrieving revision 1.165
diff -u -r1.165 window.cpp
--- src/os2/window.cpp	2006/01/03 11:08:11	1.165
+++ src/os2/window.cpp	2006/01/03 17:28:41
@@ -375,7 +375,6 @@
     HWND hParent = NULLHANDLE;
     ULONG ulCreateFlags = 0;
     WXDWORD dwExStyle = 0;
-
     wxCHECK_MSG(pParent, false, wxT("can't create wxWindow without parent"));

 #if wxUSE_STATBOX
@@ -391,9 +390,9 @@
                   _T("wxStaticBox can't be used as a window parent!") );
 #endif // wxUSE_STATBOX

-     // Ensure groupbox backgrounds are painted
-     if (IsKindOf(CLASSINFO(wxPanel)))
-         lStyle &= ~wxCLIP_CHILDREN;
+    // Ensure groupbox backgrounds are painted
+    if (IsKindOf(CLASSINFO(wxPanel)))
+        lStyle &= ~wxCLIP_CHILDREN;

     if ( !CreateBase( pParent
                      ,vId
@@ -721,22 +720,22 @@
                                 int  nRange,
                                 bool WXUNUSED(bRefresh) )
 {
-    HWND                            hWnd = GetHwnd();
-    int                             nOldRange = nRange - nThumbVisible;
-    int                             nRange1 = nOldRange;
-    int                             nPageSize = nThumbVisible;
+    HWND        hWnd       = GetHwnd();
+    int         nOldRange  = nRange - nThumbVisible;
+    int         nRange1    = nOldRange;
+    int         nPageSize  = nThumbVisible;
     int         nVSBWidth  = wxSystemSettingsNative::GetMetric(wxSYS_VSCROLL_X,
                                                                this);
     int         nHSBHeight = wxSystemSettingsNative::GetMetric(wxSYS_HSCROLL_Y,
                                                                this);

-    SBCDATA                         vInfo;
-    ULONG                           ulStyle = WS_VISIBLE | WS_SYNCPAINT;
-    SWP                             vSwp;
-    SWP                             vSwpOwner;
-    HWND                            hWndParent;
-    HWND                            hWndClient;
-    wxWindow*                       pParent = GetParent();
+    SBCDATA     vInfo;
+    ULONG       ulStyle    = WS_VISIBLE | WS_SYNCPAINT;
+    SWP         vSwp;
+    SWP         vSwpOwner;
+    HWND        hWndParent;
+    HWND        hWndClient;
+    wxWindow*   pParent    = GetParent();

     if (pParent && pParent->IsKindOf(CLASSINFO(wxFrame)))
     {
@@ -1290,7 +1289,6 @@
     if (pWidth)
         *pWidth = vRect.xRight - vRect.xLeft;
     if (pHeight )
-        // OS/2 PM is backwards from windows
         *pHeight = vRect.yTop - vRect.yBottom;
 } // end of wxWindowOS2::DoGetSize

@@ -1299,6 +1297,9 @@
 , int*                              pY
 ) const
 {
+    //
+    // Return parameters assume wxWidgets coordinate system
+    //
     HWND                            hWnd = GetHwnd();
     SWP                             vSwp;
     POINTL                          vPoint;
@@ -1309,17 +1310,30 @@
     // the WIN32 WinGetRect, but unlike WinGetRect which returns the window
     // origin position in screen coordinates, WinQueryWindowRect returns it
     // relative to itself, i.e. (0,0).  To get the same under PM we must
-    // us WinQueryWindowPos.  This call, unlike the WIN32 call, however,
+    // use WinQueryWindowPos.  This call, unlike the WIN32 call, however,
     // returns a position relative to it's parent, so no parent adujstments
     // are needed under OS/2.  Also, windows should be created using
-    // wxWindow coordinates, i.e 0,0 is the TOP left so vSwp will already
-    // reflect that.
+    // wxWindow coordinates, i.e 0,0 is the TOP left.
     //
+    if (IsKindOf(CLASSINFO(wxFrame)))
+    {
+        wxFrame*                    pFrame = wxDynamicCast(this, wxFrame);
+        hWnd = pFrame->GetFrame();
+    }
+    else
+        hWnd = GetHwnd();
+
     ::WinQueryWindowPos(hWnd, &vSwp);

     vPoint.x = vSwp.x;
     vPoint.y = vSwp.y;

+    // We need to convert to wxWidgets coordinates
+    int vHeight;
+    DoGetSize(NULL,&vHeight);
+    wxWindow* pWindow = wxDynamicCast(this,wxWindow);
+    vPoint.y = pWindow->GetOS2ParentHeight(pParent) - vPoint.y - vHeight;
+
     //
     // We may be faking the client origin. So a window that's really at (0,
     // 30) may appear (to wxWin apps) to be at (0, 0).
@@ -1404,7 +1418,7 @@
             vRect.yTop -= (vTitle.yTop - vTitle.yBottom);
         }

-        ULONG                       uStyle = ::WinQueryWindowULong(hWnd, QWL_STYLE);
+        ULONG uStyle = ::WinQueryWindowULong(hWnd, QWL_STYLE);

         //
         // Deal with borders
@@ -1451,22 +1465,16 @@
 , int                               nHeight
 )
 {
+    //
+    // Input parameters assume wxWidgets coordinate system
+    //
     RECTL                           vRect;
     wxWindow*                       pParent = GetParent();
-
-    /* Due to OS/2's inverted coordinate system, changing the height
-       of a window requires repositioning all it's children, e.g. if
-       you want a child of height 100 to be at the top left corner of
-       the parent you need to position the lower left corner of the
-       child at (0, (height of parent - 100)), so, obviously, if the
-       height of the parent changes, the child needs to be repositioned. */
-    int                         nHeightDelta;
-    GetSize(0, &nHeightDelta);
-    nHeightDelta = nHeight - nHeightDelta;
+    HWND                            hWnd = GetHwnd();

     if (pParent && !IsKindOf(CLASSINFO(wxDialog)))
     {
-        int                         nOS2Height = GetOS2ParentHeight(pParent);
+        int nOS2Height = GetOS2ParentHeight(pParent);

         nY = nOS2Height - (nY + nHeight);
     }
@@ -1492,64 +1500,26 @@
     if (IsKindOf(CLASSINFO(wxFrame)))
     {
         RECTL                       vFRect;
-        HWND                        hWndFrame;
         int                         nWidthFrameDelta = 0;
         int                         nHeightFrameDelta = 0;
-        int                         nHeightFrame = 0;
-        int                         nWidthFrame = 0;
         wxFrame*                    pFrame;

         pFrame = wxDynamicCast(this, wxFrame);
-        hWndFrame = pFrame->GetFrame();
-        ::WinQueryWindowRect(hWndFrame, &vRect);
-        ::WinMapWindowPoints(hWndFrame, HWND_DESKTOP, (PPOINTL)&vRect, 2);
+        hWnd = pFrame->GetFrame();
+        ::WinQueryWindowRect(hWnd, &vRect);
+        ::WinMapWindowPoints(hWnd, HWND_DESKTOP, (PPOINTL)&vRect, 2);
         vFRect = vRect;
-        ::WinCalcFrameRect(hWndFrame, &vRect, TRUE);
+        ::WinCalcFrameRect(hWnd, &vRect, TRUE);
         nWidthFrameDelta = ((vRect.xLeft - vFRect.xLeft) + (vFRect.xRight - vRect.xRight));
         nHeightFrameDelta = ((vRect.yBottom - vFRect.yBottom) + (vFRect.yTop - vRect.yTop));
-        nWidthFrame = vFRect.xRight - vFRect.xLeft;
-        nHeightFrame = vFRect.yTop - vFRect.yBottom;
-
-        if (nWidth == vFRect.xRight - vFRect.xLeft &&
-            nHeight == vFRect.yTop - vFRect.yBottom)
-        {
-            //
-            // In this case the caller is not aware of OS/2's need to size both
-            // the frame and it's client and is really only moving the window,
-            // not resizeing it.  So move the frame, and back off the sizes
-            // for a proper client fit.
-            //
-            ::WinSetWindowPos( hWndFrame
-                              ,HWND_TOP
-                              ,(LONG)nX - (vRect.xLeft - vFRect.xLeft)
-                              ,(LONG)nY - (vRect.yBottom - vFRect.yBottom)
-                              ,(LONG)0
-                              ,(LONG)0
-                              ,SWP_MOVE
-                             );
-            nX += (vRect.xLeft - vFRect.xLeft);
-            nY += (vRect.yBottom - vFRect.yBottom);
-            nWidth -= nWidthFrameDelta;
-            nHeight -= nHeightFrameDelta;
-        }
-        else
-        {
-            if (nWidth > nWidthFrame - nHeightFrameDelta ||
-                nHeight > nHeightFrame - nHeightFrameDelta)
-            {
-                ::WinSetWindowPos( hWndFrame
-                                  ,HWND_TOP
-                                  ,(LONG)nX - (vRect.xLeft - vFRect.xLeft)
-                                  ,(LONG)nY - (vRect.yBottom - vFRect.yBottom)
-                                  ,(LONG)nWidth + nWidthFrameDelta
-                                  ,(LONG)nHeight + nHeightFrameDelta
-                                  ,SWP_MOVE | SWP_SIZE
-                                 );
-            }
-        }
+        // Input values refer to the window position relative to its parent
+        // which may be the Desktop so we need to calculate
+        // the new frame values to keep the wxWidgets frame origin constant
+        nY -= nHeightFrameDelta;
+        nWidth += nWidthFrameDelta;
+        nHeight += nHeightFrameDelta;
     }
-
-    ::WinSetWindowPos( GetHwnd()
+    ::WinSetWindowPos( hWnd
                       ,HWND_TOP
                       ,(LONG)nX
                       ,(LONG)nY
@@ -1558,14 +1528,14 @@
                       ,SWP_SIZE | SWP_MOVE
                      );
     if (m_vWinSwp.cx == 0 && m_vWinSwp.cy == 0 && m_vWinSwp.fl == 0)
+    {
         //
         // Uninitialized
         //
-        ::WinQueryWindowPos(GetHwnd(), &m_vWinSwp);
+        ::WinQueryWindowPos(hWnd, &m_vWinSwp);
+    }
     else
     {
-        int                         nYDiff = m_vWinSwp.cy - nHeight;
-
         //
         // Handle resizing of scrolled windows.  The target or window to
         // be scrolled is the owner (gets the scroll notifications).  The
@@ -1582,13 +1552,13 @@
         //
         if (IsKindOf(CLASSINFO(wxScrolledWindow)))
         {
-            int                     nAdjustWidth  = 0;
-            int                     nAdjustHeight = 0;
+            int nAdjustWidth  = 0;
+            int nAdjustHeight = 0;
             int nHSBHeight = wxSystemSettingsNative::GetMetric(wxSYS_HSCROLL_Y,
                                                                this);
             int nVSBWidth  = wxSystemSettingsNative::GetMetric(wxSYS_VSCROLL_X,
-							       this);
-            SWP                     vSwpScroll;
+                                                               this);
+            SWP vSwpScroll;

             if (GetScrollBarHorz() == NULLHANDLE ||
                 !WinIsWindowShowing(GetScrollBarHorz()))
@@ -1600,8 +1570,8 @@
                 nAdjustWidth = 0L;
             else
                 nAdjustWidth = nVSBWidth;
-            ::WinQueryWindowPos(GetHwnd(), &vSwpScroll);
-            ::WinSetWindowPos( GetHwnd()
+            ::WinQueryWindowPos(hWnd, &vSwpScroll);
+            ::WinSetWindowPos( hWnd
                               ,HWND_TOP
                               ,vSwpScroll.x
                               ,vSwpScroll.y + nAdjustHeight
@@ -1609,19 +1579,9 @@
                               ,vSwpScroll.cy - nAdjustHeight
                               ,SWP_MOVE | SWP_SIZE
                              );
-            nYDiff -= nAdjustHeight;
         }
-        MoveChildren(nYDiff);
-        ::WinQueryWindowPos(GetHwnd(), &m_vWinSwp);
+        ::WinQueryWindowPos(hWnd, &m_vWinSwp);
     }
-#if 0
-    // FIXME: By my logic, the next line should be needed as it moves child
-    //        windows when resizing the parent (see comment at beginning of
-    //        function). However, this seems to cause lots of problems. At
-    //        least, e.g. the grid sample almost works with this line
-    //        commented out but crashes badly with it.
-    MoveChildren(nHeightDelta);
-#endif
 } // end of wxWindowOS2::DoMoveWindow

 //
@@ -1641,6 +1601,10 @@
                              int nSizeFlags )
 {
     //
+    // Input & output parameters assume wxWidgets coordinate system
+    //
+
+    //
     // Get the current size and position...
     //
     int    nCurrentX;
@@ -1655,12 +1619,7 @@
     //
     // ... and don't do anything (avoiding flicker) if it's already ok
     //
-    //
-    // Must convert Y coords to test for equality under OS/2
-    //
-    int                             nY2 = nY;
-
-    if (nX == nCurrentX && nY2 == nCurrentY &&
+    if (nX == nCurrentX && nY == nCurrentY &&
         nWidth == nCurrentWidth && nHeight == nCurrentHeight)
     {
         return;
@@ -1712,50 +1671,15 @@
 void wxWindowOS2::DoSetClientSize( int nWidth,
                                    int nHeight )
 {
-    POINTL    vPoint;
-    int       nActualWidth;
-    int       nActualHeight;
-    wxWindow* pParent = (wxWindow*)GetParent();
-    HWND      hParentWnd = (HWND)0;
-
-    if (pParent)
-        hParentWnd = (HWND)pParent->GetHWND();
-
-    if (IsKindOf(CLASSINFO(wxFrame)))
-    {
-        wxFrame* pFrame = wxDynamicCast(this, wxFrame);
-        HWND     hFrame = pFrame->GetFrame();
-        RECTL    vRect;
-        RECTL    vRect2;
-        RECTL    vRect3;
-
-        ::WinQueryWindowRect(GetHwnd(), &vRect2);
-        ::WinQueryWindowRect(hFrame, &vRect);
-        ::WinQueryWindowRect(hParentWnd, &vRect3);
-        nActualWidth = vRect2.xRight - vRect2.xLeft - vRect.xRight + nWidth;
-        nActualHeight = vRect2.yTop - vRect2.yBottom - vRect.yTop + nHeight;
-
-        vPoint.x = vRect2.xLeft;
-        vPoint.y = vRect2.yBottom;
-        if (pParent)
-        {
-            vPoint.x -= vRect3.xLeft;
-            vPoint.y -= vRect3.yBottom;
-        }
-    }
-    else
-    {
-        int nX;
-        int nY;
+    //
+    // nX & nY assume wxWidgets coordinate system
+    //
+    int         nX;
+    int         nY;

-        GetPosition(&nX, &nY);
-        nActualWidth  = nWidth;
-        nActualHeight = nHeight;
+    GetPosition(&nX, &nY);

-        vPoint.x = nX;
-        vPoint.y = nY;
-    }
-    DoMoveWindow( vPoint.x, vPoint.y, nActualWidth, nActualHeight );
+    DoMoveWindow( nX, nY, nWidth, nHeight );

     wxSize size( nWidth, nHeight );
     wxSizeEvent vEvent( size, m_windowId );
@@ -2983,17 +2907,17 @@
     //
     wxCHECK_RET( hWnd != (HWND)NULL,
                  wxT("attempt to add a NULL hWnd to window list ignored") );
-

-    wxWindow*                       pOldWin = wxFindWinFromHandle((WXHWND) hWnd);
+    wxWindow* pOldWin = wxFindWinFromHandle((WXHWND) hWnd);

     if (pOldWin && (pOldWin != pWin))
     {
-        wxString                    str(pWin->GetClassInfo()->GetClassName());
-
-        wxLogError( _T("Bug! Found existing HWND %X for new window of class %s")
-                   ,(int)hWnd
-                   ,str.c_str()
+        wxString Newstr(pWin->GetClassInfo()->GetClassName());
+        wxString Oldstr(pOldWin->GetClassInfo()->GetClassName());
+        wxLogError( _T("Bug! New window of class %s has same HWND %X as old window of class %s"),
+                    Newstr.c_str(),
+                    (int)hWnd,
+                    Oldstr.c_str()
                   );
     }
     else if (!pOldWin)
@@ -3027,7 +2951,6 @@
     bool bNonDefault = false;
     static const int DEFAULT_Y = 200;
     static const int DEFAULT_H = 250;
-
     if (rPos.x == wxDefaultCoord)
     {
         rnX = rnY = CW_USEDEFAULT;
@@ -3144,7 +3067,7 @@
             ,nHeight
            );
     return true;
-} // end of WinGuiBase_Window::OS2Create
+} // end of wxWindowOS2::OS2Create

 // ===========================================================================
 // OS2 PM message handlers
@@ -4301,88 +4224,9 @@
     return GetEventHandler()->ProcessEvent(vEvent);
 } // end of wxWindowOS2::OS2OnScroll

-void wxWindowOS2::MoveChildren(
-  int                               nDiff
-)
-{
-    //
-    // We want to handle top levels ourself, manually
-    //
-    if (!IsTopLevel() && GetAutoLayout())
-    {
-        Layout();
-    }
-    else
-    {
-        SWP                         vSwp;
-
-        for (wxWindowList::compatibility_iterator node = GetChildren().GetFirst();
-             node;
-             node = node->GetNext())
-        {
-            wxWindow*               pWin = node->GetData();
-
-            ::WinQueryWindowPos( GetHwndOf(pWin)
-                                ,&vSwp
-                               );
-            // Actually, only move children that already are placed on the
-            // frame, not ones which are still at wxDefaultCoord.
-            if (vSwp.y == wxDefaultCoord)
-                continue;
-            if (pWin->IsKindOf(CLASSINFO(wxControl)))
-            {
-                wxControl*          pCtrl;
-
-                //
-                // Must deal with controls that have margins like ENTRYFIELD.  The SWP
-                // struct of such a control will have and origin offset from its intended
-                // position by the width of the margins.
-                //
-                pCtrl = wxDynamicCast(pWin, wxControl);
-                vSwp.y -= pCtrl->GetYComp();
-                vSwp.x -= pCtrl->GetXComp();
-            }
-            ::WinSetWindowPos( GetHwndOf(pWin)
-                              ,HWND_TOP
-                              ,vSwp.x
-                              ,vSwp.y - nDiff
-                              ,vSwp.cx
-                              ,vSwp.cy
-                              ,SWP_MOVE
-                             );
-            ::WinQueryWindowPos(GetHwndOf(pWin), pWin->GetSwp());
-            if (pWin->IsKindOf(CLASSINFO(wxRadioBox)))
-            {
-                wxRadioBox*     pRadioBox;
-
-                pRadioBox = wxDynamicCast(pWin, wxRadioBox);
-                pRadioBox->AdjustButtons( (int)vSwp.x
-                                         ,(int)vSwp.y - nDiff
-                                         ,(int)vSwp.cx
-                                         ,(int)vSwp.cy
-                                         ,pRadioBox->GetSizeFlags()
-                                        );
-            }
-            if (pWin->IsKindOf(CLASSINFO(wxSlider)))
-            {
-                wxSlider*           pSlider;

-                pSlider = wxDynamicCast(pWin, wxSlider);
-                pSlider->AdjustSubControls( (int)vSwp.x
-                                           ,(int)vSwp.y - nDiff
-                                           ,(int)vSwp.cx
-                                           ,(int)vSwp.cy
-                                           ,(int)pSlider->GetSizeFlags()
-                                          );
-            }
-        }
-    }
-    Refresh();
-} // end of wxWindowOS2::MoveChildren
-
-//
 //  Getting the Y position for a window, like a control, is a real
-//  pain.  There are three sitatuions we must deal with in determining
+//  pain.  There are three situations we must deal with in determining
 //  the OS2 to wxWidgets Y coordinate.
 //
 //  1)  The controls are created in a dialog.
@@ -4413,11 +4257,15 @@
 //
 int wxWindowOS2::GetOS2ParentHeight( wxWindowOS2* pParent )
 {
+    if (pParent)
+    {
     //
     // Case 1
     //
-    if (pParent->IsKindOf(CLASSINFO(wxDialog)))
-        return(pParent->GetClientSize().y);
+        if (pParent->IsKindOf(CLASSINFO(wxDialog)))
+        {
+            return(pParent->GetClientSize().y);
+        }

     //
     // Case 2 -- if we are one of the separately built standard Frame
@@ -4425,40 +4273,45 @@
     //           use the frame, itself, for positioning.  Otherwise we are
     //           child window and want to use the Frame's client.
     //
-    else if (pParent->IsKindOf(CLASSINFO(wxFrame)))
-    {
-        if (IsKindOf(CLASSINFO(wxStatusBar)) ||
-            IsKindOf(CLASSINFO(wxMenuBar))   ||
-            IsKindOf(CLASSINFO(wxToolBar))
-           )
+        else if (pParent->IsKindOf(CLASSINFO(wxFrame)))
         {
-            if (IsKindOf(CLASSINFO(wxToolBar)))
+            if (IsKindOf(CLASSINFO(wxStatusBar)) ||
+                IsKindOf(CLASSINFO(wxMenuBar))   ||
+                IsKindOf(CLASSINFO(wxToolBar))
+               )
             {
-                wxFrame*            pFrame = wxDynamicCast(GetParent(), wxFrame);
+                if (IsKindOf(CLASSINFO(wxToolBar)))
+                {
+                    wxFrame* pFrame = wxDynamicCast(GetParent(), wxFrame);

-                if (pFrame->GetToolBar() == this)
-                    return(pParent->GetSize().y);
+                    if (pFrame->GetToolBar() == this)
+                        return(pParent->GetSize().y);
+                    else
+                        return(pParent->GetClientSize().y);
+                }
                 else
-                    return(pParent->GetClientSize().y);
+                    return(pParent->GetSize().y);
             }
             else
-                return(pParent->GetSize().y);
+                return(pParent->GetClientSize().y);
         }
+        //
+        // Case -- this is for any window that is the sole child of a Frame.
+        //         The grandparent must exist and it must be of type CFrame
+        //         and it's height must be different. Otherwise the standard
+        //         applies.
+        //
         else
+        {
             return(pParent->GetClientSize().y);
+        }
     }
-    //
-    // Case -- this is for any window that is the sole child of a Frame.
-    //         The grandparent must exist and it must be of type CFrame
-    //         and it's height must be different. Otherwise the standard
-    //         applies.
-    //
-    // else
-    // {
-
-    return(pParent->GetClientSize().y);
-
-    // }
+    else // We must be a child of the screen
+    {
+        int nHeight;
+        wxDisplaySize(NULL,&nHeight);
+        return(nHeight);
+    }
 } // end of wxWindowOS2::GetOS2ParentHeight

 //

 	  	 

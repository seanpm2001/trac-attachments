Index: docs/doxygen/mainpages/cat_classes.h
===================================================================
--- docs/doxygen/mainpages/cat_classes.h	(revision 54997)
+++ docs/doxygen/mainpages/cat_classes.h	(working copy)
@@ -174,7 +174,10 @@
 @li wxTreeCtrl: Tree (hierarchy) control
 @li wxScrollBar: Scrollbar control
 @li wxSpinButton: A spin or `up-down' control
-@li wxSpinCtrl: A spin control - i.e. spin button and text control
+@li wxSpinCtrl: A spin control - i.e. spin button and text control displaying
+    an integer
+@li wxSpinCtrlDouble: A spin control - i.e. spin button and text control displaying
+    a real number
 @li wxStaticText: One or more lines of non-editable text
 @li wxHyperlinkCtrl: A static text which opens an URL when clicked
 @li wxStaticBitmap: A control to display a bitmap
Index: interface/wx/generic/spinctrg.h
===================================================================
--- interface/wx/generic/spinctrg.h	(revision 0)
+++ interface/wx/generic/spinctrg.h	(revision 0)
@@ -0,0 +1,138 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        spinctrg.h
+// Purpose:     interface of wxSpinCtrlDouble
+// Author:      wxWidgets team
+// RCS-ID:      $Id$
+// Licence:     wxWindows license
+/////////////////////////////////////////////////////////////////////////////
+
+/**
+    @class wxSpinCtrlDouble
+
+    wxSpinCtrlDouble combines wxTextCtrl and wxSpinButton in one control and
+    displays a real number. (wxSpinCtrl displays an integer.)
+
+    @beginStyleTable
+    @style{wxSP_ARROW_KEYS}
+           The user can use arrow keys to change the value.
+    @style{wxSP_WRAP}
+           The value wraps at the minimum and maximum.
+    @endStyleTable
+
+    @library{wxcore}
+    @category{ctrl}
+    <!-- @appearance{spinctrd.png} -->
+
+    @see wxSpinButton, wxSpinCtrl, wxControl
+*/
+class wxSpinCtrlDouble : public wxControl
+{
+public:
+    /**
+       Default constructor.
+    */
+    wxSpinCtrlDouble();
+    
+    /**
+        Constructor, creating and showing a spin control.
+
+        @param parent
+            Parent window. Must not be @NULL.
+        @param value
+            Default value (as text).
+        @param id
+            Window identifier. The value wxID_ANY indicates a default value.
+        @param pos
+            Window position. If wxDefaultPosition is specified then a default
+        position is chosen.
+        @param size
+            Window size. If wxDefaultSize is specified then a default size
+        is chosen.
+        @param style
+            Window style. See wxSpinButton.
+        @param min
+            Minimal value.
+        @param max
+            Maximal value.
+        @param initial
+            Initial value.
+        @param inc
+            Increment value.
+        @param name
+            Window name.
+
+        @see Create()
+    */
+    wxSpinCtrlDouble(wxWindow* parent, wxWindowID id = -1,
+               const wxString& value = wxEmptyString,
+               const wxPoint& pos = wxDefaultPosition,
+               const wxSize& size = wxDefaultSize,
+               long style = wxSP_ARROW_KEYS,
+               double min = 0, double max = 100,
+               double initial = 0, double inc = 1,
+               const wxString& name = _T("wxSpinCtrlDouble"));
+
+    /**
+        Creation function called by the spin control constructor.
+        See wxSpinCtrlDouble() for details.
+    */
+    bool Create(wxWindow* parent, wxWindowID id = -1,
+                const wxString& value = wxEmptyString,
+                const wxPoint& pos = wxDefaultPosition,
+                const wxSize& size = wxDefaultSize,
+                long style = wxSP_ARROW_KEYS,
+                double min = 0, double max = 100,
+                double initial = 0, double inc = 1,
+                const wxString& name = _T("wxSpinCtrlDouble"));
+
+    /**
+        Gets the number of digits in the display.
+    */
+    unsigned GetDigits() const;
+
+    /**
+        Gets the increment value.
+    */
+    double GetIncrement() const;
+
+    /**
+        Gets maximal allowable value.
+    */
+    double GetMax() const;
+
+    /**
+        Gets minimal allowable value.
+    */
+    double GetMin() const;
+
+    /**
+        Gets the value of the spin control.
+    */
+    double GetValue() const;
+
+    /**
+        Sets the number of digits in the display.
+    */
+    void SetDigits(unsigned digits);
+
+    /**
+        Sets the increment value.
+    */
+    void SetIncrement(double inc);
+
+    /**
+        Sets range of allowable values.
+    */
+    void SetRange(double minVal, double maxVal);
+
+    /**
+        Sets the value of the spin control. Use the variant using double instead.
+    */
+    void SetValue(const wxString& text);
+
+    /**
+        Sets the value of the spin control.
+    */
+    void SetValue(double value);
+};
+
Index: interface/wx/spinctrl.h
===================================================================
--- interface/wx/spinctrl.h	(revision 54997)
+++ interface/wx/spinctrl.h	(working copy)
@@ -23,7 +23,7 @@
     @category{ctrl}
     <!-- @appearance{spinctrl.png} -->
 
-    @see wxSpinButton, wxControl
+    @see wxSpinButton, wxSpinCtrlDouble, wxControl
 */
 class wxSpinCtrl : public wxControl
 {
@@ -67,7 +67,7 @@
                const wxSize& size = wxDefaultSize,
                long style = wxSP_ARROW_KEYS,
                int min = 0, int max = 100,
-               int initial = 0);
+               int initial = 0, const wxString& name = _T("wxSpinCtrl"));
 
     /**
         Creation function called by the spin control constructor.
@@ -79,7 +79,7 @@
                 const wxSize& size = wxDefaultSize,
                 long style = wxSP_ARROW_KEYS,
                 int min = 0, int max = 100,
-                int initial = 0);
+                int initial = 0, const wxString& name = _T("wxSpinCtrl"));
 
     /**
         Gets maximal allowable value.

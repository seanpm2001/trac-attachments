--- grid_old.cpp	2008-06-03 18:23:20.000000000 -0700
+++ grid_new.cpp	2008-06-03 18:25:55.000000000 -0700
@@ -11100,42 +11100,43 @@
 // in device coords clipped to the client size of the grid window.
 //
 wxRect wxGrid::BlockToDeviceRect( const wxGridCellCoords &topLeft,
-                                  const wxGridCellCoords &bottomRight )
+                                 const wxGridCellCoords &bottomRight )
 {
-    wxRect rect( wxGridNoCellRect );
-    wxRect cellRect;
-
-    cellRect = CellToRect( topLeft );
-    if ( cellRect != wxGridNoCellRect )
+    wxRect resultRect( wxGridNoCellRect );
+    wxRect tempCellRect;
+    
+    tempCellRect = CellToRect( topLeft );
+    if ( tempCellRect != wxGridNoCellRect )
     {
-        rect = cellRect;
+        resultRect = tempCellRect;
     }
     else
     {
-        rect = wxRect(0, 0, 0, 0);
+        resultRect = wxRect(0, 0, 0, 0);
     }
-
-    cellRect = CellToRect( bottomRight );
-    if ( cellRect != wxGridNoCellRect )
+    
+    tempCellRect = CellToRect( bottomRight );
+    if ( tempCellRect != wxGridNoCellRect )
     {
-        rect += cellRect;
+        resultRect += tempCellRect;
     }
     else
     {
+        // If both inputs were "wxGridNoCellRect," then there's nothing for us to do.
         return wxGridNoCellRect;
     }
-
+    
     int i, j;
-    int left = rect.GetLeft();
-    int top = rect.GetTop();
-    int right = rect.GetRight();
-    int bottom = rect.GetBottom();
-
+    int left = resultRect.GetLeft();
+    int top = resultRect.GetTop();
+    int right = resultRect.GetRight();
+    int bottom = resultRect.GetBottom();
+    
     int leftCol = topLeft.GetCol();
     int topRow = topLeft.GetRow();
     int rightCol = bottomRight.GetCol();
     int bottomRow = bottomRight.GetRow();
-
+    
     if (left > right)
     {
         i = left;
@@ -11145,7 +11146,7 @@
         leftCol = rightCol;
         rightCol = i;
     }
-
+    
     if (top > bottom)
     {
         i = top;
@@ -11155,48 +11156,83 @@
         topRow = bottomRow;
         bottomRow = i;
     }
-
-    for ( j = topRow; j <= bottomRow; j++ )
+    
+    // At this point, all of the "Top Left" values are definitely less than 
+    // all of the "Bottom Right" values. However, we may well still have negatives.
+    
+    // The following loop is ONLY necessary to detect and handle merged cells.
+    
+    int cw, ch;
+    m_gridWin->GetClientSize( &cw, &ch );
+    
+    int gridOriginX = 0;
+    int gridOriginY = 0;
+    
+    CalcScrolledPosition( gridOriginX, gridOriginY, &gridOriginX, &gridOriginY );
+    
+    // At this point, gridOriginX and gridOriginY will either have come back to us
+    // as ZERO, meaning that the on-screen portion of the grid is aligned with 
+    // the absolute top left of the grid (i.e. a "no scroll" state)
+    //  ..... or else one or both will be NEGATIVE, which will tell us how far 
+    // "off screen" the starting point of the grid has been shifted.
+    
+    int onScreenLeftmostCol = internalXToCol( (0 - gridOriginX ) );
+    int onScreenUppermostRow = internalYToRow(  (0 - gridOriginY)   );
+    
+    int onScreenRightmostCol = internalXToCol( (0 - gridOriginX ) + cw );
+    int onScreenBottommostRow = internalYToRow( (0 - gridOriginY) + ch );
+    
+    // We must bound our loop so that we only examine the portion of
+    // the selected block that is shown on screen. Therefore, we compare
+    // the Top-Left block values to the Top-Left screen values, and the
+    // Bottom-Right block values to the Bottom-Right screen values, choosing appropriately.
+    int smallBoundTopRow = wxMax(topRow, onScreenUppermostRow  );
+    int smallBoundBottomRow = wxMin(bottomRow, onScreenBottommostRow   );
+    int smallBoundLeftCol = wxMax(leftCol, onScreenLeftmostCol );
+    int smallBoundRightCol = wxMin(rightCol, onScreenRightmostCol  );
+    
+    for ( j = smallBoundTopRow; j <= smallBoundBottomRow; j++ )
     {
-        for ( i = leftCol; i <= rightCol; i++ )
+        for ( i = smallBoundLeftCol; i <= smallBoundRightCol; i++ )
         {
-            if ((j == topRow) || (j == bottomRow) || (i == leftCol) || (i == rightCol))
+            if ((j == smallBoundTopRow) || (j == smallBoundBottomRow) || (i == smallBoundLeftCol) || (i == smallBoundRightCol))
             {
-                cellRect = CellToRect( j, i );
-
-                if (cellRect.x < left)
-                    left = cellRect.x;
-                if (cellRect.y < top)
-                    top = cellRect.y;
-                if (cellRect.x + cellRect.width > right)
-                    right = cellRect.x + cellRect.width;
-                if (cellRect.y + cellRect.height > bottom)
-                    bottom = cellRect.y + cellRect.height;
+                tempCellRect = CellToRect( j, i );
+                
+                if (tempCellRect.x < left)
+                    left = tempCellRect.x;
+                if (tempCellRect.y < top)
+                    top = tempCellRect.y;
+                if (tempCellRect.x + tempCellRect.width > right)
+                    right = tempCellRect.x + tempCellRect.width;
+                if (tempCellRect.y + tempCellRect.height > bottom)
+                    bottom = tempCellRect.y + tempCellRect.height;
             }
             else
             {
-                i = rightCol; // jump over inner cells.
+                i = smallBoundRightCol; // jump over inner cells.
             }
         }
     }
-
+    
     // convert to scrolled coords
     //
     CalcScrolledPosition( left, top, &left, &top );
     CalcScrolledPosition( right, bottom, &right, &bottom );
-
-    int cw, ch;
-    m_gridWin->GetClientSize( &cw, &ch );
-
+    
+    // Moved this up higher.
+    // int cw, ch;
+    // m_gridWin->GetClientSize( &cw, &ch );
+    
     if (right < 0 || bottom < 0 || left > cw || top > ch)
         return wxRect(0,0,0,0);
-
-    rect.SetLeft( wxMax(0, left) );
-    rect.SetTop( wxMax(0, top) );
-    rect.SetRight( wxMin(cw, right) );
-    rect.SetBottom( wxMin(ch, bottom) );
-
-    return rect;
+    
+    resultRect.SetLeft( wxMax(0, left) );
+    resultRect.SetTop( wxMax(0, top) );
+    resultRect.SetRight( wxMin(cw, right) );
+    resultRect.SetBottom( wxMin(ch, bottom) );
+    
+    return resultRect;
 }
 
 // ----------------------------------------------------------------------------

11105,11106c11105,11106
<     wxRect rect( wxGridNoCellRect );
<     wxRect cellRect;
---
>     wxRect resultRect( wxGridNoCellRect );
>     wxRect tempCellRect;
11108,11109c11108,11109
<     cellRect = CellToRect( topLeft );
<     if ( cellRect != wxGridNoCellRect )
---
>     tempCellRect = CellToRect( topLeft );
>     if ( tempCellRect != wxGridNoCellRect )
11111c11111
<         rect = cellRect;
---
>         resultRect = tempCellRect;
11115c11115
<         rect = wxRect(0, 0, 0, 0);
---
>         resultRect = wxRect(0, 0, 0, 0);
11118,11119c11118,11119
<     cellRect = CellToRect( bottomRight );
<     if ( cellRect != wxGridNoCellRect )
---
>     tempCellRect = CellToRect( bottomRight );
>     if ( tempCellRect != wxGridNoCellRect )
11121c11121
<         rect += cellRect;
---
>         resultRect += tempCellRect;
11124a11125
>         // If both inputs were "wxGridNoCellRect," then there's nothing for us to do.
11129,11132c11130,11133
<     int left = rect.GetLeft();
<     int top = rect.GetTop();
<     int right = rect.GetRight();
<     int bottom = rect.GetBottom();
---
>     int left = resultRect.GetLeft();
>     int top = resultRect.GetTop();
>     int right = resultRect.GetRight();
>     int bottom = resultRect.GetBottom();
11138c11139
< 
---
>     
11157a11159,11166
>     
>     // At this point, all of the "Top Left" values are definitely less than 
>     // all of the "Bottom Right" values. However, we may well still have negatives.
> 
>     // The following loop is ONLY necessary to detect and handle merged cells.
>     
>     int cw, ch;
>     m_gridWin->GetClientSize( &cw, &ch );
11159c11168,11194
<     for ( j = topRow; j <= bottomRow; j++ )
---
>     int gridOriginX = 0;
>     int gridOriginY = 0;
>     
>     CalcScrolledPosition( gridOriginX, gridOriginY, &gridOriginX, &gridOriginY );
>     
>     // At this point, gridOriginX and gridOriginY will either have come back to us
>     // as ZERO, meaning that the on-screen portion of the grid is aligned with 
>     // the absolute top left of the grid (i.e. a "no scroll" state)
>     //  ..... or else one or both will be NEGATIVE, which will tell us how far 
>     // "off screen" the starting point of the grid has been shifted.
>     
>     int onScreenLeftmostCol = internalXToCol( (0 - gridOriginX ) );
>     int onScreenUppermostRow = internalYToRow(  (0 - gridOriginY)   );
>     
>     int onScreenRightmostCol = internalXToCol( (0 - gridOriginX ) + cw );
>     int onScreenBottommostRow = internalYToRow( (0 - gridOriginY) + ch );
>     
>     // We must bound our loop so that we only examine the portion of
>     // the selected block that is shown on screen. Therefore, we compare
>     // the Top-Left block values to the Top-Left screen values, and the
>     // Bottom-Right block values to the Bottom-Right screen values, choosing appropriately.
>     int smallBoundTopRow = wxMax(topRow, onScreenUppermostRow  );
>     int smallBoundBottomRow = wxMin(bottomRow, onScreenBottommostRow   );
>     int smallBoundLeftCol = wxMax(leftCol, onScreenLeftmostCol );
>     int smallBoundRightCol = wxMin(rightCol, onScreenRightmostCol  );
>     
>     for ( j = smallBoundTopRow; j <= smallBoundBottomRow; j++ )
11161c11196
<         for ( i = leftCol; i <= rightCol; i++ )
---
>         for ( i = smallBoundLeftCol; i <= smallBoundRightCol; i++ )
11163c11198
<             if ((j == topRow) || (j == bottomRow) || (i == leftCol) || (i == rightCol))
---
>             if ((j == smallBoundTopRow) || (j == smallBoundBottomRow) || (i == smallBoundLeftCol) || (i == smallBoundRightCol))
11165c11200
<                 cellRect = CellToRect( j, i );
---
>                 tempCellRect = CellToRect( j, i );
11167,11174c11202,11209
<                 if (cellRect.x < left)
<                     left = cellRect.x;
<                 if (cellRect.y < top)
<                     top = cellRect.y;
<                 if (cellRect.x + cellRect.width > right)
<                     right = cellRect.x + cellRect.width;
<                 if (cellRect.y + cellRect.height > bottom)
<                     bottom = cellRect.y + cellRect.height;
---
>                 if (tempCellRect.x < left)
>                     left = tempCellRect.x;
>                 if (tempCellRect.y < top)
>                     top = tempCellRect.y;
>                 if (tempCellRect.x + tempCellRect.width > right)
>                     right = tempCellRect.x + tempCellRect.width;
>                 if (tempCellRect.y + tempCellRect.height > bottom)
>                     bottom = tempCellRect.y + tempCellRect.height;
11178c11213
<                 i = rightCol; // jump over inner cells.
---
>                 i = smallBoundRightCol; // jump over inner cells.
11182c11217
< 
---
>     
11188,11189c11223,11225
<     int cw, ch;
<     m_gridWin->GetClientSize( &cw, &ch );
---
>     // Moved this up higher.
>     // int cw, ch;
>     // m_gridWin->GetClientSize( &cw, &ch );
11194,11199c11230,11235
<     rect.SetLeft( wxMax(0, left) );
<     rect.SetTop( wxMax(0, top) );
<     rect.SetRight( wxMin(cw, right) );
<     rect.SetBottom( wxMin(ch, bottom) );
< 
<     return rect;
---
>     resultRect.SetLeft( wxMax(0, left) );
>     resultRect.SetTop( wxMax(0, top) );
>     resultRect.SetRight( wxMin(cw, right) );
>     resultRect.SetBottom( wxMin(ch, bottom) );
>     
>     return resultRect;

diff -uNr wx-orig/samples/dialogs/dialogs.cpp wx-mine/samples/dialogs/dialogs.cpp
--- wx-orig/samples/dialogs/dialogs.cpp	2012-01-20 20:30:21.000000000 -0500
+++ wx-mine/samples/dialogs/dialogs.cpp	2012-12-12 17:42:20.000000000 -0500
@@ -1,5 +1,5 @@
 /////////////////////////////////////////////////////////////////////////////
-// Name:        dialogs.cpp
+// Name:        dialogs.cpp (MODIFIED)
 // Purpose:     Common dialogs demo
 // Author:      Julian Smart, Vadim Zeitlin, ABX
 // Created:     04/01/98
@@ -10,6 +10,9 @@
 // Licence:     wxWindows licence
 /////////////////////////////////////////////////////////////////////////////
 
+// NEED THIS (for Solaris) SINCE USE OF Bind() HAS BEEN ADDED TO DEMO.
+#define wxHAS_EVENT_BIND
+
 // For compilers that support precompilation, includes "wx/wx.h".
 #include "wx/wxprec.h"
 
@@ -2726,6 +2729,9 @@
 
     int tabImage1 = -1;
     int tabImage2 = -1;
+    int tabImage3 = -1;
+    int tabImage4 = -1;
+    int tabImage5 = -1;
 
     bool useToolBook = (dialogType == DIALOGS_PROPERTY_SHEET_TOOLBOOK || dialogType == DIALOGS_PROPERTY_SHEET_BUTTONTOOLBOOK);
     int resizeBorder = wxRESIZE_BORDER;
@@ -2735,6 +2741,9 @@
         resizeBorder = 0;
         tabImage1 = 0;
         tabImage2 = 1;
+        tabImage3 = 2;
+        tabImage4 = 3;
+        tabImage5 = 4;
 
         int sheetStyle = wxPROPSHEET_SHRINKTOFIT;
         if (dialogType == DIALOGS_PROPERTY_SHEET_BUTTONTOOLBOOK)
@@ -2776,10 +2785,16 @@
     notebook->SetImageList(m_imageList);
 
     wxPanel* generalSettings = CreateGeneralSettingsPage(notebook);
+    wxPanel* general2Settings = CreateGeneral2SettingsPage(notebook);
+    wxPanel* general3Settings = CreateGeneral3SettingsPage(notebook);
+    wxPanel* general4Settings = CreateGeneral4SettingsPage(notebook);
     wxPanel* aestheticSettings = CreateAestheticSettingsPage(notebook);
 
-    notebook->AddPage(generalSettings, _("General"), true, tabImage1);
-    notebook->AddPage(aestheticSettings, _("Aesthetics"), false, tabImage2);
+    notebook->AddPage(generalSettings, _("Bad CB"), true, tabImage1);
+    notebook->AddPage(general2Settings, _("Bad RB"), false, tabImage2);
+    notebook->AddPage(general3Settings, _("Good CB"), false, tabImage3);
+    notebook->AddPage(general4Settings, _("Good RB"), false, tabImage4);
+    notebook->AddPage(aestheticSettings, _("Aesthetics"), false, tabImage5);
 
     LayoutDialog();
 }
@@ -2789,6 +2804,9 @@
     delete m_imageList;
 }
 
+static wxCheckBox* checkBox12;
+static wxTextCtrl* textCtrl12;
+
 wxPanel* SettingsDialog::CreateGeneralSettingsPage(wxWindow* parent)
 {
     wxPanel* panel = new wxPanel(parent, wxID_ANY);
@@ -2796,6 +2814,26 @@
     wxBoxSizer *topSizer = new wxBoxSizer( wxVERTICAL );
     wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );
 
+    //// AUTOSAVE
+
+    wxString autoSaveLabel = _("&Auto-save every");
+    wxString minsLabel = _("mins");
+
+    wxBoxSizer* itemSizer12 = new wxBoxSizer( wxHORIZONTAL );
+    checkBox12 = new wxCheckBox(panel, ID_AUTO_SAVE, autoSaveLabel, wxDefaultPosition, wxDefaultSize);
+
+    textCtrl12 = new wxTextCtrl(panel, ID_AUTO_SAVE_MINS, wxEmptyString,
+        wxDefaultPosition, wxSize(40, wxDefaultCoord));
+
+    itemSizer12->Add(checkBox12, 0, wxALL|wxALIGN_CENTER_VERTICAL, 5);
+    itemSizer12->Add(textCtrl12, 0, wxALL|wxALIGN_CENTER_VERTICAL, 5);
+    itemSizer12->Add(new wxStaticText(panel, wxID_STATIC, minsLabel), 0, wxALL|wxALIGN_CENTER_VERTICAL, 5);
+    item0->Add(itemSizer12, 0, wxGROW|wxALL, 0);
+
+    textCtrl12->Enable(false);
+    checkBox12->Bind(wxEVT_COMMAND_CHECKBOX_CLICKED,
+                        &SettingsDialog::OnChk12, this);
+
     //// LOAD LAST FILE
 
     wxBoxSizer* itemSizer3 = new wxBoxSizer( wxHORIZONTAL );
@@ -2803,30 +2841,141 @@
     itemSizer3->Add(checkBox3, 0, wxALL|wxALIGN_CENTER_VERTICAL, 5);
     item0->Add(itemSizer3, 0, wxGROW|wxALL, 0);
 
+    //// TOOLTIPS
+
+    wxBoxSizer* itemSizer8 = new wxBoxSizer( wxHORIZONTAL );
+    wxCheckBox* checkBox6 = new wxCheckBox(panel, ID_SHOW_TOOLTIPS, _("Show &tooltips"), wxDefaultPosition, wxDefaultSize);
+    itemSizer8->Add(checkBox6, 0, wxALL|wxALIGN_CENTER_VERTICAL, 5);
+    item0->Add(itemSizer8, 0, wxGROW|wxALL, 0);
+
+    topSizer->Add( item0, 1, wxGROW|wxALIGN_CENTRE|wxALL, 5 );
+
+    panel->SetSizerAndFit(topSizer);
+
+    return panel;
+}
+
+void SettingsDialog::OnChk12(wxCommandEvent&)
+{
+    if (checkBox12->IsChecked())
+    {
+        textCtrl12->Enable(true);
+        // Display problem happens even if SetFocus() is not done.
+        textCtrl12->SetFocus();
+    }
+    else
+        textCtrl12->Enable(false);
+}
+
+static wxRadioButton* radioBtn13;
+static wxTextCtrl* textCtrl13;
+
+wxPanel* SettingsDialog::CreateGeneral2SettingsPage(wxWindow* parent)
+{
+    wxPanel* panel = new wxPanel(parent, wxID_ANY);
+
+    wxBoxSizer *topSizer = new wxBoxSizer( wxVERTICAL );
+    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );
+
+    //// LOAD LAST FILE
+
+    wxBoxSizer* itemSizer3 = new wxBoxSizer( wxHORIZONTAL );
+    wxRadioButton* radioBtn3 = new wxRadioButton(panel, ID_LOAD_LAST_PROJECT2, _("&Load last project on startup"), wxDefaultPosition, wxDefaultSize, wxRB_GROUP);
+    itemSizer3->Add(radioBtn3, 0, wxALL|wxALIGN_CENTER_VERTICAL, 5);
+    item0->Add(itemSizer3, 0, wxGROW|wxALL, 0);
+    radioBtn3->Bind(wxEVT_COMMAND_RADIOBUTTON_SELECTED,
+                        &SettingsDialog::OnRad13, this);
+
     //// AUTOSAVE
 
     wxString autoSaveLabel = _("&Auto-save every");
     wxString minsLabel = _("mins");
 
     wxBoxSizer* itemSizer12 = new wxBoxSizer( wxHORIZONTAL );
-    wxCheckBox* checkBox12 = new wxCheckBox(panel, ID_AUTO_SAVE, autoSaveLabel, wxDefaultPosition, wxDefaultSize);
+    radioBtn13 = new wxRadioButton(panel, ID_AUTO_SAVE2, autoSaveLabel, wxDefaultPosition, wxDefaultSize);
 
-#if wxUSE_SPINCTRL
-    wxSpinCtrl* spinCtrl12 = new wxSpinCtrl(panel, ID_AUTO_SAVE_MINS, wxEmptyString,
-        wxDefaultPosition, wxSize(40, wxDefaultCoord), wxSP_ARROW_KEYS, 1, 60, 1);
-#endif
+    textCtrl13 = new wxTextCtrl(panel, ID_AUTO_SAVE_MINS2, wxEmptyString,
+        wxDefaultPosition, wxSize(40, wxDefaultCoord));
 
-    itemSizer12->Add(checkBox12, 0, wxALL|wxALIGN_CENTER_VERTICAL, 5);
-#if wxUSE_SPINCTRL
-    itemSizer12->Add(spinCtrl12, 0, wxALL|wxALIGN_CENTER_VERTICAL, 5);
-#endif
+    itemSizer12->Add(radioBtn13, 0, wxALL|wxALIGN_CENTER_VERTICAL, 5);
+    itemSizer12->Add(textCtrl13, 0, wxALL|wxALIGN_CENTER_VERTICAL, 5);
     itemSizer12->Add(new wxStaticText(panel, wxID_STATIC, minsLabel), 0, wxALL|wxALIGN_CENTER_VERTICAL, 5);
     item0->Add(itemSizer12, 0, wxGROW|wxALL, 0);
 
+    textCtrl13->Enable(false);
+    radioBtn13->Bind(wxEVT_COMMAND_RADIOBUTTON_SELECTED,
+                        &SettingsDialog::OnRad13, this);
+
     //// TOOLTIPS
 
     wxBoxSizer* itemSizer8 = new wxBoxSizer( wxHORIZONTAL );
-    wxCheckBox* checkBox6 = new wxCheckBox(panel, ID_SHOW_TOOLTIPS, _("Show &tooltips"), wxDefaultPosition, wxDefaultSize);
+    wxRadioButton* radioBtn6 = new wxRadioButton(panel, ID_SHOW_TOOLTIPS2, _("Show &tooltips"), wxDefaultPosition, wxDefaultSize);
+    itemSizer8->Add(radioBtn6, 0, wxALL|wxALIGN_CENTER_VERTICAL, 5);
+    item0->Add(itemSizer8, 0, wxGROW|wxALL, 0);
+    radioBtn6->Bind(wxEVT_COMMAND_RADIOBUTTON_SELECTED,
+                        &SettingsDialog::OnRad13, this);
+
+    topSizer->Add( item0, 1, wxGROW|wxALIGN_CENTRE|wxALL, 5 );
+
+    panel->SetSizerAndFit(topSizer);
+    radioBtn3->SetValue(true);
+
+    return panel;
+}
+
+void SettingsDialog::OnRad13(wxCommandEvent&)
+{
+    if (radioBtn13->GetValue())
+    {
+        textCtrl13->Enable(true);
+        // Display problem happens even if SetFocus() is not done.
+        textCtrl13->SetFocus();
+    }
+    else
+        textCtrl13->Enable(false);
+}
+
+static wxCheckBox* checkBox14;
+static wxTextCtrl* textCtrl14;
+
+wxPanel* SettingsDialog::CreateGeneral3SettingsPage(wxWindow* parent)
+{
+    wxPanel* panel = new wxPanel(parent, wxID_ANY);
+
+    wxBoxSizer *topSizer = new wxBoxSizer( wxVERTICAL );
+    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );
+
+    //// AUTOSAVE
+
+    wxString autoSaveLabel = _("&Auto-save every");
+    wxString minsLabel = _("mins");
+
+    wxBoxSizer* itemSizer12 = new wxBoxSizer( wxHORIZONTAL );
+    checkBox14 = new wxCheckBox(panel, ID_AUTO_SAVE3, autoSaveLabel, wxDefaultPosition, wxDefaultSize);
+
+    textCtrl14 = new wxTextCtrl(panel, ID_AUTO_SAVE_MINS3, wxEmptyString,
+        wxDefaultPosition, wxSize(40, wxDefaultCoord));
+
+    itemSizer12->Add(checkBox14, 0, wxALL|wxALIGN_CENTER_VERTICAL, 5);
+    itemSizer12->Add(textCtrl14, 0, wxALL|wxALIGN_CENTER_VERTICAL, 5);
+    itemSizer12->Add(new wxStaticText(panel, wxID_STATIC, minsLabel), 0, wxALL|wxALIGN_CENTER_VERTICAL, 5);
+    item0->Add(itemSizer12, 0, wxGROW|wxALL, 0);
+
+    //textCtrl14->Enable(false);
+    checkBox14->Bind(wxEVT_COMMAND_CHECKBOX_CLICKED,
+                        &SettingsDialog::OnChk14, this);
+
+    //// LOAD LAST FILE
+
+    wxBoxSizer* itemSizer3 = new wxBoxSizer( wxHORIZONTAL );
+    wxCheckBox* checkBox3 = new wxCheckBox(panel, ID_LOAD_LAST_PROJECT3, _("&Load last project on startup"), wxDefaultPosition, wxDefaultSize);
+    itemSizer3->Add(checkBox3, 0, wxALL|wxALIGN_CENTER_VERTICAL, 5);
+    item0->Add(itemSizer3, 0, wxGROW|wxALL, 0);
+
+    //// TOOLTIPS
+
+    wxBoxSizer* itemSizer8 = new wxBoxSizer( wxHORIZONTAL );
+    wxCheckBox* checkBox6 = new wxCheckBox(panel, ID_SHOW_TOOLTIPS3, _("Show &tooltips"), wxDefaultPosition, wxDefaultSize);
     itemSizer8->Add(checkBox6, 0, wxALL|wxALIGN_CENTER_VERTICAL, 5);
     item0->Add(itemSizer8, 0, wxGROW|wxALL, 0);
 
@@ -2837,6 +2986,86 @@
     return panel;
 }
 
+void SettingsDialog::OnChk14(wxCommandEvent&)
+{
+    if (checkBox14->IsChecked())
+    {
+        //textCtrl14->Enable(true);
+        // Display problem happens even if SetFocus() is not done.
+        textCtrl14->SetFocus();
+    }
+    //else
+        //textCtrl14->Enable(false);
+}
+
+static wxRadioButton* radioBtn15;
+static wxTextCtrl* textCtrl15;
+
+wxPanel* SettingsDialog::CreateGeneral4SettingsPage(wxWindow* parent)
+{
+    wxPanel* panel = new wxPanel(parent, wxID_ANY);
+
+    wxBoxSizer *topSizer = new wxBoxSizer( wxVERTICAL );
+    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );
+
+    //// LOAD LAST FILE
+
+    wxBoxSizer* itemSizer3 = new wxBoxSizer( wxHORIZONTAL );
+    wxRadioButton* radioBtn3 = new wxRadioButton(panel, ID_LOAD_LAST_PROJECT4, _("&Load last project on startup"), wxDefaultPosition, wxDefaultSize, wxRB_GROUP);
+    itemSizer3->Add(radioBtn3, 0, wxALL|wxALIGN_CENTER_VERTICAL, 5);
+    item0->Add(itemSizer3, 0, wxGROW|wxALL, 0);
+    radioBtn3->Bind(wxEVT_COMMAND_RADIOBUTTON_SELECTED,
+                        &SettingsDialog::OnRad15, this);
+
+    //// AUTOSAVE
+
+    wxString autoSaveLabel = _("&Auto-save every");
+    wxString minsLabel = _("mins");
+
+    wxBoxSizer* itemSizer12 = new wxBoxSizer( wxHORIZONTAL );
+    radioBtn15 = new wxRadioButton(panel, ID_AUTO_SAVE4, autoSaveLabel, wxDefaultPosition, wxDefaultSize);
+
+    textCtrl15 = new wxTextCtrl(panel, ID_AUTO_SAVE_MINS4, wxEmptyString,
+        wxDefaultPosition, wxSize(40, wxDefaultCoord));
+
+    itemSizer12->Add(radioBtn15, 0, wxALL|wxALIGN_CENTER_VERTICAL, 5);
+    itemSizer12->Add(textCtrl15, 0, wxALL|wxALIGN_CENTER_VERTICAL, 5);
+    itemSizer12->Add(new wxStaticText(panel, wxID_STATIC, minsLabel), 0, wxALL|wxALIGN_CENTER_VERTICAL, 5);
+    item0->Add(itemSizer12, 0, wxGROW|wxALL, 0);
+
+    //textCtrl15->Enable(false);
+    radioBtn15->Bind(wxEVT_COMMAND_RADIOBUTTON_SELECTED,
+                        &SettingsDialog::OnRad15, this);
+
+    //// TOOLTIPS
+
+    wxBoxSizer* itemSizer8 = new wxBoxSizer( wxHORIZONTAL );
+    wxRadioButton* radioBtn6 = new wxRadioButton(panel, ID_SHOW_TOOLTIPS4, _("Show &tooltips"), wxDefaultPosition, wxDefaultSize);
+    itemSizer8->Add(radioBtn6, 0, wxALL|wxALIGN_CENTER_VERTICAL, 5);
+    item0->Add(itemSizer8, 0, wxGROW|wxALL, 0);
+    radioBtn6->Bind(wxEVT_COMMAND_RADIOBUTTON_SELECTED,
+                        &SettingsDialog::OnRad15, this);
+
+    topSizer->Add( item0, 1, wxGROW|wxALIGN_CENTRE|wxALL, 5 );
+
+    panel->SetSizerAndFit(topSizer);
+    radioBtn3->SetValue(true);
+
+    return panel;
+}
+
+void SettingsDialog::OnRad15(wxCommandEvent&)
+{
+    if (radioBtn15->GetValue())
+    {
+        //textCtrl15->Enable(true);
+        // Display problem happens even if SetFocus() is not done.
+        textCtrl15->SetFocus();
+    }
+    //else
+        //textCtrl15->Enable(false);
+}
+
 wxPanel* SettingsDialog::CreateAestheticSettingsPage(wxWindow* parent)
 {
     wxPanel* panel = new wxPanel(parent, wxID_ANY);
diff -uNr wx-orig/samples/dialogs/dialogs.h wx-mine/samples/dialogs/dialogs.h
--- wx-orig/samples/dialogs/dialogs.h	2011-10-18 20:30:31.000000000 -0400
+++ wx-mine/samples/dialogs/dialogs.h	2012-12-12 17:45:25.000000000 -0500
@@ -317,6 +317,13 @@
     ~SettingsDialog();
 
     wxPanel* CreateGeneralSettingsPage(wxWindow* parent);
+    wxPanel* CreateGeneral2SettingsPage(wxWindow* parent);
+    wxPanel* CreateGeneral3SettingsPage(wxWindow* parent);
+    wxPanel* CreateGeneral4SettingsPage(wxWindow* parent);
+    void OnChk12(wxCommandEvent&);
+    void OnRad13(wxCommandEvent&);
+    void OnChk14(wxCommandEvent&);
+    void OnRad15(wxCommandEvent&);
     wxPanel* CreateAestheticSettingsPage(wxWindow* parent);
 
 protected:
@@ -327,6 +334,21 @@
         ID_AUTO_SAVE_MINS,
         ID_LOAD_LAST_PROJECT,
 
+        ID_SHOW_TOOLTIPS2,
+        ID_AUTO_SAVE2,
+        ID_AUTO_SAVE_MINS2,
+        ID_LOAD_LAST_PROJECT2,
+
+        ID_SHOW_TOOLTIPS3,
+        ID_AUTO_SAVE3,
+        ID_AUTO_SAVE_MINS3,
+        ID_LOAD_LAST_PROJECT3,
+
+        ID_SHOW_TOOLTIPS4,
+        ID_AUTO_SAVE4,
+        ID_AUTO_SAVE_MINS4,
+        ID_LOAD_LAST_PROJECT4,
+
         ID_APPLY_SETTINGS_TO,
         ID_BACKGROUND_STYLE,
         ID_FONT_SIZE

Index: configure
===================================================================
--- configure	(revision 78051)
+++ configure	(working copy)
@@ -3339,6 +3339,52 @@
   as_fn_set_status $ac_retval
 
 } # ac_fn_cxx_try_run
+
+# ac_fn_c_check_decl LINENO SYMBOL VAR INCLUDES
+# ---------------------------------------------
+# Tests whether SYMBOL is declared in INCLUDES, setting cache variable VAR
+# accordingly.
+ac_fn_c_check_decl ()
+{
+  as_lineno=${as_lineno-"$1"} as_lineno_stack=as_lineno_stack=$as_lineno_stack
+  as_decl_name=`echo $2|sed 's/ *(.*//'`
+  as_decl_use=`echo $2|sed -e 's/(/((/' -e 's/)/) 0&/' -e 's/,/) 0& (/g'`
+  { $as_echo "$as_me:${as_lineno-$LINENO}: checking whether $as_decl_name is declared" >&5
+$as_echo_n "checking whether $as_decl_name is declared... " >&6; }
+if eval \${$3+:} false; then :
+  $as_echo_n "(cached) " >&6
+else
+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+$4
+int
+main ()
+{
+#ifndef $as_decl_name
+#ifdef __cplusplus
+  (void) $as_decl_use;
+#else
+  (void) $as_decl_name;
+#endif
+#endif
+
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_compile "$LINENO"; then :
+  eval "$3=yes"
+else
+  eval "$3=no"
+fi
+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+fi
+eval ac_res=\$$3
+	       { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_res" >&5
+$as_echo "$ac_res" >&6; }
+  eval $as_lineno_stack; ${as_lineno_stack:+:} unset as_lineno
+
+} # ac_fn_c_check_decl
 cat >config.log <<_ACEOF
 This file contains any messages produced by compilers while
 running configure, to aid debugging if configure makes a mistake.
@@ -34822,8 +34868,101 @@
     fi
 
         SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS keyboard"
+
+        ac_fn_c_check_decl "$LINENO" "strerror_r" "ac_cv_have_decl_strerror_r" "$ac_includes_default"
+if test "x$ac_cv_have_decl_strerror_r" = xyes; then :
+  ac_have_decl=1
+else
+  ac_have_decl=0
 fi
 
+cat >>confdefs.h <<_ACEOF
+#define HAVE_DECL_STRERROR_R $ac_have_decl
+_ACEOF
+
+for ac_func in strerror_r
+do :
+  ac_fn_c_check_func "$LINENO" "strerror_r" "ac_cv_func_strerror_r"
+if test "x$ac_cv_func_strerror_r" = xyes; then :
+  cat >>confdefs.h <<_ACEOF
+#define HAVE_STRERROR_R 1
+_ACEOF
+
+fi
+done
+
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether strerror_r returns char *" >&5
+$as_echo_n "checking whether strerror_r returns char *... " >&6; }
+if ${ac_cv_func_strerror_r_char_p+:} false; then :
+  $as_echo_n "(cached) " >&6
+else
+
+    ac_cv_func_strerror_r_char_p=no
+    if test $ac_cv_have_decl_strerror_r = yes; then
+      cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+$ac_includes_default
+int
+main ()
+{
+
+	  char buf[100];
+	  char x = *strerror_r (0, buf, sizeof buf);
+	  char *p = strerror_r (0, buf, sizeof buf);
+	  return !p || x;
+
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_compile "$LINENO"; then :
+  ac_cv_func_strerror_r_char_p=yes
+fi
+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+    else
+      # strerror_r is not declared.  Choose between
+      # systems that have relatively inaccessible declarations for the
+      # function.  BeOS and DEC UNIX 4.0 fall in this category, but the
+      # former has a strerror_r that returns char*, while the latter
+      # has a strerror_r that returns `int'.
+      # This test should segfault on the DEC system.
+      if test "$cross_compiling" = yes; then :
+  :
+else
+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+$ac_includes_default
+	extern char *strerror_r ();
+int
+main ()
+{
+char buf[100];
+	  char x = *strerror_r (0, buf, sizeof buf);
+	  return ! isalpha (x);
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_run "$LINENO"; then :
+  ac_cv_func_strerror_r_char_p=yes
+fi
+rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \
+  conftest.$ac_objext conftest.beam conftest.$ac_ext
+fi
+
+    fi
+
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_func_strerror_r_char_p" >&5
+$as_echo "$ac_cv_func_strerror_r_char_p" >&6; }
+if test $ac_cv_func_strerror_r_char_p = yes; then
+
+$as_echo "#define STRERROR_R_CHAR_P 1" >>confdefs.h
+
+fi
+
+fi
+
 if test "$wxUSE_LONGLONG" = "yes"; then
   $as_echo "#define wxUSE_LONGLONG 1" >>confdefs.h
 
Index: configure.in
===================================================================
--- configure.in	(revision 78051)
+++ configure.in	(working copy)
@@ -5925,6 +5925,9 @@
 
     dnl the keyboard sample requires wxUSE_LOG
     SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS keyboard"
+
+    dnl wxSysErrorMsg uses strerror_r
+    AC_FUNC_STRERROR_R
 fi
 
 if test "$wxUSE_LONGLONG" = "yes"; then
Index: setup.h.in
===================================================================
--- setup.h.in	(revision 78051)
+++ setup.h.in	(working copy)
@@ -1254,6 +1254,12 @@
 /* Define if you have kqueu_xxx() functions. */
 #undef wxHAS_KQUEUE
 
+/* Define if streror_r is available */
+#undef HAVE_STRERROR_R
+
+/* Define if strerror_r is available and returns char* */
+#undef STRERROR_R_CHAR_P
+
 /* -------------------------------------------------------------------------
    Win32 adjustments section
    ------------------------------------------------------------------------- */
Index: src/common/log.cpp
===================================================================
--- src/common/log.cpp	(revision 78051)
+++ src/common/log.cpp	(working copy)
@@ -41,6 +41,7 @@
 #include "wx/msgout.h"
 #include "wx/textfile.h"
 #include "wx/thread.h"
+#include "wx/tls.h"
 #include "wx/private/threadinfo.h"
 #include "wx/crt.h"
 #include "wx/vector.h"
@@ -1061,6 +1062,36 @@
 #endif  //Win/Unix
 }
 
+namespace {
+// Small type to hold a static buffer to be used and returned by wxSysErrorMsg.
+struct PerThreadData
+{
+    enum {
+        size = 1024
+    };
+    wxChar szBuf[size];
+};
+
+#ifdef HAVE_STRERROR_R
+// Wrap around strerror_r which exists in two different versions
+bool wxStrerror_r(int errnum, char *buf, size_t buflen)
+{
+    #ifdef STRERROR_R_CHAR_P
+        // strerror_r returns char*, null indicates failure.
+        bool ret = strerror_r(errnum, buf, buflen) != 0;
+    #else
+        // strerror_r returns int, 0 indicates success.
+        bool ret = strerror_r(errnum, buf, buflen) == 0;
+    #endif
+    if (!ret)
+    {
+        *buf = wxS('\0');
+    }
+    return ret;
+}
+#endif
+}
+
 // get error message from system
 const wxChar *wxSysErrorMsg(unsigned long nErrCode)
 {
@@ -1068,7 +1099,8 @@
         nErrCode = wxSysErrorCode();
 
 #if defined(__WINDOWS__) && !defined(__WXMICROWIN__)
-    static wxChar s_szBuf[1024];
+    static wxTLS_TYPE(PerThreadData) s_perThreadData;
+    wxChar* szBuf = wxTLS_VALUE(s_perThreadData).szBuf;
 
     // get error message from system
     LPVOID lpMsgBuf;
@@ -1085,44 +1117,58 @@
     {
         // if this happens, something is seriously wrong, so don't use _() here
         // for safety
-        wxSprintf(s_szBuf, wxS("unknown error %lx"), nErrCode);
-        return s_szBuf;
+        wxSprintf(szBuf, wxS("unknown error %lx"), nErrCode);
+        return szBuf;
     }
 
-
     // copy it to our buffer and free memory
     // Crashes on SmartPhone (FIXME)
 #if !defined(__SMARTPHONE__) /* of WinCE */
     if( lpMsgBuf != 0 )
     {
-        wxStrlcpy(s_szBuf, (const wxChar *)lpMsgBuf, WXSIZEOF(s_szBuf));
+        wxStrlcpy(szBuf, (const wxChar *)lpMsgBuf, PerThreadData::size);
 
         LocalFree(lpMsgBuf);
 
         // returned string is capitalized and ended with '\r\n' - bad
-        s_szBuf[0] = (wxChar)wxTolower(s_szBuf[0]);
-        size_t len = wxStrlen(s_szBuf);
+        szBuf[0] = (wxChar)wxTolower(szBuf[0]);
+        size_t len = wxStrlen(szBuf);
         if ( len > 0 ) {
             // truncate string
-            if ( s_szBuf[len - 2] == wxS('\r') )
-                s_szBuf[len - 2] = wxS('\0');
+            if ( szBuf[len - 2] == wxS('\r') )
+                szBuf[len - 2] = wxS('\0');
         }
     }
     else
 #endif // !__SMARTPHONE__
     {
-        s_szBuf[0] = wxS('\0');
+        szBuf[0] = wxS('\0');
     }
 
-    return s_szBuf;
+    return szBuf;
 #else // !__WINDOWS__
     #if wxUSE_UNICODE
-        static wchar_t s_wzBuf[1024];
-        wxConvCurrent->MB2WC(s_wzBuf, strerror((int)nErrCode),
-                             WXSIZEOF(s_wzBuf) - 1);
-        return s_wzBuf;
+        static wxTLS_TYPE(PerThreadData) s_perThreadData;
+        wxChar* szBuf = wxTLS_VALUE(s_perThreadData).szBuf;
+
+        #ifdef HAVE_STRERROR_R
+            char mbstr[1024];
+            wxStrerror_r((int)nErrCode, mbstr, WXSIZEOF(mbstr));
+        #else
+            char* mbstr = strerror((int)nErrCode);
+        #endif
+        wxConvCurrent->MB2WC(szBuf, mbstr,
+                             PerThreadData::size - 1);
+        return szBuf;
     #else
-        return strerror((int)nErrCode);
+        #ifdef HAVE_STRERROR_R
+            static wxTLS_TYPE(PerThreadData) s_perThreadData;
+            wxChar* szBuf = wxTLS_VALUE(s_perThreadData).szBuf;
+            wxStrerror_r((int)nErrCode, szBuf, PerThreadData::size);
+            return szBuf;
+        #else // !HAVE_STRERROR_R
+            return strerror((int)nErrCode);
+        #endif // HAVE_STRERROR_R/!HAVE_STRERROR_R
     #endif
 #endif  // __WINDOWS__/!__WINDOWS__
 }

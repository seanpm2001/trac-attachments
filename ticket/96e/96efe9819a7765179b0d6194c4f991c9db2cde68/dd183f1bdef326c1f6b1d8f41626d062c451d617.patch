Index: src/common/memoryallocator.cpp
===================================================================
--- src/common/memoryallocator.cpp	(revision 0)
+++ src/common/memoryallocator.cpp	(revision 0)
@@ -0,0 +1,56 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        src/common/memoryallocator.cpp
+// Purpose:     wxMemoryAllocator, wxMallocAllocator, wxNewAllocator
+// Author:      Aron Helser
+// RCS-ID:      $Id: $
+// Copyright:   (c) wxWidgets team
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+// For compilers that support precompilation, includes "wx.h".
+#include "wx/wxprec.h"
+
+#ifdef __BORLANDC__
+    #pragma hdrstop
+#endif
+
+#include "wx/memoryallocator.h"
+
+//-----------------------------------------------------------------------------
+// wxMallocAllocator
+//-----------------------------------------------------------------------------
+
+// singleton accessor:
+wxMemoryAllocator *wxMallocAllocator::Get()
+{
+   // This must be a local static inside this method, otherwise we can't be sure
+   // it is initialized before other non-local static objects that use it.
+   static wxMallocAllocator s_alloc;
+   return &s_alloc;
+}
+
+//-----------------------------------------------------------------------------
+// wxNewAllocator
+//-----------------------------------------------------------------------------
+
+// singleton accessor:
+wxMemoryAllocator *wxNewAllocator::Get()
+{
+   // This must be a local static inside this method, otherwise we can't be sure
+   // it is initialized before other non-local static objects that use it.
+   static wxNewAllocator s_alloc;
+   return &s_alloc;
+}
+
+//-----------------------------------------------------------------------------
+// wxNewNothrowAllocator
+//-----------------------------------------------------------------------------
+
+// singleton accessor:
+wxMemoryAllocator *wxNewNothrowAllocator::Get()
+{
+   // This must be a local static inside this method, otherwise we can't be sure
+   // it is initialized before other non-local static objects that use it.
+   static wxNewNothrowAllocator s_alloc;
+   return &s_alloc;
+}

Property changes on: src/common/memoryallocator.cpp
___________________________________________________________________
Added: svn:executable
   + *

Index: src/common/image.cpp
===================================================================
--- src/common/image.cpp	(revision 56826)
+++ src/common/image.cpp	(working copy)
@@ -31,6 +31,7 @@
 #include "wx/filefn.h"
 #include "wx/wfstream.h"
 #include "wx/xpmdecod.h"
+#include "wx/memoryallocator.h"
 
 // For memcpy
 #include <string.h>
@@ -87,6 +88,9 @@
     wxArrayString   m_optionNames;
     wxArrayString   m_optionValues;
 
+    // record allocator in effect when this data was created.
+    wxMemoryAllocator *m_alloc;
+   
     DECLARE_NO_COPY_CLASS(wxImageRefData)
 };
 
@@ -105,17 +109,19 @@
     m_ok = false;
     m_static =
     m_staticAlpha = false;
+    m_alloc = wxImage::GetDefaultAllocator();
 }
 
 wxImageRefData::~wxImageRefData()
 {
     if ( !m_static )
-        free( m_data );
+        m_alloc->Free( m_data );
     if ( !m_staticAlpha )
-        free( m_alpha );
+        m_alloc->Free( m_alpha );
 }
 
 wxList wxImage::sm_handlers;
+wxMemoryAllocator *wxImage::sm_alloc; // NULL by default
 
 wxImage wxNullImage;
 
@@ -186,7 +192,7 @@
 
     m_refData = new wxImageRefData();
 
-    M_IMGDATA->m_data = (unsigned char *) malloc( width*height*3 );
+    M_IMGDATA->m_data = (unsigned char *) GetAllocator()->Alloc( width*height*3 );
     if (!M_IMGDATA->m_data)
     {
         UnRef();
@@ -264,11 +270,16 @@
     unsigned size = unsigned(refData->m_width) * unsigned(refData->m_height);
     if (refData->m_alpha != NULL)
     {
-        refData_new->m_alpha = (unsigned char*)malloc(size);
-        memcpy(refData_new->m_alpha, refData->m_alpha, size);
+       // Note allocator might have changed from previous image to this image - careful.
+        refData_new->m_alpha = (unsigned char*)refData_new->m_alloc->Alloc(size);
+        if (refData_new->m_alpha) {
+           memcpy(refData_new->m_alpha, refData->m_alpha, size);
+        }
+        // else refData_new->m_alpha is NULL, because memory alloc failed. 
     }
     size *= 3;
-    refData_new->m_data = (unsigned char*)malloc(size);
+    refData_new->m_data = (unsigned char*)refData_new->m_alloc->Alloc(size);
+    // TODO m_data == NULL
     memcpy(refData_new->m_data, refData->m_data, size);
 #if wxUSE_PALETTE
     refData_new->m_palette = refData->m_palette;
@@ -1402,7 +1413,8 @@
     if (HasAlpha())
     {
         const size_t alphaSize = GetWidth() * GetHeight();
-        unsigned char *alpha = (unsigned char*)malloc(alphaSize);
+        unsigned char *alpha = (unsigned char*)GetAllocator()->Alloc(alphaSize);
+        // TODO alpha == NULL
         memcpy(alpha, GetAlpha(), alphaSize);
         image.InitAlpha();
         image.SetAlpha(alpha);
@@ -1680,11 +1692,11 @@
 
     if ( !alpha )
     {
-        alpha = (unsigned char *)malloc(M_IMGDATA->m_width*M_IMGDATA->m_height);
+        alpha = (unsigned char *)GetAllocator()->Alloc(M_IMGDATA->m_width*M_IMGDATA->m_height);
     }
 
     if( !M_IMGDATA->m_staticAlpha )
-        free(M_IMGDATA->m_alpha);
+        GetAllocator()->Free(M_IMGDATA->m_alpha);
 
     M_IMGDATA->m_alpha = alpha;
     M_IMGDATA->m_staticAlpha = static_data;
@@ -1919,7 +1931,7 @@
     }
 
     if( !M_IMGDATA->m_staticAlpha )
-        free(M_IMGDATA->m_alpha);
+        GetAllocator()->Free(M_IMGDATA->m_alpha);
 
     M_IMGDATA->m_alpha = NULL;
     M_IMGDATA->m_staticAlpha = false;
@@ -2607,6 +2619,26 @@
     }
 }
 
+wxMemoryAllocator *wxImage::GetDefaultAllocator()
+{
+   // initialize static data member, if needed.
+   if (sm_alloc == NULL) sm_alloc = wxMallocAllocator::Get();
+   return sm_alloc;
+};
+
+void wxImage::SetDefaultAllocator(wxMemoryAllocator * ma)
+{
+   if (ma == NULL) sm_alloc = wxMallocAllocator::Get();
+   else sm_alloc = ma;
+}
+
+wxMemoryAllocator *wxImage::GetAllocator() const
+{
+   // if valid, return the allocator in effect when we were created.
+   if (m_refData) return M_IMGDATA->m_alloc;
+   return GetDefaultAllocator();
+}
+
 //-----------------------------------------------------------------------------
 // wxImageHandler
 //-----------------------------------------------------------------------------
Index: include/wx/memoryallocator.h
===================================================================
--- include/wx/memoryallocator.h	(revision 0)
+++ include/wx/memoryallocator.h	(revision 0)
@@ -0,0 +1,94 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        wx/memoryallocator.h
+// Purpose:     wxMemoryAllocator, wxMallocAllocator, wxNewAllocator
+// Author:      Aron Helser
+// RCS-ID:      $Id: $
+// Copyright:   (c) wxWidgets team
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+#ifndef _WX_MEMORYALLOCATOR_H_
+#define _WX_MEMORYALLOCATOR_H_
+
+#include "wx/defs.h"
+
+
+//-----------------------------------------------------------------------------
+// wxMemoryAllocator
+//-----------------------------------------------------------------------------
+
+class WXDLLEXPORT wxMemoryAllocator
+{
+public:
+    virtual ~wxMemoryAllocator() { }
+    
+    // may either return NULL or throw std::bad_alloc on error
+    virtual void *Alloc(size_t size) = 0;
+   
+    // should not throw, may be called with NULL pointer
+    virtual void Free(void *ptr) = 0;
+};
+
+
+//-----------------------------------------------------------------------------
+// wxMallocAllocator
+//-----------------------------------------------------------------------------
+
+class WXDLLEXPORT wxMallocAllocator: public wxMemoryAllocator
+{
+public:
+    // Will return NULL on error
+    virtual void *Alloc(size_t size) {
+        return malloc(size);
+    }
+   
+    // should not throw, may be called with NULL pointer
+    virtual void Free(void *ptr) {
+        free(ptr);
+    }
+
+    // singleton accessor:
+    static wxMemoryAllocator *Get();
+};
+
+//-----------------------------------------------------------------------------
+// wxNewAllocator
+//-----------------------------------------------------------------------------
+
+class WXDLLEXPORT wxNewAllocator : public wxMemoryAllocator
+{
+public:
+    // will trigger std::set_new_handler() first, then throw std::bad_alloc on
+    // out-of-memory error
+    virtual void *Alloc(size_t size) {
+        return new char[size];
+    }
+    virtual void Free(void *ptr) {
+        delete [] static_cast<char *>( ptr );
+    }
+    // singleton accessor:
+    static wxMemoryAllocator *Get();
+};
+
+//-----------------------------------------------------------------------------
+// wxNewNothrowAllocator
+//-----------------------------------------------------------------------------
+
+class WXDLLEXPORT wxNewNothrowAllocator : public wxMemoryAllocator
+{
+public:
+    // will trigger std::set_new_handler() first, then return NULL
+    // out-of-memory error
+    virtual void *Alloc(size_t size) {
+        return new (std::nothrow) char[size];
+    }
+    virtual void Free(void *ptr) {
+        delete [] static_cast<char *>( ptr );
+    }
+    // singleton accessor:
+    static wxMemoryAllocator *Get();
+};
+
+
+#endif
+  // _WX_MEMORYALLOCATOR_H_

Property changes on: include/wx/memoryallocator.h
___________________________________________________________________
Added: svn:executable
   + *

Index: include/wx/image.h
===================================================================
--- include/wx/image.h	(revision 56826)
+++ include/wx/image.h	(working copy)
@@ -64,6 +64,7 @@
 class WXDLLIMPEXP_FWD_CORE wxImageHandler;
 class WXDLLIMPEXP_FWD_CORE wxImage;
 class WXDLLIMPEXP_FWD_CORE wxPalette;
+class WXDLLIMPEXP_FWD_CORE wxMemoryAllocator;
 
 //-----------------------------------------------------------------------------
 // wxVariant support
@@ -409,10 +410,15 @@
     static HSVValue RGBtoHSV(const RGBValue& rgb);
     static RGBValue HSVtoRGB(const HSVValue& hsv);
 
-
+    static wxMemoryAllocator *GetDefaultAllocator();
+    wxMemoryAllocator *GetAllocator() const;
+    static void SetDefaultAllocator(wxMemoryAllocator *ma);
 protected:
     static wxList   sm_handlers;
 
+    // choose default allocator for pixel buffers.
+    static wxMemoryAllocator *sm_alloc;
+   
     // return the index of the point with the given coordinates or -1 if the
     // image is invalid of the coordinates are out of range
     //

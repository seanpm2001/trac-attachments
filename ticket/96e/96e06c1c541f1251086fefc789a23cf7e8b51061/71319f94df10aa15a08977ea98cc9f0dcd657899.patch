diff --git a/include/wx/glcanvas.h b/include/wx/glcanvas.h
index 5ba99c1..3c45b4b 100644
--- a/include/wx/glcanvas.h
+++ b/include/wx/glcanvas.h
@@ -50,10 +50,32 @@ enum
     WX_GL_SAMPLE_BUFFERS,  // 1 for multisampling support (antialiasing)
     WX_GL_SAMPLES,         // 4 for 2x2 antialiasing supersampling on most graphics cards
     WX_GL_CORE_PROFILE,    // use an OpenGL core profile
+    WX_GL_VERSION,         // GLSL shader style OpenGL version number requested
     WX_GL_MAJOR_VERSION,   // major OpenGL version of the core profile
-    WX_GL_MINOR_VERSION    // minor OpenGL version of the core profile
+    WX_GL_MINOR_VERSION,   // minor OpenGL version of the core profile
+    WX_GL_DEBUG_CONTEXT,   // Use platform/vendor specific debugging options
 };
 
+// OpenGL minimum version number required
+#define WX_GL_VERSION_MAJOR_MINOR(major, minor) ((major) * 100 + (minor) * 10)
+
+// Old style OpenGL. Requesting version < 3.0 gives backwards compatible profile
+#define WX_GL_150 WX_GL_VERSION_MAJOR_MINOR(1, 5)
+#define WX_GL_210 WX_GL_VERSION_MAJOR_MINOR(2, 1)
+// New versions, always core profile. (The spec says backwardly compatible
+// OpenGL 3/4 contexts are allowed but discouraged. Vendors either don't
+// provide them or won't fix the numerous bugs that arise in mixed code.)
+#define WX_GL_300 WX_GL_VERSION_MAJOR_MINOR(3, 0)
+#define WX_GL_310 WX_GL_VERSION_MAJOR_MINOR(3, 1)
+#define WX_GL_320 WX_GL_VERSION_MAJOR_MINOR(3, 2)
+#define WX_GL_330 WX_GL_VERSION_MAJOR_MINOR(3, 3)
+#define WX_GL_400 WX_GL_VERSION_MAJOR_MINOR(4, 0)
+#define WX_GL_410 WX_GL_VERSION_MAJOR_MINOR(4, 1)
+#define WX_GL_420 WX_GL_VERSION_MAJOR_MINOR(4, 2)
+#define WX_GL_430 WX_GL_VERSION_MAJOR_MINOR(4, 3)
+#define WX_GL_440 WX_GL_VERSION_MAJOR_MINOR(4, 4)
+#define WX_GL_450 WX_GL_VERSION_MAJOR_MINOR(4, 5)
+
 #define wxGLCanvasName wxT("GLCanvas")
 
 // ----------------------------------------------------------------------------
diff --git a/include/wx/msw/glcanvas.h b/include/wx/msw/glcanvas.h
index 52b82f4..f90418b 100644
--- a/include/wx/msw/glcanvas.h
+++ b/include/wx/msw/glcanvas.h
@@ -76,6 +76,9 @@ public:
     // get the HDC used for OpenGL rendering
     HDC GetHDC() const { return m_hDC; }
 
+    // return attribs for wglCreateContextAttribsARB
+    const int *GetWGLContextAttribs() const { return m_wglContextAttribs; }
+
     // try to find pixel format matching the given attributes list for the
     // specified HDC, return 0 on error, otherwise pfd is filled in with the
     // information from attribList if non-NULL
@@ -146,9 +149,13 @@ protected:
     // set up the pixel format using the given attributes and palette
     int DoSetup(PIXELFORMATDESCRIPTOR &pfd, const int *attribList);
 
+    // initializes wglContextAttribs as defined by wxattrs which must be 0-terminated
+    static void InitWGLContextAttribs(const int *wxattrs, int *wglctxattribs);
 
     // HDC for this window, we keep it all the time
     HDC m_hDC;
+    // max 8 attributes plus terminator
+    int m_wglContextAttribs[9];
 
 private:
     DECLARE_EVENT_TABLE()
diff --git a/interface/wx/glcanvas.h b/interface/wx/glcanvas.h
index 56504a8..533e5f9 100644
--- a/interface/wx/glcanvas.h
+++ b/interface/wx/glcanvas.h
@@ -27,6 +27,11 @@
     initialized. (This applies to sharing display lists among contexts
     analogously.)
 
+    Modern versions of OpenGL have different 'core' and 'compatible' context
+    profiles and other options. Because of platform differences, these can't be
+    set on the wxGLContext itself. Instead any context attributes are specified
+    in the attribute list of the canvas used to create the context.
+
     Note that some wxGLContext features are extremely platform-specific - its
     best to check your native platform's glcanvas header (on windows
     include/wx/msw/glcanvas.h) to see what features your native platform
@@ -140,28 +145,43 @@ enum
     WX_GL_SAMPLES,
 
     /**
-        Request an OpenGL core profile.
+        Request an OpenGL core profile, ie with at least version 3.0
+        and using only the modern 'core' API.
 
-        Notice that using this attribute will result in also requesting OpenGL
-        at least version 3.0.
+        Obligatory on MacOS X if you want to use anything later than
+        OpenGL 2.1. Strongly recommended on MS Windows and Unix, as
+        backwards compatible default profiles are inefficient and
+        bug-ridden.
 
-        See ::WX_GL_MAJOR_VERSION and ::WX_GL_MINOR_VERSION for more precise
-        version selection.
+        See below for more precise version selection.
 
         @since 3.1.0
      */
     WX_GL_CORE_PROFILE,
 
     /**
+        Request specific minimum version of OpenGL. Must be followed by
+        the major and minor version number encoded as single integer in
+        the more convenient form as used by OpenGL Shading Language, eg
+        for version 3.3 write 330.
+
+        If the version requested is < 300, a compatibility profile will
+        be created. Specifying the version for old pre OpenGL 3 code is
+        not necessary, but makes the code clearer. If the version requested
+        is >= 300, a core profile (above) will be created.
+
+        As of MacOS X 10.10, OpenGL 4 is available. Only took 4 years...
+
+        @since 3.1.0
+    */
+    WX_GL_VERSION,
+
+    /**
         Request specific OpenGL core major version number (>= 3).
 
         This attribute should be followed by the major version number
         requested.
 
-        It has no effect under OS X where specifying ::WX_GL_CORE_PROFILE will
-        result in using OpenGL version at least 3.2 but can still be used
-        there for portability.
-
         @since 3.1.0
      */
     WX_GL_MAJOR_VERSION,
@@ -176,6 +196,12 @@ enum
      */
     WX_GL_MINOR_VERSION
 
+    /**
+        Use platform/vendor specific debugging options, if present.
+
+        @since 3.1.0
+    */
+    WX_GL_DEBUG_CONTEXT,
 };
 
 /**
diff --git a/src/msw/glcanvas.cpp b/src/msw/glcanvas.cpp
index 58a3658..fb59c15 100644
--- a/src/msw/glcanvas.cpp
+++ b/src/msw/glcanvas.cpp
@@ -151,15 +151,9 @@ typedef HGLRC(WINAPI * PFNWGLCREATECONTEXTATTRIBSARBPROC)
 
 IMPLEMENT_CLASS(wxGLContext, wxObject)
 
-// The window will always be created first so the array will be initialized
-// and then the window will be assigned to the context.
-// max 8 attributes plus terminator
-// if first is 0, create legacy context
-static int s_wglContextAttribs[9] = {0};
-
 wxGLContext::wxGLContext(wxGLCanvas *win, const wxGLContext* other)
 {
-    if ( s_wglContextAttribs[0] == 0 ) // create legacy context
+    if ( win->GetWGLContextAttribs()[0] == 0 ) // create legacy context
     {
         m_glContext = wglCreateContext(win->GetHDC());
         wxCHECK_RET( m_glContext, wxT("Couldn't create OpenGL context") );
@@ -180,14 +174,14 @@ wxGLContext::wxGLContext(wxGLCanvas *win, const wxGLContext* other)
 
         if ( !wglCreateContextAttribsARB )
         {
-            wxLogError(_("Core OpenGL profile is not supported by the OpenGL driver."));
+            wxLogError(_("Cannot create core profile: wglCreateContextAttribsARB is not supported by the OpenGL driver."));
             return;
         }
 
         m_glContext = wglCreateContextAttribsARB(
-            win->GetHDC(), 0, s_wglContextAttribs);
+            win->GetHDC(), 0, win->GetWGLContextAttribs());
         wxCHECK_RET( m_glContext,
-                     wxT("Couldn't create core profile OpenGL context") );
+                     wxT("Couldn't create OpenGL context with wglCreateContextAttribsARB") );
     }
 
     if ( other )
@@ -240,6 +234,7 @@ void wxGLCanvas::Init()
     m_glContext = NULL;
 #endif
     m_hDC = NULL;
+	m_wglContextAttribs[0] = 0;
 }
 
 wxGLCanvas::wxGLCanvas(wxWindow *parent,
@@ -312,58 +307,6 @@ bool wxGLCanvas::Create(wxWindow *parent,
     if ( !CreateWindow(parent, id, pos, size, style, name) )
         return false;
 
-    // these will be used for the context creation attributes
-    // if a core profile is requested
-    bool useGLCoreProfile = false;
-
-    // the minimum gl core version is 3.0
-    int glVersionMajor = 3,
-        glVersionMinor = 0;
-
-    // Check for a core profile request
-    if ( attribList )
-    {
-        for ( int i = 0; attribList[i]; )
-        {
-            switch ( attribList[i++] )
-            {
-                case WX_GL_CORE_PROFILE:
-                    useGLCoreProfile = true;
-                    break;
-
-                case WX_GL_MAJOR_VERSION:
-                    glVersionMajor = attribList[i++];
-                    break;
-
-                case WX_GL_MINOR_VERSION:
-                    glVersionMinor = attribList[i++];
-                    break;
-
-                default:
-                    // ignore all other flags for now
-                    break;
-            }
-        }
-    }
-
-    if ( useGLCoreProfile )
-    {
-        s_wglContextAttribs[0] = WGL_CONTEXT_MAJOR_VERSION_ARB;
-        s_wglContextAttribs[1] = glVersionMajor;
-        s_wglContextAttribs[2] = WGL_CONTEXT_MINOR_VERSION_ARB;
-        s_wglContextAttribs[3] = glVersionMinor;
-        s_wglContextAttribs[4] = WGL_CONTEXT_FLAGS_ARB;
-        s_wglContextAttribs[5] = WGL_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB;
-        s_wglContextAttribs[6] = WGL_CONTEXT_PROFILE_MASK_ARB;
-        s_wglContextAttribs[7] = WGL_CONTEXT_CORE_PROFILE_BIT_ARB;
-        s_wglContextAttribs[8] = 0; // terminate
-    }
-    else // create legacy/compatibility context
-    {
-        s_wglContextAttribs[0] = 0;
-    }
-
-
     PIXELFORMATDESCRIPTOR pfd;
     const int setupVal = DoSetup(pfd, attribList);
     if ( setupVal == 0 ) // PixelFormat error
@@ -611,6 +554,19 @@ static int ChoosePixelFormatARB(HDC hdc, const int *attribList)
                 case WX_GL_SAMPLES:
                     ADD_ATTR_VALUE( WGL_SAMPLES_ARB );
                     break;
+
+                // Ignore any context attribs
+
+                case WX_GL_CORE_PROFILE:
+                case WX_GL_DEBUG_CONTEXT:
+                    break;
+
+                case WX_GL_VERSION:
+                case WX_GL_MAJOR_VERSION:
+                case WX_GL_MINOR_VERSION:
+                    src++; // skip int
+                    break;
+
             }
         }
 
@@ -742,6 +698,18 @@ AdjustPFDForAttributes(PIXELFORMATDESCRIPTOR& pfd, const int *attribList)
                 requestFSAA = true; // Remember that multi sample is requested.
                 arg++;              // will call ChoosePixelFormatARB() later
                 break;
+
+			// Ignore any context attribs
+
+			case WX_GL_CORE_PROFILE:
+			case WX_GL_DEBUG_CONTEXT:
+				break;
+
+			case WX_GL_VERSION:
+			case WX_GL_MAJOR_VERSION:
+			case WX_GL_MINOR_VERSION:
+				arg++; // skip int
+				break;
         }
     }
 
@@ -815,6 +783,7 @@ bool wxGLCanvasBase::IsDisplaySupported(const int *attribList)
 int wxGLCanvas::DoSetup(PIXELFORMATDESCRIPTOR &pfd, const int *attribList)
 {
     int pixelFormat = ChooseMatchingPixelFormat(m_hDC, attribList, &pfd);
+	InitWGLContextAttribs(attribList, m_wglContextAttribs);
 
     const bool requestFSAA = pixelFormat == -1;
     if ( requestFSAA )
@@ -835,6 +804,104 @@ int wxGLCanvas::DoSetup(PIXELFORMATDESCRIPTOR &pfd, const int *attribList)
     return requestFSAA ? -1 : 1;
 }
 
+/* static */
+void wxGLCanvas::InitWGLContextAttribs(const int *wxattrs, int *wglctxattribs)
+{
+	wglctxattribs[0] = 0; // default is legacy
+	if ( ! wxattrs )
+		return;
+
+    bool useGLCoreProfile = false;
+
+    // the minimum gl core version is 3.0
+    int glVersionMajor = 3,
+        glVersionMinor = 0,
+		glFlags = 0;
+
+	// For those keeping count, this is the THIRD loop over the attribs array.
+	// Yeah it looks really ugly. But the processing is not expensive in time
+	// or memory, and window/context creation is usually done once at startup.
+
+    // If the version requested is < 3.0, leave the attribs array empty
+    // which forces the old default context creation func to be called.
+    // Alternative would be to set the compatibility bit in the context
+    // profile mask, but then old code would fail on old systems that
+    // didn't have glXCreateContextAttribsARB
+    for ( int arg = 0; wxattrs[arg] != 0; )
+    {
+        switch ( wxattrs[arg++] )
+        {
+            case WX_GL_CORE_PROFILE:
+                useGLCoreProfile = true;
+                break;
+
+            case WX_GL_VERSION:
+                glVersionMajor = wxattrs[arg] / 100;
+                glVersionMinor = (wxattrs[arg] % 100) / 10;
+                arg++;
+                useGLCoreProfile = (glVersionMajor >= 3);
+                break;
+
+            case WX_GL_MAJOR_VERSION:
+                glVersionMajor = wxattrs[arg++];
+                useGLCoreProfile = (glVersionMajor >= 3);
+                break;
+
+            case WX_GL_MINOR_VERSION:
+                glVersionMinor = wxattrs[arg++];
+                break;
+
+            case WX_GL_DEBUG_CONTEXT:
+                glFlags |= WGL_CONTEXT_DEBUG_BIT_ARB;
+                break;
+
+			// Attributes with values that are not context-specific. While it is unlikely that
+			// a value could match one of the WX_GL_ options, let's not take the chance
+			case WX_GL_BUFFER_SIZE:
+			case WX_GL_LEVEL:
+			case WX_GL_AUX_BUFFERS:
+			case WX_GL_MIN_RED:
+			case WX_GL_MIN_GREEN:
+			case WX_GL_MIN_BLUE:
+			case WX_GL_MIN_ALPHA:
+			case WX_GL_DEPTH_SIZE:
+			case WX_GL_STENCIL_SIZE:
+			case WX_GL_MIN_ACCUM_RED:
+			case WX_GL_MIN_ACCUM_GREEN:
+			case WX_GL_MIN_ACCUM_BLUE:
+			case WX_GL_MIN_ACCUM_ALPHA:
+			case WX_GL_SAMPLE_BUFFERS:
+			case WX_GL_SAMPLES:
+				arg ++;
+				break;
+
+            default: break;
+        }
+    }
+
+    if ( useGLCoreProfile )
+    {
+        wglctxattribs[0] = WGL_CONTEXT_MAJOR_VERSION_ARB;
+        wglctxattribs[1] = glVersionMajor;
+        wglctxattribs[2] = WGL_CONTEXT_MINOR_VERSION_ARB;
+        wglctxattribs[3] = glVersionMinor;
+
+        wglctxattribs[4] = WGL_CONTEXT_FLAGS_ARB;
+        wglctxattribs[5] = glFlags;
+
+        wglctxattribs[6] = WGL_CONTEXT_PROFILE_MASK_ARB;
+        wglctxattribs[7] = WGL_CONTEXT_CORE_PROFILE_BIT_ARB;
+
+        wglctxattribs[8] = 0; // terminate
+    }
+    else // create legacy/compatibility context
+    {
+        wglctxattribs[0] = 0;
+    }
+
+
+}
+
 // ----------------------------------------------------------------------------
 // palette stuff
 // ----------------------------------------------------------------------------
diff --git a/src/osx/cocoa/glcanvas.mm b/src/osx/cocoa/glcanvas.mm
index 8783ef4..81c3c26 100644
--- a/src/osx/cocoa/glcanvas.mm
+++ b/src/osx/cocoa/glcanvas.mm
@@ -34,6 +34,17 @@
 
 #include "wx/osx/private.h"
 
+// Allows checking which version of MacOS we're building on
+#include <Availability.h>
+#ifndef __MAC_10_7
+	#define NSOpenGLPFAOpenGLProfile (NSOpenGLPixelFormatAttribute)99
+	#define NSOpenGLProfileVersionLegacy (NSOpenGLPixelFormatAttribute)0x1000
+	#define NSOpenGLProfileVersion3_2Core (NSOpenGLPixelFormatAttribute)0x3200
+#endif
+#ifndef __MAC_10_10
+	#define NSOpenGLProfileVersion4_1Core (NSOpenGLPixelFormatAttribute)0x4100
+#endif
+
 WXGLContext WXGLCreateContext( WXGLPixelFormat pixelFormat, WXGLContext shareContext )
 {
     WXGLContext context = [[NSOpenGLContext alloc] initWithFormat:pixelFormat shareContext: shareContext];
@@ -241,6 +252,39 @@ WXGLPixelFormat WXGLChoosePixelFormat(const int *attribList)
                     data[p++] = NSOpenGLProfileVersion3_2Core;
 
                     break;
+
+                case WX_GL_VERSION:
+                	data[p++] = NSOpenGLPFAOpenGLProfile;
+                	// Apple only define 3.2 and 4.1, but their own doco says that 3.3
+                	// is available as of MacOS 10.7. It's confusing
+                	if ( attribList[arg] < WX_GL_VERSION_MAJOR_MINOR(3, 0) )
+                		data[p++] = NSOpenGLProfileVersionLegacy;
+                	else if ( attribList[arg] < WX_GL_VERSION_MAJOR_MINOR(4, 0) )
+                		data[p++] = NSOpenGLProfileVersion3_2Core;
+                	else
+                		data[p++] = NSOpenGLProfileVersion4_1Core;
+                	arg++;
+                	break;
+
+                case WX_GL_MAJOR_VERSION:
+                	data[p++] = NSOpenGLPFAOpenGLProfile;
+                	if ( attribList[arg] < 3 )
+                		data[p++] = NSOpenGLProfileVersionLegacy;
+                	else if ( attribList[arg] < 4 )
+                		data[p++] = NSOpenGLProfileVersion3_2Core;
+                	else
+                		data[p++] = NSOpenGLProfileVersion4_1Core;
+                	arg++;
+                	break;
+
+                case WX_GL_MINOR_VERSION:
+                	// Ignore it
+                	arg++;
+                	break;
+
+                case WX_GL_DEBUG_CONTEXT:
+                	// Not supported on MacOS
+                	break;
             }
         }
 
@@ -292,7 +336,7 @@ bool wxGLCanvas::Create(wxWindow *parent,
         return false;
 
     // DontCreatePeer();
-    
+
     if ( !wxWindow::Create(parent, id, pos, size, style, name) )
         return false;
 
@@ -325,13 +369,13 @@ bool wxGLCanvas::SwapBuffers()
 bool wxGLContext::SetCurrent(const wxGLCanvas& win) const
 {
     if ( !m_glContext )
-        return false;  
+        return false;
 
     [m_glContext setView: win.GetHandle() ];
     [m_glContext update];
-    
+
     [m_glContext makeCurrentContext];
-    
+
     return true;
 }
 
diff --git a/src/unix/glx11.cpp b/src/unix/glx11.cpp
index c81a8c9..10d2239 100644
--- a/src/unix/glx11.cpp
+++ b/src/unix/glx11.cpp
@@ -116,7 +116,7 @@ IMPLEMENT_CLASS(wxGLContext, wxObject)
 
 wxGLContext::wxGLContext(wxGLCanvas *gc, const wxGLContext *other)
 {
-    if ( gc->GetGLXContextAttribs()[0] != 0 ) // OpenGL 3 context creation
+    if ( gc->GetGLXContextAttribs()[0] != 0 ) // Need new context creation with attribs
     {
         XVisualInfo *vi = gc->GetXVisualInfo();
         wxCHECK_RET( vi, wxT("invalid visual for OpenGL") );
@@ -133,7 +133,7 @@ wxGLContext::wxGLContext(wxGLCanvas *gc, const wxGLContext *other)
             glXGetProcAddress((GLubyte *)"glXCreateContextAttribsARB");
         if ( !glXCreateContextAttribsARB )
         {
-            wxLogError(_("Core OpenGL profile is not supported by the OpenGL driver."));
+            wxLogError(_("Cannot create core profile: glXCreateContextAttribsARB is not supported by the OpenGL driver."));
             return;
         }
 
@@ -269,8 +269,14 @@ void wxGLCanvasX11::InitGLXContextAttribs(const int *wxattrs, int *wxctxattrs)
 
     // the minimum gl core version would be 3.0
     int glVersionMajor = 3,
-        glVersionMinor = 0;
-
+        glVersionMinor = 0,
+        glFlags = 0;
+
+    // If the version requested is < 3.0, leave the attribs array empty
+    // which forces the old default context creation func to be called.
+    // Alternative would be to set the compatibility bit in the context
+    // profile mask, but then old code would fail on old systems that
+    // didn't have glXCreateContextAttribsARB
     for ( int arg = 0; wxattrs[arg] != 0; )
     {
         switch ( wxattrs[arg++] )
@@ -279,14 +285,46 @@ void wxGLCanvasX11::InitGLXContextAttribs(const int *wxattrs, int *wxctxattrs)
                 useGLCoreProfile = true;
                 break;
 
+            case WX_GL_VERSION:
+                glVersionMajor = wxattrs[arg] / 100;
+                glVersionMinor = (wxattrs[arg] % 100) / 10;
+                arg++;
+                useGLCoreProfile = (glVersionMajor >= 3);
+                break;
+
             case WX_GL_MAJOR_VERSION:
                 glVersionMajor = wxattrs[arg++];
+                useGLCoreProfile = (glVersionMajor >= 3);
                 break;
 
             case WX_GL_MINOR_VERSION:
                 glVersionMinor = wxattrs[arg++];
                 break;
 
+            case WX_GL_DEBUG_CONTEXT:
+                glFlags |= GLX_CONTEXT_DEBUG_BIT_ARB;
+                break;
+
+            // Attributes with values that are not context-specific. While it is unlikely that
+            // a value could match one of the WX_GL_ options, let's not take the chance
+            case WX_GL_BUFFER_SIZE:
+            case WX_GL_LEVEL:
+            case WX_GL_AUX_BUFFERS:
+            case WX_GL_MIN_RED:
+            case WX_GL_MIN_GREEN:
+            case WX_GL_MIN_BLUE:
+            case WX_GL_MIN_ALPHA:
+            case WX_GL_DEPTH_SIZE:
+            case WX_GL_STENCIL_SIZE:
+            case WX_GL_MIN_ACCUM_RED:
+            case WX_GL_MIN_ACCUM_GREEN:
+            case WX_GL_MIN_ACCUM_BLUE:
+            case WX_GL_MIN_ACCUM_ALPHA:
+            case WX_GL_SAMPLE_BUFFERS:
+            case WX_GL_SAMPLES:
+                arg ++;
+                break;
+            
             default: break;
         }
     }
@@ -297,10 +335,13 @@ void wxGLCanvasX11::InitGLXContextAttribs(const int *wxattrs, int *wxctxattrs)
         wxctxattrs[1] = glVersionMajor;
         wxctxattrs[2] = GLX_CONTEXT_MINOR_VERSION_ARB;
         wxctxattrs[3] = glVersionMinor;
+
         wxctxattrs[4] = GLX_CONTEXT_FLAGS_ARB;
-        wxctxattrs[5] = GLX_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB;
+        wxctxattrs[5] = glFlags;
+        
         wxctxattrs[6] = GLX_CONTEXT_PROFILE_MASK_ARB;
         wxctxattrs[7] = GLX_CONTEXT_CORE_PROFILE_BIT_ARB;
+        
         wxctxattrs[8] = 0; // terminate
     }
 }
@@ -475,6 +516,10 @@ wxGLCanvasX11::ConvertWXAttrsToGL(const int *wxattrs, int *glattrs, size_t n)
                 case WX_GL_CORE_PROFILE:
                     continue;
 
+                case WX_GL_VERSION:
+                    arg++; // skip int
+                    continue;
+
                 case WX_GL_MAJOR_VERSION:
                     arg++; // skip int
                     continue;
@@ -483,6 +528,9 @@ wxGLCanvasX11::ConvertWXAttrsToGL(const int *wxattrs, int *glattrs, size_t n)
                     arg++; // skip int
                     continue;
 
+                case WX_GL_DEBUG_CONTEXT:
+                    continue;
+
                 default:
                     wxLogDebug(wxT("Unsupported OpenGL attribute %d"),
                                wxattrs[arg - 1]);

? e:/dev/wxWindows/src/common/lex_yy.c
Index: e:/dev/wxWindows/src/common/event.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/common/event.cpp,v
retrieving revision 1.116
diff -u -2 -r1.116 event.cpp
--- e:/dev/wxWindows/src/common/event.cpp	2003/04/02 11:10:32	1.116
+++ e:/dev/wxWindows/src/common/event.cpp	2003/05/27 22:30:47
@@ -289,4 +289,8 @@
 // ----------------------------------------------------------------------------
 
+#if wxUSE_GUI
+
+#endif
+
 /*
  * General wxWindows events, covering
@@ -306,5 +310,8 @@
     m_skipped = FALSE;
     m_callbackUserData = (wxObject *) NULL;
+#if wxUSE_GUI
     m_isCommandEvent = FALSE;
+    m_propagationLevel = wxNO_EVENT_PROPAGATION;
+#endif
 }
 
@@ -317,9 +324,28 @@
     , m_callbackUserData(src.m_callbackUserData)
     , m_skipped(src.m_skipped)
+#if wxUSE_GUI
     , m_isCommandEvent(src.m_isCommandEvent)
+    , m_propagationLevel(src.m_propagationLevel)
+#endif
 {
 }
 
 #if wxUSE_GUI
+/*
+ * wxPropagationDisabler helper class.
+ */
+
+wxPropagationDisabler::wxPropagationDisabler(wxEvent &event)
+{
+    m_oldPropagationValue = event.m_propagationLevel;
+    m_pEvent = &event;
+    event.StopPropagation(); 
+}
+
+wxPropagationDisabler::~wxPropagationDisabler()
+{
+    m_pEvent->m_propagationLevel = m_oldPropagationValue;
+}
+
 
 /*
@@ -337,4 +363,5 @@
     m_commandString = wxEmptyString;
     m_isCommandEvent = TRUE;
+    m_propagationLevel = wxMAX_EVENT_PROPAGATION;
 }
 
@@ -899,5 +926,5 @@
     // event: it wouldn't make sense for a parent to receive a child's size
     // event, for example
-    if ( m_isWindow && event.IsCommandEvent() )
+    if ( m_isWindow && event.ShouldPropagate() )
     {
         wxWindow *win = (wxWindow *)this;
@@ -911,5 +938,13 @@
             wxWindow *parent = win->GetParent();
             if ( parent && !parent->IsBeingDeleted() )
-                return parent->GetEventHandler()->ProcessEvent(event);
+            {
+                event.m_propagationLevel--;
+                if( parent->GetEventHandler()->ProcessEvent(event) )
+                {
+                    event.m_propagationLevel++;
+                    return TRUE;
+                }
+                event.m_propagationLevel++;
+            }
         }
     }
? e:/dev/wxWindows/include/wx/univ/_setup.h
Index: e:/dev/wxWindows/include/wx/app.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/app.h,v
retrieving revision 1.77
diff -u -2 -r1.77 app.h
--- e:/dev/wxWindows/include/wx/app.h	2003/03/28 19:11:40	1.77
+++ e:/dev/wxWindows/include/wx/app.h	2003/05/27 22:30:50
@@ -567,5 +567,6 @@
     #define IMPLEMENT_WX_THEME_SUPPORT \
         WX_USE_THEME(win32); \
-        WX_USE_THEME(gtk);
+        WX_USE_THEME(gtk); \
+        WX_USE_THEME(Metal);
 #else
     #define IMPLEMENT_WX_THEME_SUPPORT
Index: e:/dev/wxWindows/include/wx/event.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/event.h,v
retrieving revision 1.162
diff -u -2 -r1.162 event.h
--- e:/dev/wxWindows/include/wx/event.h	2003/03/21 02:58:51	1.162
+++ e:/dev/wxWindows/include/wx/event.h	2003/05/27 22:30:57
@@ -324,4 +324,7 @@
 #endif // WXWIN_COMPATIBILITY
 
+#define wxMAX_EVENT_PROPAGATION     0xFFFFFF
+#define wxNO_EVENT_PROPAGATION      0x000000
+
 /*
  * wxWindows events, covering all interesting things that might happen
@@ -363,8 +366,4 @@
     bool GetSkipped() const { return m_skipped; };
 
-    // Implementation only: this test is explicitlty anti OO and this functions
-    // exists only for optimization purposes.
-    bool IsCommandEvent() const { return m_isCommandEvent; }
-
     // this function is used to create a copy of the event polymorphically and
     // all derived classes must implement it because otherwise wxPostEvent()
@@ -372,4 +371,16 @@
     virtual wxEvent *Clone() const = 0;
 
+#if wxUSE_GUI
+    // Implementation only: this test is explicitlty anti OO and this functions
+    // exists only for optimization purposes.
+    bool IsCommandEvent() const { return m_isCommandEvent; }
+
+    // Determine if this event should be propagating to the parent window.
+    bool ShouldPropagate() const { return m_propagationLevel != wxNO_EVENT_PROPAGATION; }
+    // Stop an event from propagating to its parent window.
+    // To disable propagation temporarily use the wxPropagationDisabler helper class.
+    void StopPropagation() { m_propagationLevel = wxNO_EVENT_PROPAGATION; }
+#endif
+
 public:
     wxObject*         m_eventObject;
@@ -379,6 +390,10 @@
     wxObject*         m_callbackUserData;
     bool              m_skipped;
-    bool              m_isCommandEvent;
 
+#if wxUSE_GUI
+    bool              m_isCommandEvent;
+    wxUint32          m_propagationLevel;
+#endif
+    
 private:
     DECLARE_ABSTRACT_CLASS(wxEvent)
@@ -386,4 +401,15 @@
 
 #if wxUSE_GUI
+
+class wxPropagationDisabler
+{
+public:
+    wxPropagationDisabler(wxEvent &event);
+    ~wxPropagationDisabler();
+private:
+    wxUint32    m_oldPropagationValue;
+    wxEvent*    m_pEvent;
+};
+
 
 // Item or menu event class

 	  	 

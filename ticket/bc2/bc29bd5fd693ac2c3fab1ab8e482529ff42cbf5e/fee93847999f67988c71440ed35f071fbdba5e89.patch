diff --git a/interface/wx/stc/stc.h b/interface/wx/stc/stc.h
index 82eff8b..d059b6b 100644
--- a/interface/wx/stc/stc.h
+++ b/interface/wx/stc/stc.h
@@ -2772,7 +2772,49 @@
 
     Links for quick access to the various categories of wxStyledTextCtrl functions:
     - @ref_member_group{ctor, Constructors and related methods}
-    - @ref_member_group{scintilla_functions, Scintilla methods}
+    - @ref_member_group{TextRetrievalAndModification, Text retrieval and modification}
+    - @ref_member_group{Searching, Searching and replacing}
+    - @ref_member_group{Overtype, Overtype}
+    - @ref_member_group{CutCopyAndPaste, Cut copy and paste}
+    - @ref_member_group{ErrorHandling, Error handling}
+    - @ref_member_group{UndoAndRedo, Undo and Redo}
+    - @ref_member_group{SelectionAndInformation, Selection and information}
+    - @ref_member_group{MultipleSelectionAndVirtualSpace, Multiple Selection and Virtual Space}
+    - @ref_member_group{ScrollingAndAutomaticScrolling, Scrolling and automatic scrolling}
+    - @ref_member_group{WhiteSpace, White space}
+    - @ref_member_group{Cursor, Cursor}
+    - @ref_member_group{MouseCapture, Mouse capture}
+    - @ref_member_group{LineEndings, Line endings}
+    - @ref_member_group{Words, Words}
+    - @ref_member_group{Styling, Styling}
+    - @ref_member_group{StyleDefinition, Style definition}
+    - @ref_member_group{CaretAndSelectionStyles, Caret selection and hotspot styles}
+    - @ref_member_group{CharacterRepresentations, Character representations}
+    - @ref_member_group{Margins, Margins}
+    - @ref_member_group{Annotations, Annotations}
+    - @ref_member_group{OtherSettings, Other settings}
+    - @ref_member_group{BraceHighlighting, Brace highlighting}
+    - @ref_member_group{TabsAndIndentationGuides, Tabs and Indentation Guides}
+    - @ref_member_group{Markers, Markers}
+    - @ref_member_group{Indicators, Indicators}
+    - @ref_member_group{Autocompletion, Autocompletion}
+    - @ref_member_group{UserLists, User lists}
+    - @ref_member_group{CallTips, Call tips}
+    - @ref_member_group{KeyboardCommands, Keyboard commands}
+    - @ref_member_group{KeyBindings, Key bindings}
+    - @ref_member_group{PopupEditMenu, Popup edit menu}
+    - @ref_member_group{MacroRecording, Macro recording}
+    - @ref_member_group{Printing, Printing}
+    - @ref_member_group{DirectAccess, Direct access}
+    - @ref_member_group{MultipleViews, Multiple views}
+    - @ref_member_group{BackgroundLoadSave, Background loading and saving}
+    - @ref_member_group{Folding, Folding}
+    - @ref_member_group{LineWrapping, Line wrapping}
+    - @ref_member_group{Zooming, Zooming}
+    - @ref_member_group{LongLines, Long lines}
+    - @ref_member_group{Lexer, Lexer}
+    - @ref_member_group{Notifications, Event related items}
+    - @ref_member_group{DeprecatedMessages, Deprecated items}
     - @ref_member_group{additional_methods, Additional wxStyledTextCtrl methods}
     - @ref_member_group{raw_variants , Raw variants}
     - @ref_member_group{text_entry, Text entry methods}
@@ -2903,13 +2945,16 @@ public:
 
     // Scintilla methods (generated by gen_iface.py)
     // ----------------------------------------------
-    ///@member_group_name{scintilla_functions, Scintilla methods}
-    //@{
 
     // **** Generated methods {{{
 
 
     /**
+        @member_group_name{TextRetrievalAndModification, Text retrieval and modification}
+    */
+    //@{
+
+    /**
         Add text to the document at current position.
     */
     void AddText(const wxString& text);
@@ -2925,7 +2970,9 @@ public:
     void InsertText(int pos, const wxString& text);
 
     /**
-        Change the text that is being inserted in response to SC_MOD_INSERTCHECK
+        Change the text that is being inserted in response to wxSTC_MOD_INSERTCHECK
+
+        @since 3.1.0
     */
     void ChangeInsertion(int length, const wxString& text);
 
@@ -2945,47 +2992,16 @@ public:
     void ClearDocumentStyle();
 
     /**
-        Returns the number of bytes in the document.
-    */
-    int GetLength() const;
-
-    /**
         Returns the character byte at the position.
     */
     int GetCharAt(int pos) const;
 
     /**
-        Returns the position of the caret.
-    */
-    int GetCurrentPos() const;
-
-    /**
-        Returns the position of the opposite end of the selection to the caret.
-    */
-    int GetAnchor() const;
-
-    /**
         Returns the style byte at the position.
     */
     int GetStyleAt(int pos) const;
 
     /**
-        Redoes the next action on the undo history.
-    */
-    void Redo();
-
-    /**
-        Choose between collecting actions into the undo
-        history and discarding them.
-    */
-    void SetUndoCollection(bool collectUndo);
-
-    /**
-        Select all the text in the document.
-    */
-    void SelectAll();
-
-    /**
         Remember the current position in the undo history as the position
         at which the document was saved.
     */
@@ -2997,885 +3013,913 @@ public:
     wxMemoryBuffer GetStyledText(int startPos, int endPos);
 
     /**
-        Are there any redoable actions in the undo history?
+        In read-only mode?
     */
-    bool CanRedo() const;
+    bool GetReadOnly() const;
 
     /**
-        Retrieve the line number at which a particular marker is located.
+        Retrieve the contents of a line.
     */
-    int MarkerLineFromHandle(int markerHandle);
+    wxString GetLine(int line) const;
 
     /**
-        Delete a marker.
+        Retrieve a range of text.
     */
-    void MarkerDeleteHandle(int markerHandle);
+    wxString GetTextRange(int startPos, int endPos);
 
     /**
-        Is undo history being collected?
+        Replace the selected text with the argument text.
     */
-    bool GetUndoCollection() const;
+    void ReplaceSelection(const wxString& text);
 
     /**
-        Are white space characters currently visible?
-        Returns one of SCWS_* constants.
+        Set to read only or read write.
     */
-    int GetViewWhiteSpace() const;
+    void SetReadOnly(bool readOnly);
 
     /**
-        Make white space characters invisible, always visible or visible outside indentation.
+        Replace the contents of the document with the argument text.
     */
-    void SetViewWhiteSpace(int viewWS);
+    void SetText(const wxString& text);
 
     /**
-        Retrieve the current tab draw mode.
-        Returns one of SCTD_* constants.
+        Retrieve all the text in the document.
     */
-    int GetTabDrawMode() const;
+    wxString GetText() const;
 
     /**
-        Set how tabs are drawn when visible.
+        Append a string to the end of the document without changing the selection.
     */
-    void SetTabDrawMode(int tabDrawMode);
+    void AppendText(const wxString& text);
 
     /**
-        Find the position from a point within the window.
+        Enlarge the document to a particular size of text bytes.
     */
-    int PositionFromPoint(wxPoint pt) const;
+    void Allocate(int bytes);
 
     /**
-        Find the position from a point within the window but return
-        INVALID_POSITION if not close to text.
+        Release all extended (>255) style numbers
+
+        @since 3.1.0
     */
-    int PositionFromPointClose(int x, int y);
+    void ReleaseAllExtendedStyles();
 
     /**
-        Set caret to start of a line and ensure it is visible.
+        Allocate some extended (>255) style numbers and return the start of the range
+
+        @since 3.1.0
     */
-    void GotoLine(int line);
+    int AllocateExtendedStyles(int numberStyles);
+
+    //@}
 
     /**
-        Set caret to a position and ensure it is visible.
+        @member_group_name{Searching, Searching and replacing}
     */
-    void GotoPos(int caret);
+    //@{
 
     /**
-        Set the selection anchor to a position. The anchor is the opposite
-        end of the selection from the caret.
+        Find some text in the document.
+
+        The fourth argument should be a bit list containing one or more of the
+        @link wxStyledTextCtrl::wxSTC_FIND_WHOLEWORD wxSTC_FIND_* @endlink constants.
     */
-    void SetAnchor(int anchor);
+    int FindText(int minPos, int maxPos, const wxString& text, int flags=0);
 
     /**
-        Retrieve the text of the line containing the caret.
-        Returns the index of the caret on the line.
-        Result is NUL-terminated.
+        Sets the position that starts the target which is used for updating the
+        document without affecting the scroll position.
     */
-    wxString GetCurLine(int* linePos=NULL);
+    void SetTargetStart(int start);
 
     /**
-        Retrieve the position of the last correctly styled character.
+        Get the position that starts the target.
     */
-    int GetEndStyled() const;
+    int GetTargetStart() const;
 
     /**
-        Convert all line endings in the document to one mode.
+        Sets the position that ends the target which is used for updating the
+        document without affecting the scroll position.
     */
-    void ConvertEOLs(int eolMode);
+    void SetTargetEnd(int end);
 
     /**
-        Retrieve the current end of line mode - one of CRLF, CR, or LF.
+        Get the position that ends the target.
     */
-    int GetEOLMode() const;
+    int GetTargetEnd() const;
 
     /**
-        Set the current end of line mode.
+        Sets both the start and end of the target in one call.
+
+        @since 3.1.0
     */
-    void SetEOLMode(int eolMode);
+    void SetTargetRange(int start, int end);
 
     /**
-        Set the current styling position to start.
-        The unused parameter is no longer used and should be set to 0.
+        Retrieve the text in the target.
+
+        @since 3.1.0
     */
-    void StartStyling(int start, int unused=0);
+    wxString GetTargetText() const;
 
     /**
-        Change style from current styling position for length characters to a style
-        and move the current styling position to after this newly styled segment.
+        Make the target range start and end be the same as the selection range start and end.
     */
-    void SetStyling(int length, int style);
+    void TargetFromSelection();
 
     /**
-        Is drawing done first into a buffer or direct to the screen?
+        Sets the target to the whole document.
+
+        @since 3.1.1
     */
-    bool GetBufferedDraw() const;
+    void TargetWholeDocument();
 
     /**
-        If drawing is buffered then each line of text is drawn into a bitmap buffer
-        before drawing it to the screen to avoid flicker.
+        Replace the target text with the argument text.
+        Text is counted so it can contain NULs.
+        Returns the length of the replacement text.
     */
-    void SetBufferedDraw(bool buffered);
+    int ReplaceTarget(const wxString& text);
 
     /**
-        Change the visible size of a tab to be a multiple of the width of a space character.
+        Replace the target text with the argument text after \\d processing.
+        Text is counted so it can contain NULs.
+        Looks for \\d where d is between 1 and 9 and replaces these with the strings
+        matched in the last search operation which were surrounded by \\( and \\).
+        Returns the length of the replacement text including any change
+        caused by processing the \\d patterns.
     */
-    void SetTabWidth(int tabWidth);
+    int ReplaceTargetRE(const wxString& text);
 
     /**
-        Retrieve the visible size of a tab.
+        Search for a counted string in the target and set the target to the found
+        range. Text is counted so it can contain NULs.
+        Returns length of range or -1 for failure in which case target is not moved.
     */
-    int GetTabWidth() const;
+    int SearchInTarget(const wxString& text);
 
     /**
-        Clear explicit tabstops on a line.
+        Set the search flags used by SearchInTarget.
+
+        The input should be a bit list containing one or more of the
+        @link wxStyledTextCtrl::wxSTC_FIND_WHOLEWORD wxSTC_FIND_* @endlink constants.
     */
-    void ClearTabStops(int line);
+    void SetSearchFlags(int searchFlags);
 
     /**
-        Add an explicit tab stop for a line.
+        Get the search flags used by SearchInTarget.
+
+        The return value will be a bit list containing one or more of the
+        @link wxStyledTextCtrl::wxSTC_FIND_WHOLEWORD wxSTC_FIND_* @endlink constants.
     */
-    void AddTabStop(int line, int x);
+    int GetSearchFlags() const;
 
     /**
-        Find the next explicit tab stop position on a line after a position.
+        Retrieve the value of a tag from a regular expression search.
     */
-    int GetNextTabStop(int line, int x);
+    wxString GetTag(int tagNumber) const;
 
     /**
-        Set the code page used to interpret the bytes of the document as characters.
+        Sets the current caret position to be the search anchor.
     */
-    void SetCodePage(int codePage);
+    void SearchAnchor();
 
     /**
-        Is the IME displayed in a window or inline?
+        Find some text starting at the search anchor.
+        Does not ensure the selection is visible.
     */
-    int GetIMEInteraction() const;
+    int SearchNext(int searchFlags, const wxString& text);
 
     /**
-        Choose to display the the IME in a winow or inline.
+        Find some text starting at the search anchor and moving backwards.
+        Does not ensure the selection is visible.
     */
-    void SetIMEInteraction(int imeInteraction);
+    int SearchPrev(int searchFlags, const wxString& text);
+
+    //@}
 
     /**
-        Set the symbol used for a particular marker number,
-        and optionally the fore and background colours.
+        @member_group_name{Overtype, Overtype}
     */
-    void MarkerDefine(int markerNumber, int markerSymbol,
-                const wxColour& foreground = wxNullColour,
-                const wxColour& background = wxNullColour);
+    //@{
 
     /**
-        Set the foreground colour used for a particular marker number.
+        Set to overtype (true) or insert mode.
     */
-    void MarkerSetForeground(int markerNumber, const wxColour& fore);
+    void SetOvertype(bool overType);
 
     /**
-        Set the background colour used for a particular marker number.
+        Returns true if overtype mode is active otherwise false is returned.
     */
-    void MarkerSetBackground(int markerNumber, const wxColour& back);
+    bool GetOvertype() const;
+
+    //@}
 
     /**
-        Set the background colour used for a particular marker number when its folding block is selected.
+        @member_group_name{CutCopyAndPaste, Cut copy and paste}
     */
-    void MarkerSetBackgroundSelected(int markerNumber, const wxColour& back);
+    //@{
 
     /**
-        Enable/disable highlight for current folding bloc (smallest one that contains the caret)
+        Will a paste succeed?
     */
-    void MarkerEnableHighlight(bool enabled);
+    bool CanPaste() const;
 
     /**
-        Add a marker to a line, returning an ID which can be used to find or delete the marker.
+        Cut the selection to the clipboard.
     */
-    int MarkerAdd(int line, int markerNumber);
+    void Cut();
 
     /**
-        Delete a marker from a line.
+        Copy the selection to the clipboard.
     */
-    void MarkerDelete(int line, int markerNumber);
+    void Copy();
 
     /**
-        Delete all markers with a particular number from all lines.
+        Paste the contents of the clipboard into the document replacing the selection.
     */
-    void MarkerDeleteAll(int markerNumber);
+    void Paste();
 
     /**
-        Get a bit mask of all the markers set on a line.
+        Clear the selection.
     */
-    int MarkerGet(int line);
+    void Clear();
 
     /**
-        Find the next line at or after lineStart that includes a marker in mask.
-        Return -1 when no more lines.
+        Copy a range of text to the clipboard. Positions are clipped into the document.
     */
-    int MarkerNext(int lineStart, int markerMask);
+    void CopyRange(int start, int end);
 
     /**
-        Find the previous line before lineStart that includes a marker in mask.
+        Copy argument text to the clipboard.
     */
-    int MarkerPrevious(int lineStart, int markerMask);
+    void CopyText(int length, const wxString& text);
 
     /**
-        Define a marker from a bitmap
+        Enable/Disable convert-on-paste for line endings
     */
-    void MarkerDefineBitmap(int markerNumber, const wxBitmap& bmp);
+    void SetPasteConvertEndings(bool convert);
 
     /**
-        Add a set of markers to a line.
+        Get convert-on-paste setting
     */
-    void MarkerAddSet(int line, int markerSet);
+    bool GetPasteConvertEndings() const;
 
     /**
-        Set the alpha used for a marker that is drawn in the text area, not the margin.
+        Copy the selection, if selection empty copy the line with the caret
     */
-    void MarkerSetAlpha(int markerNumber, int alpha);
+    void CopyAllowLine();
+
+    //@}
 
     /**
-        Set a margin to be either numeric or symbolic.
+        @member_group_name{ErrorHandling, Error handling}
     */
-    void SetMarginType(int margin, int marginType);
+    //@{
 
     /**
-        Retrieve the type of a margin.
-    */
-    int GetMarginType(int margin) const;
+        Change error status - 0 = OK.
 
-    /**
-        Set the width of a margin to a width expressed in pixels.
+        The input should be one of the
+        @link wxStyledTextCtrl::wxSTC_STATUS_OK wxSTC_STATUS_* @endlink constants.
     */
-    void SetMarginWidth(int margin, int pixelWidth);
+    void SetStatus(int status);
 
     /**
-        Retrieve the width of a margin in pixels.
+        Get error status.
+
+        The return value will be one of the
+        @link wxStyledTextCtrl::wxSTC_STATUS_OK wxSTC_STATUS_* @endlink constants.
     */
-    int GetMarginWidth(int margin) const;
+    int GetStatus() const;
+
+    //@}
 
     /**
-        Set a mask that determines which markers are displayed in a margin.
+        @member_group_name{UndoAndRedo, Undo and Redo}
     */
-    void SetMarginMask(int margin, int mask);
+    //@{
 
     /**
-        Retrieve the marker mask of a margin.
+        Redoes the next action on the undo history.
     */
-    int GetMarginMask(int margin) const;
+    void Redo();
 
     /**
-        Make a margin sensitive or insensitive to mouse clicks.
+        Choose between collecting actions into the undo
+        history and discarding them.
     */
-    void SetMarginSensitive(int margin, bool sensitive);
+    void SetUndoCollection(bool collectUndo);
 
     /**
-        Retrieve the mouse click sensitivity of a margin.
+        Are there any redoable actions in the undo history?
     */
-    bool GetMarginSensitive(int margin) const;
+    bool CanRedo() const;
 
     /**
-        Set the cursor shown when the mouse is inside a margin.
+        Is undo history being collected?
     */
-    void SetMarginCursor(int margin, int cursor);
+    bool GetUndoCollection() const;
 
     /**
-        Retrieve the cursor shown in a margin.
+        Start a sequence of actions that is undone and redone as a unit.
+        May be nested.
     */
-    int GetMarginCursor(int margin) const;
+    void BeginUndoAction();
 
     /**
-        Set the background colour of a margin. Only visible for SC_MARGIN_COLOUR.
+        End a sequence of actions that is undone and redone as a unit.
     */
-    void SetMarginBackground(int margin, const wxColour& back);
+    void EndUndoAction();
 
     /**
-        Retrieve the background colour of a margin
+        Are there any undoable actions in the undo history?
     */
-    wxColour GetMarginBackground(int margin) const;
+    bool CanUndo() const;
 
     /**
-        Allocate a non-standard number of margins.
+        Delete the undo history.
     */
-    void SetMarginCount(int margins);
+    void EmptyUndoBuffer();
 
     /**
-        How many margins are there?.
+        Undo one action in the undo history.
     */
-    int GetMarginCount() const;
+    void Undo();
 
     /**
-        Clear all the styles and make equivalent to the global default style.
+        Add a container action to the undo stack
+
+        The flags argument can be either 0 or wxSTC_UNDO_MAY_COALESCE.
     */
-    void StyleClearAll();
+    void AddUndoAction(int token, int flags);
+
+    //@}
 
     /**
-        Set the foreground colour of a style.
+        @member_group_name{SelectionAndInformation, Selection and information}
     */
-    void StyleSetForeground(int style, const wxColour& fore);
+    //@{
 
     /**
-        Set the background colour of a style.
+        Returns the number of bytes in the document.
     */
-    void StyleSetBackground(int style, const wxColour& back);
+    int GetLength() const;
 
     /**
-        Set a style to be bold or not.
+        Returns the position of the caret.
     */
-    void StyleSetBold(int style, bool bold);
+    int GetCurrentPos() const;
 
     /**
-        Set a style to be italic or not.
+        Returns the position of the opposite end of the selection to the caret.
     */
-    void StyleSetItalic(int style, bool italic);
+    int GetAnchor() const;
 
     /**
-        Set the size of characters of a style.
+        Select all the text in the document.
     */
-    void StyleSetSize(int style, int sizePoints);
+    void SelectAll();
 
     /**
-        Set the font of a style.
+        Find the position from a point within the window.
     */
-    void StyleSetFaceName(int style, const wxString& fontName);
+    int PositionFromPoint(wxPoint pt) const;
 
     /**
-        Set a style to have its end of line filled or not.
+        Find the position from a point within the window but return
+        wxSTC_INVALID_POSITION if not close to text.
     */
-    void StyleSetEOLFilled(int style, bool eolFilled);
+    int PositionFromPointClose(int x, int y);
 
     /**
-        Reset the default style to its state at startup
+        Set caret to start of a line and ensure it is visible.
     */
-    void StyleResetDefault();
+    void GotoLine(int line);
 
     /**
-        Set a style to be underlined or not.
+        Set caret to a position and ensure it is visible.
     */
-    void StyleSetUnderline(int style, bool underline);
+    void GotoPos(int caret);
 
     /**
-        Get the foreground colour of a style.
+        Set the selection anchor to a position. The anchor is the opposite
+        end of the selection from the caret.
     */
-    wxColour StyleGetForeground(int style) const;
+    void SetAnchor(int anchor);
 
     /**
-        Get the background colour of a style.
+        Retrieve the text of the line containing the caret.
+
+        linePos can optionally be passed in to receive the index of the
+        caret on the line.
     */
-    wxColour StyleGetBackground(int style) const;
+    wxString GetCurLine(int* linePos=NULL);
 
     /**
-        Get is a style bold or not.
+        Retrieve the column number of a position, taking tab width into account.
     */
-    bool StyleGetBold(int style) const;
+    int GetColumn(int pos) const;
 
     /**
-        Get is a style italic or not.
+        Count characters between two positions.
     */
-    bool StyleGetItalic(int style) const;
+    int CountCharacters(int start, int end);
 
     /**
-        Get the size of characters of a style.
+        Get the position after the last visible characters on a line.
     */
-    int StyleGetSize(int style) const;
+    int GetLineEndPosition(int line) const;
 
     /**
-        Get the font facename of a style
+        Sets the position of the caret.
     */
-    wxString StyleGetFaceName(int style);
+    void SetCurrentPos(int caret);
 
     /**
-        Get is a style to have its end of line filled or not.
+        Sets the position that starts the selection - this becomes the anchor.
     */
-    bool StyleGetEOLFilled(int style) const;
+    void SetSelectionStart(int anchor);
 
     /**
-        Get is a style underlined or not.
+        Returns the position at the start of the selection.
     */
-    bool StyleGetUnderline(int style) const;
+    int GetSelectionStart() const;
 
     /**
-        Get is a style mixed case, or to force upper or lower case.
+        Sets the position that ends the selection - this becomes the caret.
     */
-    int StyleGetCase(int style) const;
+    void SetSelectionEnd(int caret);
 
     /**
-        Get the character get of the font in a style.
+        Returns the position at the end of the selection.
     */
-    int StyleGetCharacterSet(int style) const;
+    int GetSelectionEnd() const;
 
     /**
-        Get is a style visible or not.
+        Set caret to a position, while removing any existing selection.
     */
-    bool StyleGetVisible(int style) const;
+    void SetEmptySelection(int caret);
 
     /**
-        Get is a style changeable or not (read only).
-        Experimental feature, currently buggy.
+        Returns the number of lines in the document. There is always at least one.
     */
-    bool StyleGetChangeable(int style) const;
+    int GetLineCount() const;
 
     /**
-        Get is a style a hotspot or not.
+        Is the document different from when it was last saved?
     */
-    bool StyleGetHotSpot(int style) const;
+    bool GetModify() const;
 
     /**
-        Set a style to be mixed case, or to force upper or lower case.
+        Retrieve the selected text.
     */
-    void StyleSetCase(int style, int caseVisible);
+    wxString GetSelectedText();
 
     /**
-        Set the size of characters of a style. Size is in points multiplied by 100.
+        Draw the selection in normal style or with selection highlighted.
     */
-    void StyleSetSizeFractional(int style, int sizeHundredthPoints);
+    void HideSelection(bool hide);
 
     /**
-        Get the size of characters of a style in points multiplied by 100
+        Retrieve the point in the window where a position is displayed.
     */
-    int StyleGetSizeFractional(int style) const;
+    wxPoint PointFromPosition(int pos);
 
     /**
-        Set the weight of characters of a style.
+        Retrieve the line containing a position.
     */
-    void StyleSetWeight(int style, int weight);
+    int LineFromPosition(int pos) const;
 
     /**
-        Get the weight of characters of a style.
+        Retrieve the position at the start of a line.
     */
-    int StyleGetWeight(int style) const;
+    int PositionFromLine(int line) const;
 
     /**
-        Set the character set of the font in a style.
-        Converts the Scintilla character set values to a wxFontEncoding.
+        Retrieve the number of characters in the document.
     */
-    void StyleSetCharacterSet(int style, int characterSet);
+    int GetTextLength() const;
 
     /**
-        Set a style to be a hotspot or not.
+        Measure the pixel width of some text in a particular style.
+        Does not handle tab or control characters.
     */
-    void StyleSetHotSpot(int style, bool hotspot);
+    int TextWidth(int style, const wxString& text);
 
     /**
-        Set the foreground colour of the main and additional selections and whether to use this setting.
+        Retrieve the height of a particular line of text in pixels.
     */
-    void SetSelForeground(bool useSetting, const wxColour& fore);
+    int TextHeight(int line);
 
     /**
-        Set the background colour of the main and additional selections and whether to use this setting.
+        Move the caret inside current view if it's not there already.
     */
-    void SetSelBackground(bool useSetting, const wxColour& back);
+    void MoveCaretInsideView();
 
     /**
-        Get the alpha of the selection.
+        How many characters are on a line, including end of line characters?
     */
-    int GetSelAlpha() const;
+    int LineLength(int line) const;
 
     /**
-        Set the alpha of the selection.
+        Retrieves the number of lines completely visible.
     */
-    void SetSelAlpha(int alpha);
+    int LinesOnScreen() const;
 
     /**
-        Is the selection end of line filled?
+        Is the selection rectangular? The alternative is the more common stream selection.
     */
-    bool GetSelEOLFilled() const;
+    bool SelectionIsRectangle() const;
 
     /**
-        Set the selection to have its end of line filled or not.
+        Set the last x chosen value to be the caret x position.
     */
-    void SetSelEOLFilled(bool filled);
+    void ChooseCaretX();
 
     /**
-        Set the foreground colour of the caret.
+        Given a valid document position, return the previous position taking code
+        page into account. Returns 0 if passed 0.
     */
-    void SetCaretForeground(const wxColour& fore);
+    int PositionBefore(int pos);
 
     /**
-        When key+modifier combination keyDefinition is pressed perform sciCommand.
+        Given a valid document position, return the next position taking code
+        page into account. Maximum value returned is the last position in the document.
     */
-    void CmdKeyAssign(int key, int modifiers, int cmd);
+    int PositionAfter(int pos);
 
     /**
-        When key+modifier combination keyDefinition is pressed do nothing.
+        Given a valid document position, return a position that differs in a number
+        of characters. Returned value is always between 0 and last position in document.
+
+        @since 3.1.0
     */
-    void CmdKeyClear(int key, int modifiers);
+    int PositionRelative(int pos, int relative);
 
     /**
-        Drop all key mappings.
+        Set the selection mode to stream (wxSTC_SEL_STREAM) or rectangular (wxSTC_SEL_RECTANGLE/wxSTC_SEL_THIN) or
+        by lines (wxSTC_SEL_LINES).
     */
-    void CmdKeyClearAll();
+    void SetSelectionMode(int selectionMode);
 
     /**
-        Set the styles for a segment of the document.
+        Get the mode of the current selection.
+
+        The return value will be one of the
+        @link wxStyledTextCtrl::wxSTC_SEL_STREAM wxSTC_SEL_* @endlink constants.
     */
-    void SetStyleBytes(int length, char* styleBytes);
+    int GetSelectionMode() const;
 
     /**
-        Set a style to be visible or not.
+        Retrieve the position of the start of the selection at the given line (wxSTC_INVALID_POSITION if no selection on this line).
     */
-    void StyleSetVisible(int style, bool visible);
+    int GetLineSelStartPosition(int line);
 
     /**
-        Get the time in milliseconds that the caret is on and off.
+        Retrieve the position of the end of the selection at the given line (wxSTC_INVALID_POSITION if no selection on this line).
     */
-    int GetCaretPeriod() const;
+    int GetLineSelEndPosition(int line);
 
     /**
-        Get the time in milliseconds that the caret is on and off. 0 = steady on.
+        Find the position of a column on a line taking into account tabs and
+        multi-byte characters. If beyond end of line, return line end position.
     */
-    void SetCaretPeriod(int periodMilliseconds);
+    int FindColumn(int line, int column);
 
     /**
-        Set the set of characters making up words for when moving or selecting by word.
-        First sets defaults like SetCharsDefault.
+        Find the position of a character from a point within the window.
     */
-    void SetWordChars(const wxString& characters);
+    int CharPositionFromPoint(int x, int y);
 
     /**
-        Get the set of characters making up words for when moving or selecting by word.
+        Find the position of a character from a point within the window.
+        Return wxSTC_INVALID_POSITION if not close to text.
     */
-    wxString GetWordChars() const;
+    int CharPositionFromPointClose(int x, int y);
 
     /**
-        Start a sequence of actions that is undone and redone as a unit.
-        May be nested.
+        Set whether switching to rectangular mode while selecting with the mouse is allowed.
+
+        @since 3.1.0
     */
-    void BeginUndoAction();
+    void SetMouseSelectionRectangularSwitch(bool mouseSelectionRectangularSwitch);
 
     /**
-        End a sequence of actions that is undone and redone as a unit.
-    */
-    void EndUndoAction();
+        Whether switching to rectangular mode while selecting with the mouse is allowed.
 
-    /**
-        Set an indicator to plain, squiggle or TT.
+        @since 3.1.0
     */
-    void IndicatorSetStyle(int indicator, int indicatorStyle);
+    bool GetMouseSelectionRectangularSwitch() const;
 
     /**
-        Retrieve the style of an indicator.
+        Move the selected lines up one line, shifting the line above after the selection
     */
-    int IndicatorGetStyle(int indicator) const;
+    void MoveSelectedLinesUp();
 
     /**
-        Set the foreground colour of an indicator.
+        Move the selected lines down one line, shifting the line below before the selection
     */
-    void IndicatorSetForeground(int indicator, const wxColour& fore);
+    void MoveSelectedLinesDown();
 
-    /**
-        Retrieve the foreground colour of an indicator.
-    */
-    wxColour IndicatorGetForeground(int indicator) const;
+    //@}
 
     /**
-        Set an indicator to draw under text or over(default).
+        @member_group_name{MultipleSelectionAndVirtualSpace, Multiple Selection and Virtual Space}
     */
-    void IndicatorSetUnder(int indicator, bool under);
+    //@{
 
     /**
-        Retrieve whether indicator drawn under or over text.
-    */
-    bool IndicatorGetUnder(int indicator) const;
+        Change the effect of pasting when there are multiple selections.
 
-    /**
-        Set a hover indicator to plain, squiggle or TT.
+        The input should be one of the
+        @link wxStyledTextCtrl::wxSTC_MULTIPASTE_ONCE wxSTC_MULTIPASTE_* @endlink constants.
     */
-    void IndicatorSetHoverStyle(int indicator, int indicatorStyle);
+    void SetMultiPaste(int multiPaste);
 
     /**
-        Retrieve the hover style of an indicator.
-    */
-    int IndicatorGetHoverStyle(int indicator) const;
+        Retrieve the effect of pasting when there are multiple selections.
 
-    /**
-        Set the foreground hover colour of an indicator.
+        The return value will be one of the
+        @link wxStyledTextCtrl::wxSTC_MULTIPASTE_ONCE wxSTC_MULTIPASTE_* @endlink constants.
     */
-    void IndicatorSetHoverForeground(int indicator, const wxColour& fore);
+    int GetMultiPaste() const;
 
     /**
-        Retrieve the foreground hover colour of an indicator.
+        Set whether multiple selections can be made
     */
-    wxColour IndicatorGetHoverForeground(int indicator) const;
+    void SetMultipleSelection(bool multipleSelection);
 
     /**
-        Set the attributes of an indicator.
+        Whether multiple selections can be made
     */
-    void IndicatorSetFlags(int indicator, int flags);
+    bool GetMultipleSelection() const;
 
     /**
-        Retrieve the attributes of an indicator.
+        Set whether typing can be performed into multiple selections
     */
-    int IndicatorGetFlags(int indicator) const;
+    void SetAdditionalSelectionTyping(bool additionalSelectionTyping);
 
     /**
-        Set the foreground colour of all whitespace and whether to use this setting.
+        Whether typing can be performed into multiple selections
     */
-    void SetWhitespaceForeground(bool useSetting, const wxColour& fore);
+    bool GetAdditionalSelectionTyping() const;
 
     /**
-        Set the background colour of all whitespace and whether to use this setting.
+        Set whether additional carets will blink
     */
-    void SetWhitespaceBackground(bool useSetting, const wxColour& back);
+    void SetAdditionalCaretsBlink(bool additionalCaretsBlink);
 
     /**
-        Set the size of the dots used to mark space characters.
+        Whether additional carets will blink
     */
-    void SetWhitespaceSize(int size);
+    bool GetAdditionalCaretsBlink() const;
 
     /**
-        Get the size of the dots used to mark space characters.
+        Set whether additional carets are visible
     */
-    int GetWhitespaceSize() const;
+    void SetAdditionalCaretsVisible(bool additionalCaretsVisible);
 
     /**
-        Divide each styling byte into lexical class bits (default: 5) and indicator
-        bits (default: 3). If a lexer requires more than 32 lexical states, then this
-        is used to expand the possible states.
+        Whether additional carets are visible
     */
-    void SetStyleBits(int bits);
+    bool GetAdditionalCaretsVisible() const;
 
     /**
-        Retrieve number of bits in style bytes used to hold the lexical state.
+        How many selections are there?
     */
-    int GetStyleBits() const;
+    int GetSelections() const;
 
     /**
-        Used to hold extra styling information for each line.
-    */
-    void SetLineState(int line, int state);
+        Is every selected range empty?
 
-    /**
-        Retrieve the extra styling information for a line.
+        @since 3.1.0
     */
-    int GetLineState(int line) const;
+    bool GetSelectionEmpty() const;
 
     /**
-        Retrieve the last line number that has line state.
+        Clear selections to a single empty stream selection
     */
-    int GetMaxLineState() const;
+    void ClearSelections();
 
     /**
-        Is the background of the line containing the caret in a different colour?
+        Add a selection
     */
-    bool GetCaretLineVisible() const;
+    int AddSelection(int caret, int anchor);
 
     /**
-        Display the background of the line containing the caret in a different colour.
+        Drop one selection
+
+        @since 3.1.0
     */
-    void SetCaretLineVisible(bool show);
+    void DropSelectionN(int selection);
 
     /**
-        Get the colour of the background of the line containing the caret.
+        Set the main selection
     */
-    wxColour GetCaretLineBackground() const;
+    void SetMainSelection(int selection);
 
     /**
-        Set the colour of the background of the line containing the caret.
+        Which selection is the main selection
     */
-    void SetCaretLineBackground(const wxColour& back);
+    int GetMainSelection() const;
 
     /**
-        Set a style to be changeable or not (read only).
-        Experimental feature, currently buggy.
+        Set the caret position of the nth selection.
     */
-    void StyleSetChangeable(int style, bool changeable);
+    void SetSelectionNCaret(int selection, int caret);
 
     /**
-        Display a auto-completion list.
-        The lengthEntered parameter indicates how many characters before
-        the caret should be used to provide context.
+        Return the caret position of the nth selection.
     */
-    void AutoCompShow(int lengthEntered, const wxString& itemList);
+    int GetSelectionNCaret(int selection) const;
 
     /**
-        Remove the auto-completion list from the screen.
+        Set the anchor position of the nth selection.
     */
-    void AutoCompCancel();
+    void SetSelectionNAnchor(int selection, int anchor);
 
     /**
-        Is there an auto-completion list visible?
+        Return the anchor position of the nth selection.
     */
-    bool AutoCompActive();
+    int GetSelectionNAnchor(int selection) const;
 
     /**
-        Retrieve the position of the caret when the auto-completion list was displayed.
+        Set the virtual space of the caret of the nth selection.
     */
-    int AutoCompPosStart();
+    void SetSelectionNCaretVirtualSpace(int selection, int space);
 
     /**
-        User has selected an item so remove the list and insert the selection.
+        Return the virtual space of the caret of the nth selection.
     */
-    void AutoCompComplete();
+    int GetSelectionNCaretVirtualSpace(int selection) const;
 
     /**
-        Define a set of character that when typed cancel the auto-completion list.
+        Set the virtual space of the anchor of the nth selection.
     */
-    void AutoCompStops(const wxString& characterSet);
+    void SetSelectionNAnchorVirtualSpace(int selection, int space);
 
     /**
-        Change the separator character in the string setting up an auto-completion list.
-        Default is space but can be changed if items contain space.
+        Return the virtual space of the anchor of the nth selection.
     */
-    void AutoCompSetSeparator(int separatorCharacter);
+    int GetSelectionNAnchorVirtualSpace(int selection) const;
 
     /**
-        Retrieve the auto-completion list separator character.
+        Sets the position that starts the selection - this becomes the anchor.
     */
-    int AutoCompGetSeparator() const;
+    void SetSelectionNStart(int selection, int anchor);
 
     /**
-        Select the item in the auto-completion list that starts with a string.
+        Returns the position at the start of the selection.
     */
-    void AutoCompSelect(const wxString& select);
+    int GetSelectionNStart(int selection) const;
 
     /**
-        Should the auto-completion list be cancelled if the user backspaces to a
-        position before where the box was created.
+        Sets the position that ends the selection - this becomes the currentPosition.
     */
-    void AutoCompSetCancelAtStart(bool cancel);
+    void SetSelectionNEnd(int selection, int caret);
 
     /**
-        Retrieve whether auto-completion cancelled by backspacing before start.
+        Returns the position at the end of the selection.
     */
-    bool AutoCompGetCancelAtStart() const;
+    int GetSelectionNEnd(int selection) const;
 
     /**
-        Define a set of characters that when typed will cause the autocompletion to
-        choose the selected item.
+        Set the caret position of the rectangular selection.
     */
-    void AutoCompSetFillUps(const wxString& characterSet);
+    void SetRectangularSelectionCaret(int caret);
 
     /**
-        Should a single item auto-completion list automatically choose the item.
+        Return the caret position of the rectangular selection.
     */
-    void AutoCompSetChooseSingle(bool chooseSingle);
+    int GetRectangularSelectionCaret() const;
 
     /**
-        Retrieve whether a single item auto-completion list automatically choose the item.
+        Set the anchor position of the rectangular selection.
     */
-    bool AutoCompGetChooseSingle() const;
+    void SetRectangularSelectionAnchor(int anchor);
 
     /**
-        Set whether case is significant when performing auto-completion searches.
+        Return the anchor position of the rectangular selection.
     */
-    void AutoCompSetIgnoreCase(bool ignoreCase);
+    int GetRectangularSelectionAnchor() const;
 
     /**
-        Retrieve state of ignore case flag.
+        Set the virtual space of the caret of the rectangular selection.
     */
-    bool AutoCompGetIgnoreCase() const;
+    void SetRectangularSelectionCaretVirtualSpace(int space);
 
     /**
-        Display a list of strings and send notification when user chooses one.
+        Return the virtual space of the caret of the rectangular selection.
     */
-    void UserListShow(int listType, const wxString& itemList);
+    int GetRectangularSelectionCaretVirtualSpace() const;
 
     /**
-        Set whether or not autocompletion is hidden automatically when nothing matches.
+        Set the virtual space of the anchor of the rectangular selection.
     */
-    void AutoCompSetAutoHide(bool autoHide);
+    void SetRectangularSelectionAnchorVirtualSpace(int space);
 
     /**
-        Retrieve whether or not autocompletion is hidden automatically when nothing matches.
+        Return the virtual space of the anchor of the rectangular selection.
     */
-    bool AutoCompGetAutoHide() const;
+    int GetRectangularSelectionAnchorVirtualSpace() const;
 
     /**
-        Set whether or not autocompletion deletes any word characters
-        after the inserted text upon completion.
+        Set options for virtual space behaviour.
+
+        The input should be one of the
+        @link wxStyledTextCtrl::wxSTC_VS_NONE wxSTC_VS_* @endlink constants.
     */
-    void AutoCompSetDropRestOfWord(bool dropRestOfWord);
+    void SetVirtualSpaceOptions(int virtualSpaceOptions);
 
     /**
-        Retrieve whether or not autocompletion deletes any word characters
-        after the inserted text upon completion.
+        Return options for virtual space behaviour.
+
+        The return value will be one of the
+        @link wxStyledTextCtrl::wxSTC_VS_NONE wxSTC_VS_* @endlink constants.
     */
-    bool AutoCompGetDropRestOfWord() const;
+    int GetVirtualSpaceOptions() const;
 
     /**
-        Register an image for use in autocompletion lists.
+        On GTK+, allow selecting the modifier key to use for mouse-based
+        rectangular selection. Often the window manager requires Alt+Mouse Drag
+        for moving windows.
+        Valid values are wxSTC_KEYMOD_CTRL (default), wxSTC_KEYMOD_ALT, or wxSTC_KEYMOD_SUPER.
     */
-    void RegisterImage(int type, const wxBitmap& bmp);
+    void SetRectangularSelectionModifier(int modifier);
 
     /**
-        Clear all the registered images.
+        Get the modifier key used for rectangular selection.
+
+        The return value will be a bit list containing one or more of the
+        @link wxStyledTextCtrl::wxSTC_KEYMOD_NORM wxSTC_KEYMOD_* @endlink constants.
     */
-    void ClearRegisteredImages();
+    int GetRectangularSelectionModifier() const;
 
     /**
-        Retrieve the auto-completion list type-separator character.
+        Set the foreground colour of additional selections.
+        Must have previously called SetSelFore with non-zero first argument for this to have an effect.
     */
-    int AutoCompGetTypeSeparator() const;
+    void SetAdditionalSelForeground(const wxColour& fore);
 
     /**
-        Change the type-separator character in the string setting up an auto-completion list.
-        Default is '?' but can be changed if items contain '?'.
+        Set the background colour of additional selections.
+        Must have previously called SetSelBack with non-zero first argument for this to have an effect.
     */
-    void AutoCompSetTypeSeparator(int separatorCharacter);
+    void SetAdditionalSelBackground(const wxColour& back);
 
     /**
-        Set the maximum width, in characters, of auto-completion and user lists.
-        Set to 0 to autosize to fit longest item, which is the default.
+        Set the alpha of the selection.
     */
-    void AutoCompSetMaxWidth(int characterCount);
+    void SetAdditionalSelAlpha(int alpha);
 
     /**
-        Get the maximum width, in characters, of auto-completion and user lists.
+        Get the alpha of the selection.
     */
-    int AutoCompGetMaxWidth() const;
+    int GetAdditionalSelAlpha() const;
 
     /**
-        Set the maximum height, in rows, of auto-completion and user lists.
-        The default is 5 rows.
+        Set the foreground colour of additional carets.
     */
-    void AutoCompSetMaxHeight(int rowCount);
+    void SetAdditionalCaretForeground(const wxColour& fore);
 
     /**
-        Set the maximum height, in rows, of auto-completion and user lists.
+        Get the foreground colour of additional carets.
     */
-    int AutoCompGetMaxHeight() const;
+    wxColour GetAdditionalCaretForeground() const;
 
     /**
-        Set the number of spaces used for one level of indentation.
+        Set the main selection to the next selection.
     */
-    void SetIndent(int indentSize);
+    void RotateSelection();
 
     /**
-        Retrieve indentation size.
+        Swap that caret and anchor of the main selection.
     */
-    int GetIndent() const;
+    void SwapMainAnchorCaret();
 
     /**
-        Indentation will only use space characters if useTabs is false, otherwise
-        it will use a combination of tabs and spaces.
-    */
-    void SetUseTabs(bool useTabs);
-
-    /**
-        Retrieve whether tabs will be used in indentation.
-    */
-    bool GetUseTabs() const;
+        Add the next occurrence of the main selection to the set of selections as main.
+        If the current selection is empty then select word around caret.
 
-    /**
-        Change the indentation of a line to a number of columns.
+        @since 3.1.1
     */
-    void SetLineIndentation(int line, int indentation);
+    void MultipleSelectAddNext();
 
     /**
-        Retrieve the number of columns that a line is indented.
-    */
-    int GetLineIndentation(int line) const;
+        Add each occurrence of the main selection in the target to the set of selections.
+        If the current selection is empty then select word around caret.
 
-    /**
-        Retrieve the position before the first non indentation character on a line.
+        @since 3.1.1
     */
-    int GetLineIndentPosition(int line) const;
+    void MultipleSelectAddEach();
 
-    /**
-        Retrieve the column number of a position, taking tab width into account.
-    */
-    int GetColumn(int pos) const;
+    //@}
 
     /**
-        Count characters between two positions.
+        @member_group_name{ScrollingAndAutomaticScrolling, Scrolling and automatic scrolling}
     */
-    int CountCharacters(int start, int end);
+    //@{
 
     /**
         Show or hide the horizontal scroll bar.
@@ -3888,1105 +3932,1228 @@ public:
     bool GetUseHorizontalScrollBar() const;
 
     /**
-        Show or hide indentation guides.
+        Retrieve the display line at the top of the display.
     */
-    void SetIndentationGuides(int indentView);
+    int GetFirstVisibleLine() const;
 
     /**
-        Are the indentation guides visible?
+        Scroll horizontally and vertically.
     */
-    int GetIndentationGuides() const;
+    void LineScroll(int columns, int lines);
 
     /**
-        Set the highlighted indentation guide column.
-        0 = no highlighted guide.
+        Ensure the caret is visible.
     */
-    void SetHighlightGuide(int column);
+    void EnsureCaretVisible();
 
     /**
-        Get the highlighted indentation guide column.
-    */
-    int GetHighlightGuide() const;
+        Scroll the argument positions and the range between them into view giving
+        priority to the primary position then the secondary position.
+        This may be used to make a search match visible.
 
-    /**
-        Get the position after the last visible characters on a line.
+        @since 3.1.0
     */
-    int GetLineEndPosition(int line) const;
+    void ScrollRange(int secondary, int primary);
 
     /**
-        Get the code page used to interpret the bytes of the document as characters.
+        Sets the document width assumed for scrolling.
     */
-    int GetCodePage() const;
+    void SetScrollWidth(int pixelWidth);
 
     /**
-        Get the foreground colour of the caret.
+        Retrieve the document width assumed for scrolling.
     */
-    wxColour GetCaretForeground() const;
+    int GetScrollWidth() const;
 
     /**
-        In read-only mode?
+        Sets whether the maximum width line displayed is used to set scroll width.
     */
-    bool GetReadOnly() const;
+    void SetScrollWidthTracking(bool tracking);
 
     /**
-        Sets the position of the caret.
+        Retrieve whether the scroll width tracks wide lines.
     */
-    void SetCurrentPos(int caret);
+    bool GetScrollWidthTracking() const;
 
     /**
-        Sets the position that starts the selection - this becomes the anchor.
+        Sets the scroll range so that maximum scroll position has
+        the last line at the bottom of the view (default).
+        Setting this to false allows scrolling one page below the last line.
     */
-    void SetSelectionStart(int anchor);
+    void SetEndAtLastLine(bool endAtLastLine);
 
     /**
-        Returns the position at the start of the selection.
+        Retrieve whether the maximum scroll position has the last
+        line at the bottom of the view.
     */
-    int GetSelectionStart() const;
+    bool GetEndAtLastLine() const;
 
     /**
-        Sets the position that ends the selection - this becomes the caret.
+        Show or hide the vertical scroll bar.
     */
-    void SetSelectionEnd(int caret);
+    void SetUseVerticalScrollBar(bool visible);
 
     /**
-        Returns the position at the end of the selection.
+        Is the vertical scroll bar visible?
     */
-    int GetSelectionEnd() const;
+    bool GetUseVerticalScrollBar() const;
 
     /**
-        Set caret to a position, while removing any existing selection.
+        Scroll so that a display line is at the top of the display.
     */
-    void SetEmptySelection(int caret);
+    void SetFirstVisibleLine(int displayLine);
 
     /**
-        Sets the print magnification added to the point size of each style for printing.
+        Set the way the display area is determined when a particular line
+        is to be moved to by Find, FindNext, GotoLine, etc.
+
+        The first argument should be a bit list containing one or more of the
+        @link wxStyledTextCtrl::wxSTC_VISIBLE_SLOP wxSTC_VISIBLE_* @endlink constants.
     */
-    void SetPrintMagnification(int magnification);
+    void SetVisiblePolicy(int visiblePolicy, int visibleSlop);
 
     /**
-        Returns the print magnification.
+        Set the xOffset (ie, horizontal scroll position).
     */
-    int GetPrintMagnification() const;
+    void SetXOffset(int xOffset);
 
     /**
-        Modify colours when printing for clearer printed text.
+        Get the xOffset (ie, horizontal scroll position).
     */
-    void SetPrintColourMode(int mode);
+    int GetXOffset() const;
 
     /**
-        Returns the print colour mode.
+        Set the way the caret is kept visible when going sideways.
+        The exclusion zone is given in pixels.
+
+        The first argument should be a bit list containing one or more of the
+        @link wxStyledTextCtrl::wxSTC_CARET_SLOP wxSTC_CARET_* @endlink constants.
     */
-    int GetPrintColourMode() const;
+    void SetXCaretPolicy(int caretPolicy, int caretSlop);
 
     /**
-        Find some text in the document.
+        Set the way the line the caret is on is kept visible.
+        The exclusion zone is given in lines.
+
+        The first argument should be a bit list containing one or more of the
+        @link wxStyledTextCtrl::wxSTC_CARET_SLOP wxSTC_CARET_* @endlink constants.
     */
-    int FindText(int minPos, int maxPos, const wxString& text, int flags=0);
+    void SetYCaretPolicy(int caretPolicy, int caretSlop);
+
+    //@}
 
     /**
-        On Windows, will draw the document into a display context such as a printer.
+        @member_group_name{WhiteSpace, White space}
     */
-    int FormatRange(bool   doDraw,
-               int    startPos,
-               int    endPos,
-               wxDC*  draw,
-               wxDC*  target,
-               wxRect renderRect,
-               wxRect pageRect);
+    //@{
 
     /**
-        Retrieve the display line at the top of the display.
+        Are white space characters currently visible?
+        Returns one of wxSTC_WS_* constants.
     */
-    int GetFirstVisibleLine() const;
+    int GetViewWhiteSpace() const;
 
     /**
-        Retrieve the contents of a line.
+        Make white space characters invisible, always visible or visible outside indentation.
+
+        The input should be one of the
+        @link wxStyledTextCtrl::wxSTC_WS_INVISIBLE wxSTC_WS_* @endlink  constants.
     */
-    wxString GetLine(int line) const;
+    void SetViewWhiteSpace(int viewWS);
 
     /**
-        Returns the number of lines in the document. There is always at least one.
+        Retrieve the current tab draw mode.
+        Returns one of wxSTC_TD_* constants.
+
+        @since 3.1.1
     */
-    int GetLineCount() const;
+    int GetTabDrawMode() const;
 
     /**
-        Sets the size in pixels of the left margin.
+        Set how tabs are drawn when visible.
+
+        The input should be one of the
+        @link wxStyledTextCtrl::wxSTC_TD_LONGARROW wxSTC_TD_* @endlink constants.
+        @since 3.1.1
     */
-    void SetMarginLeft(int pixelWidth);
+    void SetTabDrawMode(int tabDrawMode);
 
     /**
-        Returns the size in pixels of the left margin.
+        Set the foreground colour of all whitespace and whether to use this setting.
     */
-    int GetMarginLeft() const;
+    void SetWhitespaceForeground(bool useSetting, const wxColour& fore);
 
     /**
-        Sets the size in pixels of the right margin.
+        Set the background colour of all whitespace and whether to use this setting.
     */
-    void SetMarginRight(int pixelWidth);
+    void SetWhitespaceBackground(bool useSetting, const wxColour& back);
 
     /**
-        Returns the size in pixels of the right margin.
+        Set the size of the dots used to mark space characters.
     */
-    int GetMarginRight() const;
+    void SetWhitespaceSize(int size);
 
     /**
-        Is the document different from when it was last saved?
+        Get the size of the dots used to mark space characters.
     */
-    bool GetModify() const;
+    int GetWhitespaceSize() const;
 
     /**
-        Retrieve the selected text.
+        Set extra ascent for each line
     */
-    wxString GetSelectedText();
+    void SetExtraAscent(int extraAscent);
 
     /**
-        Retrieve a range of text.
+        Get extra ascent for each line
     */
-    wxString GetTextRange(int startPos, int endPos);
+    int GetExtraAscent() const;
 
     /**
-        Draw the selection in normal style or with selection highlighted.
+        Set extra descent for each line
     */
-    void HideSelection(bool hide);
+    void SetExtraDescent(int extraDescent);
 
     /**
-        Retrieve the point in the window where a position is displayed.
+        Get extra descent for each line
     */
-    wxPoint PointFromPosition(int pos);
+    int GetExtraDescent() const;
+
+    //@}
 
     /**
-        Retrieve the line containing a position.
+        @member_group_name{Cursor, Cursor}
     */
-    int LineFromPosition(int pos) const;
+    //@{
 
     /**
-        Retrieve the position at the start of a line.
+        Sets the cursor to one of the wxSTC_CURSOR* values.
     */
-    int PositionFromLine(int line) const;
+    void SetSTCCursor(int cursorType);
 
     /**
-        Scroll horizontally and vertically.
+        Get cursor type.
+
+        The return value will be one of the
+        @link wxStyledTextCtrl::wxSTC_CURSORNORMAL wxSTC_CURSOR* @endlink constants.
     */
-    void LineScroll(int columns, int lines);
+    int GetSTCCursor() const;
+
+    //@}
 
     /**
-        Ensure the caret is visible.
+        @member_group_name{MouseCapture, Mouse capture}
     */
-    void EnsureCaretVisible();
+    //@{
 
     /**
-        Scroll the argument positions and the range between them into view giving
-        priority to the primary position then the secondary position.
-        This may be used to make a search match visible.
+        Set whether the mouse is captured when its button is pressed.
     */
-    void ScrollRange(int secondary, int primary);
+    void SetMouseDownCaptures(bool captures);
 
     /**
-        Replace the selected text with the argument text.
+        Get whether mouse gets captured.
     */
-    void ReplaceSelection(const wxString& text);
+    bool GetMouseDownCaptures() const;
 
     /**
-        Set to read only or read write.
+        Set whether the mouse wheel can be active outside the window.
+
+        @since 3.1.1
     */
-    void SetReadOnly(bool readOnly);
+    void SetMouseWheelCaptures(bool captures);
 
     /**
-        Will a paste succeed?
+        Get whether mouse wheel can be active outside the window.
+
+        @since 3.1.1
     */
-    bool CanPaste() const;
+    bool GetMouseWheelCaptures() const;
+
+    //@}
 
     /**
-        Are there any undoable actions in the undo history?
+        @member_group_name{LineEndings, Line endings}
     */
-    bool CanUndo() const;
+    //@{
 
     /**
-        Delete the undo history.
+        Convert all line endings in the document to one mode.
     */
-    void EmptyUndoBuffer();
+    void ConvertEOLs(int eolMode);
 
     /**
-        Undo one action in the undo history.
+        Retrieve the current end of line mode - one of wxSTC_EOL_CRLF, wxSTC_EOL_CR, or wxSTC_EOL_LF.
     */
-    void Undo();
+    int GetEOLMode() const;
 
     /**
-        Cut the selection to the clipboard.
+        Set the current end of line mode.
+
+        The input should be one of the
+        @link wxStyledTextCtrl::wxSTC_EOL_CRLF wxSTC_EOL_* @endlink  constants.
     */
-    void Cut();
+    void SetEOLMode(int eolMode);
 
     /**
-        Copy the selection to the clipboard.
+        Are the end of line characters visible?
     */
-    void Copy();
+    bool GetViewEOL() const;
 
     /**
-        Paste the contents of the clipboard into the document replacing the selection.
+        Make the end of line characters visible or invisible.
     */
-    void Paste();
+    void SetViewEOL(bool visible);
 
     /**
-        Clear the selection.
+        Set the line end types that the application wants to use. May not be used if incompatible with lexer or encoding.
+
+        The input should be one of the
+        @link wxStyledTextCtrl::wxSTC_LINE_END_TYPE_DEFAULT wxSTC_LINE_END_TYPE_* @endlink constants.
+        @since 3.1.0
     */
-    void Clear();
+    void SetLineEndTypesAllowed(int lineEndBitSet);
 
     /**
-        Replace the contents of the document with the argument text.
+        Get the line end types currently allowed.
+
+        The return value will be one of the
+        @link wxStyledTextCtrl::wxSTC_LINE_END_TYPE_DEFAULT wxSTC_LINE_END_TYPE_* @endlink constants.
+        @since 3.1.0
     */
-    void SetText(const wxString& text);
+    int GetLineEndTypesAllowed() const;
 
     /**
-        Retrieve all the text in the document.
+        Get the line end types currently recognised. May be a subset of the allowed types due to lexer limitation.
+
+        The return value will be one of the
+        @link wxStyledTextCtrl::wxSTC_LINE_END_TYPE_DEFAULT wxSTC_LINE_END_TYPE_* @endlink constants.
+        @since 3.1.0
     */
-    wxString GetText() const;
+    int GetLineEndTypesActive() const;
 
     /**
-        Retrieve the number of characters in the document.
+        Bit set of LineEndType enumertion for which line ends beyond the standard
+        LF, CR, and CRLF are supported by the lexer.
+
+        The return value will be a bit list containing one or more of the
+        @link wxStyledTextCtrl::wxSTC_LINE_END_TYPE_DEFAULT wxSTC_LINE_END_TYPE_* @endlink constants.
+        @since 3.1.0
     */
-    int GetTextLength() const;
+    int GetLineEndTypesSupported() const;
+
+    //@}
 
     /**
-        Retrieve a pointer to a function that processes messages for this Scintilla.
+        @member_group_name{Words, Words}
     */
-    void* GetDirectFunction() const;
+    //@{
 
     /**
-        Retrieve a pointer value to use as the first argument when calling
-        the function returned by GetDirectFunction.
+        Set the set of characters making up words for when moving or selecting by word.
+        First sets defaults like SetCharsDefault.
     */
-    void* GetDirectPointer() const;
+    void SetWordChars(const wxString& characters);
 
     /**
-        Set to overtype (true) or insert mode.
+        Get the set of characters making up words for when moving or selecting by word.
     */
-    void SetOvertype(bool overType);
+    wxString GetWordChars() const;
 
     /**
-        Returns true if overtype mode is active otherwise false is returned.
+        Get position of start of word.
     */
-    bool GetOvertype() const;
+    int WordStartPosition(int pos, bool onlyWordCharacters);
 
     /**
-        Set the width of the insert mode caret.
+        Get position of end of word.
     */
-    void SetCaretWidth(int pixelWidth);
+    int WordEndPosition(int pos, bool onlyWordCharacters);
 
     /**
-        Returns the width of the insert mode caret.
+        Is the range start..end considered a word?
+
+        @since 3.1.1
     */
-    int GetCaretWidth() const;
+    bool IsRangeWord(int start, int end);
 
     /**
-        Sets the position that starts the target which is used for updating the
-        document without affecting the scroll position.
+        Set the set of characters making up whitespace for when moving or selecting by word.
+        Should be called after SetWordChars.
     */
-    void SetTargetStart(int start);
+    void SetWhitespaceChars(const wxString& characters);
 
     /**
-        Get the position that starts the target.
+        Get the set of characters making up whitespace for when moving or selecting by word.
     */
-    int GetTargetStart() const;
+    wxString GetWhitespaceChars() const;
 
     /**
-        Sets the position that ends the target which is used for updating the
-        document without affecting the scroll position.
+        Set the set of characters making up punctuation characters
+        Should be called after SetWordChars.
     */
-    void SetTargetEnd(int end);
+    void SetPunctuationChars(const wxString& characters);
 
     /**
-        Get the position that ends the target.
+        Get the set of characters making up punctuation characters
     */
-    int GetTargetEnd() const;
+    wxString GetPunctuationChars() const;
 
     /**
-        Sets both the start and end of the target in one call.
+        Reset the set of characters for whitespace and word characters to the defaults.
     */
-    void SetTargetRange(int start, int end);
+    void SetCharsDefault();
+
+    //@}
 
     /**
-        Retrieve the text in the target.
+        @member_group_name{Styling, Styling}
     */
-    wxString GetTargetText() const;
+    //@{
 
     /**
-        Make the target range start and end be the same as the selection range start and end.
+        Retrieve the position of the last correctly styled character.
     */
-    void TargetFromSelection();
+    int GetEndStyled() const;
 
     /**
-        Sets the target to the whole document.
+        Set the current styling position to start.
+        The unused parameter is no longer used and should be set to 0.
     */
-    void TargetWholeDocument();
+    void StartStyling(int start, int unused=0);
 
     /**
-        Replace the target text with the argument text.
-        Text is counted so it can contain NULs.
-        Returns the length of the replacement text.
+        Change style from current styling position for length characters to a style
+        and move the current styling position to after this newly styled segment.
     */
-    int ReplaceTarget(const wxString& text);
+    void SetStyling(int length, int style);
 
     /**
-        Replace the target text with the argument text after \\d processing.
-        Text is counted so it can contain NULs.
-        Looks for \\d where d is between 1 and 9 and replaces these with the strings
-        matched in the last search operation which were surrounded by \( and \).
-        Returns the length of the replacement text including any change
-        caused by processing the \\d patterns.
+        Set the styles for a segment of the document.
     */
-    int ReplaceTargetRE(const wxString& text);
+    void SetStyleBytes(int length, char* styleBytes);
 
     /**
-        Search for a counted string in the target and set the target to the found
-        range. Text is counted so it can contain NULs.
-        Returns length of range or -1 for failure in which case target is not moved.
+        Used to hold extra styling information for each line.
     */
-    int SearchInTarget(const wxString& text);
+    void SetLineState(int line, int state);
 
     /**
-        Set the search flags used by SearchInTarget.
+        Retrieve the extra styling information for a line.
     */
-    void SetSearchFlags(int searchFlags);
+    int GetLineState(int line) const;
 
     /**
-        Get the search flags used by SearchInTarget.
+        Retrieve the last line number that has line state.
     */
-    int GetSearchFlags() const;
+    int GetMaxLineState() const;
 
     /**
-        Show a call tip containing a definition near position pos.
+        Sets limits to idle styling.
+
+        The input should be one of the
+        @link wxStyledTextCtrl::wxSTC_IDLESTYLING_NONE wxSTC_IDLESTYLING_* @endlink constants.
+        @since 3.1.1
     */
-    void CallTipShow(int pos, const wxString& definition);
+    void SetIdleStyling(int idleStyling);
 
     /**
-        Remove the call tip from the screen.
+        Retrieve the limits to idle styling.
+
+        The return value will be one of the
+        @link wxStyledTextCtrl::wxSTC_IDLESTYLING_NONE wxSTC_IDLESTYLING_* @endlink constants.
+        @since 3.1.1
     */
-    void CallTipCancel();
+    int GetIdleStyling() const;
+
+    //@}
 
     /**
-        Is there an active call tip?
+        @member_group_name{StyleDefinition, Style definition}
     */
-    bool CallTipActive();
+    //@{
 
     /**
-        Retrieve the position where the caret was before displaying the call tip.
+        Clear all the styles and make equivalent to the global default style.
     */
-    int CallTipPosAtStart();
+    void StyleClearAll();
 
     /**
-        Set the start position in order to change when backspacing removes the calltip.
+        Set the foreground colour of a style.
     */
-    void CallTipSetPosAtStart(int posStart);
+    void StyleSetForeground(int style, const wxColour& fore);
 
     /**
-        Highlight a segment of the definition.
+        Set the background colour of a style.
     */
-    void CallTipSetHighlight(int highlightStart, int highlightEnd);
+    void StyleSetBackground(int style, const wxColour& back);
 
     /**
-        Set the background colour for the call tip.
+        Set a style to be bold or not.
     */
-    void CallTipSetBackground(const wxColour& back);
+    void StyleSetBold(int style, bool bold);
 
     /**
-        Set the foreground colour for the call tip.
+        Set a style to be italic or not.
     */
-    void CallTipSetForeground(const wxColour& fore);
+    void StyleSetItalic(int style, bool italic);
 
     /**
-        Set the foreground colour for the highlighted part of the call tip.
+        Set the size of characters of a style.
     */
-    void CallTipSetForegroundHighlight(const wxColour& fore);
+    void StyleSetSize(int style, int sizePoints);
 
     /**
-        Enable use of STYLE_CALLTIP and set call tip tab size in pixels.
+        Set the font of a style.
     */
-    void CallTipUseStyle(int tabSize);
+    void StyleSetFaceName(int style, const wxString& fontName);
 
     /**
-        Set position of calltip, above or below text.
+        Set a style to have its end of line filled or not.
     */
-    void CallTipSetPosition(bool above);
+    void StyleSetEOLFilled(int style, bool eolFilled);
 
     /**
-        Find the display line of a document line taking hidden lines into account.
+        Reset the default style to its state at startup
     */
-    int VisibleFromDocLine(int docLine);
+    void StyleResetDefault();
 
     /**
-        Find the document line of a display line taking hidden lines into account.
+        Set a style to be underlined or not.
     */
-    int DocLineFromVisible(int displayLine);
+    void StyleSetUnderline(int style, bool underline);
 
     /**
-        The number of display lines needed to wrap a document line
+        Get the foreground colour of a style.
     */
-    int WrapCount(int docLine);
+    wxColour StyleGetForeground(int style) const;
 
     /**
-        Set the fold level of a line.
-        This encodes an integer level along with flags indicating whether the
-        line is a header and whether it is effectively white space.
+        Get the background colour of a style.
     */
-    void SetFoldLevel(int line, int level);
+    wxColour StyleGetBackground(int style) const;
 
     /**
-        Retrieve the fold level of a line.
+        Get is a style bold or not.
     */
-    int GetFoldLevel(int line) const;
+    bool StyleGetBold(int style) const;
 
     /**
-        Find the last child line of a header line.
+        Get is a style italic or not.
     */
-    int GetLastChild(int line, int level) const;
+    bool StyleGetItalic(int style) const;
 
     /**
-        Find the parent line of a child line.
+        Get the size of characters of a style.
     */
-    int GetFoldParent(int line) const;
+    int StyleGetSize(int style) const;
 
     /**
-        Make a range of lines visible.
+        Get the font facename of a style
     */
-    void ShowLines(int lineStart, int lineEnd);
+    wxString StyleGetFaceName(int style);
 
     /**
-        Make a range of lines invisible.
+        Get is a style to have its end of line filled or not.
     */
-    void HideLines(int lineStart, int lineEnd);
+    bool StyleGetEOLFilled(int style) const;
 
     /**
-        Is a line visible?
+        Get is a style underlined or not.
     */
-    bool GetLineVisible(int line) const;
+    bool StyleGetUnderline(int style) const;
 
     /**
-        Are all lines visible?
+        Get is a style mixed case, or to force upper or lower case.
+
+        The return value will be one of the
+        @link wxStyledTextCtrl::wxSTC_CASE_MIXED wxSTC_CASE_* @endlink constants.
     */
-    bool GetAllLinesVisible() const;
+    int StyleGetCase(int style) const;
 
     /**
-        Show the children of a header line.
+        Get the character get of the font in a style.
     */
-    void SetFoldExpanded(int line, bool expanded);
+    int StyleGetCharacterSet(int style) const;
 
     /**
-        Is a header line expanded?
+        Get is a style visible or not.
     */
-    bool GetFoldExpanded(int line) const;
+    bool StyleGetVisible(int style) const;
 
     /**
-        Switch a header line between expanded and contracted.
+        Get is a style changeable or not (read only).
+        Experimental feature, currently buggy.
     */
-    void ToggleFold(int line);
+    bool StyleGetChangeable(int style) const;
 
     /**
-        Switch a header line between expanded and contracted and show some text after the line.
+        Get is a style a hotspot or not.
     */
-    void ToggleFoldShowText(int line, const wxString& text);
+    bool StyleGetHotSpot(int style) const;
 
     /**
-        Set the style of fold display text
+        Set a style to be mixed case, or to force upper or lower case.
+
+        The second argument should be one of the
+        @link wxStyledTextCtrl::wxSTC_CASE_MIXED wxSTC_CASE_* @endlink constants.
     */
-    void FoldDisplayTextSetStyle(int style);
+    void StyleSetCase(int style, int caseVisible);
 
     /**
-        Expand or contract a fold header.
+        Set the size of characters of a style. Size is in points multiplied by 100.
     */
-    void FoldLine(int line, int action);
+    void StyleSetSizeFractional(int style, int sizeHundredthPoints);
 
     /**
-        Expand or contract a fold header and its children.
+        Get the size of characters of a style in points multiplied by 100
     */
-    void FoldChildren(int line, int action);
+    int StyleGetSizeFractional(int style) const;
 
     /**
-        Expand a fold header and all children. Use the level argument instead of the line's current level.
+        Set the weight of characters of a style.
+
+        The second argument can be an integer or one of the
+        @link wxStyledTextCtrl::wxSTC_WEIGHT_NORMAL wxSTC_WEIGHT_* @endlink constants.
     */
-    void ExpandChildren(int line, int level);
+    void StyleSetWeight(int style, int weight);
 
     /**
-        Expand or contract all fold headers.
+        Get the weight of characters of a style.
+
+        The return value will be an integer that is possibly one of the
+        @link wxStyledTextCtrl::wxSTC_WEIGHT_NORMAL wxSTC_WEIGHT_* @endlink constants.
     */
-    void FoldAll(int action);
+    int StyleGetWeight(int style) const;
 
     /**
-        Ensure a particular line is visible by expanding any header line hiding it.
+        Set the character set of the font in a style.
+
+        Converts the Scintilla character set values to a wxFontEncoding.
     */
-    void EnsureVisible(int line);
+    void StyleSetCharacterSet(int style, int characterSet);
 
     /**
-        Set automatic folding behaviours.
+        Set a style to be a hotspot or not.
     */
-    void SetAutomaticFold(int automaticFold);
+    void StyleSetHotSpot(int style, bool hotspot);
 
     /**
-        Get automatic folding behaviours.
+        Set a style to be visible or not.
     */
-    int GetAutomaticFold() const;
+    void StyleSetVisible(int style, bool visible);
 
     /**
-        Set some style options for folding.
+        Set a style to be changeable or not (read only).
+        Experimental feature, currently buggy.
     */
-    void SetFoldFlags(int flags);
+    void StyleSetChangeable(int style, bool changeable);
 
-    /**
-        Ensure a particular line is visible by expanding any header line hiding it.
-        Use the currently set visibility policy to determine which range to display.
-    */
-    void EnsureVisibleEnforcePolicy(int line);
+    //@}
 
     /**
-        Sets whether a tab pressed when caret is within indentation indents.
+        @member_group_name{CaretAndSelectionStyles, Caret selection and hotspot styles}
     */
-    void SetTabIndents(bool tabIndents);
+    //@{
 
     /**
-        Does a tab pressed when caret is within indentation indent?
+        Set the foreground colour of the main and additional selections and whether to use this setting.
     */
-    bool GetTabIndents() const;
+    void SetSelForeground(bool useSetting, const wxColour& fore);
 
     /**
-        Sets whether a backspace pressed when caret is within indentation unindents.
+        Set the background colour of the main and additional selections and whether to use this setting.
     */
-    void SetBackSpaceUnIndents(bool bsUnIndents);
+    void SetSelBackground(bool useSetting, const wxColour& back);
 
     /**
-        Does a backspace pressed when caret is within indentation unindent?
+        Get the alpha of the selection.
     */
-    bool GetBackSpaceUnIndents() const;
+    int GetSelAlpha() const;
 
     /**
-        Sets the time the mouse must sit still to generate a mouse dwell event.
+        Set the alpha of the selection.
     */
-    void SetMouseDwellTime(int periodMilliseconds);
+    void SetSelAlpha(int alpha);
 
     /**
-        Retrieve the time the mouse must sit still to generate a mouse dwell event.
+        Is the selection end of line filled?
     */
-    int GetMouseDwellTime() const;
+    bool GetSelEOLFilled() const;
 
     /**
-        Get position of start of word.
+        Set the selection to have its end of line filled or not.
     */
-    int WordStartPosition(int pos, bool onlyWordCharacters);
+    void SetSelEOLFilled(bool filled);
 
     /**
-        Get position of end of word.
+        Set the foreground colour of the caret.
     */
-    int WordEndPosition(int pos, bool onlyWordCharacters);
+    void SetCaretForeground(const wxColour& fore);
 
     /**
-        Is the range start..end considered a word?
+        Get the time in milliseconds that the caret is on and off.
     */
-    bool IsRangeWord(int start, int end);
+    int GetCaretPeriod() const;
 
     /**
-        Sets limits to idle styling.
+        Get the time in milliseconds that the caret is on and off. 0 = steady on.
     */
-    void SetIdleStyling(int idleStyling);
+    void SetCaretPeriod(int periodMilliseconds);
 
     /**
-        Retrieve the limits to idle styling.
+        Is the background of the line containing the caret in a different colour?
     */
-    int GetIdleStyling() const;
+    bool GetCaretLineVisible() const;
 
     /**
-        Sets whether text is word wrapped.
+        Display the background of the line containing the caret in a different colour.
     */
-    void SetWrapMode(int wrapMode);
+    void SetCaretLineVisible(bool show);
 
     /**
-        Retrieve whether text is word wrapped.
+        Get the colour of the background of the line containing the caret.
     */
-    int GetWrapMode() const;
+    wxColour GetCaretLineBackground() const;
 
     /**
-        Set the display mode of visual flags for wrapped lines.
+        Set the colour of the background of the line containing the caret.
     */
-    void SetWrapVisualFlags(int wrapVisualFlags);
+    void SetCaretLineBackground(const wxColour& back);
 
     /**
-        Retrive the display mode of visual flags for wrapped lines.
+        Get the foreground colour of the caret.
     */
-    int GetWrapVisualFlags() const;
+    wxColour GetCaretForeground() const;
 
     /**
-        Set the location of visual flags for wrapped lines.
+        Set the width of the insert mode caret.
     */
-    void SetWrapVisualFlagsLocation(int wrapVisualFlagsLocation);
+    void SetCaretWidth(int pixelWidth);
 
     /**
-        Retrive the location of visual flags for wrapped lines.
+        Returns the width of the insert mode caret.
     */
-    int GetWrapVisualFlagsLocation() const;
+    int GetCaretWidth() const;
 
     /**
-        Set the start indent for wrapped lines.
+        Set a fore colour for active hotspots.
     */
-    void SetWrapStartIndent(int indent);
+    void SetHotspotActiveForeground(bool useSetting, const wxColour& fore);
 
     /**
-        Retrive the start indent for wrapped lines.
+        Get the fore colour for active hotspots.
     */
-    int GetWrapStartIndent() const;
+    wxColour GetHotspotActiveForeground() const;
 
     /**
-        Sets how wrapped sublines are placed. Default is fixed.
+        Set a back colour for active hotspots.
     */
-    void SetWrapIndentMode(int wrapIndentMode);
+    void SetHotspotActiveBackground(bool useSetting, const wxColour& back);
 
     /**
-        Retrieve how wrapped sublines are placed. Default is fixed.
+        Get the back colour for active hotspots.
     */
-    int GetWrapIndentMode() const;
+    wxColour GetHotspotActiveBackground() const;
 
     /**
-        Sets the degree of caching of layout information.
+        Enable / Disable underlining active hotspots.
     */
-    void SetLayoutCache(int cacheMode);
+    void SetHotspotActiveUnderline(bool underline);
 
     /**
-        Retrieve the degree of caching of layout information.
+        Get whether underlining for active hotspots.
     */
-    int GetLayoutCache() const;
+    bool GetHotspotActiveUnderline() const;
 
     /**
-        Sets the document width assumed for scrolling.
+        Limit hotspots to single line so hotspots on two lines don't merge.
     */
-    void SetScrollWidth(int pixelWidth);
+    void SetHotspotSingleLine(bool singleLine);
 
     /**
-        Retrieve the document width assumed for scrolling.
+        Get the HotspotSingleLine property
     */
-    int GetScrollWidth() const;
+    bool GetHotspotSingleLine() const;
 
     /**
-        Sets whether the maximum width line displayed is used to set scroll width.
+        Can the caret preferred x position only be changed by explicit movement commands?
+
+        The return value will be one of the
+        @link wxStyledTextCtrl::wxSTC_CARETSTICKY_OFF wxSTC_CARETSTICKY_* @endlink constants.
     */
-    void SetScrollWidthTracking(bool tracking);
+    int GetCaretSticky() const;
 
     /**
-        Retrieve whether the scroll width tracks wide lines.
+        Stop the caret preferred x position changing when the user types.
+
+        The input should be one of the
+        @link wxStyledTextCtrl::wxSTC_CARETSTICKY_OFF wxSTC_CARETSTICKY_* @endlink constants.
     */
-    bool GetScrollWidthTracking() const;
+    void SetCaretSticky(int useCaretStickyBehaviour);
 
     /**
-        Measure the pixel width of some text in a particular style.
-        NUL terminated text argument.
-        Does not handle tab or control characters.
+        Switch between sticky and non-sticky: meant to be bound to a key.
     */
-    int TextWidth(int style, const wxString& text);
+    void ToggleCaretSticky();
 
     /**
-        Sets the scroll range so that maximum scroll position has
-        the last line at the bottom of the view (default).
-        Setting this to false allows scrolling one page below the last line.
+        Set background alpha of the caret line.
     */
-    void SetEndAtLastLine(bool endAtLastLine);
+    void SetCaretLineBackAlpha(int alpha);
 
     /**
-        Retrieve whether the maximum scroll position has the last
-        line at the bottom of the view.
+        Get the background alpha of the caret line.
     */
-    bool GetEndAtLastLine() const;
+    int GetCaretLineBackAlpha() const;
 
     /**
-        Retrieve the height of a particular line of text in pixels.
+        Set the style of the caret to be drawn.
+
+        The input should be one of the
+        @link wxStyledTextCtrl::wxSTC_CARETSTYLE_INVISIBLE wxSTC_CARETSTYLE_* @endlink constants.
     */
-    int TextHeight(int line);
+    void SetCaretStyle(int caretStyle);
 
     /**
-        Show or hide the vertical scroll bar.
+        Returns the current style of the caret.
+
+        The return value will be one of the
+        @link wxStyledTextCtrl::wxSTC_CARETSTYLE_INVISIBLE wxSTC_CARETSTYLE_* @endlink constants.
     */
-    void SetUseVerticalScrollBar(bool visible);
+    int GetCaretStyle() const;
 
     /**
-        Is the vertical scroll bar visible?
+        Is the caret line always visible?
+
+        @since 3.1.0
     */
-    bool GetUseVerticalScrollBar() const;
+    bool GetCaretLineVisibleAlways() const;
 
     /**
-        Append a string to the end of the document without changing the selection.
+        Sets the caret line to always visible.
+
+        @since 3.1.0
     */
-    void AppendText(const wxString& text);
+    void SetCaretLineVisibleAlways(bool alwaysVisible);
+
+    //@}
 
     /**
-        Is drawing done in two phases with backgrounds drawn before foregrounds?
+        @member_group_name{CharacterRepresentations, Character representations}
     */
-    bool GetTwoPhaseDraw() const;
+    //@{
 
     /**
-        In twoPhaseDraw mode, drawing is performed in two phases, first the background
-        and then the foreground. This avoids chopping off characters that overlap the next run.
+        Change the way control characters are displayed:
+        If symbol is < 32, keep the drawn way, else, use the given character.
     */
-    void SetTwoPhaseDraw(bool twoPhase);
+    void SetControlCharSymbol(int symbol);
 
     /**
-        How many phases is drawing done in?
+        Get the way control characters are displayed.
     */
-    int GetPhasesDraw() const;
+    int GetControlCharSymbol() const;
 
     /**
-        In one phase draw, text is drawn in a series of rectangular blocks with no overlap.
-        In two phase draw, text is drawn in a series of lines allowing runs to overlap horizontally.
-        In multiple phase draw, each element is drawn over the whole drawing area, allowing text
-        to overlap from one line to the next.
+        Set the way a character is drawn.
+
+        @since 3.1.0
     */
-    void SetPhasesDraw(int phases);
+    void SetRepresentation(const wxString& encodedCharacter, const wxString& representation);
 
     /**
-        Scroll so that a display line is at the top of the display.
+        Set the way a character is drawn.
+
+        @since 3.1.0
     */
-    void SetFirstVisibleLine(int displayLine);
+    wxString GetRepresentation(const wxString& encodedCharacter) const;
 
     /**
-        Change the effect of pasting when there are multiple selections.
+        Remove a character representation.
+
+        @since 3.1.0
     */
-    void SetMultiPaste(int multiPaste);
+    void ClearRepresentation(const wxString& encodedCharacter);
+
+    //@}
 
     /**
-        Retrieve the effect of pasting when there are multiple selections.
+        @member_group_name{Margins, Margins}
     */
-    int GetMultiPaste() const;
+    //@{
 
     /**
-        Retrieve the value of a tag from a regular expression search.
-        Result is NUL-terminated.
+        Set a margin to be either numeric or symbolic.
+
+        The second argument should be one of the
+        @link wxStyledTextCtrl::wxSTC_MARGIN_SYMBOL wxSTC_MARGIN_* @endlink constants.
     */
-    wxString GetTag(int tagNumber) const;
+    void SetMarginType(int margin, int marginType);
 
     /**
-        Join the lines in the target.
+        Retrieve the type of a margin.
+
+        The return value will be one of the
+        @link wxStyledTextCtrl::wxSTC_MARGIN_SYMBOL wxSTC_MARGIN_* @endlink constants.
     */
-    void LinesJoin();
+    int GetMarginType(int margin) const;
 
     /**
-        Split the lines in the target into lines that are less wide than pixelWidth
-        where possible.
+        Set the width of a margin to a width expressed in pixels.
     */
-    void LinesSplit(int pixelWidth);
+    void SetMarginWidth(int margin, int pixelWidth);
 
     /**
-        Set one of the colours used as a chequerboard pattern in the fold margin
+        Retrieve the width of a margin in pixels.
     */
-    void SetFoldMarginColour(bool useSetting, const wxColour& back);
+    int GetMarginWidth(int margin) const;
 
     /**
-        Set the other colour used as a chequerboard pattern in the fold margin
+        Set a mask that determines which markers are displayed in a margin.
     */
-    void SetFoldMarginHiColour(bool useSetting, const wxColour& fore);
+    void SetMarginMask(int margin, int mask);
 
     /**
-        Move caret down one line.
+        Retrieve the marker mask of a margin.
     */
-    void LineDown();
+    int GetMarginMask(int margin) const;
 
     /**
-        Move caret down one line extending selection to new caret position.
+        Make a margin sensitive or insensitive to mouse clicks.
     */
-    void LineDownExtend();
+    void SetMarginSensitive(int margin, bool sensitive);
 
     /**
-        Move caret up one line.
+        Retrieve the mouse click sensitivity of a margin.
     */
-    void LineUp();
+    bool GetMarginSensitive(int margin) const;
 
     /**
-        Move caret up one line extending selection to new caret position.
+        Set the cursor shown when the mouse is inside a margin.
+
+        The second argument should be one of the
+        @link wxStyledTextCtrl::wxSTC_CURSORNORMAL wxSTC_CURSOR* @endlink constants.
     */
-    void LineUpExtend();
+    void SetMarginCursor(int margin, int cursor);
 
     /**
-        Move caret left one character.
+        Retrieve the cursor shown in a margin.
+
+        The return value will be one of the
+        @link wxStyledTextCtrl::wxSTC_CURSORNORMAL wxSTC_CURSOR* @endlink constants.
     */
-    void CharLeft();
+    int GetMarginCursor(int margin) const;
 
     /**
-        Move caret left one character extending selection to new caret position.
+        Set the background colour of a margin. Only visible for wxSTC_MARGIN_COLOUR.
+
+        @since 3.1.1
     */
-    void CharLeftExtend();
+    void SetMarginBackground(int margin, const wxColour& back);
 
     /**
-        Move caret right one character.
-    */
-    void CharRight();
+        Retrieve the background colour of a margin
 
-    /**
-        Move caret right one character extending selection to new caret position.
+        @since 3.1.1
     */
-    void CharRightExtend();
+    wxColour GetMarginBackground(int margin) const;
 
     /**
-        Move caret left one word.
-    */
-    void WordLeft();
+        Allocate a non-standard number of margins.
 
-    /**
-        Move caret left one word extending selection to new caret position.
+        @since 3.1.1
     */
-    void WordLeftExtend();
+    void SetMarginCount(int margins);
 
     /**
-        Move caret right one word.
-    */
-    void WordRight();
+        How many margins are there?.
 
-    /**
-        Move caret right one word extending selection to new caret position.
+        @since 3.1.1
     */
-    void WordRightExtend();
+    int GetMarginCount() const;
 
     /**
-        Move caret to first position on line.
+        Sets the size in pixels of the left margin.
     */
-    void Home();
+    void SetMarginLeft(int pixelWidth);
 
     /**
-        Move caret to first position on line extending selection to new caret position.
+        Returns the size in pixels of the left margin.
     */
-    void HomeExtend();
+    int GetMarginLeft() const;
 
     /**
-        Move caret to last position on line.
+        Sets the size in pixels of the right margin.
     */
-    void LineEnd();
+    void SetMarginRight(int pixelWidth);
 
     /**
-        Move caret to last position on line extending selection to new caret position.
+        Returns the size in pixels of the right margin.
     */
-    void LineEndExtend();
+    int GetMarginRight() const;
 
     /**
-        Move caret to first position in document.
+        Set one of the colours used as a chequerboard pattern in the fold margin
     */
-    void DocumentStart();
+    void SetFoldMarginColour(bool useSetting, const wxColour& back);
 
     /**
-        Move caret to first position in document extending selection to new caret position.
+        Set the other colour used as a chequerboard pattern in the fold margin
     */
-    void DocumentStartExtend();
+    void SetFoldMarginHiColour(bool useSetting, const wxColour& fore);
 
     /**
-        Move caret to last position in document.
+        Set the text in the text margin for a line
     */
-    void DocumentEnd();
+    void MarginSetText(int line, const wxString& text);
 
     /**
-        Move caret to last position in document extending selection to new caret position.
+        Get the text in the text margin for a line
     */
-    void DocumentEndExtend();
+    wxString MarginGetText(int line) const;
 
     /**
-        Move caret one page up.
+        Set the style number for the text margin for a line
     */
-    void PageUp();
+    void MarginSetStyle(int line, int style);
 
     /**
-        Move caret one page up extending selection to new caret position.
+        Get the style number for the text margin for a line
     */
-    void PageUpExtend();
+    int MarginGetStyle(int line) const;
 
     /**
-        Move caret one page down.
+        Set the style in the text margin for a line
     */
-    void PageDown();
+    void MarginSetStyles(int line, const wxString& styles);
 
     /**
-        Move caret one page down extending selection to new caret position.
+        Get the styles in the text margin for a line
     */
-    void PageDownExtend();
+    wxString MarginGetStyles(int line) const;
 
     /**
-        Switch from insert to overtype mode or the reverse.
+        Clear the margin text on all lines
     */
-    void EditToggleOvertype();
+    void MarginTextClearAll();
 
     /**
-        Cancel any modes such as call tip or auto-completion list display.
+        Get the start of the range of style numbers used for margin text
     */
-    void Cancel();
+    void MarginSetStyleOffset(int style);
 
     /**
-        Delete the selection or if no selection, the character before the caret.
+        Get the start of the range of style numbers used for margin text
     */
-    void DeleteBack();
+    int MarginGetStyleOffset() const;
 
     /**
-        If selection is empty or all on one line replace the selection with a tab character.
-        If more than one line selected, indent the lines.
-    */
-    void Tab();
+        Set the margin options.
 
-    /**
-        Dedent the selected lines.
+        The input should be one of the
+        @link wxStyledTextCtrl::wxSTC_MARGINOPTION_NONE wxSTC_MARGINOPTION_* @endlink constants.
     */
-    void BackTab();
+    void SetMarginOptions(int marginOptions);
 
     /**
-        Insert a new line, may use a CRLF, CR or LF depending on EOL mode.
+        Get the margin options.
+
+        The return value will be one of the
+        @link wxStyledTextCtrl::wxSTC_MARGINOPTION_NONE wxSTC_MARGINOPTION_* @endlink constants.
     */
-    void NewLine();
+    int GetMarginOptions() const;
+
+    //@}
 
     /**
-        Insert a Form Feed character.
+        @member_group_name{Annotations, Annotations}
     */
-    void FormFeed();
+    //@{
 
     /**
-        Move caret to before first visible character on line.
-        If already there move to first character on line.
+        Set the annotation text for a line
     */
-    void VCHome();
+    void AnnotationSetText(int line, const wxString& text);
 
     /**
-        Like VCHome but extending selection to new caret position.
+        Get the annotation text for a line
     */
-    void VCHomeExtend();
+    wxString AnnotationGetText(int line) const;
 
     /**
-        Magnify the displayed text by increasing the sizes by 1 point.
+        Set the style number for the annotations for a line
     */
-    void ZoomIn();
+    void AnnotationSetStyle(int line, int style);
 
     /**
-        Make the displayed text smaller by decreasing the sizes by 1 point.
+        Get the style number for the annotations for a line
     */
-    void ZoomOut();
+    int AnnotationGetStyle(int line) const;
 
     /**
-        Delete the word to the left of the caret.
+        Set the annotation styles for a line
     */
-    void DelWordLeft();
+    void AnnotationSetStyles(int line, const wxString& styles);
 
     /**
-        Delete the word to the right of the caret.
+        Get the annotation styles for a line
     */
-    void DelWordRight();
+    wxString AnnotationGetStyles(int line) const;
 
     /**
-        Delete the word to the right of the caret, but not the trailing non-word characters.
+        Get the number of annotation lines for a line
     */
-    void DelWordRightEnd();
+    int AnnotationGetLines(int line) const;
 
     /**
-        Cut the line containing the caret.
+        Clear the annotations from all lines
     */
-    void LineCut();
+    void AnnotationClearAll();
 
     /**
-        Delete the line containing the caret.
+        Set the visibility for the annotations for a view
+
+        The input should be one of the
+        @link wxStyledTextCtrl::wxSTC_ANNOTATION_HIDDEN wxSTC_ANNOTATION_* @endlink constants.
     */
-    void LineDelete();
+    void AnnotationSetVisible(int visible);
 
     /**
-        Switch the current line with the previous.
+        Get the visibility for the annotations for a view
+
+        The return value will be one of the
+        @link wxStyledTextCtrl::wxSTC_ANNOTATION_HIDDEN wxSTC_ANNOTATION_* @endlink constants.
     */
-    void LineTranspose();
+    int AnnotationGetVisible() const;
 
     /**
-        Duplicate the current line.
+        Get the start of the range of style numbers used for annotations
     */
-    void LineDuplicate();
+    void AnnotationSetStyleOffset(int style);
 
     /**
-        Transform the selection to lower case.
+        Get the start of the range of style numbers used for annotations
     */
-    void LowerCase();
+    int AnnotationGetStyleOffset() const;
+
+    //@}
 
     /**
-        Transform the selection to upper case.
+        @member_group_name{OtherSettings, Other settings}
     */
-    void UpperCase();
+    //@{
 
     /**
-        Scroll the document down, keeping the caret visible.
+        Is drawing done first into a buffer or direct to the screen?
     */
-    void LineScrollDown();
+    bool GetBufferedDraw() const;
 
     /**
-        Scroll the document up, keeping the caret visible.
+        If drawing is buffered then each line of text is drawn into a bitmap buffer
+        before drawing it to the screen to avoid flicker.
     */
-    void LineScrollUp();
+    void SetBufferedDraw(bool buffered);
 
     /**
-        Delete the selection or if no selection, the character before the caret.
-        Will not delete the character before at the start of a line.
+        Set the code page used to interpret the bytes of the document as characters.
     */
-    void DeleteBackNotLine();
+    void SetCodePage(int codePage);
 
     /**
-        Move caret to first position on display line.
+        Is the IME displayed in a window or inline?
+
+        The return value will be one of the
+        @link wxStyledTextCtrl::wxSTC_IME_WINDOWED wxSTC_IME_* @endlink constants.
+        @since 3.1.0
     */
-    void HomeDisplay();
+    int GetIMEInteraction() const;
 
     /**
-        Move caret to first position on display line extending selection to
-        new caret position.
+        Choose to display the the IME in a winow or inline.
+
+        The input should be one of the
+        @link wxStyledTextCtrl::wxSTC_IME_WINDOWED wxSTC_IME_* @endlink constants.
+        @since 3.1.0
     */
-    void HomeDisplayExtend();
+    void SetIMEInteraction(int imeInteraction);
 
     /**
-        Move caret to last position on display line.
+        Get the code page used to interpret the bytes of the document as characters.
     */
-    void LineEndDisplay();
+    int GetCodePage() const;
 
     /**
-        Move caret to last position on display line extending selection to new
-        caret position.
+        Sets the degree of caching of layout information.
+
+        The input should be one of the
+        @link wxStyledTextCtrl::wxSTC_CACHE_NONE wxSTC_CACHE_* @endlink constants.
     */
-    void LineEndDisplayExtend();
+    void SetLayoutCache(int cacheMode);
 
     /**
-        Like Home but when word-wrap is enabled goes first to start of display line
-        HomeDisplay, then to start of document line Home.
+        Is drawing done in two phases with backgrounds drawn before foregrounds?
     */
-    void HomeWrap();
+    bool GetTwoPhaseDraw() const;
 
     /**
-        Like HomeExtend but when word-wrap is enabled extends first to start of display line
-        HomeDisplayExtend, then to start of document line HomeExtend.
+        In twoPhaseDraw mode, drawing is performed in two phases, first the background
+        and then the foreground. This avoids chopping off characters that overlap the next run.
     */
-    void HomeWrapExtend();
+    void SetTwoPhaseDraw(bool twoPhase);
 
     /**
-        Like LineEnd but when word-wrap is enabled goes first to end of display line
-        LineEndDisplay, then to start of document line LineEnd.
+        How many phases is drawing done in?
+
+        The return value will be one of the
+        @link wxStyledTextCtrl::wxSTC_PHASES_ONE wxSTC_PHASES_* @endlink constants.
+        @since 3.1.0
     */
-    void LineEndWrap();
+    int GetPhasesDraw() const;
 
     /**
-        Like LineEndExtend but when word-wrap is enabled extends first to end of display line
-        LineEndDisplayExtend, then to start of document line LineEndExtend.
+        In one phase draw, text is drawn in a series of rectangular blocks with no overlap.
+        In two phase draw, text is drawn in a series of lines allowing runs to overlap horizontally.
+        In multiple phase draw, each element is drawn over the whole drawing area, allowing text
+        to overlap from one line to the next.
+
+        The input should be one of the
+        @link wxStyledTextCtrl::wxSTC_PHASES_ONE wxSTC_PHASES_* @endlink constants.
+        @since 3.1.0
     */
-    void LineEndWrapExtend();
+    void SetPhasesDraw(int phases);
 
     /**
-        Like VCHome but when word-wrap is enabled goes first to start of display line
-        VCHomeDisplay, then behaves like VCHome.
+        Change internal focus flag.
     */
-    void VCHomeWrap();
+    void SetSTCFocus(bool focus);
 
     /**
-        Like VCHomeExtend but when word-wrap is enabled extends first to start of display line
-        VCHomeDisplayExtend, then behaves like VCHomeExtend.
+        Get internal focus flag.
     */
-    void VCHomeWrapExtend();
+    bool GetSTCFocus() const;
 
     /**
-        Copy the line containing the caret.
+        Set the technology used.
+
+        The input should be one of the
+        @link wxStyledTextCtrl::wxSTC_TECHNOLOGY_DEFAULT wxSTC_TECHNOLOGY_* @endlink constants.
     */
-    void LineCopy();
+    void SetTechnology(int technology);
 
     /**
-        Move the caret inside current view if it's not there already.
+        Get the tech.
+
+        The return value will be one of the
+        @link wxStyledTextCtrl::wxSTC_TECHNOLOGY_DEFAULT wxSTC_TECHNOLOGY_* @endlink constants.
     */
-    void MoveCaretInsideView();
+    int GetTechnology() const;
+
+    //@}
 
     /**
-        How many characters are on a line, including end of line characters?
+        @member_group_name{BraceHighlighting, Brace highlighting}
     */
-    int LineLength(int line) const;
+    //@{
 
     /**
         Highlight the characters at two positions.
@@ -5009,497 +5176,572 @@ public:
     void BraceBadLightIndicator(bool useSetting, int indicator);
 
     /**
-        Find the position of a matching brace or INVALID_POSITION if no match.
+        Find the position of a matching brace or wxSTC_INVALID_POSITION if no match.
         The maxReStyle must be 0 for now. It may be defined in a future release.
     */
     int BraceMatch(int pos, int maxReStyle=0);
 
+    //@}
+
     /**
-        Are the end of line characters visible?
+        @member_group_name{TabsAndIndentationGuides, Tabs and Indentation Guides}
     */
-    bool GetViewEOL() const;
+    //@{
 
     /**
-        Make the end of line characters visible or invisible.
+        Change the visible size of a tab to be a multiple of the width of a space character.
     */
-    void SetViewEOL(bool visible);
+    void SetTabWidth(int tabWidth);
 
     /**
-        Retrieve a pointer to the document object.
+        Retrieve the visible size of a tab.
     */
-    void* GetDocPointer();
+    int GetTabWidth() const;
 
     /**
-        Change the document object used.
-    */
-    void SetDocPointer(void* docPointer);
+        Clear explicit tabstops on a line.
 
-    /**
-        Set which document modification events are sent to the container.
+        @since 3.1.0
     */
-    void SetModEventMask(int eventMask);
+    void ClearTabStops(int line);
 
     /**
-        Retrieve the column number which text should be kept within.
+        Add an explicit tab stop for a line.
+
+        @since 3.1.0
     */
-    int GetEdgeColumn() const;
+    void AddTabStop(int line, int x);
 
     /**
-        Set the column number of the edge.
-        If text goes past the edge then it is highlighted.
+        Find the next explicit tab stop position on a line after a position.
+
+        @since 3.1.0
     */
-    void SetEdgeColumn(int column);
+    int GetNextTabStop(int line, int x);
 
     /**
-        Retrieve the edge highlight mode.
+        Set the number of spaces used for one level of indentation.
     */
-    int GetEdgeMode() const;
+    void SetIndent(int indentSize);
 
     /**
-        The edge may be displayed by a line (EDGE_LINE/EDGE_MULTILINE) or by highlighting text that
-        goes beyond it (EDGE_BACKGROUND) or not displayed at all (EDGE_NONE).
+        Retrieve indentation size.
     */
-    void SetEdgeMode(int edgeMode);
+    int GetIndent() const;
 
     /**
-        Retrieve the colour used in edge indication.
+        Indentation will only use space characters if useTabs is false, otherwise
+        it will use a combination of tabs and spaces.
     */
-    wxColour GetEdgeColour() const;
+    void SetUseTabs(bool useTabs);
 
     /**
-        Change the colour used in edge indication.
+        Retrieve whether tabs will be used in indentation.
     */
-    void SetEdgeColour(const wxColour& edgeColour);
+    bool GetUseTabs() const;
 
     /**
-        Add a new vertical edge to the view.
+        Change the indentation of a line to a number of columns.
     */
-    void MultiEdgeAddLine(int column, const wxColour& edgeColour);
+    void SetLineIndentation(int line, int indentation);
 
     /**
-        Clear all vertical edges.
+        Retrieve the number of columns that a line is indented.
     */
-    void MultiEdgeClearAll();
+    int GetLineIndentation(int line) const;
 
     /**
-        Sets the current caret position to be the search anchor.
+        Retrieve the position before the first non indentation character on a line.
     */
-    void SearchAnchor();
+    int GetLineIndentPosition(int line) const;
 
     /**
-        Find some text starting at the search anchor.
-        Does not ensure the selection is visible.
+        Show or hide indentation guides.
+
+        The input should be one of the
+        @link wxStyledTextCtrl::wxSTC_IV_NONE wxSTC_IV_* @endlink constants.
     */
-    int SearchNext(int searchFlags, const wxString& text);
+    void SetIndentationGuides(int indentView);
 
     /**
-        Find some text starting at the search anchor and moving backwards.
-        Does not ensure the selection is visible.
+        Are the indentation guides visible?
+
+        The return value will be one of the
+        @link wxStyledTextCtrl::wxSTC_IV_NONE wxSTC_IV_* @endlink constants.
     */
-    int SearchPrev(int searchFlags, const wxString& text);
+    int GetIndentationGuides() const;
 
     /**
-        Retrieves the number of lines completely visible.
+        Set the highlighted indentation guide column.
+        0 = no highlighted guide.
     */
-    int LinesOnScreen() const;
+    void SetHighlightGuide(int column);
 
     /**
-        Set whether a pop up menu is displayed automatically when the user presses
-        the wrong mouse button on certain areas.
+        Get the highlighted indentation guide column.
     */
-    void UsePopUp(int popUpMode);
+    int GetHighlightGuide() const;
 
     /**
-        Is the selection rectangular? The alternative is the more common stream selection.
+        Sets whether a tab pressed when caret is within indentation indents.
     */
-    bool SelectionIsRectangle() const;
+    void SetTabIndents(bool tabIndents);
 
     /**
-        Set the zoom level. This number of points is added to the size of all fonts.
-        It may be positive to magnify or negative to reduce.
+        Does a tab pressed when caret is within indentation indent?
     */
-    void SetZoom(int zoomInPoints);
+    bool GetTabIndents() const;
 
     /**
-        Retrieve the zoom level.
+        Sets whether a backspace pressed when caret is within indentation unindents.
     */
-    int GetZoom() const;
+    void SetBackSpaceUnIndents(bool bsUnIndents);
 
     /**
-        Create a new document object.
-        Starts with reference count of 1 and not selected into editor.
+        Does a backspace pressed when caret is within indentation unindent?
     */
-    void* CreateDocument();
+    bool GetBackSpaceUnIndents() const;
+
+    //@}
 
     /**
-        Extend life of document.
+        @member_group_name{Markers, Markers}
     */
-    void AddRefDocument(void* docPointer);
+    //@{
 
     /**
-        Release a reference to the document, deleting document if it fades to black.
+        Retrieve the line number at which a particular marker is located.
     */
-    void ReleaseDocument(void* docPointer);
+    int MarkerLineFromHandle(int markerHandle);
 
     /**
-        Get which document modification events are sent to the container.
+        Delete a marker.
     */
-    int GetModEventMask() const;
+    void MarkerDeleteHandle(int markerHandle);
 
     /**
-        Change internal focus flag.
+        Set the symbol used for a particular marker number,
+        and optionally the fore and background colours.
+
+        The second argument should be one of the
+        @link wxStyledTextCtrl::wxSTC_MARK_CIRCLE wxSTC_MARK_* @endlink constants.
     */
-    void SetSTCFocus(bool focus);
+    void MarkerDefine(int markerNumber, int markerSymbol,
+                const wxColour& foreground = wxNullColour,
+                const wxColour& background = wxNullColour);
 
     /**
-        Get internal focus flag.
+        Set the foreground colour used for a particular marker number.
     */
-    bool GetSTCFocus() const;
+    void MarkerSetForeground(int markerNumber, const wxColour& fore);
 
     /**
-        Change error status - 0 = OK.
+        Set the background colour used for a particular marker number.
     */
-    void SetStatus(int status);
+    void MarkerSetBackground(int markerNumber, const wxColour& back);
 
     /**
-        Get error status.
+        Set the background colour used for a particular marker number when its folding block is selected.
     */
-    int GetStatus() const;
+    void MarkerSetBackgroundSelected(int markerNumber, const wxColour& back);
 
     /**
-        Set whether the mouse is captured when its button is pressed.
+        Enable/disable highlight for current folding bloc (smallest one that contains the caret)
     */
-    void SetMouseDownCaptures(bool captures);
+    void MarkerEnableHighlight(bool enabled);
 
     /**
-        Get whether mouse gets captured.
+        Add a marker to a line, returning an ID which can be used to find or delete the marker.
     */
-    bool GetMouseDownCaptures() const;
+    int MarkerAdd(int line, int markerNumber);
 
     /**
-        Set whether the mouse wheel can be active outside the window.
+        Delete a marker from a line.
     */
-    void SetMouseWheelCaptures(bool captures);
+    void MarkerDelete(int line, int markerNumber);
 
     /**
-        Get whether mouse wheel can be active outside the window.
+        Delete all markers with a particular number from all lines.
     */
-    bool GetMouseWheelCaptures() const;
+    void MarkerDeleteAll(int markerNumber);
 
     /**
-        Sets the cursor to one of the SC_CURSOR* values.
+        Get a bit mask of all the markers set on a line.
     */
-    void SetSTCCursor(int cursorType);
+    int MarkerGet(int line);
 
     /**
-        Get cursor type.
+        Find the next line at or after lineStart that includes a marker in mask.
+        Return -1 when no more lines.
     */
-    int GetSTCCursor() const;
+    int MarkerNext(int lineStart, int markerMask);
 
     /**
-        Change the way control characters are displayed:
-        If symbol is < 32, keep the drawn way, else, use the given character.
+        Find the previous line before lineStart that includes a marker in mask.
     */
-    void SetControlCharSymbol(int symbol);
+    int MarkerPrevious(int lineStart, int markerMask);
 
     /**
-        Get the way control characters are displayed.
+        Define a marker from a bitmap
     */
-    int GetControlCharSymbol() const;
+    void MarkerDefineBitmap(int markerNumber, const wxBitmap& bmp);
 
     /**
-        Move to the previous change in capitalisation.
+        Add a set of markers to a line.
     */
-    void WordPartLeft();
+    void MarkerAddSet(int line, int markerSet);
 
     /**
-        Move to the previous change in capitalisation extending selection
-        to new caret position.
+        Set the alpha used for a marker that is drawn in the text area, not the margin.
     */
-    void WordPartLeftExtend();
+    void MarkerSetAlpha(int markerNumber, int alpha);
 
     /**
-        Move to the change next in capitalisation.
+        Which symbol was defined for markerNumber with MarkerDefine
+
+        The return value will be one of the
+        @link wxStyledTextCtrl::wxSTC_MARK_CIRCLE wxSTC_MARK_* @endlink constants.
     */
-    void WordPartRight();
+    int GetMarkerSymbolDefined(int markerNumber);
 
     /**
-        Move to the next change in capitalisation extending selection
-        to new caret position.
+        Set the width for future RGBA image data.
     */
-    void WordPartRightExtend();
+    void RGBAImageSetWidth(int width);
 
     /**
-        Set the way the display area is determined when a particular line
-        is to be moved to by Find, FindNext, GotoLine, etc.
+        Set the height for future RGBA image data.
     */
-    void SetVisiblePolicy(int visiblePolicy, int visibleSlop);
+    void RGBAImageSetHeight(int height);
 
     /**
-        Delete back from the current position to the start of the line.
+        Set the scale factor in percent for future RGBA image data.
+
+        @since 3.1.0
     */
-    void DelLineLeft();
+    void RGBAImageSetScale(int scalePercent);
 
     /**
-        Delete forwards from the current position to the end of the line.
+        Define a marker from RGBA data.
+        It has the width and height from RGBAImageSetWidth/Height
     */
-    void DelLineRight();
+    void MarkerDefineRGBAImage(int markerNumber, const unsigned char* pixels);
+
+    //@}
 
     /**
-        Get and Set the xOffset (ie, horizontal scroll position).
+        @member_group_name{Indicators, Indicators}
     */
-    void SetXOffset(int xOffset);
-    int GetXOffset() const;
+    //@{
 
     /**
-        Set the last x chosen value to be the caret x position.
+        Set an indicator to plain, squiggle or TT.
+
+        The second argument should be one of the
+        @link wxStyledTextCtrl::wxSTC_INDIC_PLAIN wxSTC_INDIC_* @endlink constants.
     */
-    void ChooseCaretX();
+    void IndicatorSetStyle(int indicator, int indicatorStyle);
 
     /**
-        Set the way the caret is kept visible when going sideways.
-        The exclusion zone is given in pixels.
+        Retrieve the style of an indicator.
+
+        The return value will be one of the
+        @link wxStyledTextCtrl::wxSTC_INDIC_PLAIN wxSTC_INDIC_* @endlink constants.
     */
-    void SetXCaretPolicy(int caretPolicy, int caretSlop);
+    int IndicatorGetStyle(int indicator) const;
 
     /**
-        Set the way the line the caret is on is kept visible.
-        The exclusion zone is given in lines.
+        Set the foreground colour of an indicator.
     */
-    void SetYCaretPolicy(int caretPolicy, int caretSlop);
+    void IndicatorSetForeground(int indicator, const wxColour& fore);
 
     /**
-        Set printing to line wrapped (SC_WRAP_WORD) or not line wrapped (SC_WRAP_NONE).
+        Retrieve the foreground colour of an indicator.
     */
-    void SetPrintWrapMode(int wrapMode);
+    wxColour IndicatorGetForeground(int indicator) const;
 
     /**
-        Is printing line wrapped?
+        Set an indicator to draw under text or over(default).
     */
-    int GetPrintWrapMode() const;
+    void IndicatorSetUnder(int indicator, bool under);
 
     /**
-        Set a fore colour for active hotspots.
+        Retrieve whether indicator drawn under or over text.
     */
-    void SetHotspotActiveForeground(bool useSetting, const wxColour& fore);
+    bool IndicatorGetUnder(int indicator) const;
 
     /**
-        Get the fore colour for active hotspots.
+        Set a hover indicator to plain, squiggle or TT.
+
+        @since 3.1.0
     */
-    wxColour GetHotspotActiveForeground() const;
+    void IndicatorSetHoverStyle(int indicator, int indicatorStyle);
 
     /**
-        Set a back colour for active hotspots.
+        Retrieve the hover style of an indicator.
+
+        @since 3.1.0
     */
-    void SetHotspotActiveBackground(bool useSetting, const wxColour& back);
+    int IndicatorGetHoverStyle(int indicator) const;
 
     /**
-        Get the back colour for active hotspots.
+        Set the foreground hover colour of an indicator.
+
+        @since 3.1.0
     */
-    wxColour GetHotspotActiveBackground() const;
+    void IndicatorSetHoverForeground(int indicator, const wxColour& fore);
 
     /**
-        Enable / Disable underlining active hotspots.
+        Retrieve the foreground hover colour of an indicator.
+
+        @since 3.1.0
     */
-    void SetHotspotActiveUnderline(bool underline);
+    wxColour IndicatorGetHoverForeground(int indicator) const;
 
     /**
-        Get whether underlining for active hotspots.
+        Set the attributes of an indicator.
+
+        The second argument should be a bit list containing one or more of the
+        @link wxStyledTextCtrl::wxSTC_INDICFLAG_VALUEFORE wxSTC_INDICFLAG_* @endlink constants.
+        @since 3.1.0
     */
-    bool GetHotspotActiveUnderline() const;
+    void IndicatorSetFlags(int indicator, int flags);
 
     /**
-        Limit hotspots to single line so hotspots on two lines don't merge.
+        Retrieve the attributes of an indicator.
+
+        The return value will be a bit list containing one or more of the
+        @link wxStyledTextCtrl::wxSTC_INDICFLAG_VALUEFORE wxSTC_INDICFLAG_* @endlink constants.
+        @since 3.1.0
     */
-    void SetHotspotSingleLine(bool singleLine);
+    int IndicatorGetFlags(int indicator) const;
 
     /**
-        Get the HotspotSingleLine property
+        Set the indicator used for IndicatorFillRange and IndicatorClearRange
     */
-    bool GetHotspotSingleLine() const;
+    void SetIndicatorCurrent(int indicator);
 
     /**
-        Move caret down one paragraph (delimited by empty lines).
+        Get the current indicator
     */
-    void ParaDown();
+    int GetIndicatorCurrent() const;
 
     /**
-        Extend selection down one paragraph (delimited by empty lines).
+        Set the value used for IndicatorFillRange
     */
-    void ParaDownExtend();
+    void SetIndicatorValue(int value);
 
     /**
-        Move caret up one paragraph (delimited by empty lines).
+        Get the current indicator value
     */
-    void ParaUp();
+    int GetIndicatorValue() const;
 
     /**
-        Extend selection up one paragraph (delimited by empty lines).
+        Turn a indicator on over a range.
     */
-    void ParaUpExtend();
+    void IndicatorFillRange(int start, int lengthFill);
 
     /**
-        Given a valid document position, return the previous position taking code
-        page into account. Returns 0 if passed 0.
+        Turn a indicator off over a range.
     */
-    int PositionBefore(int pos);
+    void IndicatorClearRange(int start, int lengthClear);
 
     /**
-        Given a valid document position, return the next position taking code
-        page into account. Maximum value returned is the last position in the document.
+        Are any indicators present at pos?
     */
-    int PositionAfter(int pos);
+    int IndicatorAllOnFor(int pos);
 
     /**
-        Given a valid document position, return a position that differs in a number
-        of characters. Returned value is always between 0 and last position in document.
+        What value does a particular indicator have at a position?
     */
-    int PositionRelative(int pos, int relative);
+    int IndicatorValueAt(int indicator, int pos);
 
     /**
-        Copy a range of text to the clipboard. Positions are clipped into the document.
+        Where does a particular indicator start?
     */
-    void CopyRange(int start, int end);
+    int IndicatorStart(int indicator, int pos);
 
     /**
-        Copy argument text to the clipboard.
+        Where does a particular indicator end?
     */
-    void CopyText(int length, const wxString& text);
+    int IndicatorEnd(int indicator, int pos);
 
     /**
-        Set the selection mode to stream (SC_SEL_STREAM) or rectangular (SC_SEL_RECTANGLE/SC_SEL_THIN) or
-        by lines (SC_SEL_LINES).
+        Set the alpha fill colour of the given indicator.
     */
-    void SetSelectionMode(int selectionMode);
+    void IndicatorSetAlpha(int indicator, int alpha);
 
     /**
-        Get the mode of the current selection.
+        Get the alpha fill colour of the given indicator.
     */
-    int GetSelectionMode() const;
+    int IndicatorGetAlpha(int indicator) const;
 
     /**
-        Retrieve the position of the start of the selection at the given line (INVALID_POSITION if no selection on this line).
+        Set the alpha outline colour of the given indicator.
     */
-    int GetLineSelStartPosition(int line);
+    void IndicatorSetOutlineAlpha(int indicator, int alpha);
 
     /**
-        Retrieve the position of the end of the selection at the given line (INVALID_POSITION if no selection on this line).
+        Get the alpha outline colour of the given indicator.
     */
-    int GetLineSelEndPosition(int line);
+    int IndicatorGetOutlineAlpha(int indicator) const;
+
+    //@}
 
     /**
-        Move caret down one line, extending rectangular selection to new caret position.
+        @member_group_name{Autocompletion, Autocompletion}
     */
-    void LineDownRectExtend();
+    //@{
 
     /**
-        Move caret up one line, extending rectangular selection to new caret position.
+        Display a auto-completion list.
+        The lengthEntered parameter indicates how many characters before
+        the caret should be used to provide context.
     */
-    void LineUpRectExtend();
+    void AutoCompShow(int lengthEntered, const wxString& itemList);
 
     /**
-        Move caret left one character, extending rectangular selection to new caret position.
+        Remove the auto-completion list from the screen.
     */
-    void CharLeftRectExtend();
+    void AutoCompCancel();
 
     /**
-        Move caret right one character, extending rectangular selection to new caret position.
+        Is there an auto-completion list visible?
     */
-    void CharRightRectExtend();
+    bool AutoCompActive();
 
     /**
-        Move caret to first position on line, extending rectangular selection to new caret position.
+        Retrieve the position of the caret when the auto-completion list was displayed.
     */
-    void HomeRectExtend();
+    int AutoCompPosStart();
 
     /**
-        Move caret to before first visible character on line.
-        If already there move to first character on line.
-        In either case, extend rectangular selection to new caret position.
+        User has selected an item so remove the list and insert the selection.
     */
-    void VCHomeRectExtend();
+    void AutoCompComplete();
 
     /**
-        Move caret to last position on line, extending rectangular selection to new caret position.
+        Define a set of character that when typed cancel the auto-completion list.
     */
-    void LineEndRectExtend();
+    void AutoCompStops(const wxString& characterSet);
 
     /**
-        Move caret one page up, extending rectangular selection to new caret position.
+        Change the separator character in the string setting up an auto-completion list.
+        Default is space but can be changed if items contain space.
     */
-    void PageUpRectExtend();
+    void AutoCompSetSeparator(int separatorCharacter);
 
     /**
-        Move caret one page down, extending rectangular selection to new caret position.
+        Retrieve the auto-completion list separator character.
     */
-    void PageDownRectExtend();
+    int AutoCompGetSeparator() const;
 
     /**
-        Move caret to top of page, or one page up if already at top of page.
+        Select the item in the auto-completion list that starts with a string.
     */
-    void StutteredPageUp();
+    void AutoCompSelect(const wxString& select);
 
     /**
-        Move caret to top of page, or one page up if already at top of page, extending selection to new caret position.
+        Should the auto-completion list be cancelled if the user backspaces to a
+        position before where the box was created.
     */
-    void StutteredPageUpExtend();
+    void AutoCompSetCancelAtStart(bool cancel);
 
     /**
-        Move caret to bottom of page, or one page down if already at bottom of page.
+        Retrieve whether auto-completion cancelled by backspacing before start.
     */
-    void StutteredPageDown();
+    bool AutoCompGetCancelAtStart() const;
 
     /**
-        Move caret to bottom of page, or one page down if already at bottom of page, extending selection to new caret position.
+        Define a set of characters that when typed will cause the autocompletion to
+        choose the selected item.
     */
-    void StutteredPageDownExtend();
+    void AutoCompSetFillUps(const wxString& characterSet);
 
     /**
-        Move caret left one word, position cursor at end of word.
+        Should a single item auto-completion list automatically choose the item.
     */
-    void WordLeftEnd();
+    void AutoCompSetChooseSingle(bool chooseSingle);
 
     /**
-        Move caret left one word, position cursor at end of word, extending selection to new caret position.
+        Retrieve whether a single item auto-completion list automatically choose the item.
     */
-    void WordLeftEndExtend();
+    bool AutoCompGetChooseSingle() const;
 
     /**
-        Move caret right one word, position cursor at end of word.
+        Set whether case is significant when performing auto-completion searches.
     */
-    void WordRightEnd();
+    void AutoCompSetIgnoreCase(bool ignoreCase);
 
     /**
-        Move caret right one word, position cursor at end of word, extending selection to new caret position.
+        Retrieve state of ignore case flag.
     */
-    void WordRightEndExtend();
+    bool AutoCompGetIgnoreCase() const;
 
     /**
-        Set the set of characters making up whitespace for when moving or selecting by word.
-        Should be called after SetWordChars.
+        Set whether or not autocompletion is hidden automatically when nothing matches.
     */
-    void SetWhitespaceChars(const wxString& characters);
+    void AutoCompSetAutoHide(bool autoHide);
 
     /**
-        Get the set of characters making up whitespace for when moving or selecting by word.
+        Retrieve whether or not autocompletion is hidden automatically when nothing matches.
     */
-    wxString GetWhitespaceChars() const;
+    bool AutoCompGetAutoHide() const;
 
     /**
-        Set the set of characters making up punctuation characters
-        Should be called after SetWordChars.
+        Set whether or not autocompletion deletes any word characters
+        after the inserted text upon completion.
     */
-    void SetPunctuationChars(const wxString& characters);
+    void AutoCompSetDropRestOfWord(bool dropRestOfWord);
 
     /**
-        Get the set of characters making up punctuation characters
+        Retrieve whether or not autocompletion deletes any word characters
+        after the inserted text upon completion.
     */
-    wxString GetPunctuationChars() const;
+    bool AutoCompGetDropRestOfWord() const;
 
     /**
-        Reset the set of characters for whitespace and word characters to the defaults.
+        Register an image for use in autocompletion lists.
     */
-    void SetCharsDefault();
+    void RegisterImage(int type, const wxBitmap& bmp);
+
+    /**
+        Clear all the registered images.
+    */
+    void ClearRegisteredImages();
+
+    /**
+        Retrieve the auto-completion list type-separator character.
+    */
+    int AutoCompGetTypeSeparator() const;
+
+    /**
+        Change the type-separator character in the string setting up an auto-completion list.
+        Default is '?' but can be changed if items contain '?'.
+    */
+    void AutoCompSetTypeSeparator(int separatorCharacter);
+
+    /**
+        Set the maximum width, in characters, of auto-completion and user lists.
+        Set to 0 to autosize to fit longest item, which is the default.
+    */
+    void AutoCompSetMaxWidth(int characterCount);
+
+    /**
+        Get the maximum width, in characters, of auto-completion and user lists.
+    */
+    int AutoCompGetMaxWidth() const;
+
+    /**
+        Set the maximum height, in rows, of auto-completion and user lists.
+        The default is 5 rows.
+    */
+    void AutoCompSetMaxHeight(int rowCount);
+
+    /**
+        Set the maximum height, in rows, of auto-completion and user lists.
+    */
+    int AutoCompGetMaxHeight() const;
 
     /**
         Get currently selected item position in the auto-completion list
@@ -5508,785 +5750,1211 @@ public:
 
     /**
         Set auto-completion case insensitive behaviour to either prefer case-sensitive matches or have no preference.
+
+        The input should be one of the
+        @link wxStyledTextCtrl::wxSTC_CASEINSENSITIVEBEHAVIOUR_RESPECTCASE wxSTC_CASEINSENSITIVEBEHAVIOUR_* @endlink constants.
     */
     void AutoCompSetCaseInsensitiveBehaviour(int behaviour);
 
     /**
         Get auto-completion case insensitive behaviour.
+
+        The return value will be one of the
+        @link wxStyledTextCtrl::wxSTC_CASEINSENSITIVEBEHAVIOUR_RESPECTCASE wxSTC_CASEINSENSITIVEBEHAVIOUR_* @endlink constants.
     */
     int AutoCompGetCaseInsensitiveBehaviour() const;
 
     /**
         Change the effect of autocompleting when there are multiple selections.
+
+        The input should be one of the
+        @link wxStyledTextCtrl::wxSTC_MULTIAUTOC_ONCE wxSTC_MULTIAUTOC_* @endlink constants.
+        @since 3.1.0
     */
     void AutoCompSetMulti(int multi);
 
     /**
         Retrieve the effect of autocompleting when there are multiple selections.
+
+        The return value will be one of the
+        @link wxStyledTextCtrl::wxSTC_MULTIAUTOC_ONCE wxSTC_MULTIAUTOC_* @endlink constants.
+        @since 3.1.0
     */
     int AutoCompGetMulti() const;
 
     /**
         Set the way autocompletion lists are ordered.
+
+        The input should be one of the
+        @link wxStyledTextCtrl::wxSTC_ORDER_PRESORTED wxSTC_ORDER_* @endlink constants.
+        @since 3.1.0
     */
     void AutoCompSetOrder(int order);
 
     /**
         Get the way autocompletion lists are ordered.
+
+        The return value will be one of the
+        @link wxStyledTextCtrl::wxSTC_ORDER_PRESORTED wxSTC_ORDER_* @endlink constants.
+        @since 3.1.0
     */
     int AutoCompGetOrder() const;
 
     /**
-        Enlarge the document to a particular size of text bytes.
+        Register an RGBA image for use in autocompletion lists.
+        It has the width and height from RGBAImageSetWidth/Height
     */
-    void Allocate(int bytes);
+    void RegisterRGBAImage(int type, const unsigned char* pixels);
 
-    /**
-        Find the position of a column on a line taking into account tabs and
-        multi-byte characters. If beyond end of line, return line end position.
-    */
-    int FindColumn(int line, int column);
+    //@}
 
     /**
-        Can the caret preferred x position only be changed by explicit movement commands?
+        @member_group_name{UserLists, User lists}
     */
-    int GetCaretSticky() const;
+    //@{
 
     /**
-        Stop the caret preferred x position changing when the user types.
+        Display a list of strings and send notification when user chooses one.
     */
-    void SetCaretSticky(int useCaretStickyBehaviour);
+    void UserListShow(int listType, const wxString& itemList);
+
+    //@}
 
     /**
-        Switch between sticky and non-sticky: meant to be bound to a key.
+        @member_group_name{CallTips, Call tips}
     */
-    void ToggleCaretSticky();
+    //@{
 
     /**
-        Enable/Disable convert-on-paste for line endings
+        Show a call tip containing a definition near position pos.
     */
-    void SetPasteConvertEndings(bool convert);
+    void CallTipShow(int pos, const wxString& definition);
 
     /**
-        Get convert-on-paste setting
+        Remove the call tip from the screen.
     */
-    bool GetPasteConvertEndings() const;
+    void CallTipCancel();
 
     /**
-        Duplicate the selection. If selection empty duplicate the line containing the caret.
+        Is there an active call tip?
     */
-    void SelectionDuplicate();
+    bool CallTipActive();
 
     /**
-        Set background alpha of the caret line.
+        Retrieve the position where the caret was before displaying the call tip.
+
+        @since 3.1.0
     */
-    void SetCaretLineBackAlpha(int alpha);
+    int CallTipPosAtStart();
 
     /**
-        Get the background alpha of the caret line.
+        Set the start position in order to change when backspacing removes the calltip.
     */
-    int GetCaretLineBackAlpha() const;
+    void CallTipSetPosAtStart(int posStart);
 
     /**
-        Set the style of the caret to be drawn.
+        Highlight a segment of the definition.
     */
-    void SetCaretStyle(int caretStyle);
+    void CallTipSetHighlight(int highlightStart, int highlightEnd);
 
     /**
-        Returns the current style of the caret.
+        Set the background colour for the call tip.
     */
-    int GetCaretStyle() const;
+    void CallTipSetBackground(const wxColour& back);
 
     /**
-        Set the indicator used for IndicatorFillRange and IndicatorClearRange
+        Set the foreground colour for the call tip.
     */
-    void SetIndicatorCurrent(int indicator);
+    void CallTipSetForeground(const wxColour& fore);
 
     /**
-        Get the current indicator
+        Set the foreground colour for the highlighted part of the call tip.
     */
-    int GetIndicatorCurrent() const;
+    void CallTipSetForegroundHighlight(const wxColour& fore);
 
     /**
-        Set the value used for IndicatorFillRange
+        Enable use of wxSTC_STYLE_CALLTIP and set call tip tab size in pixels.
     */
-    void SetIndicatorValue(int value);
+    void CallTipUseStyle(int tabSize);
 
     /**
-        Get the current indicator value
+        Set position of calltip, above or below text.
     */
-    int GetIndicatorValue() const;
+    void CallTipSetPosition(bool above);
 
-    /**
-        Turn a indicator on over a range.
-    */
-    void IndicatorFillRange(int start, int lengthFill);
+    //@}
 
     /**
-        Turn a indicator off over a range.
+        @member_group_name{KeyboardCommands, Keyboard commands}
     */
-    void IndicatorClearRange(int start, int lengthClear);
+    //@{
 
     /**
-        Are any indicators present at pos?
+        Move caret down one line.
     */
-    int IndicatorAllOnFor(int pos);
+    void LineDown();
 
     /**
-        What value does a particular indicator have at a position?
+        Move caret down one line extending selection to new caret position.
     */
-    int IndicatorValueAt(int indicator, int pos);
+    void LineDownExtend();
 
     /**
-        Where does a particular indicator start?
+        Move caret up one line.
     */
-    int IndicatorStart(int indicator, int pos);
+    void LineUp();
 
     /**
-        Where does a particular indicator end?
+        Move caret up one line extending selection to new caret position.
     */
-    int IndicatorEnd(int indicator, int pos);
+    void LineUpExtend();
 
     /**
-        Set number of entries in position cache
+        Move caret left one character.
     */
-    void SetPositionCacheSize(int size);
+    void CharLeft();
 
     /**
-        How many entries are allocated to the position cache?
+        Move caret left one character extending selection to new caret position.
     */
-    int GetPositionCacheSize() const;
+    void CharLeftExtend();
 
     /**
-        Copy the selection, if selection empty copy the line with the caret
+        Move caret right one character.
     */
-    void CopyAllowLine();
+    void CharRight();
 
     /**
-        Compact the document buffer and return a read-only pointer to the
-        characters in the document.
+        Move caret right one character extending selection to new caret position.
     */
-    const char* GetCharacterPointer() const;
+    void CharRightExtend();
 
     /**
-        Return a read-only pointer to a range of characters in the document.
-        May move the gap so that the range is contiguous, but will only move up
-        to lengthRange bytes.
+        Move caret left one word.
     */
-    const char* GetRangePointer(int position, int rangeLength) const;
+    void WordLeft();
 
     /**
-        Return a position which, to avoid performance costs, should not be within
-        the range of a call to GetRangePointer.
+        Move caret left one word extending selection to new caret position.
     */
-    int GetGapPosition() const;
+    void WordLeftExtend();
 
     /**
-        Set the alpha fill colour of the given indicator.
+        Move caret right one word.
     */
-    void IndicatorSetAlpha(int indicator, int alpha);
+    void WordRight();
 
     /**
-        Get the alpha fill colour of the given indicator.
+        Move caret right one word extending selection to new caret position.
     */
-    int IndicatorGetAlpha(int indicator) const;
+    void WordRightExtend();
 
     /**
-        Set the alpha outline colour of the given indicator.
+        Move caret to first position on line.
     */
-    void IndicatorSetOutlineAlpha(int indicator, int alpha);
+    void Home();
 
     /**
-        Get the alpha outline colour of the given indicator.
+        Move caret to first position on line extending selection to new caret position.
     */
-    int IndicatorGetOutlineAlpha(int indicator) const;
+    void HomeExtend();
 
     /**
-        Set extra ascent for each line
+        Move caret to last position on line.
     */
-    void SetExtraAscent(int extraAscent);
+    void LineEnd();
 
     /**
-        Get extra ascent for each line
+        Move caret to last position on line extending selection to new caret position.
     */
-    int GetExtraAscent() const;
+    void LineEndExtend();
 
     /**
-        Set extra descent for each line
+        Move caret to first position in document.
     */
-    void SetExtraDescent(int extraDescent);
+    void DocumentStart();
 
     /**
-        Get extra descent for each line
+        Move caret to first position in document extending selection to new caret position.
     */
-    int GetExtraDescent() const;
+    void DocumentStartExtend();
 
     /**
-        Which symbol was defined for markerNumber with MarkerDefine
+        Move caret to last position in document.
     */
-    int GetMarkerSymbolDefined(int markerNumber);
+    void DocumentEnd();
 
     /**
-        Set the text in the text margin for a line
+        Move caret to last position in document extending selection to new caret position.
     */
-    void MarginSetText(int line, const wxString& text);
+    void DocumentEndExtend();
 
     /**
-        Get the text in the text margin for a line
+        Move caret one page up.
     */
-    wxString MarginGetText(int line) const;
+    void PageUp();
 
     /**
-        Set the style number for the text margin for a line
+        Move caret one page up extending selection to new caret position.
     */
-    void MarginSetStyle(int line, int style);
+    void PageUpExtend();
 
     /**
-        Get the style number for the text margin for a line
+        Move caret one page down.
     */
-    int MarginGetStyle(int line) const;
+    void PageDown();
 
     /**
-        Set the style in the text margin for a line
+        Move caret one page down extending selection to new caret position.
     */
-    void MarginSetStyles(int line, const wxString& styles);
+    void PageDownExtend();
 
     /**
-        Get the styles in the text margin for a line
+        Switch from insert to overtype mode or the reverse.
     */
-    wxString MarginGetStyles(int line) const;
+    void EditToggleOvertype();
 
     /**
-        Clear the margin text on all lines
+        Cancel any modes such as call tip or auto-completion list display.
     */
-    void MarginTextClearAll();
+    void Cancel();
 
     /**
-        Get the start of the range of style numbers used for margin text
+        Delete the selection or if no selection, the character before the caret.
     */
-    void MarginSetStyleOffset(int style);
+    void DeleteBack();
 
     /**
-        Get the start of the range of style numbers used for margin text
+        If selection is empty or all on one line replace the selection with a tab character.
+        If more than one line selected, indent the lines.
     */
-    int MarginGetStyleOffset() const;
+    void Tab();
 
     /**
-        Set the margin options.
+        Dedent the selected lines.
     */
-    void SetMarginOptions(int marginOptions);
+    void BackTab();
 
     /**
-        Get the margin options.
+        Insert a new line, may use a CRLF, CR or LF depending on EOL mode.
     */
-    int GetMarginOptions() const;
+    void NewLine();
 
     /**
-        Set the annotation text for a line
+        Insert a Form Feed character.
     */
-    void AnnotationSetText(int line, const wxString& text);
+    void FormFeed();
 
     /**
-        Get the annotation text for a line
+        Move caret to before first visible character on line.
+        If already there move to first character on line.
     */
-    wxString AnnotationGetText(int line) const;
+    void VCHome();
 
     /**
-        Set the style number for the annotations for a line
+        Like VCHome but extending selection to new caret position.
     */
-    void AnnotationSetStyle(int line, int style);
+    void VCHomeExtend();
 
     /**
-        Get the style number for the annotations for a line
+        Delete the word to the left of the caret.
     */
-    int AnnotationGetStyle(int line) const;
+    void DelWordLeft();
 
     /**
-        Set the annotation styles for a line
+        Delete the word to the right of the caret.
     */
-    void AnnotationSetStyles(int line, const wxString& styles);
+    void DelWordRight();
 
     /**
-        Get the annotation styles for a line
+        Delete the word to the right of the caret, but not the trailing non-word characters.
     */
-    wxString AnnotationGetStyles(int line) const;
+    void DelWordRightEnd();
 
     /**
-        Get the number of annotation lines for a line
+        Cut the line containing the caret.
     */
-    int AnnotationGetLines(int line) const;
+    void LineCut();
 
     /**
-        Clear the annotations from all lines
+        Delete the line containing the caret.
     */
-    void AnnotationClearAll();
+    void LineDelete();
 
     /**
-        Set the visibility for the annotations for a view
+        Switch the current line with the previous.
     */
-    void AnnotationSetVisible(int visible);
+    void LineTranspose();
 
     /**
-        Get the visibility for the annotations for a view
+        Duplicate the current line.
     */
-    int AnnotationGetVisible() const;
+    void LineDuplicate();
 
     /**
-        Get the start of the range of style numbers used for annotations
+        Transform the selection to lower case.
     */
-    void AnnotationSetStyleOffset(int style);
+    void LowerCase();
 
     /**
-        Get the start of the range of style numbers used for annotations
+        Transform the selection to upper case.
     */
-    int AnnotationGetStyleOffset() const;
+    void UpperCase();
 
     /**
-        Release all extended (>255) style numbers
+        Scroll the document down, keeping the caret visible.
     */
-    void ReleaseAllExtendedStyles();
+    void LineScrollDown();
 
     /**
-        Allocate some extended (>255) style numbers and return the start of the range
+        Scroll the document up, keeping the caret visible.
     */
-    int AllocateExtendedStyles(int numberStyles);
+    void LineScrollUp();
 
     /**
-        Add a container action to the undo stack
+        Delete the selection or if no selection, the character before the caret.
+        Will not delete the character before at the start of a line.
     */
-    void AddUndoAction(int token, int flags);
+    void DeleteBackNotLine();
 
     /**
-        Find the position of a character from a point within the window.
+        Move caret to first position on display line.
     */
-    int CharPositionFromPoint(int x, int y);
+    void HomeDisplay();
 
     /**
-        Find the position of a character from a point within the window.
-        Return INVALID_POSITION if not close to text.
+        Move caret to first position on display line extending selection to
+        new caret position.
     */
-    int CharPositionFromPointClose(int x, int y);
+    void HomeDisplayExtend();
 
     /**
-        Set whether switching to rectangular mode while selecting with the mouse is allowed.
+        Move caret to last position on display line.
     */
-    void SetMouseSelectionRectangularSwitch(bool mouseSelectionRectangularSwitch);
+    void LineEndDisplay();
 
     /**
-        Whether switching to rectangular mode while selecting with the mouse is allowed.
+        Move caret to last position on display line extending selection to new
+        caret position.
     */
-    bool GetMouseSelectionRectangularSwitch() const;
+    void LineEndDisplayExtend();
 
     /**
-        Set whether multiple selections can be made
+        Like Home but when word-wrap is enabled goes first to start of display line
+        HomeDisplay, then to start of document line Home.
     */
-    void SetMultipleSelection(bool multipleSelection);
+    void HomeWrap();
 
     /**
-        Whether multiple selections can be made
+        Like HomeExtend but when word-wrap is enabled extends first to start of display line
+        HomeDisplayExtend, then to start of document line HomeExtend.
     */
-    bool GetMultipleSelection() const;
+    void HomeWrapExtend();
 
     /**
-        Set whether typing can be performed into multiple selections
+        Like LineEnd but when word-wrap is enabled goes first to end of display line
+        LineEndDisplay, then to start of document line LineEnd.
     */
-    void SetAdditionalSelectionTyping(bool additionalSelectionTyping);
+    void LineEndWrap();
 
     /**
-        Whether typing can be performed into multiple selections
+        Like LineEndExtend but when word-wrap is enabled extends first to end of display line
+        LineEndDisplayExtend, then to start of document line LineEndExtend.
     */
-    bool GetAdditionalSelectionTyping() const;
+    void LineEndWrapExtend();
 
     /**
-        Set whether additional carets will blink
+        Like VCHome but when word-wrap is enabled goes first to start of display line
+        VCHomeDisplay, then behaves like VCHome.
     */
-    void SetAdditionalCaretsBlink(bool additionalCaretsBlink);
+    void VCHomeWrap();
 
     /**
-        Whether additional carets will blink
+        Like VCHomeExtend but when word-wrap is enabled extends first to start of display line
+        VCHomeDisplayExtend, then behaves like VCHomeExtend.
     */
-    bool GetAdditionalCaretsBlink() const;
+    void VCHomeWrapExtend();
 
     /**
-        Set whether additional carets are visible
+        Copy the line containing the caret.
     */
-    void SetAdditionalCaretsVisible(bool additionalCaretsVisible);
+    void LineCopy();
 
     /**
-        Whether additional carets are visible
+        Move to the previous change in capitalisation.
     */
-    bool GetAdditionalCaretsVisible() const;
+    void WordPartLeft();
 
     /**
-        How many selections are there?
+        Move to the previous change in capitalisation extending selection
+        to new caret position.
     */
-    int GetSelections() const;
+    void WordPartLeftExtend();
 
     /**
-        Is every selected range empty?
+        Move to the change next in capitalisation.
     */
-    bool GetSelectionEmpty() const;
+    void WordPartRight();
 
     /**
-        Clear selections to a single empty stream selection
+        Move to the next change in capitalisation extending selection
+        to new caret position.
     */
-    void ClearSelections();
+    void WordPartRightExtend();
 
     /**
-        Add a selection
+        Delete back from the current position to the start of the line.
     */
-    int AddSelection(int caret, int anchor);
+    void DelLineLeft();
 
     /**
-        Drop one selection
+        Delete forwards from the current position to the end of the line.
     */
-    void DropSelectionN(int selection);
+    void DelLineRight();
 
     /**
-        Set the main selection
+        Move caret down one paragraph (delimited by empty lines).
     */
-    void SetMainSelection(int selection);
+    void ParaDown();
 
     /**
-        Which selection is the main selection
+        Extend selection down one paragraph (delimited by empty lines).
     */
-    int GetMainSelection() const;
+    void ParaDownExtend();
 
     /**
-        Set the caret position of the nth selection.
+        Move caret up one paragraph (delimited by empty lines).
     */
-    void SetSelectionNCaret(int selection, int caret);
+    void ParaUp();
 
     /**
-        Return the caret position of the nth selection.
+        Extend selection up one paragraph (delimited by empty lines).
     */
-    int GetSelectionNCaret(int selection) const;
+    void ParaUpExtend();
 
     /**
-        Set the anchor position of the nth selection.
+        Move caret down one line, extending rectangular selection to new caret position.
     */
-    void SetSelectionNAnchor(int selection, int anchor);
+    void LineDownRectExtend();
 
     /**
-        Return the anchor position of the nth selection.
+        Move caret up one line, extending rectangular selection to new caret position.
     */
-    int GetSelectionNAnchor(int selection) const;
+    void LineUpRectExtend();
 
     /**
-        Set the virtual space of the caret of the nth selection.
+        Move caret left one character, extending rectangular selection to new caret position.
     */
-    void SetSelectionNCaretVirtualSpace(int selection, int space);
+    void CharLeftRectExtend();
 
     /**
-        Return the virtual space of the caret of the nth selection.
+        Move caret right one character, extending rectangular selection to new caret position.
     */
-    int GetSelectionNCaretVirtualSpace(int selection) const;
+    void CharRightRectExtend();
 
     /**
-        Set the virtual space of the anchor of the nth selection.
+        Move caret to first position on line, extending rectangular selection to new caret position.
     */
-    void SetSelectionNAnchorVirtualSpace(int selection, int space);
+    void HomeRectExtend();
 
     /**
-        Return the virtual space of the anchor of the nth selection.
+        Move caret to before first visible character on line.
+        If already there move to first character on line.
+        In either case, extend rectangular selection to new caret position.
     */
-    int GetSelectionNAnchorVirtualSpace(int selection) const;
+    void VCHomeRectExtend();
 
     /**
-        Sets the position that starts the selection - this becomes the anchor.
+        Move caret to last position on line, extending rectangular selection to new caret position.
     */
-    void SetSelectionNStart(int selection, int anchor);
+    void LineEndRectExtend();
 
     /**
-        Returns the position at the start of the selection.
+        Move caret one page up, extending rectangular selection to new caret position.
     */
-    int GetSelectionNStart(int selection) const;
+    void PageUpRectExtend();
 
     /**
-        Sets the position that ends the selection - this becomes the currentPosition.
+        Move caret one page down, extending rectangular selection to new caret position.
     */
-    void SetSelectionNEnd(int selection, int caret);
+    void PageDownRectExtend();
 
     /**
-        Returns the position at the end of the selection.
+        Move caret to top of page, or one page up if already at top of page.
     */
-    int GetSelectionNEnd(int selection) const;
+    void StutteredPageUp();
 
     /**
-        Set the caret position of the rectangular selection.
+        Move caret to top of page, or one page up if already at top of page, extending selection to new caret position.
     */
-    void SetRectangularSelectionCaret(int caret);
+    void StutteredPageUpExtend();
 
     /**
-        Return the caret position of the rectangular selection.
+        Move caret to bottom of page, or one page down if already at bottom of page.
     */
-    int GetRectangularSelectionCaret() const;
+    void StutteredPageDown();
 
     /**
-        Set the anchor position of the rectangular selection.
+        Move caret to bottom of page, or one page down if already at bottom of page, extending selection to new caret position.
     */
-    void SetRectangularSelectionAnchor(int anchor);
+    void StutteredPageDownExtend();
 
     /**
-        Return the anchor position of the rectangular selection.
+        Move caret left one word, position cursor at end of word.
     */
-    int GetRectangularSelectionAnchor() const;
+    void WordLeftEnd();
 
     /**
-        Set the virtual space of the caret of the rectangular selection.
+        Move caret left one word, position cursor at end of word, extending selection to new caret position.
     */
-    void SetRectangularSelectionCaretVirtualSpace(int space);
+    void WordLeftEndExtend();
 
     /**
-        Return the virtual space of the caret of the rectangular selection.
+        Move caret right one word, position cursor at end of word.
     */
-    int GetRectangularSelectionCaretVirtualSpace() const;
+    void WordRightEnd();
 
     /**
-        Set the virtual space of the anchor of the rectangular selection.
+        Move caret right one word, position cursor at end of word, extending selection to new caret position.
     */
-    void SetRectangularSelectionAnchorVirtualSpace(int space);
+    void WordRightEndExtend();
 
     /**
-        Return the virtual space of the anchor of the rectangular selection.
+        Duplicate the selection. If selection empty duplicate the line containing the caret.
     */
-    int GetRectangularSelectionAnchorVirtualSpace() const;
+    void SelectionDuplicate();
 
     /**
-        Set options for virtual space behaviour.
+        Centre current line in window.
     */
-    void SetVirtualSpaceOptions(int virtualSpaceOptions);
+    void VerticalCentreCaret();
 
     /**
-        Return options for virtual space behaviour.
+        Scroll to start of document.
     */
-    int GetVirtualSpaceOptions() const;
+    void ScrollToStart();
 
     /**
-        On GTK+, allow selecting the modifier key to use for mouse-based
-        rectangular selection. Often the window manager requires Alt+Mouse Drag
-        for moving windows.
-        Valid values are SCMOD_CTRL(default), SCMOD_ALT, or SCMOD_SUPER.
+        Scroll to end of document.
     */
-    void SetRectangularSelectionModifier(int modifier);
+    void ScrollToEnd();
 
     /**
-        Get the modifier key used for rectangular selection.
+        Move caret to before first visible character on display line.
+        If already there move to first character on display line.
+
+        @since 3.1.0
     */
-    int GetRectangularSelectionModifier() const;
+    void VCHomeDisplay();
 
     /**
-        Set the foreground colour of additional selections.
-        Must have previously called SetSelFore with non-zero first argument for this to have an effect.
+        Like VCHomeDisplay but extending selection to new caret position.
+
+        @since 3.1.0
     */
-    void SetAdditionalSelForeground(const wxColour& fore);
+    void VCHomeDisplayExtend();
+
+    //@}
 
     /**
-        Set the background colour of additional selections.
-        Must have previously called SetSelBack with non-zero first argument for this to have an effect.
+        @member_group_name{KeyBindings, Key bindings}
     */
-    void SetAdditionalSelBackground(const wxColour& back);
+    //@{
 
     /**
-        Set the alpha of the selection.
+        When key+modifier combination keyDefinition is pressed perform sciCommand.
+
+        The second argument should be a bit list containing one or more of the
+        @link wxStyledTextCtrl::wxSTC_KEYMOD_NORM wxSTC_KEYMOD_* @endlink constants
+        and the third argument should be one of the
+        @link wxStyledTextCtrl::wxSTC_CMD_BACKTAB wxSTC_CMD_* @endlink constants.
     */
-    void SetAdditionalSelAlpha(int alpha);
+    void CmdKeyAssign(int key, int modifiers, int cmd);
 
     /**
-        Get the alpha of the selection.
+        When key+modifier combination keyDefinition is pressed do nothing.
+
+        The second argument should be a bit list containing one or more of the
+        @link wxStyledTextCtrl::wxSTC_KEYMOD_NORM wxSTC_KEYMOD_* @endlink constants.
     */
-    int GetAdditionalSelAlpha() const;
+    void CmdKeyClear(int key, int modifiers);
 
     /**
-        Set the foreground colour of additional carets.
+        Drop all key mappings.
     */
-    void SetAdditionalCaretForeground(const wxColour& fore);
+    void CmdKeyClearAll();
+
+    //@}
 
     /**
-        Get the foreground colour of additional carets.
+        @member_group_name{PopupEditMenu, Popup edit menu}
     */
-    wxColour GetAdditionalCaretForeground() const;
+    //@{
 
     /**
-        Set the main selection to the next selection.
+        Set whether a pop up menu is displayed automatically when the user presses
+        the wrong mouse button on certain areas.
+
+        The input should be one of the
+        @link wxStyledTextCtrl::wxSTC_POPUP_NEVER wxSTC_POPUP_* @endlink constants.
     */
-    void RotateSelection();
+    void UsePopUp(int popUpMode);
+
+    //@}
 
     /**
-        Swap that caret and anchor of the main selection.
+        @member_group_name{MacroRecording, Macro recording}
     */
-    void SwapMainAnchorCaret();
+    //@{
 
     /**
-        Add the next occurrence of the main selection to the set of selections as main.
-        If the current selection is empty then select word around caret.
+        Start notifying the container of all key presses and commands.
+    */
+    void StartRecord();
+
+    /**
+        Stop notifying the container of all key presses and commands.
+    */
+    void StopRecord();
+
+    //@}
+
+    /**
+        @member_group_name{Printing, Printing}
+    */
+    //@{
+
+    /**
+        Sets the print magnification added to the point size of each style for printing.
+    */
+    void SetPrintMagnification(int magnification);
+
+    /**
+        Returns the print magnification.
+    */
+    int GetPrintMagnification() const;
+
+    /**
+        Modify colours when printing for clearer printed text.
+
+        The input should be one of the
+        @link wxStyledTextCtrl::wxSTC_PRINT_NORMAL wxSTC_PRINT_* @endlink constants.
+    */
+    void SetPrintColourMode(int mode);
+
+    /**
+        Returns the print colour mode.
+
+        The return value will be one of the
+        @link wxStyledTextCtrl::wxSTC_PRINT_NORMAL wxSTC_PRINT_* @endlink constants.
+    */
+    int GetPrintColourMode() const;
+
+    /**
+        On Windows, will draw the document into a display context such as a printer.
+    */
+    int FormatRange(bool   doDraw,
+               int    startPos,
+               int    endPos,
+               wxDC*  draw,
+               wxDC*  target,
+               wxRect renderRect,
+               wxRect pageRect);
+
+    /**
+        Set printing to line wrapped (wxSTC_WRAP_WORD) or not line wrapped (wxSTC_WRAP_NONE).
+    */
+    void SetPrintWrapMode(int wrapMode);
+
+    /**
+        Is printing line wrapped?
+
+        The return value will be one of the
+        @link wxStyledTextCtrl::wxSTC_WRAP_NONE wxSTC_WRAP_* @endlink constants.
+    */
+    int GetPrintWrapMode() const;
+
+    //@}
+
+    /**
+        @member_group_name{DirectAccess, Direct access}
+    */
+    //@{
+
+    /**
+        Retrieve a pointer to a function that processes messages for this Scintilla.
+
+        @since 3.1.1
+    */
+    void* GetDirectFunction() const;
+
+    /**
+        Retrieve a pointer value to use as the first argument when calling
+        the function returned by GetDirectFunction.
+
+        @since 3.1.1
+    */
+    void* GetDirectPointer() const;
+
+    /**
+        Compact the document buffer and return a read-only pointer to the
+        characters in the document.
+    */
+    const char* GetCharacterPointer() const;
+
+    /**
+        Return a read-only pointer to a range of characters in the document.
+        May move the gap so that the range is contiguous, but will only move up
+        to lengthRange bytes.
+    */
+    const char* GetRangePointer(int position, int rangeLength) const;
+
+    /**
+        Return a position which, to avoid performance costs, should not be within
+        the range of a call to GetRangePointer.
+    */
+    int GetGapPosition() const;
+
+    //@}
+
+    /**
+        @member_group_name{MultipleViews, Multiple views}
+    */
+    //@{
+
+    /**
+        Retrieve a pointer to the document object.
+    */
+    void* GetDocPointer();
+
+    /**
+        Change the document object used.
+    */
+    void SetDocPointer(void* docPointer);
+
+    /**
+        Create a new document object.
+        Starts with reference count of 1 and not selected into editor.
+    */
+    void* CreateDocument();
+
+    /**
+        Extend life of document.
+    */
+    void AddRefDocument(void* docPointer);
+
+    /**
+        Release a reference to the document, deleting document if it fades to black.
+    */
+    void ReleaseDocument(void* docPointer);
+
+    //@}
+
+    /**
+        @member_group_name{BackgroundLoadSave, Background loading and saving}
+    */
+    //@{
+
+    /**
+        Create an ILoader*.
+    */
+    void* CreateLoader(int bytes) const;
+
+    //@}
+
+    /**
+        @member_group_name{Folding, Folding}
+    */
+    //@{
+
+    /**
+        Find the display line of a document line taking hidden lines into account.
+    */
+    int VisibleFromDocLine(int docLine);
+
+    /**
+        Find the document line of a display line taking hidden lines into account.
+    */
+    int DocLineFromVisible(int displayLine);
+
+    /**
+        Set the fold level of a line.
+        This encodes an integer level along with flags indicating whether the
+        line is a header and whether it is effectively white space.
+    */
+    void SetFoldLevel(int line, int level);
+
+    /**
+        Retrieve the fold level of a line.
+    */
+    int GetFoldLevel(int line) const;
+
+    /**
+        Find the last child line of a header line.
+    */
+    int GetLastChild(int line, int level) const;
+
+    /**
+        Find the parent line of a child line.
+    */
+    int GetFoldParent(int line) const;
+
+    /**
+        Make a range of lines visible.
+    */
+    void ShowLines(int lineStart, int lineEnd);
+
+    /**
+        Make a range of lines invisible.
+    */
+    void HideLines(int lineStart, int lineEnd);
+
+    /**
+        Is a line visible?
+    */
+    bool GetLineVisible(int line) const;
+
+    /**
+        Are all lines visible?
+    */
+    bool GetAllLinesVisible() const;
+
+    /**
+        Show the children of a header line.
+    */
+    void SetFoldExpanded(int line, bool expanded);
+
+    /**
+        Is a header line expanded?
+    */
+    bool GetFoldExpanded(int line) const;
+
+    /**
+        Switch a header line between expanded and contracted.
+    */
+    void ToggleFold(int line);
+
+    /**
+        Switch a header line between expanded and contracted and show some text after the line.
+
+        @since 3.1.1
+    */
+    void ToggleFoldShowText(int line, const wxString& text);
+
+    /**
+        Set the style of fold display text
+
+        The input should be one of the
+        @link wxStyledTextCtrl::wxSTC_FOLDDISPLAYTEXT_HIDDEN wxSTC_FOLDDISPLAYTEXT_* @endlink constants.
+        @since 3.1.1
+    */
+    void FoldDisplayTextSetStyle(int style);
+
+    /**
+        Expand or contract a fold header.
+
+        The second argument should be one of the
+        @link wxStyledTextCtrl::wxSTC_FOLDACTION_CONTRACT wxSTC_FOLDACTION_* @endlink constants.
+        @since 3.1.0
+    */
+    void FoldLine(int line, int action);
+
+    /**
+        Expand or contract a fold header and its children.
+
+        The second argument should be one of the
+        @link wxStyledTextCtrl::wxSTC_FOLDACTION_CONTRACT wxSTC_FOLDACTION_* @endlink constants.
+        @since 3.1.0
+    */
+    void FoldChildren(int line, int action);
+
+    /**
+        Expand a fold header and all children. Use the level argument instead of the line's current level.
+
+        @since 3.1.0
+    */
+    void ExpandChildren(int line, int level);
+
+    /**
+        Expand or contract all fold headers.
+
+        The input should be one of the
+        @link wxStyledTextCtrl::wxSTC_FOLDACTION_CONTRACT wxSTC_FOLDACTION_* @endlink constants.
+        @since 3.1.0
+    */
+    void FoldAll(int action);
+
+    /**
+        Ensure a particular line is visible by expanding any header line hiding it.
+    */
+    void EnsureVisible(int line);
+
+    /**
+        Set automatic folding behaviours.
+
+        The input should be a bit list containing one or more of the
+        @link wxStyledTextCtrl::wxSTC_AUTOMATICFOLD_SHOW wxSTC_AUTOMATICFOLD_* @endlink constants.
+        @since 3.1.0
+    */
+    void SetAutomaticFold(int automaticFold);
+
+    /**
+        Get automatic folding behaviours.
+
+        The return value will be a bit list containing one or more of the
+        @link wxStyledTextCtrl::wxSTC_AUTOMATICFOLD_SHOW wxSTC_AUTOMATICFOLD_* @endlink constants.
+        @since 3.1.0
+    */
+    int GetAutomaticFold() const;
+
+    /**
+        Set some style options for folding.
+
+        The second argument should be a bit list containing one or more of the
+        @link wxStyledTextCtrl::wxSTC_FOLDFLAG_LINEBEFORE_EXPANDED wxSTC_FOLDFLAG_* @endlink constants.
+    */
+    void SetFoldFlags(int flags);
+
+    /**
+        Ensure a particular line is visible by expanding any header line hiding it.
+        Use the currently set visibility policy to determine which range to display.
+    */
+    void EnsureVisibleEnforcePolicy(int line);
+
+    /**
+        Find the next line at or after lineStart that is a contracted fold header line.
+        Return -1 when no more lines.
+    */
+    int ContractedFoldNext(int lineStart);
+
+    //@}
+
+    /**
+        @member_group_name{LineWrapping, Line wrapping}
+    */
+    //@{
+
+    /**
+        The number of display lines needed to wrap a document line
+    */
+    int WrapCount(int docLine);
+
+    /**
+        Sets whether text is word wrapped.
+
+        The input should be one of the
+        @link wxStyledTextCtrl::wxSTC_WRAP_NONE wxSTC_WRAP_* @endlink constants.
     */
-    void MultipleSelectAddNext();
+    void SetWrapMode(int wrapMode);
 
     /**
-        Add each occurrence of the main selection in the target to the set of selections.
-        If the current selection is empty then select word around caret.
+        Retrieve whether text is word wrapped.
+
+        The return value will be one of the
+        @link wxStyledTextCtrl::wxSTC_WRAP_NONE wxSTC_WRAP_* @endlink constants.
     */
-    void MultipleSelectAddEach();
+    int GetWrapMode() const;
 
     /**
-        Indicate that the internal state of a lexer has changed over a range and therefore
-        there may be a need to redraw.
+        Set the display mode of visual flags for wrapped lines.
+
+        The input should be a bit list containing one or more of the
+        @link wxStyledTextCtrl::wxSTC_WRAPVISUALFLAG_NONE wxSTC_WRAPVISUALFLAG_* @endlink constants.
     */
-    int ChangeLexerState(int start, int end);
+    void SetWrapVisualFlags(int wrapVisualFlags);
 
     /**
-        Find the next line at or after lineStart that is a contracted fold header line.
-        Return -1 when no more lines.
+        Retrive the display mode of visual flags for wrapped lines.
+
+        The return value will be a bit list containing one or more of the
+        @link wxStyledTextCtrl::wxSTC_WRAPVISUALFLAG_NONE wxSTC_WRAPVISUALFLAG_* @endlink constants.
     */
-    int ContractedFoldNext(int lineStart);
+    int GetWrapVisualFlags() const;
 
     /**
-        Centre current line in window.
+        Set the location of visual flags for wrapped lines.
+
+        The input should be a bit list containing one or more of the
+        @link wxStyledTextCtrl::wxSTC_WRAPVISUALFLAGLOC_DEFAULT wxSTC_WRAPVISUALFLAGLOC_* @endlink constants.
     */
-    void VerticalCentreCaret();
+    void SetWrapVisualFlagsLocation(int wrapVisualFlagsLocation);
 
     /**
-        Move the selected lines up one line, shifting the line above after the selection
+        Retrive the location of visual flags for wrapped lines.
+
+        The return value will be a bit list containing one or more of the
+        @link wxStyledTextCtrl::wxSTC_WRAPVISUALFLAGLOC_DEFAULT wxSTC_WRAPVISUALFLAGLOC_* @endlink constants.
     */
-    void MoveSelectedLinesUp();
+    int GetWrapVisualFlagsLocation() const;
 
     /**
-        Move the selected lines down one line, shifting the line below before the selection
+        Set the start indent for wrapped lines.
     */
-    void MoveSelectedLinesDown();
+    void SetWrapStartIndent(int indent);
 
     /**
-        Set the identifier reported as idFrom in notification messages.
+        Retrive the start indent for wrapped lines.
     */
-    void SetIdentifier(int identifier);
+    int GetWrapStartIndent() const;
 
     /**
-        Get the identifier.
+        Sets how wrapped sublines are placed. Default is wxSTC_WRAPINDENT_FIXED.
+
+        The input should be one of the
+        @link wxStyledTextCtrl::wxSTC_WRAPINDENT_FIXED wxSTC_WRAPINDENT_* @endlink constants.
     */
-    int GetIdentifier() const;
+    void SetWrapIndentMode(int wrapIndentMode);
 
     /**
-        Set the width for future RGBA image data.
+        Retrieve how wrapped sublines are placed. Default is wxSTC_WRAPINDENT_FIXED.
+
+        The return value will be one of the
+        @link wxStyledTextCtrl::wxSTC_WRAPINDENT_FIXED wxSTC_WRAPINDENT_* @endlink constants.
     */
-    void RGBAImageSetWidth(int width);
+    int GetWrapIndentMode() const;
 
     /**
-        Set the height for future RGBA image data.
+        Retrieve the degree of caching of layout information.
+
+        The return value will be one of the
+        @link wxStyledTextCtrl::wxSTC_CACHE_NONE wxSTC_CACHE_* @endlink constants.
     */
-    void RGBAImageSetHeight(int height);
+    int GetLayoutCache() const;
 
     /**
-        Set the scale factor in percent for future RGBA image data.
+        Join the lines in the target.
     */
-    void RGBAImageSetScale(int scalePercent);
+    void LinesJoin();
 
     /**
-        Define a marker from RGBA data.
-        It has the width and height from RGBAImageSetWidth/Height
+        Split the lines in the target into lines that are less wide than pixelWidth
+        where possible.
     */
-    void MarkerDefineRGBAImage(int markerNumber, const unsigned char* pixels);
+    void LinesSplit(int pixelWidth);
 
     /**
-        Register an RGBA image for use in autocompletion lists.
-        It has the width and height from RGBAImageSetWidth/Height
+        Set number of entries in position cache
     */
-    void RegisterRGBAImage(int type, const unsigned char* pixels);
+    void SetPositionCacheSize(int size);
 
     /**
-        Scroll to start of document.
+        How many entries are allocated to the position cache?
     */
-    void ScrollToStart();
+    int GetPositionCacheSize() const;
+
+    //@}
 
     /**
-        Scroll to end of document.
+        @member_group_name{Zooming, Zooming}
     */
-    void ScrollToEnd();
+    //@{
 
     /**
-        Set the technology used.
+        Magnify the displayed text by increasing the sizes by 1 point.
     */
-    void SetTechnology(int technology);
+    void ZoomIn();
 
     /**
-        Get the tech.
+        Make the displayed text smaller by decreasing the sizes by 1 point.
     */
-    int GetTechnology() const;
+    void ZoomOut();
 
     /**
-        Create an ILoader*.
+        Set the zoom level. This number of points is added to the size of all fonts.
+        It may be positive to magnify or negative to reduce.
     */
-    void* CreateLoader(int bytes) const;
+    void SetZoom(int zoomInPoints);
 
     /**
-        Move caret to before first visible character on display line.
-        If already there move to first character on display line.
+        Retrieve the zoom level.
     */
-    void VCHomeDisplay();
+    int GetZoom() const;
+
+    //@}
 
     /**
-        Like VCHomeDisplay but extending selection to new caret position.
+        @member_group_name{LongLines, Long lines}
     */
-    void VCHomeDisplayExtend();
+    //@{
 
     /**
-        Is the caret line always visible?
+        Retrieve the column number which text should be kept within.
     */
-    bool GetCaretLineVisibleAlways() const;
+    int GetEdgeColumn() const;
 
     /**
-        Sets the caret line to always visible.
+        Set the column number of the edge.
+        If text goes past the edge then it is highlighted.
     */
-    void SetCaretLineVisibleAlways(bool alwaysVisible);
+    void SetEdgeColumn(int column);
 
     /**
-        Set the line end types that the application wants to use. May not be used if incompatible with lexer or encoding.
+        Retrieve the edge highlight mode.
+
+        The return value will be one of the
+        @link wxStyledTextCtrl::wxSTC_EDGE_NONE wxSTC_EDGE_* @endlink constants.
     */
-    void SetLineEndTypesAllowed(int lineEndBitSet);
+    int GetEdgeMode() const;
 
     /**
-        Get the line end types currently allowed.
+        The edge may be displayed by a line (wxSTC_EDGE_LINE/wxSTC_EDGE_MULTILINE) or by highlighting text that
+        goes beyond it (wxSTC_EDGE_BACKGROUND) or not displayed at all (wxSTC_EDGE_NONE).
+
+        The input should be one of the
+        @link wxStyledTextCtrl::wxSTC_EDGE_NONE wxSTC_EDGE_* @endlink constants.
     */
-    int GetLineEndTypesAllowed() const;
+    void SetEdgeMode(int edgeMode);
 
     /**
-        Get the line end types currently recognised. May be a subset of the allowed types due to lexer limitation.
+        Retrieve the colour used in edge indication.
     */
-    int GetLineEndTypesActive() const;
+    wxColour GetEdgeColour() const;
 
     /**
-        Set the way a character is drawn.
+        Change the colour used in edge indication.
     */
-    void SetRepresentation(const wxString& encodedCharacter, const wxString& representation);
+    void SetEdgeColour(const wxColour& edgeColour);
 
     /**
-        Set the way a character is drawn.
-        Result is NUL-terminated.
+        Add a new vertical edge to the view.
+
+        @since 3.1.1
     */
-    wxString GetRepresentation(const wxString& encodedCharacter) const;
+    void MultiEdgeAddLine(int column, const wxColour& edgeColour);
 
     /**
-        Remove a character representation.
+        Clear all vertical edges.
+
+        @since 3.1.1
     */
-    void ClearRepresentation(const wxString& encodedCharacter);
+    void MultiEdgeClearAll();
+
+    //@}
 
     /**
-        Start notifying the container of all key presses and commands.
+        @member_group_name{Lexer, Lexer}
     */
-    void StartRecord();
+    //@{
 
     /**
-        Stop notifying the container of all key presses and commands.
+        Indicate that the internal state of a lexer has changed over a range and therefore
+        there may be a need to redraw.
     */
-    void StopRecord();
+    int ChangeLexerState(int start, int end);
 
     /**
         Set the lexing language of the document.
+
+        The input should be one of the
+        @link wxStyledTextCtrl::wxSTC_LEX_A68K wxSTC_LEX_* @endlink constants.
     */
     void SetLexer(int lexer);
 
     /**
         Retrieve the lexing language of the document.
+
+        The return value will be one of the
+        @link wxStyledTextCtrl::wxSTC_LEX_A68K wxSTC_LEX_* @endlink constants.
     */
     int GetLexer() const;
 
@@ -6312,33 +6980,32 @@ public:
 
     /**
         Load a lexer library (dll / so).
+
+        @since 3.1.1
     */
     void LoadLexerLibrary(const wxString& path);
 
     /**
-        Retrieve a 'property' value previously set with SetProperty.
+        Retrieve a "property" value previously set with SetProperty.
     */
     wxString GetProperty(const wxString& key);
 
     /**
-        Retrieve a 'property' value previously set with SetProperty,
-        with '$()' variable replacement on returned buffer.
+        Retrieve a "property" value previously set with SetProperty,
+        with "$()" variable replacement on returned buffer.
     */
     wxString GetPropertyExpanded(const wxString& key);
 
     /**
-        Retrieve a 'property' value previously set with SetProperty,
-        interpreted as an int AFTER any '$()' variable replacement.
+        Retrieve a "property" value previously set with SetProperty,
+        interpreted as an int AFTER any "$()" variable replacement.
     */
     int GetPropertyInt(const wxString &key, int defaultValue=0) const;
 
     /**
-        Retrieve the number of bits the current lexer needs for styling.
-    */
-    int GetStyleBitsNeeded() const;
-
-    /**
         Retrieve the lexing language of the document.
+
+        @since 3.1.1
     */
     wxString GetLexerLanguage() const;
 
@@ -6348,85 +7015,182 @@ public:
     void* PrivateLexerCall(int operation, void* pointer);
 
     /**
-        Retrieve a '\n' separated list of properties understood by the current lexer.
-        Result is NUL-terminated.
+        Retrieve a '\\n' separated list of properties understood by the current lexer.
     */
     wxString PropertyNames() const;
 
     /**
         Retrieve the type of a property.
+
+        The return value will be one of the
+        @link wxStyledTextCtrl::wxSTC_TYPE_BOOLEAN wxSTC_TYPE_* @endlink constants.
     */
     int PropertyType(const wxString& name);
 
     /**
         Describe a property.
-        Result is NUL-terminated.
     */
     wxString DescribeProperty(const wxString& name) const;
 
     /**
-        Retrieve a '\n' separated list of descriptions of the keyword sets understood by the current lexer.
-        Result is NUL-terminated.
+        Retrieve a '\\n' separated list of descriptions of the keyword sets understood by the current lexer.
     */
     wxString DescribeKeyWordSets() const;
 
     /**
-        Bit set of LineEndType enumertion for which line ends beyond the standard
-        LF, CR, and CRLF are supported by the lexer.
-    */
-    int GetLineEndTypesSupported() const;
-
-    /**
         Allocate a set of sub styles for a particular base style, returning start of range
+
+        @since 3.1.0
     */
     int AllocateSubStyles(int styleBase, int numberStyles);
 
     /**
         The starting style number for the sub styles associated with a base style
+
+        @since 3.1.0
     */
     int GetSubStylesStart(int styleBase) const;
 
     /**
         The number of sub styles associated with a base style
+
+        @since 3.1.0
     */
     int GetSubStylesLength(int styleBase) const;
 
     /**
         For a sub style, return the base style, else return the argument.
+
+        @since 3.1.0
     */
     int GetStyleFromSubStyle(int subStyle) const;
 
     /**
         For a secondary style, return the primary style, else return the argument.
+
+        @since 3.1.0
     */
     int GetPrimaryStyleFromStyle(int style) const;
 
     /**
         Free allocated sub styles
+
+        @since 3.1.0
     */
     void FreeSubStyles();
 
     /**
         Set the identifiers that are shown in a particular style
+
+        @since 3.1.0
     */
     void SetIdentifiers(int style, const wxString& identifiers);
 
     /**
         Where styles are duplicated by a feature such as active/inactive code
         return the distance between the two types.
+
+        @since 3.1.0
     */
     int DistanceToSecondaryStyles() const;
 
     /**
         Get the set of base styles that can be extended with sub styles
-        Result is NUL-terminated.
+
+        @since 3.1.0
     */
     wxString GetSubStyleBases() const;
 
-    //}}}
+    //@}
+
+    /**
+        @member_group_name{Notifications, Event related items}
+    */
+    //@{
+
+    /**
+        Sets the time the mouse must sit still to generate a mouse dwell event.
+
+        The input should be a time in milliseconds or wxSTC_TIME_FOREVER.
+    */
+    void SetMouseDwellTime(int periodMilliseconds);
+
+    /**
+        Retrieve the time the mouse must sit still to generate a mouse dwell event.
+
+        The return value will be a time in milliseconds or wxSTC_TIME_FOREVER.
+    */
+    int GetMouseDwellTime() const;
+
+    /**
+        Set which document modification events are sent to the container.
+
+        The input should be a bit list containing one or more of the
+        @link wxStyledTextCtrl::wxSTC_MOD_INSERTTEXT wxSTC_MOD_* @endlink constants,
+        the @link wxStyledTextCtrl::wxSTC_PERFORMED_REDO wxSTC_PERFORMED_* @endlink constants,
+        wxSTC_STARTACTION, wxSTC_MULTILINEUNDOREDO, wxSTC_MULTISTEPUNDOREDO, and wxSTC_LASTSTEPINUNDOREDO.
+        The input can also be wxSTC_MODEVENTMASKALL to indicate that all changes
+        should generate events.
+    */
+    void SetModEventMask(int eventMask);
+
+    /**
+        Get which document modification events are sent to the container.
+
+        The return value will wxSTC_MODEVENTMASKALL if all changes generate
+        events.  Otherwise it will be a bit list containing one or more of the
+        @link wxStyledTextCtrl::wxSTC_MOD_INSERTTEXT wxSTC_MOD_* @endlink constants,
+        the @link wxStyledTextCtrl::wxSTC_PERFORMED_REDO wxSTC_PERFORMED_* @endlink constants,
+        wxSTC_STARTACTION, wxSTC_MULTILINEUNDOREDO, wxSTC_MULTISTEPUNDOREDO, and wxSTC_LASTSTEPINUNDOREDO.
+    */
+    int GetModEventMask() const;
+
+    /**
+        Set the identifier reported as idFrom in notification messages.
+    */
+    void SetIdentifier(int identifier);
+
+    /**
+        Get the identifier.
+    */
+    int GetIdentifier() const;
 
     //@}
 
+    /**
+        @member_group_name{DeprecatedMessages, Deprecated items}
+
+        These methods should not be used in new code.
+    */
+    //@{
+
+    /**
+        Divide each styling byte into lexical class bits (default: 5) and indicator
+        bits (default: 3). If a lexer requires more than 32 lexical states, then this
+        is used to expand the possible states.
+
+        @deprecated
+    */
+    void SetStyleBits(int bits);
+
+    /**
+        Retrieve number of bits in style bytes used to hold the lexical state.
+
+        @deprecated
+    */
+    int GetStyleBits() const;
+
+    /**
+        Retrieve the number of bits the current lexer needs for styling.
+
+        @deprecated
+    */
+    int GetStyleBitsNeeded() const;
+
+    //@}
+
+    //}}}
+
 
     // Manually declared methods
     // ----------------------------------------------

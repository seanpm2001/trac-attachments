diff --git a/include/wx/stc/stc.h b/include/wx/stc/stc.h
index f5c97c5..1b73462 100644
--- a/include/wx/stc/stc.h
+++ b/include/wx/stc/stc.h
@@ -2870,7 +2870,7 @@ public:
     // Insert string at a position.
     void InsertText(int pos, const wxString& text);
 
-    // Change the text that is being inserted in response to SC_MOD_INSERTCHECK
+    // Change the text that is being inserted in response to wxSTC_MOD_INSERTCHECK
     void ChangeInsertion(int length, const wxString& text);
 
     // Delete all text in the document.
@@ -2927,14 +2927,14 @@ public:
     bool GetUndoCollection() const;
 
     // Are white space characters currently visible?
-    // Returns one of SCWS_* constants.
+    // Returns one of wxSTC_WS_* constants.
     int GetViewWhiteSpace() const;
 
     // Make white space characters invisible, always visible or visible outside indentation.
     void SetViewWhiteSpace(int viewWS);
 
     // Retrieve the current tab draw mode.
-    // Returns one of SCTD_* constants.
+    // Returns one of wxSTC_TD_* constants.
     int GetTabDrawMode() const;
 
     // Set how tabs are drawn when visible.
@@ -2944,7 +2944,7 @@ public:
     int PositionFromPoint(wxPoint pt) const;
 
     // Find the position from a point within the window but return
-    // INVALID_POSITION if not close to text.
+    // wxSTC_INVALID_POSITION if not close to text.
     int PositionFromPointClose(int x, int y);
 
     // Set caret to start of a line and ensure it is visible.
@@ -2958,8 +2958,6 @@ public:
     void SetAnchor(int anchor);
 
     // Retrieve the text of the line containing the caret.
-    // Returns the index of the caret on the line.
-    // Result is NUL-terminated.
     #ifdef SWIG
     wxString GetCurLine(int* OUTPUT);
 #else
@@ -2972,7 +2970,7 @@ public:
     // Convert all line endings in the document to one mode.
     void ConvertEOLs(int eolMode);
 
-    // Retrieve the current end of line mode - one of CRLF, CR, or LF.
+    // Retrieve the current end of line mode - one of wxSTC_EOL_CRLF, wxSTC_EOL_CR, or wxSTC_EOL_LF.
     int GetEOLMode() const;
 
     // Set the current end of line mode.
@@ -3093,7 +3091,7 @@ public:
     // Retrieve the cursor shown in a margin.
     int GetMarginCursor(int margin) const;
 
-    // Set the background colour of a margin. Only visible for SC_MARGIN_COLOUR.
+    // Set the background colour of a margin. Only visible for wxSTC_MARGIN_COLOUR.
     void SetMarginBackground(int margin, const wxColour& back);
 
     // Retrieve the background colour of a margin
@@ -3191,7 +3189,6 @@ public:
     int StyleGetWeight(int style) const;
 
     // Set the character set of the font in a style.
-    // Converts the Scintilla character set values to a wxFontEncoding.
     void StyleSetCharacterSet(int style, int characterSet);
 
     // Set a style to be a hotspot or not.
@@ -3677,7 +3674,7 @@ public:
     // Replace the target text with the argument text after \\d processing.
     // Text is counted so it can contain NULs.
     // Looks for \\d where d is between 1 and 9 and replaces these with the strings
-    // matched in the last search operation which were surrounded by \( and \).
+    // matched in the last search operation which were surrounded by \\( and \\).
     // Returns the length of the replacement text including any change
     // caused by processing the \\d patterns.
     int ReplaceTargetRE(const wxString& text);
@@ -3720,7 +3717,7 @@ public:
     // Set the foreground colour for the highlighted part of the call tip.
     void CallTipSetForegroundHighlight(const wxColour& fore);
 
-    // Enable use of STYLE_CALLTIP and set call tip tab size in pixels.
+    // Enable use of wxSTC_STYLE_CALLTIP and set call tip tab size in pixels.
     void CallTipUseStyle(int tabSize);
 
     // Set position of calltip, above or below text.
@@ -3861,10 +3858,10 @@ public:
     // Retrive the start indent for wrapped lines.
     int GetWrapStartIndent() const;
 
-    // Sets how wrapped sublines are placed. Default is fixed.
+    // Sets how wrapped sublines are placed. Default is wxSTC_WRAPINDENT_FIXED.
     void SetWrapIndentMode(int wrapIndentMode);
 
-    // Retrieve how wrapped sublines are placed. Default is fixed.
+    // Retrieve how wrapped sublines are placed. Default is wxSTC_WRAPINDENT_FIXED.
     int GetWrapIndentMode() const;
 
     // Sets the degree of caching of layout information.
@@ -3886,7 +3883,6 @@ public:
     bool GetScrollWidthTracking() const;
 
     // Measure the pixel width of some text in a particular style.
-    // NUL terminated text argument.
     // Does not handle tab or control characters.
     int TextWidth(int style, const wxString& text);
 
@@ -3937,7 +3933,6 @@ public:
     int GetMultiPaste() const;
 
     // Retrieve the value of a tag from a regular expression search.
-    // Result is NUL-terminated.
     wxString GetTag(int tagNumber) const;
 
     // Join the lines in the target.
@@ -4156,7 +4151,7 @@ public:
     // Use specified indicator to highlight non matching brace instead of changing its style.
     void BraceBadLightIndicator(bool useSetting, int indicator);
 
-    // Find the position of a matching brace or INVALID_POSITION if no match.
+    // Find the position of a matching brace or wxSTC_INVALID_POSITION if no match.
     // The maxReStyle must be 0 for now. It may be defined in a future release.
     int BraceMatch(int pos, int maxReStyle=0);
 
@@ -4185,8 +4180,8 @@ public:
     // Retrieve the edge highlight mode.
     int GetEdgeMode() const;
 
-    // The edge may be displayed by a line (EDGE_LINE/EDGE_MULTILINE) or by highlighting text that
-    // goes beyond it (EDGE_BACKGROUND) or not displayed at all (EDGE_NONE).
+    // The edge may be displayed by a line (wxSTC_EDGE_LINE/wxSTC_EDGE_MULTILINE) or by highlighting text that
+    // goes beyond it (wxSTC_EDGE_BACKGROUND) or not displayed at all (wxSTC_EDGE_NONE).
     void SetEdgeMode(int edgeMode);
 
     // Retrieve the colour used in edge indication.
@@ -4266,7 +4261,7 @@ public:
     // Get whether mouse wheel can be active outside the window.
     bool GetMouseWheelCaptures() const;
 
-    // Sets the cursor to one of the SC_CURSOR* values.
+    // Sets the cursor to one of the wxSTC_CURSOR* values.
     void SetSTCCursor(int cursorType);
 
     // Get cursor type.
@@ -4303,8 +4298,10 @@ public:
     // Delete forwards from the current position to the end of the line.
     void DelLineRight();
 
-    // Get and Set the xOffset (ie, horizontal scroll position).
+    // Set the xOffset (ie, horizontal scroll position).
     void SetXOffset(int xOffset);
+
+    // Get the xOffset (ie, horizontal scroll position).
     int GetXOffset() const;
 
     // Set the last x chosen value to be the caret x position.
@@ -4318,7 +4315,7 @@ public:
     // The exclusion zone is given in lines.
     void SetYCaretPolicy(int caretPolicy, int caretSlop);
 
-    // Set printing to line wrapped (SC_WRAP_WORD) or not line wrapped (SC_WRAP_NONE).
+    // Set printing to line wrapped (wxSTC_WRAP_WORD) or not line wrapped (wxSTC_WRAP_NONE).
     void SetPrintWrapMode(int wrapMode);
 
     // Is printing line wrapped?
@@ -4378,17 +4375,17 @@ public:
     // Copy argument text to the clipboard.
     void CopyText(int length, const wxString& text);
 
-    // Set the selection mode to stream (SC_SEL_STREAM) or rectangular (SC_SEL_RECTANGLE/SC_SEL_THIN) or
-    // by lines (SC_SEL_LINES).
+    // Set the selection mode to stream (wxSTC_SEL_STREAM) or rectangular (wxSTC_SEL_RECTANGLE/wxSTC_SEL_THIN) or
+    // by lines (wxSTC_SEL_LINES).
     void SetSelectionMode(int selectionMode);
 
     // Get the mode of the current selection.
     int GetSelectionMode() const;
 
-    // Retrieve the position of the start of the selection at the given line (INVALID_POSITION if no selection on this line).
+    // Retrieve the position of the start of the selection at the given line (wxSTC_INVALID_POSITION if no selection on this line).
     int GetLineSelStartPosition(int line);
 
-    // Retrieve the position of the end of the selection at the given line (INVALID_POSITION if no selection on this line).
+    // Retrieve the position of the end of the selection at the given line (wxSTC_INVALID_POSITION if no selection on this line).
     int GetLineSelEndPosition(int line);
 
     // Move caret down one line, extending rectangular selection to new caret position.
@@ -4680,7 +4677,7 @@ public:
     int CharPositionFromPoint(int x, int y);
 
     // Find the position of a character from a point within the window.
-    // Return INVALID_POSITION if not close to text.
+    // Return wxSTC_INVALID_POSITION if not close to text.
     int CharPositionFromPointClose(int x, int y);
 
     // Set whether switching to rectangular mode while selecting with the mouse is allowed.
@@ -4803,7 +4800,7 @@ public:
     // On GTK+, allow selecting the modifier key to use for mouse-based
     // rectangular selection. Often the window manager requires Alt+Mouse Drag
     // for moving windows.
-    // Valid values are SCMOD_CTRL(default), SCMOD_ALT, or SCMOD_SUPER.
+    // Valid values are wxSTC_KEYMOD_CTRL (default), wxSTC_KEYMOD_ALT, or wxSTC_KEYMOD_SUPER.
     void SetRectangularSelectionModifier(int modifier);
 
     // Get the modifier key used for rectangular selection.
@@ -4924,7 +4921,6 @@ public:
     void SetRepresentation(const wxString& encodedCharacter, const wxString& representation);
 
     // Set the way a character is drawn.
-    // Result is NUL-terminated.
     wxString GetRepresentation(const wxString& encodedCharacter) const;
 
     // Remove a character representation.
@@ -4957,15 +4953,15 @@ public:
     // Load a lexer library (dll / so).
     void LoadLexerLibrary(const wxString& path);
 
-    // Retrieve a 'property' value previously set with SetProperty.
+    // Retrieve a "property" value previously set with SetProperty.
     wxString GetProperty(const wxString& key);
 
-    // Retrieve a 'property' value previously set with SetProperty,
-    // with '$()' variable replacement on returned buffer.
+    // Retrieve a "property" value previously set with SetProperty,
+    // with "$()" variable replacement on returned buffer.
     wxString GetPropertyExpanded(const wxString& key);
 
-    // Retrieve a 'property' value previously set with SetProperty,
-    // interpreted as an int AFTER any '$()' variable replacement.
+    // Retrieve a "property" value previously set with SetProperty,
+    // interpreted as an int AFTER any "$()" variable replacement.
     int GetPropertyInt(const wxString &key, int defaultValue=0) const;
 
     // Retrieve the number of bits the current lexer needs for styling.
@@ -4977,19 +4973,16 @@ public:
     // For private communication between an application and a known lexer.
     void* PrivateLexerCall(int operation, void* pointer);
 
-    // Retrieve a '\n' separated list of properties understood by the current lexer.
-    // Result is NUL-terminated.
+    // Retrieve a '\\n' separated list of properties understood by the current lexer.
     wxString PropertyNames() const;
 
     // Retrieve the type of a property.
     int PropertyType(const wxString& name);
 
     // Describe a property.
-    // Result is NUL-terminated.
     wxString DescribeProperty(const wxString& name) const;
 
-    // Retrieve a '\n' separated list of descriptions of the keyword sets understood by the current lexer.
-    // Result is NUL-terminated.
+    // Retrieve a '\\n' separated list of descriptions of the keyword sets understood by the current lexer.
     wxString DescribeKeyWordSets() const;
 
     // Bit set of LineEndType enumertion for which line ends beyond the standard
@@ -5022,7 +5015,6 @@ public:
     int DistanceToSecondaryStyles() const;
 
     // Get the set of base styles that can be extended with sub styles
-    // Result is NUL-terminated.
     wxString GetSubStyleBases() const;
 
     //}}}
diff --git a/src/stc/gen_docs.py b/src/stc/gen_docs.py
new file mode 100644
index 0000000..41f6974
--- /dev/null
+++ b/src/stc/gen_docs.py
@@ -0,0 +1,1401 @@
+#!/usr/bin/env python
+#----------------------------------------------------------------------------
+# Name:         src/stc/gen_docs.py
+# Purpose:      Helper function and data used by gen_iface.py to generate
+#               docstrings for wxStyledTextCtrl methods.
+# Author:       New Pagodi
+# Created:      2017-02-24
+# Copyright:    (c) 2017 wxWidgets development team
+# Licence:      wxWindows licence
+#----------------------------------------------------------------------------
+
+
+# List of the categories for the documentation.  Tuple items are:
+#
+#         1. the brief name for this category (this must be 1 word)
+#         2. the full name of this category.  This will appear in the documentation.
+#         3. the description of this category or 0 for none.
+#
+categoriesList = [
+    ('TextRetrievalAndModification'    ,'Text retrieval and modification', 0),
+    ('Searching'                       ,'Searching and replacing', 0),
+    ('Overtype'                        ,'Overtype', 0),
+    ('CutCopyAndPaste'                 ,'Cut copy and paste', 0),
+    ('ErrorHandling'                   ,'Error handling', 0),
+    ('UndoAndRedo'                     ,'Undo and Redo', 0),
+    ('SelectionAndInformation'         ,'Selection and information', 0),
+    ('MultipleSelectionAndVirtualSpace','Multiple Selection and Virtual Space', 0),
+    ('ScrollingAndAutomaticScrolling'  ,'Scrolling and automatic scrolling', 0),
+    ('WhiteSpace'                      ,'White space', 0),
+    ('Cursor'                          ,'Cursor', 0),
+    ('MouseCapture'                    ,'Mouse capture', 0),
+    ('LineEndings'                     ,'Line endings', 0),
+    ('Words'                           ,'Words', 0),
+    ('Styling'                         ,'Styling', 0),
+    ('StyleDefinition'                 ,'Style definition', 0),
+    ('CaretAndSelectionStyles'         ,'Caret selection and hotspot styles', 0),
+    ('CharacterRepresentations'        ,'Character representations', 0),
+    ('Margins'                         ,'Margins', 0),
+    ('Annotations'                     ,'Annotations', 0),
+    ('OtherSettings'                   ,'Other settings', 0),
+    ('BraceHighlighting'               ,'Brace highlighting', 0),
+    ('TabsAndIndentationGuides'        ,'Tabs and Indentation Guides', 0),
+    ('Markers'                         ,'Markers', 0),
+    ('Indicators'                      ,'Indicators', 0),
+    ('Autocompletion'                  ,'Autocompletion', 0),
+    ('UserLists'                       ,'User lists', 0),
+    ('CallTips'                        ,'Call tips', 0),
+    ('KeyboardCommands'                ,'Keyboard commands', 0),
+    ('KeyBindings'                     ,'Key bindings', 0),
+    ('PopupEditMenu'                   ,'Popup edit menu', 0),
+    ('MacroRecording'                  ,'Macro recording', 0),
+    ('Printing'                        ,'Printing', 0),
+    ('DirectAccess'                    ,'Direct access', 0),
+    ('MultipleViews'                   ,'Multiple views', 0),
+    ('BackgroundLoadSave'              ,'Background loading and saving', 0),
+    ('Folding'                         ,'Folding', 0),
+    ('LineWrapping'                    ,'Line wrapping', 0),
+    ('Zooming'                         ,'Zooming', 0),
+    ('LongLines'                       ,'Long lines', 0),
+    ('Lexer'                           ,'Lexer', 0),
+    ('Notifications'                   ,'Event related items', 0),
+    ('DeprecatedMessages'              ,'Deprecated items',
+        ('These methods should not be used in new code.',))
+]
+
+# Assign each method to a category
+docsMap = {
+    'AnnotationClearAll':'Annotations',
+    'AnnotationGetLines':'Annotations',
+    'AnnotationGetStyle':'Annotations',
+    'AnnotationGetStyleOffset':'Annotations',
+    'AnnotationGetStyles':'Annotations',
+    'AnnotationGetText':'Annotations',
+    'AnnotationGetVisible':'Annotations',
+    'AnnotationSetStyle':'Annotations',
+    'AnnotationSetStyleOffset':'Annotations',
+    'AnnotationSetStyles':'Annotations',
+    'AnnotationSetText':'Annotations',
+    'AnnotationSetVisible':'Annotations',
+    'AutoCActive':'Autocompletion',
+    'AutoCCancel':'Autocompletion',
+    'AutoCComplete':'Autocompletion',
+    'AutoCGetAutoHide':'Autocompletion',
+    'AutoCGetCancelAtStart':'Autocompletion',
+    'AutoCGetCaseInsensitiveBehaviour':'Autocompletion',
+    'AutoCGetChooseSingle':'Autocompletion',
+    'AutoCGetCurrent':'Autocompletion',
+    'AutoCGetDropRestOfWord':'Autocompletion',
+    'AutoCGetIgnoreCase':'Autocompletion',
+    'AutoCGetMaxHeight':'Autocompletion',
+    'AutoCGetMaxWidth':'Autocompletion',
+    'AutoCGetMulti':'Autocompletion',
+    'AutoCGetOrder':'Autocompletion',
+    'AutoCGetSeparator':'Autocompletion',
+    'AutoCGetTypeSeparator':'Autocompletion',
+    'AutoCPosStart':'Autocompletion',
+    'AutoCSelect':'Autocompletion',
+    'AutoCSetAutoHide':'Autocompletion',
+    'AutoCSetCancelAtStart':'Autocompletion',
+    'AutoCSetCaseInsensitiveBehaviour':'Autocompletion',
+    'AutoCSetChooseSingle':'Autocompletion',
+    'AutoCSetDropRestOfWord':'Autocompletion',
+    'AutoCSetFillUps':'Autocompletion',
+    'AutoCSetIgnoreCase':'Autocompletion',
+    'AutoCSetMaxHeight':'Autocompletion',
+    'AutoCSetMaxWidth':'Autocompletion',
+    'AutoCSetMulti':'Autocompletion',
+    'AutoCSetOrder':'Autocompletion',
+    'AutoCSetSeparator':'Autocompletion',
+    'AutoCSetTypeSeparator':'Autocompletion',
+    'AutoCShow':'Autocompletion',
+    'AutoCStops':'Autocompletion',
+    'ClearRegisteredImages':'Autocompletion',
+    'RegisterImage':'Autocompletion',
+    'RegisterRGBAImage':'Autocompletion',
+    'CreateLoader':'BackgroundLoadSave',
+    'BraceBadLight':'BraceHighlighting',
+    'BraceBadLightIndicator':'BraceHighlighting',
+    'BraceHighlight':'BraceHighlighting',
+    'BraceHighlightIndicator':'BraceHighlighting',
+    'BraceMatch':'BraceHighlighting',
+    'CallTipActive':'CallTips',
+    'CallTipCancel':'CallTips',
+    'CallTipPosStart':'CallTips',
+    'CallTipSetBack':'CallTips',
+    'CallTipSetFore':'CallTips',
+    'CallTipSetForeHlt':'CallTips',
+    'CallTipSetHlt':'CallTips',
+    'CallTipSetPosition':'CallTips',
+    'CallTipSetPosStart':'CallTips',
+    'CallTipShow':'CallTips',
+    'CallTipUseStyle':'CallTips',
+    'GetCaretFore':'CaretAndSelectionStyles',
+    'GetCaretLineBack':'CaretAndSelectionStyles',
+    'GetCaretLineBackAlpha':'CaretAndSelectionStyles',
+    'GetCaretLineVisible':'CaretAndSelectionStyles',
+    'GetCaretLineVisibleAlways':'CaretAndSelectionStyles',
+    'GetCaretPeriod':'CaretAndSelectionStyles',
+    'GetCaretSticky':'CaretAndSelectionStyles',
+    'GetCaretStyle':'CaretAndSelectionStyles',
+    'GetCaretWidth':'CaretAndSelectionStyles',
+    'GetHotspotActiveBack':'CaretAndSelectionStyles',
+    'GetHotspotActiveFore':'CaretAndSelectionStyles',
+    'GetHotspotActiveUnderline':'CaretAndSelectionStyles',
+    'GetHotspotSingleLine':'CaretAndSelectionStyles',
+    'GetSelAlpha':'CaretAndSelectionStyles',
+    'GetSelEOLFilled':'CaretAndSelectionStyles',
+    'SetCaretFore':'CaretAndSelectionStyles',
+    'SetCaretLineBack':'CaretAndSelectionStyles',
+    'SetCaretLineBackAlpha':'CaretAndSelectionStyles',
+    'SetCaretLineVisible':'CaretAndSelectionStyles',
+    'SetCaretLineVisibleAlways':'CaretAndSelectionStyles',
+    'SetCaretPeriod':'CaretAndSelectionStyles',
+    'SetCaretSticky':'CaretAndSelectionStyles',
+    'SetCaretStyle':'CaretAndSelectionStyles',
+    'SetCaretWidth':'CaretAndSelectionStyles',
+    'SetHotspotActiveBack':'CaretAndSelectionStyles',
+    'SetHotspotActiveFore':'CaretAndSelectionStyles',
+    'SetHotspotActiveUnderline':'CaretAndSelectionStyles',
+    'SetHotspotSingleLine':'CaretAndSelectionStyles',
+    'SetSelAlpha':'CaretAndSelectionStyles',
+    'SetSelBack':'CaretAndSelectionStyles',
+    'SetSelEOLFilled':'CaretAndSelectionStyles',
+    'SetSelFore':'CaretAndSelectionStyles',
+    'ToggleCaretSticky':'CaretAndSelectionStyles',
+    'ClearRepresentation':'CharacterRepresentations',
+    'GetControlCharSymbol':'CharacterRepresentations',
+    'GetRepresentation':'CharacterRepresentations',
+    'SetControlCharSymbol':'CharacterRepresentations',
+    'SetRepresentation':'CharacterRepresentations',
+    'GetCursor':'Cursor',
+    'SetCursor':'Cursor',
+    'CanPaste':'CutCopyAndPaste',
+    'Clear':'CutCopyAndPaste',
+    'Copy':'CutCopyAndPaste',
+    'CopyAllowLine':'CutCopyAndPaste',
+    'CopyRange':'CutCopyAndPaste',
+    'CopyText':'CutCopyAndPaste',
+    'Cut':'CutCopyAndPaste',
+    'GetPasteConvertEndings':'CutCopyAndPaste',
+    'Paste':'CutCopyAndPaste',
+    'SetPasteConvertEndings':'CutCopyAndPaste',
+    'GetKeysUnicode':'DeprecatedMessages',
+    'GetStyleBits':'DeprecatedMessages',
+    'GetStyleBitsNeeded':'DeprecatedMessages',
+    'SetKeysUnicode':'DeprecatedMessages',
+    'SetStyleBits':'DeprecatedMessages',
+    'GetCharacterPointer':'DirectAccess',
+    'GetDirectFunction':'DirectAccess',
+    'GetDirectPointer':'DirectAccess',
+    'GetGapPosition':'DirectAccess',
+    'GetRangePointer':'DirectAccess',
+    'GetStatus':'ErrorHandling',
+    'SetStatus':'ErrorHandling',
+    'ContractedFoldNext':'Folding',
+    'DocLineFromVisible':'Folding',
+    'EnsureVisible':'Folding',
+    'EnsureVisibleEnforcePolicy':'Folding',
+    'ExpandChildren':'Folding',
+    'FoldAll':'Folding',
+    'FoldChildren':'Folding',
+    'FoldDisplayTextSetStyle':'Folding',
+    'FoldLine':'Folding',
+    'GetAllLinesVisible':'Folding',
+    'GetAutomaticFold':'Folding',
+    'GetFoldExpanded':'Folding',
+    'GetFoldLevel':'Folding',
+    'GetFoldParent':'Folding',
+    'GetLastChild':'Folding',
+    'GetLineVisible':'Folding',
+    'HideLines':'Folding',
+    'SetAutomaticFold':'Folding',
+    'SetFoldExpanded':'Folding',
+    'SetFoldFlags':'Folding',
+    'SetFoldLevel':'Folding',
+    'ShowLines':'Folding',
+    'ToggleFold':'Folding',
+    'ToggleFoldShowText':'Folding',
+    'VisibleFromDocLine':'Folding',
+    'GetIndicatorCurrent':'Indicators',
+    'GetIndicatorValue':'Indicators',
+    'IndicatorAllOnFor':'Indicators',
+    'IndicatorClearRange':'Indicators',
+    'IndicatorEnd':'Indicators',
+    'IndicatorFillRange':'Indicators',
+    'IndicatorStart':'Indicators',
+    'IndicatorValueAt':'Indicators',
+    'IndicGetAlpha':'Indicators',
+    'IndicGetFlags':'Indicators',
+    'IndicGetFore':'Indicators',
+    'IndicGetHoverFore':'Indicators',
+    'IndicGetHoverStyle':'Indicators',
+    'IndicGetOutlineAlpha':'Indicators',
+    'IndicGetStyle':'Indicators',
+    'IndicGetUnder':'Indicators',
+    'IndicSetAlpha':'Indicators',
+    'IndicSetFlags':'Indicators',
+    'IndicSetFore':'Indicators',
+    'IndicSetHoverFore':'Indicators',
+    'IndicSetHoverStyle':'Indicators',
+    'IndicSetOutlineAlpha':'Indicators',
+    'IndicSetStyle':'Indicators',
+    'IndicSetUnder':'Indicators',
+    'SetIndicatorCurrent':'Indicators',
+    'SetIndicatorValue':'Indicators',
+    'AssignCmdKey':'KeyBindings',
+    'ClearAllCmdKeys':'KeyBindings',
+    'ClearCmdKey':'KeyBindings',
+    'BackTab':'KeyboardCommands',
+    'Cancel':'KeyboardCommands',
+    'CharLeft':'KeyboardCommands',
+    'CharLeftExtend':'KeyboardCommands',
+    'CharLeftRectExtend':'KeyboardCommands',
+    'CharRight':'KeyboardCommands',
+    'CharRightExtend':'KeyboardCommands',
+    'CharRightRectExtend':'KeyboardCommands',
+    'DeleteBack':'KeyboardCommands',
+    'DeleteBackNotLine':'KeyboardCommands',
+    'DelLineLeft':'KeyboardCommands',
+    'DelLineRight':'KeyboardCommands',
+    'DelWordLeft':'KeyboardCommands',
+    'DelWordRight':'KeyboardCommands',
+    'DelWordRightEnd':'KeyboardCommands',
+    'DocumentEnd':'KeyboardCommands',
+    'DocumentEndExtend':'KeyboardCommands',
+    'DocumentStart':'KeyboardCommands',
+    'DocumentStartExtend':'KeyboardCommands',
+    'EditToggleOvertype':'KeyboardCommands',
+    'FormFeed':'KeyboardCommands',
+    'Home':'KeyboardCommands',
+    'HomeDisplay':'KeyboardCommands',
+    'HomeDisplayExtend':'KeyboardCommands',
+    'HomeExtend':'KeyboardCommands',
+    'HomeRectExtend':'KeyboardCommands',
+    'HomeWrap':'KeyboardCommands',
+    'HomeWrapExtend':'KeyboardCommands',
+    'LineCopy':'KeyboardCommands',
+    'LineCut':'KeyboardCommands',
+    'LineDelete':'KeyboardCommands',
+    'LineDown':'KeyboardCommands',
+    'LineDownExtend':'KeyboardCommands',
+    'LineDownRectExtend':'KeyboardCommands',
+    'LineDuplicate':'KeyboardCommands',
+    'LineEnd':'KeyboardCommands',
+    'LineEndDisplay':'KeyboardCommands',
+    'LineEndDisplayExtend':'KeyboardCommands',
+    'LineEndExtend':'KeyboardCommands',
+    'LineEndRectExtend':'KeyboardCommands',
+    'LineEndWrap':'KeyboardCommands',
+    'LineEndWrapExtend':'KeyboardCommands',
+    'LineScrollDown':'KeyboardCommands',
+    'LineScrollUp':'KeyboardCommands',
+    'LineTranspose':'KeyboardCommands',
+    'LineUp':'KeyboardCommands',
+    'LineUpExtend':'KeyboardCommands',
+    'LineUpRectExtend':'KeyboardCommands',
+    'LowerCase':'KeyboardCommands',
+    'NewLine':'KeyboardCommands',
+    'PageDown':'KeyboardCommands',
+    'PageDownExtend':'KeyboardCommands',
+    'PageDownRectExtend':'KeyboardCommands',
+    'PageUp':'KeyboardCommands',
+    'PageUpExtend':'KeyboardCommands',
+    'PageUpRectExtend':'KeyboardCommands',
+    'ParaDown':'KeyboardCommands',
+    'ParaDownExtend':'KeyboardCommands',
+    'ParaUp':'KeyboardCommands',
+    'ParaUpExtend':'KeyboardCommands',
+    'ScrollToEnd':'KeyboardCommands',
+    'ScrollToStart':'KeyboardCommands',
+    'SelectionDuplicate':'KeyboardCommands',
+    'StutteredPageDown':'KeyboardCommands',
+    'StutteredPageDownExtend':'KeyboardCommands',
+    'StutteredPageUp':'KeyboardCommands',
+    'StutteredPageUpExtend':'KeyboardCommands',
+    'Tab':'KeyboardCommands',
+    'UpperCase':'KeyboardCommands',
+    'VCHome':'KeyboardCommands',
+    'VCHomeDisplay':'KeyboardCommands',
+    'VCHomeDisplayExtend':'KeyboardCommands',
+    'VCHomeExtend':'KeyboardCommands',
+    'VCHomeRectExtend':'KeyboardCommands',
+    'VCHomeWrap':'KeyboardCommands',
+    'VCHomeWrapExtend':'KeyboardCommands',
+    'VerticalCentreCaret':'KeyboardCommands',
+    'WordLeft':'KeyboardCommands',
+    'WordLeftEnd':'KeyboardCommands',
+    'WordLeftEndExtend':'KeyboardCommands',
+    'WordLeftExtend':'KeyboardCommands',
+    'WordPartLeft':'KeyboardCommands',
+    'WordPartLeftExtend':'KeyboardCommands',
+    'WordPartRight':'KeyboardCommands',
+    'WordPartRightExtend':'KeyboardCommands',
+    'WordRight':'KeyboardCommands',
+    'WordRightEnd':'KeyboardCommands',
+    'WordRightEndExtend':'KeyboardCommands',
+    'WordRightExtend':'KeyboardCommands',
+    'AllocateSubStyles':'Lexer',
+    'ChangeLexerState':'Lexer',
+    'Colourise':'Lexer',
+    'DescribeKeyWordSets':'Lexer',
+    'DescribeProperty':'Lexer',
+    'DistanceToSecondaryStyles':'Lexer',
+    'FreeSubStyles':'Lexer',
+    'GetLexer':'Lexer',
+    'GetLexerLanguage':'Lexer',
+    'GetPrimaryStyleFromStyle':'Lexer',
+    'GetProperty':'Lexer',
+    'GetPropertyExpanded':'Lexer',
+    'GetPropertyInt':'Lexer',
+    'GetStyleFromSubStyle':'Lexer',
+    'GetSubStyleBases':'Lexer',
+    'GetSubStylesLength':'Lexer',
+    'GetSubStylesStart':'Lexer',
+    'LoadLexerLibrary':'Lexer',
+    'PrivateLexerCall':'Lexer',
+    'PropertyNames':'Lexer',
+    'PropertyType':'Lexer',
+    'SetIdentifiers':'Lexer',
+    'SetKeyWords':'Lexer',
+    'SetLexer':'Lexer',
+    'SetLexerLanguage':'Lexer',
+    'SetProperty':'Lexer',
+    'ConvertEOLs':'LineEndings',
+    'GetEOLMode':'LineEndings',
+    'GetLineEndTypesActive':'LineEndings',
+    'GetLineEndTypesAllowed':'LineEndings',
+    'GetLineEndTypesSupported':'LineEndings',
+    'GetViewEOL':'LineEndings',
+    'SetEOLMode':'LineEndings',
+    'SetLineEndTypesAllowed':'LineEndings',
+    'SetViewEOL':'LineEndings',
+    'GetLayoutCache':'LineWrapping',
+    'GetPositionCache':'LineWrapping',
+    'GetWrapIndentMode':'LineWrapping',
+    'GetWrapMode':'LineWrapping',
+    'GetWrapStartIndent':'LineWrapping',
+    'GetWrapVisualFlags':'LineWrapping',
+    'GetWrapVisualFlagsLocation':'LineWrapping',
+    'LinesJoin':'LineWrapping',
+    'LinesSplit':'LineWrapping',
+    'SetPositionCache':'LineWrapping',
+    'SetWrapIndentMode':'LineWrapping',
+    'SetWrapMode':'LineWrapping',
+    'SetWrapStartIndent':'LineWrapping',
+    'SetWrapVisualFlags':'LineWrapping',
+    'SetWrapVisualFlagsLocation':'LineWrapping',
+    'WrapCount':'LineWrapping',
+    'GetEdgeColour':'LongLines',
+    'GetEdgeColumn':'LongLines',
+    'GetEdgeMode':'LongLines',
+    'MultiEdgeAddLine':'LongLines',
+    'MultiEdgeClearAll':'LongLines',
+    'SetEdgeColour':'LongLines',
+    'SetEdgeColumn':'LongLines',
+    'SetEdgeMode':'LongLines',
+    'StartRecord':'MacroRecording',
+    'StopRecord':'MacroRecording',
+    'GetMarginBackN':'Margins',
+    'GetMarginCursorN':'Margins',
+    'GetMarginLeft':'Margins',
+    'GetMarginMaskN':'Margins',
+    'GetMarginOptions':'Margins',
+    'GetMarginRight':'Margins',
+    'GetMargins':'Margins',
+    'GetMarginSensitiveN':'Margins',
+    'GetMarginTypeN':'Margins',
+    'GetMarginWidthN':'Margins',
+    'MarginGetStyle':'Margins',
+    'MarginGetStyleOffset':'Margins',
+    'MarginGetStyles':'Margins',
+    'MarginGetText':'Margins',
+    'MarginSetStyle':'Margins',
+    'MarginSetStyleOffset':'Margins',
+    'MarginSetStyles':'Margins',
+    'MarginSetText':'Margins',
+    'MarginTextClearAll':'Margins',
+    'SetFoldMarginColour':'Margins',
+    'SetFoldMarginHiColour':'Margins',
+    'SetMarginBackN':'Margins',
+    'SetMarginCursorN':'Margins',
+    'SetMarginLeft':'Margins',
+    'SetMarginMaskN':'Margins',
+    'SetMarginOptions':'Margins',
+    'SetMarginRight':'Margins',
+    'SetMargins':'Margins',
+    'SetMarginSensitiveN':'Margins',
+    'SetMarginTypeN':'Margins',
+    'SetMarginWidthN':'Margins',
+    'MarkerAdd':'Markers',
+    'MarkerAddSet':'Markers',
+    'MarkerDefine':'Markers',
+    'MarkerDefinePixmap':'Markers',
+    'MarkerDefineRGBAImage':'Markers',
+    'MarkerDelete':'Markers',
+    'MarkerDeleteAll':'Markers',
+    'MarkerDeleteHandle':'Markers',
+    'MarkerEnableHighlight':'Markers',
+    'MarkerGet':'Markers',
+    'MarkerLineFromHandle':'Markers',
+    'MarkerNext':'Markers',
+    'MarkerPrevious':'Markers',
+    'MarkerSetAlpha':'Markers',
+    'MarkerSetBack':'Markers',
+    'MarkerSetBackSelected':'Markers',
+    'MarkerSetFore':'Markers',
+    'MarkerSymbolDefined':'Markers',
+    'RGBAImageSetHeight':'Markers',
+    'RGBAImageSetScale':'Markers',
+    'RGBAImageSetWidth':'Markers',
+    'GetMouseDownCaptures':'MouseCapture',
+    'GetMouseWheelCaptures':'MouseCapture',
+    'SetMouseDownCaptures':'MouseCapture',
+    'SetMouseWheelCaptures':'MouseCapture',
+    'AddSelection':'MultipleSelectionAndVirtualSpace',
+    'ClearSelections':'MultipleSelectionAndVirtualSpace',
+    'DropSelectionN':'MultipleSelectionAndVirtualSpace',
+    'GetAdditionalCaretFore':'MultipleSelectionAndVirtualSpace',
+    'GetAdditionalCaretsBlink':'MultipleSelectionAndVirtualSpace',
+    'GetAdditionalCaretsVisible':'MultipleSelectionAndVirtualSpace',
+    'GetAdditionalSelAlpha':'MultipleSelectionAndVirtualSpace',
+    'GetAdditionalSelectionTyping':'MultipleSelectionAndVirtualSpace',
+    'GetMainSelection':'MultipleSelectionAndVirtualSpace',
+    'GetMultiPaste':'MultipleSelectionAndVirtualSpace',
+    'GetMultipleSelection':'MultipleSelectionAndVirtualSpace',
+    'GetRectangularSelectionAnchor':'MultipleSelectionAndVirtualSpace',
+    'GetRectangularSelectionAnchorVirtualSpace':'MultipleSelectionAndVirtualSpace',
+    'GetRectangularSelectionCaret':'MultipleSelectionAndVirtualSpace',
+    'GetRectangularSelectionCaretVirtualSpace':'MultipleSelectionAndVirtualSpace',
+    'GetRectangularSelectionModifier':'MultipleSelectionAndVirtualSpace',
+    'GetSelectionEmpty':'MultipleSelectionAndVirtualSpace',
+    'GetSelectionNAnchor':'MultipleSelectionAndVirtualSpace',
+    'GetSelectionNAnchorVirtualSpace':'MultipleSelectionAndVirtualSpace',
+    'GetSelectionNCaret':'MultipleSelectionAndVirtualSpace',
+    'GetSelectionNCaretVirtualSpace':'MultipleSelectionAndVirtualSpace',
+    'GetSelectionNEnd':'MultipleSelectionAndVirtualSpace',
+    'GetSelectionNStart':'MultipleSelectionAndVirtualSpace',
+    'GetSelections':'MultipleSelectionAndVirtualSpace',
+    'GetVirtualSpaceOptions':'MultipleSelectionAndVirtualSpace',
+    'MultipleSelectAddEach':'MultipleSelectionAndVirtualSpace',
+    'MultipleSelectAddNext':'MultipleSelectionAndVirtualSpace',
+    'RotateSelection':'MultipleSelectionAndVirtualSpace',
+    'SetAdditionalCaretFore':'MultipleSelectionAndVirtualSpace',
+    'SetAdditionalCaretsBlink':'MultipleSelectionAndVirtualSpace',
+    'SetAdditionalCaretsVisible':'MultipleSelectionAndVirtualSpace',
+    'SetAdditionalSelAlpha':'MultipleSelectionAndVirtualSpace',
+    'SetAdditionalSelBack':'MultipleSelectionAndVirtualSpace',
+    'SetAdditionalSelectionTyping':'MultipleSelectionAndVirtualSpace',
+    'SetAdditionalSelFore':'MultipleSelectionAndVirtualSpace',
+    'SetMainSelection':'MultipleSelectionAndVirtualSpace',
+    'SetMultiPaste':'MultipleSelectionAndVirtualSpace',
+    'SetMultipleSelection':'MultipleSelectionAndVirtualSpace',
+    'SetRectangularSelectionAnchor':'MultipleSelectionAndVirtualSpace',
+    'SetRectangularSelectionAnchorVirtualSpace':'MultipleSelectionAndVirtualSpace',
+    'SetRectangularSelectionCaret':'MultipleSelectionAndVirtualSpace',
+    'SetRectangularSelectionCaretVirtualSpace':'MultipleSelectionAndVirtualSpace',
+    'SetRectangularSelectionModifier':'MultipleSelectionAndVirtualSpace',
+    'SetSelectionNAnchor':'MultipleSelectionAndVirtualSpace',
+    'SetSelectionNAnchorVirtualSpace':'MultipleSelectionAndVirtualSpace',
+    'SetSelectionNCaret':'MultipleSelectionAndVirtualSpace',
+    'SetSelectionNCaretVirtualSpace':'MultipleSelectionAndVirtualSpace',
+    'SetSelectionNEnd':'MultipleSelectionAndVirtualSpace',
+    'SetSelectionNStart':'MultipleSelectionAndVirtualSpace',
+    'SetVirtualSpaceOptions':'MultipleSelectionAndVirtualSpace',
+    'SwapMainAnchorCaret':'MultipleSelectionAndVirtualSpace',
+    'AddRefDocument':'MultipleViews',
+    'CreateDocument':'MultipleViews',
+    'GetDocPointer':'MultipleViews',
+    'ReleaseDocument':'MultipleViews',
+    'SetDocPointer':'MultipleViews',
+    'GetIdentifier':'Notifications',
+    'GetModEventMask':'Notifications',
+    'GetMouseDwellTime':'Notifications',
+    'SetIdentifier':'Notifications',
+    'SetModEventMask':'Notifications',
+    'SetMouseDwellTime':'Notifications',
+    'GetBufferedDraw':'OtherSettings',
+    'GetCodePage':'OtherSettings',
+    'GetFocus':'OtherSettings',
+    'GetIMEInteraction':'OtherSettings',
+    'GetPhasesDraw':'OtherSettings',
+    'GetTechnology':'OtherSettings',
+    'GetTwoPhaseDraw':'OtherSettings',
+    'SetBufferedDraw':'OtherSettings',
+    'SetCodePage':'OtherSettings',
+    'SetFocus':'OtherSettings',
+    'SetIMEInteraction':'OtherSettings',
+    'SetLayoutCache':'OtherSettings',
+    'SetPhasesDraw':'OtherSettings',
+    'SetTechnology':'OtherSettings',
+    'SetTwoPhaseDraw':'OtherSettings',
+    'GetOvertype':'Overtype',
+    'SetOvertype':'Overtype',
+    'UsePopUp':'PopupEditMenu',
+    'FormatRange':'Printing',
+    'GetPrintColourMode':'Printing',
+    'GetPrintMagnification':'Printing',
+    'GetPrintWrapMode':'Printing',
+    'SetPrintColourMode':'Printing',
+    'SetPrintMagnification':'Printing',
+    'SetPrintWrapMode':'Printing',
+    'GetEndAtLastLine':'ScrollingAndAutomaticScrolling',
+    'GetFirstVisibleLine':'ScrollingAndAutomaticScrolling',
+    'GetHScrollBar':'ScrollingAndAutomaticScrolling',
+    'GetScrollWidth':'ScrollingAndAutomaticScrolling',
+    'GetScrollWidthTracking':'ScrollingAndAutomaticScrolling',
+    'GetVScrollBar':'ScrollingAndAutomaticScrolling',
+    'GetXOffset':'ScrollingAndAutomaticScrolling',
+    'LineScroll':'ScrollingAndAutomaticScrolling',
+    'ScrollCaret':'ScrollingAndAutomaticScrolling',
+    'ScrollRange':'ScrollingAndAutomaticScrolling',
+    'SetEndAtLastLine':'ScrollingAndAutomaticScrolling',
+    'SetFirstVisibleLine':'ScrollingAndAutomaticScrolling',
+    'SetHScrollBar':'ScrollingAndAutomaticScrolling',
+    'SetScrollWidth':'ScrollingAndAutomaticScrolling',
+    'SetScrollWidthTracking':'ScrollingAndAutomaticScrolling',
+    'SetVisiblePolicy':'ScrollingAndAutomaticScrolling',
+    'SetVScrollBar':'ScrollingAndAutomaticScrolling',
+    'SetXCaretPolicy':'ScrollingAndAutomaticScrolling',
+    'SetXOffset':'ScrollingAndAutomaticScrolling',
+    'SetYCaretPolicy':'ScrollingAndAutomaticScrolling',
+    'FindText':'Searching',
+    'GetSearchFlags':'Searching',
+    'GetTag':'Searching',
+    'GetTargetEnd':'Searching',
+    'GetTargetStart':'Searching',
+    'GetTargetText':'Searching',
+    'ReplaceTarget':'Searching',
+    'ReplaceTargetRE':'Searching',
+    'SearchAnchor':'Searching',
+    'SearchInTarget':'Searching',
+    'SearchNext':'Searching',
+    'SearchPrev':'Searching',
+    'SetSearchFlags':'Searching',
+    'SetTargetEnd':'Searching',
+    'SetTargetRange':'Searching',
+    'SetTargetStart':'Searching',
+    'TargetFromSelection':'Searching',
+    'TargetWholeDocument':'Searching',
+    'CharPositionFromPoint':'SelectionAndInformation',
+    'CharPositionFromPointClose':'SelectionAndInformation',
+    'ChooseCaretX':'SelectionAndInformation',
+    'CountCharacters':'SelectionAndInformation',
+    'FindColumn':'SelectionAndInformation',
+    'GetAnchor':'SelectionAndInformation',
+    'GetColumn':'SelectionAndInformation',
+    'GetCurLine':'SelectionAndInformation',
+    'GetCurrentPos':'SelectionAndInformation',
+    'GetLength':'SelectionAndInformation',
+    'GetLineCount':'SelectionAndInformation',
+    'GetLineEndPosition':'SelectionAndInformation',
+    'GetLineSelEndPosition':'SelectionAndInformation',
+    'GetLineSelStartPosition':'SelectionAndInformation',
+    'GetModify':'SelectionAndInformation',
+    'GetMouseSelectionRectangularSwitch':'SelectionAndInformation',
+    'GetSelectionEnd':'SelectionAndInformation',
+    'GetSelectionMode':'SelectionAndInformation',
+    'GetSelectionStart':'SelectionAndInformation',
+    'GetSelText':'SelectionAndInformation',
+    'GetTextLength':'SelectionAndInformation',
+    'GotoLine':'SelectionAndInformation',
+    'GotoPos':'SelectionAndInformation',
+    'HideSelection':'SelectionAndInformation',
+    'LineFromPosition':'SelectionAndInformation',
+    'LineLength':'SelectionAndInformation',
+    'LinesOnScreen':'SelectionAndInformation',
+    'MoveCaretInsideView':'SelectionAndInformation',
+    'MoveSelectedLinesDown':'SelectionAndInformation',
+    'MoveSelectedLinesUp':'SelectionAndInformation',
+    'PointXFromPosition':'SelectionAndInformation',
+    'PositionAfter':'SelectionAndInformation',
+    'PositionBefore':'SelectionAndInformation',
+    'PositionFromLine':'SelectionAndInformation',
+    'PositionFromPoint':'SelectionAndInformation',
+    'PositionFromPointClose':'SelectionAndInformation',
+    'PositionRelative':'SelectionAndInformation',
+    'SelectAll':'SelectionAndInformation',
+    'SelectionIsRectangle':'SelectionAndInformation',
+    'SetAnchor':'SelectionAndInformation',
+    'SetCurrentPos':'SelectionAndInformation',
+    'SetEmptySelection':'SelectionAndInformation',
+    'SetMouseSelectionRectangularSwitch':'SelectionAndInformation',
+    'SetSelectionEnd':'SelectionAndInformation',
+    'SetSelectionMode':'SelectionAndInformation',
+    'SetSelectionStart':'SelectionAndInformation',
+    'TextHeight':'SelectionAndInformation',
+    'TextWidth':'SelectionAndInformation',
+    'StyleClearAll':'StyleDefinition',
+    'StyleGetBack':'StyleDefinition',
+    'StyleGetBold':'StyleDefinition',
+    'StyleGetCase':'StyleDefinition',
+    'StyleGetChangeable':'StyleDefinition',
+    'StyleGetCharacterSet':'StyleDefinition',
+    'StyleGetEOLFilled':'StyleDefinition',
+    'StyleGetFont':'StyleDefinition',
+    'StyleGetFore':'StyleDefinition',
+    'StyleGetHotSpot':'StyleDefinition',
+    'StyleGetItalic':'StyleDefinition',
+    'StyleGetSize':'StyleDefinition',
+    'StyleGetSizeFractional':'StyleDefinition',
+    'StyleGetUnderline':'StyleDefinition',
+    'StyleGetVisible':'StyleDefinition',
+    'StyleGetWeight':'StyleDefinition',
+    'StyleResetDefault':'StyleDefinition',
+    'StyleSetBack':'StyleDefinition',
+    'StyleSetBold':'StyleDefinition',
+    'StyleSetCase':'StyleDefinition',
+    'StyleSetChangeable':'StyleDefinition',
+    'StyleSetCharacterSet':'StyleDefinition',
+    'StyleSetEOLFilled':'StyleDefinition',
+    'StyleSetFont':'StyleDefinition',
+    'StyleSetFore':'StyleDefinition',
+    'StyleSetHotSpot':'StyleDefinition',
+    'StyleSetItalic':'StyleDefinition',
+    'StyleSetSize':'StyleDefinition',
+    'StyleSetSizeFractional':'StyleDefinition',
+    'StyleSetUnderline':'StyleDefinition',
+    'StyleSetVisible':'StyleDefinition',
+    'StyleSetWeight':'StyleDefinition',
+    'GetEndStyled':'Styling',
+    'GetIdleStyling':'Styling',
+    'GetLineState':'Styling',
+    'GetMaxLineState':'Styling',
+    'SetIdleStyling':'Styling',
+    'SetLineState':'Styling',
+    'SetStyling':'Styling',
+    'SetStylingEx':'Styling',
+    'StartStyling':'Styling',
+    'AddTabStop':'TabsAndIndentationGuides',
+    'ClearTabStops':'TabsAndIndentationGuides',
+    'GetBackSpaceUnIndents':'TabsAndIndentationGuides',
+    'GetHighlightGuide':'TabsAndIndentationGuides',
+    'GetIndent':'TabsAndIndentationGuides',
+    'GetIndentationGuides':'TabsAndIndentationGuides',
+    'GetLineIndentation':'TabsAndIndentationGuides',
+    'GetLineIndentPosition':'TabsAndIndentationGuides',
+    'GetNextTabStop':'TabsAndIndentationGuides',
+    'GetTabIndents':'TabsAndIndentationGuides',
+    'GetTabWidth':'TabsAndIndentationGuides',
+    'GetUseTabs':'TabsAndIndentationGuides',
+    'SetBackSpaceUnIndents':'TabsAndIndentationGuides',
+    'SetHighlightGuide':'TabsAndIndentationGuides',
+    'SetIndent':'TabsAndIndentationGuides',
+    'SetIndentationGuides':'TabsAndIndentationGuides',
+    'SetLineIndentation':'TabsAndIndentationGuides',
+    'SetTabIndents':'TabsAndIndentationGuides',
+    'SetTabWidth':'TabsAndIndentationGuides',
+    'SetUseTabs':'TabsAndIndentationGuides',
+    'AddStyledText':'TextRetrievalAndModification',
+    'AddText':'TextRetrievalAndModification',
+    'Allocate':'TextRetrievalAndModification',
+    'AllocateExtendedStyles':'TextRetrievalAndModification',
+    'AppendText':'TextRetrievalAndModification',
+    'ChangeInsertion':'TextRetrievalAndModification',
+    'ClearAll':'TextRetrievalAndModification',
+    'ClearDocumentStyle':'TextRetrievalAndModification',
+    'DeleteRange':'TextRetrievalAndModification',
+    'GetCharAt':'TextRetrievalAndModification',
+    'GetLine':'TextRetrievalAndModification',
+    'GetReadOnly':'TextRetrievalAndModification',
+    'GetStyleAt':'TextRetrievalAndModification',
+    'GetStyledText':'TextRetrievalAndModification',
+    'GetText':'TextRetrievalAndModification',
+    'GetTextRange':'TextRetrievalAndModification',
+    'InsertText':'TextRetrievalAndModification',
+    'ReleaseAllExtendedStyles':'TextRetrievalAndModification',
+    'ReplaceSel':'TextRetrievalAndModification',
+    'SetReadOnly':'TextRetrievalAndModification',
+    'SetSavePoint':'TextRetrievalAndModification',
+    'SetText':'TextRetrievalAndModification',
+    'AddUndoAction':'UndoAndRedo',
+    'BeginUndoAction':'UndoAndRedo',
+    'CanRedo':'UndoAndRedo',
+    'CanUndo':'UndoAndRedo',
+    'EmptyUndoBuffer':'UndoAndRedo',
+    'EndUndoAction':'UndoAndRedo',
+    'GetUndoCollection':'UndoAndRedo',
+    'Redo':'UndoAndRedo',
+    'SetUndoCollection':'UndoAndRedo',
+    'Undo':'UndoAndRedo',
+    'UserListShow':'UserLists',
+    'GetExtraAscent':'WhiteSpace',
+    'GetExtraDescent':'WhiteSpace',
+    'GetTabDrawMode':'WhiteSpace',
+    'GetViewWS':'WhiteSpace',
+    'GetWhitespaceSize':'WhiteSpace',
+    'SetExtraAscent':'WhiteSpace',
+    'SetExtraDescent':'WhiteSpace',
+    'SetTabDrawMode':'WhiteSpace',
+    'SetViewWS':'WhiteSpace',
+    'SetWhitespaceBack':'WhiteSpace',
+    'SetWhitespaceFore':'WhiteSpace',
+    'SetWhitespaceSize':'WhiteSpace',
+    'GetPunctuationChars':'Words',
+    'GetWhitespaceChars':'Words',
+    'GetWordChars':'Words',
+    'IsRangeWord':'Words',
+    'SetCharsDefault':'Words',
+    'SetPunctuationChars':'Words',
+    'SetWhitespaceChars':'Words',
+    'SetWordChars':'Words',
+    'WordEndPosition':'Words',
+    'WordStartPosition':'Words',
+    'GetZoom':'Zooming',
+    'SetZoom':'Zooming',
+    'ZoomIn':'Zooming',
+    'ZoomOut':'Zooming'
+}
+
+
+# A few of docstrings in Scintilla.iface are unsuitable for use with wxSTC.
+# This map can be used to supply alternate docstrings for those items.
+docOverrides = {
+    'ClearRegisteredImages':('Clear all the registered images.',),
+    'RegisterImage':('Register an image for use in autocompletion lists.',),
+
+    'MarkerDefine':
+        ('Set the symbol used for a particular marker number,',
+        'and optionally the fore and background colours.',),
+
+    'MarkerDefinePixmap':('Define a marker from a bitmap',),
+
+    'SetCodePage':
+        ('Set the code page used to interpret the bytes of the document as characters.',),
+
+    'GetXOffset':('Get the xOffset (ie, horizontal scroll position).',),
+    'SetXOffset':('Set the xOffset (ie, horizontal scroll position).',),
+    'GetSelText':('Retrieve the selected text.',),
+
+    'PointXFromPosition':
+        ('Retrieve the point in the window where a position is displayed.',),
+
+    'StyleGetFont':('Get the font facename of a style',),
+    'GetLine':('Retrieve the contents of a line.',),
+    'GetStyledText':('Retrieve a buffer of cells.',),
+    'GetText':('Retrieve all the text in the document.',),
+    'GetTextRange':('Retrieve a range of text.',),
+
+    'GetWordChars':
+        ('Get the set of characters making up words for when moving or selecting by word.',),
+
+    'GetLexerLanguage':('Retrieve the lexing language of the document.',)
+}
+
+
+# This map can be used to change a few words in a docstring to make it
+# consistent with names used by wxSTC.
+#
+# For example {'INVALID_POSITION':'wxSTC_INVALID_POSITION'} will turn the
+# string 'Return INVALID_POSITION if not close to text.'
+# into 'Return wxSTC_INVALID_POSITION if not close to text.'
+#
+docSubstitutions = {
+    'BraceMatch':{'INVALID_POSITION':'wxSTC_INVALID_POSITION'},
+    'GetLineSelEndPosition':{'INVALID_POSITION':'wxSTC_INVALID_POSITION'},
+    'GetLineSelStartPosition':{'INVALID_POSITION':'wxSTC_INVALID_POSITION'},
+    'PositionFromPointClose':{'INVALID_POSITION':'wxSTC_INVALID_POSITION'},
+    'CharPositionFromPointClose':{'INVALID_POSITION':'wxSTC_INVALID_POSITION'},
+
+    'GetRepresentation':{'Result is NUL-terminated.':''},
+    'GetSubStyleBases':{'Result is NUL-terminated.':''},
+    'DescribeProperty':{'Result is NUL-terminated.':''},
+    'GetProperty':{'Result is NUL-terminated.':''},
+    'GetPropertyExpanded':{'Result is NUL-terminated.':''},
+    'GetTag':{'Result is NUL-terminated.':''},
+    'TextWidth':{'NUL terminated text argument.':''},
+    'GetCurLine':{'Result is NUL-terminated.':'',
+        'Returns the index of the caret on the line.':''},
+
+    'DescribeKeyWordSets':{'\\n':'\\\\n','Result is NUL-terminated.':''},
+    'PropertyNames':{'\\n':'\\\\n','Result is NUL-terminated.':''},
+    'ReplaceTargetRE':{'\\d':'\\\\d','\\(':'\\\\(','\\)':'\\\\)'},
+
+    'CallTipUseStyle':{'STYLE_CALLTIP':'wxSTC_STYLE_CALLTIP'},
+    'ChangeInsertion':{'SC_MOD_INSERTCHECK':'wxSTC_MOD_INSERTCHECK'},
+    'GetWrapIndentMode':{'Default is fixed':'Default is wxSTC_WRAPINDENT_FIXED'},
+    'GetTabDrawMode':{'SCTD_*':'wxSTC_TD_*'},
+    'GetViewWS':{'SCWS_*':'wxSTC_WS_*'},
+    'SetCursor':{'SC_CURSOR':'wxSTC_CURSOR'},
+    'SetMarginBackN':{'SC_MARGIN_COLOUR':'wxSTC_MARGIN_COLOUR'},
+    'SetWrapIndentMode':{'Default is fixed':'Default is wxSTC_WRAPINDENT_FIXED'},
+
+    'GetEOLMode':
+        {'CRLF, CR, or LF':'wxSTC_EOL_CRLF, wxSTC_EOL_CR, or wxSTC_EOL_LF'},
+
+    'SetEdgeMode':{'EDGE_LINE':'wxSTC_EDGE_LINE',
+        'EDGE_MULTILINE':'wxSTC_EDGE_MULTILINE',
+        'EDGE_BACKGROUND':'wxSTC_EDGE_BACKGROUND','EDGE_NONE':'wxSTC_EDGE_NONE'},
+
+    'SetPrintWrapMode':
+        {'SC_WRAP_WORD':'wxSTC_WRAP_WORD','SC_WRAP_NONE':'wxSTC_WRAP_NONE'},
+
+    'SetRectangularSelectionModifier':{'SCMOD_CTRL':'wxSTC_KEYMOD_CTRL ',
+        'SCMOD_ALT':'wxSTC_KEYMOD_ALT','SCMOD_SUPER':'wxSTC_KEYMOD_SUPER'},
+
+    'SetSelectionMode':{'SC_SEL_STREAM':'wxSTC_SEL_STREAM',
+        'SC_SEL_RECTANGLE':'wxSTC_SEL_RECTANGLE','SC_SEL_THIN':'wxSTC_SEL_THIN',
+        'SC_SEL_LINES':'wxSTC_SEL_LINES'}
+}
+
+
+# This map can be used to add extended documentation to the interface header.
+extendedDocs = {
+
+    'GetSearchFlags':
+        ('The return value will be a bit list containing one or more of the',
+        '@link wxStyledTextCtrl::wxSTC_FIND_WHOLEWORD wxSTC_FIND_* @endlink constants.',),
+
+    'SetSearchFlags':
+        ('The input should be a bit list containing one or more of the',
+        '@link wxStyledTextCtrl::wxSTC_FIND_WHOLEWORD wxSTC_FIND_* @endlink constants.',),
+
+    'GetStatus':
+        ('The return value will be one of the',
+        '@link wxStyledTextCtrl::wxSTC_STATUS_OK wxSTC_STATUS_* @endlink constants.',),
+
+    'SetStatus':
+        ('The input should be one of the',
+        '@link wxStyledTextCtrl::wxSTC_STATUS_OK wxSTC_STATUS_* @endlink constants.',),
+
+    'GetSelectionMode':
+        ('The return value will be one of the',
+        '@link wxStyledTextCtrl::wxSTC_SEL_STREAM wxSTC_SEL_* @endlink constants.',),
+
+    'GetMultiPaste':
+        ('The return value will be one of the',
+        '@link wxStyledTextCtrl::wxSTC_MULTIPASTE_ONCE wxSTC_MULTIPASTE_* '
+        '@endlink constants.',),
+
+    'SetMultiPaste':
+        ('The input should be one of the',
+        '@link wxStyledTextCtrl::wxSTC_MULTIPASTE_ONCE wxSTC_MULTIPASTE_* '
+        '@endlink constants.',),
+
+    'GetVirtualSpaceOptions':
+        ('The return value will be one of the',
+        '@link wxStyledTextCtrl::wxSTC_VS_NONE wxSTC_VS_* @endlink constants.',),
+
+    'SetVirtualSpaceOptions':
+        ('The input should be one of the',
+        '@link wxStyledTextCtrl::wxSTC_VS_NONE wxSTC_VS_* @endlink constants.',),
+
+    'GetRectangularSelectionModifier':
+        ('The return value will be a bit list containing one or more of the',
+        '@link wxStyledTextCtrl::wxSTC_KEYMOD_NORM wxSTC_KEYMOD_* @endlink constants.',),
+
+    'SetXCaretPolicy':
+        ('The first argument should be a bit list containing one or more of the',
+        '@link wxStyledTextCtrl::wxSTC_CARET_SLOP wxSTC_CARET_* @endlink constants.',),
+
+    'SetYCaretPolicy':
+        ('The first argument should be a bit list containing one or more of the',
+        '@link wxStyledTextCtrl::wxSTC_CARET_SLOP wxSTC_CARET_* @endlink constants.',),
+
+    'SetVisiblePolicy':
+        ('The first argument should be a bit list containing one or more of the',
+        '@link wxStyledTextCtrl::wxSTC_VISIBLE_SLOP wxSTC_VISIBLE_* @endlink constants.',),
+
+    'SetViewWS':
+        ('The input should be one of the',
+        '@link wxStyledTextCtrl::wxSTC_WS_INVISIBLE wxSTC_WS_* @endlink  constants.',),
+
+    'SetTabDrawMode':
+        ('The input should be one of the',
+        '@link wxStyledTextCtrl::wxSTC_TD_LONGARROW wxSTC_TD_* @endlink constants.',),
+
+    'GetCursor':
+        ('The return value will be one of the',
+        '@link wxStyledTextCtrl::wxSTC_CURSORNORMAL wxSTC_CURSOR* @endlink constants.',),
+
+    'SetEOLMode':
+        ('The input should be one of the',
+        '@link wxStyledTextCtrl::wxSTC_EOL_CRLF wxSTC_EOL_* @endlink  constants.',),
+
+    'GetLineEndTypesActive':
+        ('The return value will be one of the',
+        '@link wxStyledTextCtrl::wxSTC_LINE_END_TYPE_DEFAULT wxSTC_LINE_END_TYPE_* '
+        '@endlink constants.',),
+
+    'GetLineEndTypesAllowed':
+        ('The return value will be one of the',
+        '@link wxStyledTextCtrl::wxSTC_LINE_END_TYPE_DEFAULT wxSTC_LINE_END_TYPE_* '
+        '@endlink constants.',),
+
+    'SetLineEndTypesAllowed':
+        ('The input should be one of the',
+        '@link wxStyledTextCtrl::wxSTC_LINE_END_TYPE_DEFAULT '
+        'wxSTC_LINE_END_TYPE_* @endlink constants.',),
+
+   'GetLineEndTypesSupported':
+        ('The return value will be a bit list containing one or more of the',
+        '@link wxStyledTextCtrl::wxSTC_LINE_END_TYPE_DEFAULT '
+        'wxSTC_LINE_END_TYPE_* @endlink constants.',),
+
+    'GetIdleStyling':
+        ('The return value will be one of the',
+        '@link wxStyledTextCtrl::wxSTC_IDLESTYLING_NONE wxSTC_IDLESTYLING_* '
+        '@endlink constants.',),
+
+    'SetIdleStyling':
+        ('The input should be one of the',
+        '@link wxStyledTextCtrl::wxSTC_IDLESTYLING_NONE wxSTC_IDLESTYLING_* '
+        '@endlink constants.',),
+
+    'StyleGetWeight':
+        ('The return value will be an integer that is possibly one of the',
+        '@link wxStyledTextCtrl::wxSTC_WEIGHT_NORMAL wxSTC_WEIGHT_* @endlink constants.',),
+
+    'StyleSetWeight':
+        ('The second argument can be an integer or one of the',
+        '@link wxStyledTextCtrl::wxSTC_WEIGHT_NORMAL wxSTC_WEIGHT_* @endlink constants.',),
+
+    'StyleGetCase':
+        ('The return value will be one of the',
+        '@link wxStyledTextCtrl::wxSTC_CASE_MIXED wxSTC_CASE_* @endlink constants.',),
+
+    'StyleSetCase':
+        ('The second argument should be one of the',
+        '@link wxStyledTextCtrl::wxSTC_CASE_MIXED wxSTC_CASE_* @endlink constants.',),
+
+    'GetCaretStyle':
+        ('The return value will be one of the',
+        '@link wxStyledTextCtrl::wxSTC_CARETSTYLE_INVISIBLE wxSTC_CARETSTYLE_* '
+        '@endlink constants.',),
+
+    'SetCaretStyle':
+        ('The input should be one of the',
+        '@link wxStyledTextCtrl::wxSTC_CARETSTYLE_INVISIBLE wxSTC_CARETSTYLE_* '
+        '@endlink constants.',),
+
+    'GetCaretSticky':
+        ('The return value will be one of the',
+        '@link wxStyledTextCtrl::wxSTC_CARETSTICKY_OFF wxSTC_CARETSTICKY_* '
+        '@endlink constants.',),
+
+    'SetCaretSticky':
+        ('The input should be one of the',
+        '@link wxStyledTextCtrl::wxSTC_CARETSTICKY_OFF wxSTC_CARETSTICKY_* '
+        '@endlink constants.',),
+
+    'GetMarginTypeN':
+        ('The return value will be one of the',
+        '@link wxStyledTextCtrl::wxSTC_MARGIN_SYMBOL wxSTC_MARGIN_* @endlink constants.',),
+
+    'SetMarginTypeN':
+        ('The second argument should be one of the',
+        '@link wxStyledTextCtrl::wxSTC_MARGIN_SYMBOL wxSTC_MARGIN_* @endlink constants.',),
+
+    'GetMarginCursorN':
+        ('The return value will be one of the',
+        '@link wxStyledTextCtrl::wxSTC_CURSORNORMAL wxSTC_CURSOR* @endlink constants.',),
+
+    'SetMarginCursorN':
+        ('The second argument should be one of the',
+        '@link wxStyledTextCtrl::wxSTC_CURSORNORMAL wxSTC_CURSOR* @endlink constants.',),
+
+    'GetMarginOptions':
+        ('The return value will be one of the',
+        '@link wxStyledTextCtrl::wxSTC_MARGINOPTION_NONE wxSTC_MARGINOPTION_* '
+        '@endlink constants.',),
+
+    'SetMarginOptions':
+        ('The input should be one of the',
+        '@link wxStyledTextCtrl::wxSTC_MARGINOPTION_NONE wxSTC_MARGINOPTION_* '
+        '@endlink constants.',),
+
+    'AnnotationGetVisible':
+        ('The return value will be one of the',
+        '@link wxStyledTextCtrl::wxSTC_ANNOTATION_HIDDEN wxSTC_ANNOTATION_* '
+        '@endlink constants.',),
+
+    'AnnotationSetVisible':
+        ('The input should be one of the',
+        '@link wxStyledTextCtrl::wxSTC_ANNOTATION_HIDDEN wxSTC_ANNOTATION_* '
+        '@endlink constants.',),
+
+    'GetPhasesDraw':
+        ('The return value will be one of the',
+        '@link wxStyledTextCtrl::wxSTC_PHASES_ONE wxSTC_PHASES_* @endlink constants.',),
+
+    'SetPhasesDraw':
+        ('The input should be one of the',
+        '@link wxStyledTextCtrl::wxSTC_PHASES_ONE wxSTC_PHASES_* @endlink constants.',),
+
+    'GetTechnology':
+        ('The return value will be one of the',
+        '@link wxStyledTextCtrl::wxSTC_TECHNOLOGY_DEFAULT wxSTC_TECHNOLOGY_* '
+        '@endlink constants.',),
+
+    'SetTechnology':
+        ('The input should be one of the',
+        '@link wxStyledTextCtrl::wxSTC_TECHNOLOGY_DEFAULT wxSTC_TECHNOLOGY_* '
+        '@endlink constants.',),
+
+    'GetIMEInteraction':
+        ('The return value will be one of the',
+        '@link wxStyledTextCtrl::wxSTC_IME_WINDOWED wxSTC_IME_* @endlink constants.',),
+
+    'SetIMEInteraction':
+        ('The input should be one of the',
+        '@link wxStyledTextCtrl::wxSTC_IME_WINDOWED wxSTC_IME_* @endlink constants.',),
+
+    'GetIndentationGuides':
+        ('The return value will be one of the',
+        '@link wxStyledTextCtrl::wxSTC_IV_NONE wxSTC_IV_* @endlink constants.',),
+
+    'SetIndentationGuides':
+        ('The input should be one of the',
+        '@link wxStyledTextCtrl::wxSTC_IV_NONE wxSTC_IV_* @endlink constants.',),
+
+    'MarkerSymbolDefined':
+        ('The return value will be one of the',
+        '@link wxStyledTextCtrl::wxSTC_MARK_CIRCLE wxSTC_MARK_* @endlink constants.',),
+
+    'MarkerDefine':
+        ('The second argument should be one of the',
+        '@link wxStyledTextCtrl::wxSTC_MARK_CIRCLE wxSTC_MARK_* @endlink constants.',),
+
+    'IndicGetStyle':
+        ('The return value will be one of the',
+        '@link wxStyledTextCtrl::wxSTC_INDIC_PLAIN wxSTC_INDIC_* @endlink constants.',),
+
+    'IndicSetStyle':
+        ('The second argument should be one of the',
+        '@link wxStyledTextCtrl::wxSTC_INDIC_PLAIN wxSTC_INDIC_* @endlink constants.',),
+
+    'IndicGetFlags':
+        ('The return value will be a bit list containing one or more of the',
+        '@link wxStyledTextCtrl::wxSTC_INDICFLAG_VALUEFORE wxSTC_INDICFLAG_* '
+        '@endlink constants.',),
+
+    'IndicSetFlags':
+        ('The second argument should be a bit list containing one or more of the',
+        '@link wxStyledTextCtrl::wxSTC_INDICFLAG_VALUEFORE wxSTC_INDICFLAG_* '
+        '@endlink constants.',),
+
+    'AutoCGetCaseInsensitiveBehaviour':
+        ('The return value will be one of the',
+        '@link wxStyledTextCtrl::wxSTC_CASEINSENSITIVEBEHAVIOUR_RESPECTCASE '
+        'wxSTC_CASEINSENSITIVEBEHAVIOUR_* @endlink constants.',),
+
+    'AutoCSetCaseInsensitiveBehaviour':
+        ('The input should be one of the',
+        '@link wxStyledTextCtrl::wxSTC_CASEINSENSITIVEBEHAVIOUR_RESPECTCASE '
+        'wxSTC_CASEINSENSITIVEBEHAVIOUR_* @endlink constants.',),
+
+    'AutoCGetMulti':
+        ('The return value will be one of the',
+        '@link wxStyledTextCtrl::wxSTC_MULTIAUTOC_ONCE wxSTC_MULTIAUTOC_* '
+        '@endlink constants.',),
+
+    'AutoCSetMulti':
+        ('The input should be one of the',
+        '@link wxStyledTextCtrl::wxSTC_MULTIAUTOC_ONCE wxSTC_MULTIAUTOC_* '
+        '@endlink constants.',),
+
+    'AutoCGetOrder':
+        ('The return value will be one of the',
+        '@link wxStyledTextCtrl::wxSTC_ORDER_PRESORTED wxSTC_ORDER_* @endlink constants.',),
+
+    'AutoCSetOrder':
+        ('The input should be one of the',
+        '@link wxStyledTextCtrl::wxSTC_ORDER_PRESORTED wxSTC_ORDER_* @endlink constants.',),
+
+    'GetPrintColourMode':
+        ('The return value will be one of the',
+        '@link wxStyledTextCtrl::wxSTC_PRINT_NORMAL wxSTC_PRINT_* @endlink constants.',),
+
+    'SetPrintColourMode':
+        ('The input should be one of the',
+        '@link wxStyledTextCtrl::wxSTC_PRINT_NORMAL wxSTC_PRINT_* @endlink constants.',),
+
+    'GetPrintWrapMode':
+        ('The return value will be one of the',
+        '@link wxStyledTextCtrl::wxSTC_WRAP_NONE wxSTC_WRAP_* @endlink constants.',),
+
+    'SetFoldFlags':
+        ('The second argument should be a bit list containing one or more of the',
+        '@link wxStyledTextCtrl::wxSTC_FOLDFLAG_LINEBEFORE_EXPANDED '
+        'wxSTC_FOLDFLAG_* @endlink constants.',),
+
+    'GetAutomaticFold':
+        ('The return value will be a bit list containing one or more of the',
+        '@link wxStyledTextCtrl::wxSTC_AUTOMATICFOLD_SHOW '
+        'wxSTC_AUTOMATICFOLD_* @endlink constants.',),
+
+    'SetAutomaticFold':
+        ('The input should be a bit list containing one or more of the',
+        '@link wxStyledTextCtrl::wxSTC_AUTOMATICFOLD_SHOW '
+        'wxSTC_AUTOMATICFOLD_* @endlink constants.',),
+
+    'FoldDisplayTextSetStyle':
+        ('The input should be one of the',
+        '@link wxStyledTextCtrl::wxSTC_FOLDDISPLAYTEXT_HIDDEN '
+        'wxSTC_FOLDDISPLAYTEXT_* @endlink constants.',),
+
+    'GetWrapMode':
+        ('The return value will be one of the',
+        '@link wxStyledTextCtrl::wxSTC_WRAP_NONE wxSTC_WRAP_* @endlink constants.',),
+
+    'SetWrapMode':
+        ('The input should be one of the',
+        '@link wxStyledTextCtrl::wxSTC_WRAP_NONE wxSTC_WRAP_* @endlink constants.',),
+
+    'GetWrapVisualFlags':
+        ('The return value will be a bit list containing one or more of the',
+        '@link wxStyledTextCtrl::wxSTC_WRAPVISUALFLAG_NONE '
+        'wxSTC_WRAPVISUALFLAG_* @endlink constants.',),
+
+    'SetWrapVisualFlags':
+        ('The input should be a bit list containing one or more of the',
+        '@link wxStyledTextCtrl::wxSTC_WRAPVISUALFLAG_NONE '
+        'wxSTC_WRAPVISUALFLAG_* @endlink constants.',),
+
+    'GetWrapVisualFlagsLocation':
+        ('The return value will be a bit list containing one or more of the',
+        '@link wxStyledTextCtrl::wxSTC_WRAPVISUALFLAGLOC_DEFAULT '
+        'wxSTC_WRAPVISUALFLAGLOC_* @endlink constants.',),
+
+    'SetWrapVisualFlagsLocation':
+        ('The input should be a bit list containing one or more of the',
+        '@link wxStyledTextCtrl::wxSTC_WRAPVISUALFLAGLOC_DEFAULT '
+        'wxSTC_WRAPVISUALFLAGLOC_* @endlink constants.',),
+
+    'GetWrapIndentMode':
+        ('The return value will be one of the',
+        '@link wxStyledTextCtrl::wxSTC_WRAPINDENT_FIXED wxSTC_WRAPINDENT_* '
+        '@endlink constants.',),
+
+    'SetWrapIndentMode':
+        ('The input should be one of the',
+        '@link wxStyledTextCtrl::wxSTC_WRAPINDENT_FIXED wxSTC_WRAPINDENT_* '
+        '@endlink constants.',),
+
+    'GetLayoutCache':
+        ('The return value will be one of the',
+        '@link wxStyledTextCtrl::wxSTC_CACHE_NONE wxSTC_CACHE_* @endlink constants.',),
+
+    'SetLayoutCache':
+        ('The input should be one of the',
+        '@link wxStyledTextCtrl::wxSTC_CACHE_NONE wxSTC_CACHE_* @endlink constants.',),
+
+    'GetEdgeMode':
+        ('The return value will be one of the',
+        '@link wxStyledTextCtrl::wxSTC_EDGE_NONE wxSTC_EDGE_* @endlink constants.',),
+
+    'SetEdgeMode':
+        ('The input should be one of the',
+        '@link wxStyledTextCtrl::wxSTC_EDGE_NONE wxSTC_EDGE_* @endlink constants.',),
+
+    'GetLexer':
+        ('The return value will be one of the',
+        '@link wxStyledTextCtrl::wxSTC_LEX_A68K wxSTC_LEX_* @endlink constants.',),
+
+    'SetLexer':
+        ('The input should be one of the',
+        '@link wxStyledTextCtrl::wxSTC_LEX_A68K wxSTC_LEX_* @endlink constants.',),
+
+    'GetModEventMask':
+        ('The return value will wxSTC_MODEVENTMASKALL if all changes generate',
+         'events.  Otherwise it will be a bit list containing one or more of the',
+        '@link wxStyledTextCtrl::wxSTC_MOD_INSERTTEXT wxSTC_MOD_* @endlink constants,',
+        'the @link wxStyledTextCtrl::wxSTC_PERFORMED_REDO wxSTC_PERFORMED_* @endlink constants,',
+        'wxSTC_STARTACTION, wxSTC_MULTILINEUNDOREDO, '
+        'wxSTC_MULTISTEPUNDOREDO, and wxSTC_LASTSTEPINUNDOREDO.',),
+
+    'SetModEventMask':
+        ('The input should be a bit list containing one or more of the',
+        '@link wxStyledTextCtrl::wxSTC_MOD_INSERTTEXT wxSTC_MOD_* @endlink constants,',
+        'the @link wxStyledTextCtrl::wxSTC_PERFORMED_REDO wxSTC_PERFORMED_* @endlink constants,',
+        'wxSTC_STARTACTION, wxSTC_MULTILINEUNDOREDO, '
+        'wxSTC_MULTISTEPUNDOREDO, and wxSTC_LASTSTEPINUNDOREDO.',
+        'The input can also be wxSTC_MODEVENTMASKALL to indicate that all changes',
+        'should generate events.'),
+
+    'GetMouseDwellTime':
+        ('The return value will be a time in milliseconds or wxSTC_TIME_FOREVER.',),
+
+    'SetMouseDwellTime':
+        ('The input should be a time in milliseconds or wxSTC_TIME_FOREVER.',),
+
+    'FindText':
+        ('The fourth argument should be a bit list containing one or more of the',
+        '@link wxStyledTextCtrl::wxSTC_FIND_WHOLEWORD wxSTC_FIND_* @endlink constants.',),
+
+    'AddUndoAction':
+        ('The flags argument can be either 0 or wxSTC_UNDO_MAY_COALESCE.',),
+
+    'AssignCmdKey':
+        ('The second argument should be a bit list containing one or more of the',
+        '@link wxStyledTextCtrl::wxSTC_KEYMOD_NORM wxSTC_KEYMOD_* @endlink constants',
+        'and the third argument should be one of the',
+        '@link wxStyledTextCtrl::wxSTC_CMD_BACKTAB wxSTC_CMD_* @endlink constants.',),
+
+    'ClearCmdKey':
+        ('The second argument should be a bit list containing one or more of the',
+        '@link wxStyledTextCtrl::wxSTC_KEYMOD_NORM wxSTC_KEYMOD_* @endlink constants.'),
+
+    'FoldLine':
+        ('The second argument should be one of the',
+        '@link wxStyledTextCtrl::wxSTC_FOLDACTION_CONTRACT wxSTC_FOLDACTION_* '
+        '@endlink constants.'),
+
+    'FoldChildren':
+        ('The second argument should be one of the',
+        '@link wxStyledTextCtrl::wxSTC_FOLDACTION_CONTRACT wxSTC_FOLDACTION_* '
+        '@endlink constants.'),
+
+    'FoldAll':
+        ('The input should be one of the',
+        '@link wxStyledTextCtrl::wxSTC_FOLDACTION_CONTRACT wxSTC_FOLDACTION_* '
+        '@endlink constants.'),
+
+    'UsePopUp':
+        ('The input should be one of the',
+        '@link wxStyledTextCtrl::wxSTC_POPUP_NEVER wxSTC_POPUP_* @endlink constants.',),
+
+    'PropertyType':
+        ('The return value will be one of the',
+        '@link wxStyledTextCtrl::wxSTC_TYPE_BOOLEAN wxSTC_TYPE_* @endlink constants.',),
+
+    'GetCurLine':
+        ('linePos can optionally be passed in to receive the index of the',
+        'caret on the line.',),
+
+    'StyleSetCharacterSet':
+        ('Converts the Scintilla character set values to a wxFontEncoding.',),
+
+}
+
+
+# This map can be used to add since annotations to the interface header.
+sinceAnnotations= {
+    'AddTabStop':'3.1.0',
+    'AllocateExtendedStyles':'3.1.0',
+    'AllocateSubStyles':'3.1.0',
+    'AutoCGetMulti':'3.1.0',
+    'AutoCGetOrder':'3.1.0',
+    'AutoCSetMulti':'3.1.0',
+    'AutoCSetOrder':'3.1.0',
+    'CallTipPosStart':'3.1.0',
+    'ChangeInsertion':'3.1.0',
+    'ClearRepresentation':'3.1.0',
+    'ClearTabStops':'3.1.0',
+    'DistanceToSecondaryStyles':'3.1.0',
+    'DropSelectionN':'3.1.0',
+    'ExpandChildren':'3.1.0',
+    'FoldAll':'3.1.0',
+    'FoldChildren':'3.1.0',
+    'FoldLine':'3.1.0',
+    'FreeSubStyles':'3.1.0',
+    'GetAutomaticFold':'3.1.0',
+    'GetCaretLineVisibleAlways':'3.1.0',
+    'GetIMEInteraction':'3.1.0',
+    'GetLineEndTypesActive':'3.1.0',
+    'GetLineEndTypesAllowed':'3.1.0',
+    'GetLineEndTypesSupported':'3.1.0',
+    'GetMouseSelectionRectangularSwitch':'3.1.0',
+    'GetNextTabStop':'3.1.0',
+    'GetPhasesDraw':'3.1.0',
+    'GetPrimaryStyleFromStyle':'3.1.0',
+    'GetRepresentation':'3.1.0',
+    'GetSelectionEmpty':'3.1.0',
+    'GetStyleFromSubStyle':'3.1.0',
+    'GetSubStyleBases':'3.1.0',
+    'GetSubStylesLength':'3.1.0',
+    'GetSubStylesStart':'3.1.0',
+    'GetTargetText':'3.1.0',
+    'IndicGetFlags':'3.1.0',
+    'IndicGetHoverFore':'3.1.0',
+    'IndicGetHoverStyle':'3.1.0',
+    'IndicSetFlags':'3.1.0',
+    'IndicSetHoverFore':'3.1.0',
+    'IndicSetHoverStyle':'3.1.0',
+    'PositionRelative':'3.1.0',
+    'ReleaseAllExtendedStyles':'3.1.0',
+    'RGBAImageSetScale':'3.1.0',
+    'ScrollRange':'3.1.0',
+    'SetAutomaticFold':'3.1.0',
+    'SetCaretLineVisibleAlways':'3.1.0',
+    'SetIdentifiers':'3.1.0',
+    'SetIMEInteraction':'3.1.0',
+    'SetLineEndTypesAllowed':'3.1.0',
+    'SetMouseSelectionRectangularSwitch':'3.1.0',
+    'SetPhasesDraw':'3.1.0',
+    'SetRepresentation':'3.1.0',
+    'SetTargetRange':'3.1.0',
+    'VCHomeDisplay':'3.1.0',
+    'VCHomeDisplayExtend':'3.1.0',
+
+    'FoldDisplayTextSetStyle':'3.1.1',
+    'GetDirectFunction':'3.1.1',
+    'GetDirectPointer':'3.1.1',
+    'GetIdleStyling':'3.1.1',
+    'GetLexerLanguage':'3.1.1',
+    'GetMarginBackN':'3.1.1',
+    'GetMargins':'3.1.1',
+    'GetMouseWheelCaptures':'3.1.1',
+    'GetTabDrawMode':'3.1.1',
+    'IsRangeWord':'3.1.1',
+    'LoadLexerLibrary':'3.1.1',
+    'MultiEdgeAddLine':'3.1.1',
+    'MultiEdgeClearAll':'3.1.1',
+    'MultipleSelectAddEach':'3.1.1',
+    'MultipleSelectAddNext':'3.1.1',
+    'SetIdleStyling':'3.1.1',
+    'SetMarginBackN':'3.1.1',
+    'SetMargins':'3.1.1',
+    'SetMouseWheelCaptures':'3.1.1',
+    'SetTabDrawMode':'3.1.1',
+    'TargetWholeDocument':'3.1.1',
+    'ToggleFoldShowText':'3.1.1'
+}
+
+
+#----------------------------------------------------------------------------
+
+def buildDocs(name, docs):
+    docsLong = 0
+
+    # If an item does not have a category or the category to which it is
+    # assigned is not in categoriesList, it will be assigned to 'OtherSettings'
+    if name in docsMap:
+        category = docsMap[name]
+    else:
+        category = 'OtherSettings'
+
+    if category not in [ x for (x,y,z) in categoriesList]:
+        category = 'OtherSettings'
+
+    if name in docOverrides:
+        docs = docOverrides[name]
+
+    if name in docSubstitutions:
+        post = docSubstitutions[name]
+        newdocs = []
+        for d in docs:
+            for x,y in post.items():
+                d=d.replace(x,y)
+            newdocs.append(d)
+        newdocs[:] = [x for x in newdocs if x.strip()!='']
+        docs=tuple(newdocs)
+
+    if name in extendedDocs:
+        docsLong = extendedDocs[name]
+
+    if name in sinceAnnotations:
+        note = ('@since '+sinceAnnotations[name],)
+        if docsLong==0:
+            docsLong = note
+        else:
+            docsLong = docsLong + note
+
+    if category=='DeprecatedMessages':
+        note = ('@deprecated',)
+        if docsLong==0:
+            docsLong = note
+        else:
+            docsLong = docsLong + note
+
+    return category, docs, docsLong
diff --git a/src/stc/gen_iface.py b/src/stc/gen_iface.py
index 0494fff..67a235a 100755
--- a/src/stc/gen_iface.py
+++ b/src/stc/gen_iface.py
@@ -14,6 +14,8 @@
 import sys, string, re, os
 from fileinput import FileInput
 
+sys.dont_write_bytecode = True
+from gen_docs import categoriesList,buildDocs
 
 IFACE         = os.path.abspath('./scintilla/include/Scintilla.iface')
 HDR_SCN       = os.path.abspath('./scintilla/include/Scintilla.h')
@@ -89,7 +91,6 @@ paramTypeMap = {
 #            default name.
 #         2. Method definition for the .h file, 0 to leave alone
 #         3. Method implementation for the .cpp file, 0 to leave alone.
-#         4. tuple of Doc string lines, or 0 to leave alone.
 #
 methodOverrideMap = {
     'AddText' : (0,
@@ -97,38 +98,38 @@ methodOverrideMap = {
 
                  '''void %s(const wxString& text) {
                     const wxWX2MBbuf buf = wx2stc(text);
-                    SendMsg(%s, wx2stclen(text, buf), (sptr_t)(const char*)buf);''',
-                 0),
+                    SendMsg(%s, wx2stclen(text, buf), (sptr_t)(const char*)buf);'''
+                 ),
 
     'AddStyledText' : (0,
                        'void %s(const wxMemoryBuffer& data);',
 
                        '''void %s(const wxMemoryBuffer& data) {
-                          SendMsg(%s, data.GetDataLen(), (sptr_t)data.GetData());''',
-                       0),
+                          SendMsg(%s, data.GetDataLen(), (sptr_t)data.GetData());'''
+                       ),
 
     'AppendText' : (0,
                  'void %s(const wxString& text) wxOVERRIDE;',
 
                  '''void %s(const wxString& text) {
                     const wxWX2MBbuf buf = wx2stc(text);
-                    SendMsg(%s, wx2stclen(text, buf), (sptr_t)(const char*)buf);''',
-                 0),
+                    SendMsg(%s, wx2stclen(text, buf), (sptr_t)(const char*)buf);'''
+                 ),
 
-    'GetViewWS' : ( 'GetViewWhiteSpace', 0, 0, 0),
-    'SetViewWS' : ( 'SetViewWhiteSpace', 0, 0, 0),
+    'GetViewWS' : ( 'GetViewWhiteSpace', 0, 0),
+    'SetViewWS' : ( 'SetViewWhiteSpace', 0, 0),
 
     'GetCharAt' :
     ( 0, 0,
       '''int %s(int pos) const {
-         return (unsigned char)SendMsg(%s, pos, 0);''',
-      0),
+         return (unsigned char)SendMsg(%s, pos, 0);'''
+    ),
 
     'GetStyleAt' :
     ( 0, 0,
       '''int %s(int pos) const {
-         return (unsigned char)SendMsg(%s, pos, 0);''',
-      0),
+         return (unsigned char)SendMsg(%s, pos, 0);'''
+    ),
 
     'GetStyledText' :
     (0,
@@ -149,9 +150,8 @@ methodOverrideMap = {
         tr.chrg.cpMax = endPos;
         len = SendMsg(%s, 0, (sptr_t)&tr);
         buf.UngetWriteBuf(len);
-        return buf;''',
-
-     ('Retrieve a buffer of cells.',)),
+        return buf;'''
+    ),
 
 
     'PositionFromPoint' :
@@ -159,8 +159,8 @@ methodOverrideMap = {
      'int %s(wxPoint pt) const;',
 
      '''int %s(wxPoint pt) const {
-        return SendMsg(%s, pt.x, pt.y);''',
-     0),
+        return SendMsg(%s, pt.x, pt.y);'''
+    ),
 
     'GetCurLine' :
     (0,
@@ -180,15 +180,14 @@ methodOverrideMap = {
         mbuf.UngetWriteBuf(len);
         mbuf.AppendByte(0);
         if (linePos)  *linePos = pos;
-        return stc2wx(buf);''',
-
-     0),
+        return stc2wx(buf);'''
+    ),
 
-    'MarkerSetFore' : ('MarkerSetForeground', 0, 0, 0),
-    'MarkerSetBack' : ('MarkerSetBackground', 0, 0, 0),
-    'MarkerSetBackSelected' : ('MarkerSetBackgroundSelected', 0,0,0),
+    'MarkerSetFore' : ('MarkerSetForeground', 0, 0),
+    'MarkerSetBack' : ('MarkerSetBackground', 0, 0),
+    'MarkerSetBackSelected' : ('MarkerSetBackgroundSelected', 0,0),
 
-    'MarkerSymbolDefined' : ('GetMarkerSymbolDefined', 0, 0, 0),
+    'MarkerSymbolDefined' : ('GetMarkerSymbolDefined', 0, 0),
 
     'MarkerDefine' :
     (0,
@@ -204,10 +203,8 @@ methodOverrideMap = {
                 if (foreground.IsOk())
                     MarkerSetForeground(markerNumber, foreground);
                 if (background.IsOk())
-                    MarkerSetBackground(markerNumber, background);''',
-
-     ('Set the symbol used for a particular marker number,',
-      'and optionally the fore and background colours.')),
+                    MarkerSetBackground(markerNumber, background);'''
+    ),
 
 
     'MarkerDefinePixmap' :
@@ -226,24 +223,24 @@ methodOverrideMap = {
         buff[len] = 0;
         SendMsg(%s, markerNumber, (sptr_t)buff);
         delete [] buff;
-        ''',
-     ('Define a marker from a bitmap',)),
-
-    'GetMargins' : ('GetMarginCount', 0, 0, 0),
-    'SetMargins' : ('SetMarginCount', 0, 0, 0),
-    'GetMarginBackN' : ('GetMarginBackground', 0, 0, 0),
-    'SetMarginBackN' : ('SetMarginBackground', 0, 0, 0),
-    'SetMarginTypeN' : ('SetMarginType', 0, 0, 0),
-    'GetMarginTypeN' : ('GetMarginType', 0, 0, 0),
-    'SetMarginWidthN' : ('SetMarginWidth', 0, 0, 0),
-    'GetMarginWidthN' : ('GetMarginWidth', 0, 0, 0),
-    'SetMarginMaskN' : ('SetMarginMask', 0, 0, 0),
-    'GetMarginMaskN' : ('GetMarginMask', 0, 0, 0),
-    'SetMarginSensitiveN' : ('SetMarginSensitive', 0, 0, 0),
-    'GetMarginSensitiveN' : ('GetMarginSensitive', 0, 0, 0),
-    'SetMarginCursorN' : ('SetMarginCursor', 0, 0, 0),
-    'GetMarginCursorN' : ('GetMarginCursor', 0, 0, 0),
-    
+        '''
+    ),
+
+    'GetMargins' : ('GetMarginCount', 0, 0),
+    'SetMargins' : ('SetMarginCount', 0, 0),
+    'GetMarginBackN' : ('GetMarginBackground', 0, 0),
+    'SetMarginBackN' : ('SetMarginBackground', 0, 0),
+    'SetMarginTypeN' : ('SetMarginType', 0, 0),
+    'GetMarginTypeN' : ('GetMarginType', 0, 0),
+    'SetMarginWidthN' : ('SetMarginWidth', 0, 0),
+    'GetMarginWidthN' : ('GetMarginWidth', 0, 0),
+    'SetMarginMaskN' : ('SetMarginMask', 0, 0),
+    'GetMarginMaskN' : ('GetMarginMask', 0, 0),
+    'SetMarginSensitiveN' : ('SetMarginSensitive', 0, 0),
+    'GetMarginSensitiveN' : ('GetMarginSensitive', 0, 0),
+    'SetMarginCursorN' : ('SetMarginCursor', 0, 0),
+    'GetMarginCursorN' : ('GetMarginCursor', 0, 0),
+
     'MarginGetText' :
     (0,
     'wxString %s(int line) const;',
@@ -257,10 +254,10 @@ methodOverrideMap = {
          SendMsg(msg, line, (sptr_t)buf);
          mbuf.UngetWriteBuf(len);
          mbuf.AppendByte(0);
-         return stc2wx(buf);''',
-     0),
-     
-     'MarginGetStyles' :
+         return stc2wx(buf);'''
+    ),
+
+    'MarginGetStyles' :
      (0,
     'wxString %s(int line) const;',
 
@@ -273,13 +270,13 @@ methodOverrideMap = {
          SendMsg(msg, line, (sptr_t)buf);
          mbuf.UngetWriteBuf(len);
          mbuf.AppendByte(0);
-         return stc2wx(buf);''',
-     0),
+         return stc2wx(buf);'''
+    ),
 
-    'SetAdditionalSelFore' : ('SetAdditionalSelForeground', 0, 0, 0),
-    'SetAdditionalSelBack' : ('SetAdditionalSelBackground', 0, 0, 0),
-    'SetAdditionalCaretFore' : ('SetAdditionalCaretForeground', 0, 0, 0),
-    'GetAdditionalCaretFore' : ('GetAdditionalCaretForeground', 0, 0, 0),
+    'SetAdditionalSelFore' : ('SetAdditionalSelForeground', 0, 0),
+    'SetAdditionalSelBack' : ('SetAdditionalSelBackground', 0, 0),
+    'SetAdditionalCaretFore' : ('SetAdditionalCaretForeground', 0, 0),
+    'GetAdditionalCaretFore' : ('GetAdditionalCaretForeground', 0, 0),
 
     'AnnotationGetText' :
     (0,
@@ -294,8 +291,8 @@ methodOverrideMap = {
          SendMsg(msg, line, (sptr_t)buf);
          mbuf.UngetWriteBuf(len);
          mbuf.AppendByte(0);
-         return stc2wx(buf);''',
-     0),
+         return stc2wx(buf);'''
+    ),
 
     'AnnotationGetStyles' :
     (0,
@@ -310,16 +307,17 @@ methodOverrideMap = {
          SendMsg(msg, line, (sptr_t)buf);
          mbuf.UngetWriteBuf(len);
          mbuf.AppendByte(0);
-         return stc2wx(buf);''',
-     0),
-
-    'StyleGetFore' : ('StyleGetForeground', 0, 0, 0),
-    'StyleGetBack' : ('StyleGetBackground', 0, 0, 0),
-    'StyleSetFore' : ('StyleSetForeground', 0, 0, 0),
-    'StyleSetBack' : ('StyleSetBackground', 0, 0, 0),
-    'SetSelFore' : ('SetSelForeground', 0, 0, 0),
-    'SetSelBack' : ('SetSelBackground', 0, 0, 0),
-    'SetCaretFore' : ('SetCaretForeground', 0, 0, 0),
+         return stc2wx(buf);'''
+    ),
+
+    'StyleGetFore' : ('StyleGetForeground', 0, 0),
+    'StyleGetBack' : ('StyleGetBackground', 0, 0),
+    'StyleSetFore' : ('StyleSetForeground', 0, 0),
+    'StyleSetBack' : ('StyleSetBackground', 0, 0),
+    'SetSelFore' : ('SetSelForeground', 0, 0),
+    'SetSelBack' : ('SetSelBackground', 0, 0),
+    'SetCaretFore' : ('SetCaretForeground', 0, 0),
+
     'StyleGetFont' :
     ('StyleGetFaceName',
      'wxString %s(int style);',
@@ -331,9 +329,10 @@ methodOverrideMap = {
          SendMsg(msg, style, (sptr_t)buf);
          mbuf.UngetWriteBuf(len);
          mbuf.AppendByte(0);
-         return stc2wx(buf);''',
-         ('Get the font facename of a style',)),
-    'StyleSetFont' : ('StyleSetFaceName', 0, 0, 0),
+         return stc2wx(buf);'''
+    ),
+
+    'StyleSetFont' : ('StyleSetFaceName', 0, 0),
 
     'StyleSetCharacterSet' : (0, 0,
     '''void %s(int style, int characterSet) {
@@ -429,17 +428,16 @@ methodOverrideMap = {
         // effective wxFONENCODING_DEFAULT == SC_SHARSET_DEFAULT and so when
         // Scintilla internally uses SC_CHARSET_DEFAULT we will translate it back
         // to wxFONENCODING_DEFAULT in Font::Create.
-        SendMsg(%s, style, encoding+1);''',
-        ('Set the character set of the font in a style.',
-         'Converts the Scintilla character set values to a wxFontEncoding.'),),
+        SendMsg(%s, style, encoding+1);'''
+    ),
 
     'AssignCmdKey' :
     ('CmdKeyAssign',
      'void %s(int key, int modifiers, int cmd);',
 
      '''void %s(int key, int modifiers, int cmd) {
-         SendMsg(%s, MAKELONG(key, modifiers), cmd);''',
-     0),
+         SendMsg(%s, MAKELONG(key, modifiers), cmd);'''
+    ),
 
 
     'ClearCmdKey' :
@@ -447,10 +445,10 @@ methodOverrideMap = {
      'void %s(int key, int modifiers);',
 
      '''void %s(int key, int modifiers) {
-         SendMsg(%s, MAKELONG(key, modifiers));''',
-     0),
+         SendMsg(%s, MAKELONG(key, modifiers));'''
+    ),
 
-    'ClearAllCmdKeys' : ('CmdKeyClearAll', 0, 0, 0),
+    'ClearAllCmdKeys' : ('CmdKeyClearAll', 0, 0),
 
     'StartStyling' :
     (0,
@@ -460,73 +458,73 @@ methodOverrideMap = {
         wxASSERT_MSG(unused==0,
                      "The second argument passed to StartStyling should be 0");
 
-        SendMsg(%s, start, unused);''',
-     0),
+        SendMsg(%s, start, unused);'''
+    ),
 
     'SetStylingEx' :
     ('SetStyleBytes',
      'void %s(int length, char* styleBytes);',
 
      '''void %s(int length, char* styleBytes) {
-        SendMsg(%s, length, (sptr_t)styleBytes);''',
-     0),
-
-
-    'IndicSetAlpha' : ('IndicatorSetAlpha', 0, 0, 0),
-    'IndicGetAlpha' : ('IndicatorGetAlpha', 0, 0, 0),
-    'IndicSetOutlineAlpha' : ('IndicatorSetOutlineAlpha', 0, 0, 0),
-    'IndicGetOutlineAlpha' : ('IndicatorGetOutlineAlpha', 0, 0, 0),
-    'IndicSetStyle' : ('IndicatorSetStyle', 0, 0, 0),
-    'IndicGetStyle' : ('IndicatorGetStyle', 0, 0, 0),
-    'IndicSetFore' : ('IndicatorSetForeground', 0, 0, 0),
-    'IndicGetFore' : ('IndicatorGetForeground', 0, 0, 0),
-    'IndicSetUnder': ('IndicatorSetUnder', 0, 0, 0),
-    'IndicGetUnder': ('IndicatorGetUnder', 0, 0, 0),
-    'IndicSetHoverStyle': ('IndicatorSetHoverStyle', 0, 0, 0),
-    'IndicGetHoverStyle': ('IndicatorGetHoverStyle', 0, 0, 0),
-    'IndicSetHoverFore': ('IndicatorSetHoverForeground', 0, 0, 0),
-    'IndicGetHoverFore': ('IndicatorGetHoverForeground', 0, 0, 0),
-    'IndicSetFlags': ('IndicatorSetFlags', 0, 0, 0),
-    'IndicGetFlags': ('IndicatorGetFlags', 0, 0, 0),
-
-    'SetWhitespaceFore' : ('SetWhitespaceForeground', 0, 0, 0),
-    'SetWhitespaceBack' : ('SetWhitespaceBackground', 0, 0, 0),
-
-    'AutoCShow' : ('AutoCompShow', 0, 0, 0),
-    'AutoCCancel' : ('AutoCompCancel', 0, 0, 0),
-    'AutoCActive' : ('AutoCompActive', 0, 0, 0),
-    'AutoCPosStart' : ('AutoCompPosStart', 0, 0, 0),
-    'AutoCComplete' : ('AutoCompComplete', 0, 0, 0),
-    'AutoCStops' : ('AutoCompStops', 0, 0, 0),
-    'AutoCSetSeparator' : ('AutoCompSetSeparator', 0, 0, 0),
-    'AutoCGetSeparator' : ('AutoCompGetSeparator', 0, 0, 0),
-    'AutoCSelect' : ('AutoCompSelect', 0, 0, 0),
-    'AutoCSetCancelAtStart' : ('AutoCompSetCancelAtStart', 0, 0, 0),
-    'AutoCGetCancelAtStart' : ('AutoCompGetCancelAtStart', 0, 0, 0),
-    'AutoCSetFillUps' : ('AutoCompSetFillUps', 0, 0, 0),
-    'AutoCSetChooseSingle' : ('AutoCompSetChooseSingle', 0, 0, 0),
-    'AutoCGetChooseSingle' : ('AutoCompGetChooseSingle', 0, 0, 0),
-    'AutoCSetIgnoreCase' : ('AutoCompSetIgnoreCase', 0, 0, 0),
-    'AutoCGetIgnoreCase' : ('AutoCompGetIgnoreCase', 0, 0, 0),
-    'AutoCSetAutoHide' : ('AutoCompSetAutoHide', 0, 0, 0),
-    'AutoCGetAutoHide' : ('AutoCompGetAutoHide', 0, 0, 0),
-    'AutoCSetDropRestOfWord' : ('AutoCompSetDropRestOfWord', 0,0,0),
-    'AutoCGetDropRestOfWord' : ('AutoCompGetDropRestOfWord', 0,0,0),
-    'AutoCGetTypeSeparator' : ('AutoCompGetTypeSeparator', 0, 0, 0),
-    'AutoCSetTypeSeparator' : ('AutoCompSetTypeSeparator', 0, 0, 0),
-    'AutoCGetCurrent'       : ('AutoCompGetCurrent', 0, 0, 0),
-    'AutoCGetCurrentText'   : (None, 0, 0, 0),
-    'AutoCSetMaxWidth'      : ('AutoCompSetMaxWidth', 0, 0, 0),
-    'AutoCGetMaxWidth'      : ('AutoCompGetMaxWidth', 0, 0, 0),
-    'AutoCSetMaxHeight'     : ('AutoCompSetMaxHeight', 0, 0, 0),
-    'AutoCGetMaxHeight'     : ('AutoCompGetMaxHeight', 0, 0, 0),
-    'AutoCGetMaxHeight'     : ('AutoCompGetMaxHeight', 0, 0, 0),
-    'AutoCSetCaseInsensitiveBehaviour'     : ('AutoCompSetCaseInsensitiveBehaviour', 0, 0, 0),
-    'AutoCGetCaseInsensitiveBehaviour'     : ('AutoCompGetCaseInsensitiveBehaviour', 0, 0, 0),
-    'AutoCSetMulti'         : ('AutoCompSetMulti', 0, 0, 0),
-    'AutoCGetMulti'         : ('AutoCompGetMulti', 0, 0, 0),
-    'AutoCSetOrder'         : ('AutoCompSetOrder', 0, 0, 0),
-    'AutoCGetOrder'         : ('AutoCompGetOrder', 0, 0, 0),
+        SendMsg(%s, length, (sptr_t)styleBytes);'''
+    ),
+
+
+    'IndicSetAlpha' : ('IndicatorSetAlpha', 0, 0),
+    'IndicGetAlpha' : ('IndicatorGetAlpha', 0, 0),
+    'IndicSetOutlineAlpha' : ('IndicatorSetOutlineAlpha', 0, 0),
+    'IndicGetOutlineAlpha' : ('IndicatorGetOutlineAlpha', 0, 0),
+    'IndicSetStyle' : ('IndicatorSetStyle', 0, 0),
+    'IndicGetStyle' : ('IndicatorGetStyle', 0, 0),
+    'IndicSetFore' : ('IndicatorSetForeground', 0, 0),
+    'IndicGetFore' : ('IndicatorGetForeground', 0, 0),
+    'IndicSetUnder': ('IndicatorSetUnder', 0, 0),
+    'IndicGetUnder': ('IndicatorGetUnder', 0, 0),
+    'IndicSetHoverStyle': ('IndicatorSetHoverStyle', 0, 0),
+    'IndicGetHoverStyle': ('IndicatorGetHoverStyle', 0, 0),
+    'IndicSetHoverFore': ('IndicatorSetHoverForeground', 0, 0),
+    'IndicGetHoverFore': ('IndicatorGetHoverForeground', 0, 0),
+    'IndicSetFlags': ('IndicatorSetFlags', 0, 0),
+    'IndicGetFlags': ('IndicatorGetFlags', 0, 0),
+
+    'SetWhitespaceFore' : ('SetWhitespaceForeground', 0, 0),
+    'SetWhitespaceBack' : ('SetWhitespaceBackground', 0, 0),
+
+    'AutoCShow' : ('AutoCompShow', 0, 0),
+    'AutoCCancel' : ('AutoCompCancel', 0, 0),
+    'AutoCActive' : ('AutoCompActive', 0, 0),
+    'AutoCPosStart' : ('AutoCompPosStart', 0, 0),
+    'AutoCComplete' : ('AutoCompComplete', 0, 0),
+    'AutoCStops' : ('AutoCompStops', 0, 0),
+    'AutoCSetSeparator' : ('AutoCompSetSeparator', 0, 0),
+    'AutoCGetSeparator' : ('AutoCompGetSeparator', 0, 0),
+    'AutoCSelect' : ('AutoCompSelect', 0, 0),
+    'AutoCSetCancelAtStart' : ('AutoCompSetCancelAtStart', 0, 0),
+    'AutoCGetCancelAtStart' : ('AutoCompGetCancelAtStart', 0, 0),
+    'AutoCSetFillUps' : ('AutoCompSetFillUps', 0, 0),
+    'AutoCSetChooseSingle' : ('AutoCompSetChooseSingle', 0, 0),
+    'AutoCGetChooseSingle' : ('AutoCompGetChooseSingle', 0, 0),
+    'AutoCSetIgnoreCase' : ('AutoCompSetIgnoreCase', 0, 0),
+    'AutoCGetIgnoreCase' : ('AutoCompGetIgnoreCase', 0, 0),
+    'AutoCSetAutoHide' : ('AutoCompSetAutoHide', 0, 0),
+    'AutoCGetAutoHide' : ('AutoCompGetAutoHide', 0, 0),
+    'AutoCSetDropRestOfWord' : ('AutoCompSetDropRestOfWord', 0,0),
+    'AutoCGetDropRestOfWord' : ('AutoCompGetDropRestOfWord', 0,0),
+    'AutoCGetTypeSeparator' : ('AutoCompGetTypeSeparator', 0, 0),
+    'AutoCSetTypeSeparator' : ('AutoCompSetTypeSeparator', 0, 0),
+    'AutoCGetCurrent'       : ('AutoCompGetCurrent', 0, 0),
+    'AutoCGetCurrentText'   : (None, 0, 0),
+    'AutoCSetMaxWidth'      : ('AutoCompSetMaxWidth', 0, 0),
+    'AutoCGetMaxWidth'      : ('AutoCompGetMaxWidth', 0, 0),
+    'AutoCSetMaxHeight'     : ('AutoCompSetMaxHeight', 0, 0),
+    'AutoCGetMaxHeight'     : ('AutoCompGetMaxHeight', 0, 0),
+    'AutoCGetMaxHeight'     : ('AutoCompGetMaxHeight', 0, 0),
+    'AutoCSetCaseInsensitiveBehaviour'     : ('AutoCompSetCaseInsensitiveBehaviour', 0, 0),
+    'AutoCGetCaseInsensitiveBehaviour'     : ('AutoCompGetCaseInsensitiveBehaviour', 0, 0),
+    'AutoCSetMulti'         : ('AutoCompSetMulti', 0, 0),
+    'AutoCGetMulti'         : ('AutoCompGetMulti', 0, 0),
+    'AutoCSetOrder'         : ('AutoCompSetOrder', 0, 0),
+    'AutoCGetOrder'         : ('AutoCompGetOrder', 0, 0),
 
     'RegisterImage' :
     (0,
@@ -544,21 +542,16 @@ methodOverrideMap = {
         buff[len] = 0;
         SendMsg(%s, type, (sptr_t)buff);
         delete [] buff;
-     ''',
-     ('Register an image for use in autocompletion lists.',)),
-
-
-    'ClearRegisteredImages' : (0, 0, 0,
-                               ('Clear all the registered images.',)),
-
+     '''
+    ),
 
-    'SetHScrollBar' : ('SetUseHorizontalScrollBar', 0, 0, 0),
-    'GetHScrollBar' : ('GetUseHorizontalScrollBar', 0, 0, 0),
+    'SetHScrollBar' : ('SetUseHorizontalScrollBar', 0, 0),
+    'GetHScrollBar' : ('GetUseHorizontalScrollBar', 0, 0),
 
-    'SetVScrollBar' : ('SetUseVerticalScrollBar', 0, 0, 0),
-    'GetVScrollBar' : ('GetUseVerticalScrollBar', 0, 0, 0),
+    'SetVScrollBar' : ('SetUseVerticalScrollBar', 0, 0),
+    'GetVScrollBar' : ('GetUseVerticalScrollBar', 0, 0),
 
-    'GetCaretFore' : ('GetCaretForeground', 0, 0, 0),
+    'GetCaretFore' : ('GetCaretForeground', 0, 0),
 
     'FindText' :
     (0,
@@ -573,8 +566,8 @@ methodOverrideMap = {
             const wxWX2MBbuf buf = wx2stc(text);
             ft.lpstrText = (char*)(const char*)buf;
 
-            return SendMsg(%s, flags, (sptr_t)&ft);''',
-     0),
+            return SendMsg(%s, flags, (sptr_t)&ft);'''
+    ),
 
     'FormatRange' :
     (0,
@@ -612,8 +605,8 @@ methodOverrideMap = {
              fr.chrg.cpMin = startPos;
              fr.chrg.cpMax = endPos;
 
-             return SendMsg(%s, doDraw, (sptr_t)&fr);''',
-     0),
+             return SendMsg(%s, doDraw, (sptr_t)&fr);'''
+    ),
 
 
     'GetLine' :
@@ -629,11 +622,10 @@ methodOverrideMap = {
          SendMsg(%s, line, (sptr_t)buf);
          mbuf.UngetWriteBuf(len);
          mbuf.AppendByte(0);
-         return stc2wx(buf);''',
-
-     ('Retrieve the contents of a line.',)),
+         return stc2wx(buf);'''
+    ),
 
-    'SetSel' : (None, 0,0,0), #'SetSelection', 0, 0, 0),
+    'SetSel' : (None, 0,0), #'SetSelection', 0, 0, 0),
 
     'GetSelText' :
     ('GetSelectedText',
@@ -648,10 +640,8 @@ methodOverrideMap = {
          SendMsg(%s, 0, (sptr_t)buf);
          mbuf.UngetWriteBuf(len);
          mbuf.AppendByte(0);
-         return stc2wx(buf);''',
-
-     ('Retrieve the selected text.',)),
-
+         return stc2wx(buf);'''
+    ),
 
     'GetTextRange' :
     (0,
@@ -674,9 +664,8 @@ methodOverrideMap = {
          SendMsg(%s, 0, (sptr_t)&tr);
          mbuf.UngetWriteBuf(len);
          mbuf.AppendByte(0);
-         return stc2wx(buf);''',
-
-     ('Retrieve a range of text.',)),
+         return stc2wx(buf);'''
+    ),
 
     'PointXFromPosition' :
     ('PointFromPosition',
@@ -684,14 +673,14 @@ methodOverrideMap = {
      '''wxPoint %s(int pos) {
          int x = SendMsg(%s, 0, pos);
          int y = SendMsg(SCI_POINTYFROMPOSITION, 0, pos);
-         return wxPoint(x, y);''',
-     ('Retrieve the point in the window where a position is displayed.',)),
+         return wxPoint(x, y);'''
+    ),
 
-    'PointYFromPosition' : (None, 0, 0, 0),
+    'PointYFromPosition' : (None, 0, 0),
 
-    'ScrollCaret' : ('EnsureCaretVisible', 0, 0, 0),
-    'ReplaceSel' : ('ReplaceSelection', 0, 0, 0),
-    'Null' : (None, 0, 0, 0),
+    'ScrollCaret' : ('EnsureCaretVisible', 0, 0),
+    'ReplaceSel' : ('ReplaceSelection', 0, 0),
+    'Null' : (None, 0, 0),
 
     'GetText' :
     (0,
@@ -704,23 +693,22 @@ methodOverrideMap = {
          SendMsg(%s, len+1, (sptr_t)buf);
          mbuf.UngetWriteBuf(len);
          mbuf.AppendByte(0);
-         return stc2wx(buf);''',
-
-     ('Retrieve all the text in the document.', )),
+         return stc2wx(buf);'''
+    ),
 
     'GetDirectFunction' :
     (0,
      'void* %s() const;',
      '''void* %s() const {
-         return (void*)SendMsg(%s);''',
-     0),
+         return (void*)SendMsg(%s);'''
+    ),
 
     'GetDirectPointer' :
     (0,
      'void* %s() const;',
      '''void* %s() const {
-         return (void*)SendMsg(%s);''',
-     0),
+         return (void*)SendMsg(%s);'''
+    ),
 
     'GetTargetText' :
     (0,
@@ -734,24 +722,23 @@ methodOverrideMap = {
          SendMsg(%s, 0, (sptr_t)buf);
          mbuf.UngetWriteBuf(endPos-startPos);
          mbuf.AppendByte(0);
-         return stc2wx(buf);''',
+         return stc2wx(buf);'''
+    ),
 
-     0),
+    'CallTipPosStart'   : ('CallTipPosAtStart', 0, 0),
+    'CallTipSetPosStart': ('CallTipSetPosAtStart', 0, 0),
+    'CallTipSetHlt'     : ('CallTipSetHighlight', 0, 0),
+    'CallTipSetBack'    : ('CallTipSetBackground', 0, 0),
+    'CallTipSetFore'    : ('CallTipSetForeground', 0, 0),
+    'CallTipSetForeHlt' : ('CallTipSetForegroundHighlight', 0, 0),
 
-    'CallTipPosStart'   : ('CallTipPosAtStart', 0, 0, 0),
-    'CallTipSetPosStart': ('CallTipSetPosAtStart', 0, 0, 0),
-    'CallTipSetHlt'     : ('CallTipSetHighlight', 0, 0, 0),
-    'CallTipSetBack'    : ('CallTipSetBackground', 0, 0, 0),
-    'CallTipSetFore'    : ('CallTipSetForeground', 0, 0, 0),
-    'CallTipSetForeHlt' : ('CallTipSetForegroundHighlight', 0, 0, 0),
+    'SetHotspotActiveFore' : ('SetHotspotActiveForeground', 0, 0),
+    'SetHotspotActiveBack' : ('SetHotspotActiveBackground', 0, 0),
+    'GetHotspotActiveFore' : ('GetHotspotActiveForeground', 0, 0),
+    'GetHotspotActiveBack' : ('GetHotspotActiveBackground', 0, 0),
 
-    'SetHotspotActiveFore' : ('SetHotspotActiveForeground', 0, 0, 0),
-    'SetHotspotActiveBack' : ('SetHotspotActiveBackground', 0, 0, 0),
-    'GetHotspotActiveFore' : ('GetHotspotActiveForeground', 0, 0, 0),
-    'GetHotspotActiveBack' : ('GetHotspotActiveBackground', 0, 0, 0),
-
-    'GetCaretLineBack' : ('GetCaretLineBackground', 0, 0, 0),
-    'SetCaretLineBack' : ('SetCaretLineBackground', 0, 0, 0),
+    'GetCaretLineBack' : ('GetCaretLineBackground', 0, 0),
+    'SetCaretLineBack' : ('SetCaretLineBackground', 0, 0),
 
     'ReplaceTarget' :
     (0,
@@ -760,8 +747,8 @@ methodOverrideMap = {
      '''
      int %s(const wxString& text) {
          const wxWX2MBbuf buf = wx2stc(text);
-         return SendMsg(%s, wx2stclen(text, buf), (sptr_t)(const char*)buf);''',
-     0),
+         return SendMsg(%s, wx2stclen(text, buf), (sptr_t)(const char*)buf);'''
+    ),
 
     'ReplaceTargetRE' :
     (0,
@@ -770,13 +757,8 @@ methodOverrideMap = {
      '''
      int %s(const wxString& text) {
          const wxWX2MBbuf buf = wx2stc(text);
-         return SendMsg(%s, wx2stclen(text, buf), (sptr_t)(const char*)buf);''',
-     ('Replace the target text with the argument text after \\\d processing.',
-      'Text is counted so it can contain NULs.',
-      'Looks for \\\d where d is between 1 and 9 and replaces these with the strings',
-      'matched in the last search operation which were surrounded by \( and \).',
-      'Returns the length of the replacement text including any change',
-      'caused by processing the \\\d patterns.',)),
+         return SendMsg(%s, wx2stclen(text, buf), (sptr_t)(const char*)buf);'''
+    ),
 
     'SearchInTarget' :
     (0,
@@ -785,13 +767,13 @@ methodOverrideMap = {
      '''
      int %s(const wxString& text) {
          const wxWX2MBbuf buf = wx2stc(text);
-         return SendMsg(%s, wx2stclen(text, buf), (sptr_t)(const char*)buf);''',
-     0),
+         return SendMsg(%s, wx2stclen(text, buf), (sptr_t)(const char*)buf);'''
+    ),
 
     # not sure what to do about these yet
-    'TargetAsUTF8' :       ( None, 0, 0, 0),
-    'SetLengthForEncode' : ( None, 0, 0, 0),
-    'EncodedFromUTF8' :    ( None, 0, 0, 0),
+    'TargetAsUTF8' :       ( None, 0, 0),
+    'SetLengthForEncode' : ( None, 0, 0),
+    'EncodedFromUTF8' :    ( None, 0, 0),
 
 
     'GetProperty' :
@@ -807,8 +789,8 @@ methodOverrideMap = {
          SendMsg(%s, (uptr_t)(const char*)wx2stc(key), (sptr_t)buf);
          mbuf.UngetWriteBuf(len);
          mbuf.AppendByte(0);
-         return stc2wx(buf);''',
-     ("Retrieve a 'property' value previously set with SetProperty.",)),
+         return stc2wx(buf);'''
+    ),
 
     'GetPropertyExpanded' :
     (0,
@@ -823,17 +805,15 @@ methodOverrideMap = {
          SendMsg(%s, (uptr_t)(const char*)wx2stc(key), (sptr_t)buf);
          mbuf.UngetWriteBuf(len);
          mbuf.AppendByte(0);
-         return stc2wx(buf);''',
-     ("Retrieve a 'property' value previously set with SetProperty,",
-      "with '$()' variable replacement on returned buffer.")),
+         return stc2wx(buf);'''
+    ),
 
     'GetPropertyInt' :
     (0,
     'int %s(const wxString &key, int defaultValue=0) const;',
     '''int %s(const wxString &key, int defaultValue) const {
-        return SendMsg(%s, (uptr_t)(const char*)wx2stc(key), defaultValue);''',
-       ("Retrieve a 'property' value previously set with SetProperty,",
-        "interpreted as an int AFTER any '$()' variable replacement.")),
+        return SendMsg(%s, (uptr_t)(const char*)wx2stc(key), defaultValue);'''
+    ),
 
     'BraceMatch' :
     (0,
@@ -842,43 +822,43 @@ methodOverrideMap = {
         wxASSERT_MSG(maxReStyle==0,
                      "The second argument passed to BraceMatch should be 0");
 
-        return SendMsg(%s, pos, maxReStyle);''',
-     0),
+        return SendMsg(%s, pos, maxReStyle);'''
+    ),
 
     'GetDocPointer' :
     (0,
      'void* %s();',
      '''void* %s() {
-         return (void*)SendMsg(%s);''',
-     0),
+         return (void*)SendMsg(%s);'''
+    ),
 
     'SetDocPointer' :
     (0,
      'void %s(void* docPointer);',
      '''void %s(void* docPointer) {
-         SendMsg(%s, 0, (sptr_t)docPointer);''',
-     0),
+         SendMsg(%s, 0, (sptr_t)docPointer);'''
+    ),
 
     'CreateDocument' :
     (0,
      'void* %s();',
      '''void* %s() {
-         return (void*)SendMsg(%s);''',
-     0),
+         return (void*)SendMsg(%s);'''
+    ),
 
     'AddRefDocument' :
     (0,
      'void %s(void* docPointer);',
      '''void %s(void* docPointer) {
-         SendMsg(%s, 0, (sptr_t)docPointer);''',
-     0),
+         SendMsg(%s, 0, (sptr_t)docPointer);'''
+    ),
 
     'ReleaseDocument' :
     (0,
      'void %s(void* docPointer);',
      '''void %s(void* docPointer) {
-         SendMsg(%s, 0, (sptr_t)docPointer);''',
-     0),
+         SendMsg(%s, 0, (sptr_t)docPointer);'''
+    ),
 
     'SetCodePage' :
     (0,
@@ -891,20 +871,20 @@ methodOverrideMap = {
     wxASSERT_MSG(codePage != wxSTC_CP_UTF8,
                  wxT("wxSTC_CP_UTF8 may not be used when wxUSE_UNICODE is off."));
 #endif
-    SendMsg(%s, codePage);''',
-     ("Set the code page used to interpret the bytes of the document as characters.",) ),
+    SendMsg(%s, codePage);'''
+    ),
 
 
-    'GrabFocus' : (None, 0, 0, 0),
+    'GrabFocus' : (None, 0, 0),
 
     # Rename some that would otherwise hide the wxWindow methods
-    'SetFocus'  : ('SetSTCFocus', 0, 0, 0),
-    'GetFocus'  : ('GetSTCFocus', 0, 0, 0),
-    'SetCursor' : ('SetSTCCursor', 0, 0, 0),
-    'GetCursor' : ('GetSTCCursor', 0, 0, 0),
+    'SetFocus'  : ('SetSTCFocus', 0, 0),
+    'GetFocus'  : ('GetSTCFocus', 0, 0),
+    'SetCursor' : ('SetSTCCursor', 0, 0),
+    'GetCursor' : ('GetSTCCursor', 0, 0),
 
-    'SetPositionCache' : ('SetPositionCacheSize', 0, 0, 0),
-    'GetPositionCache' : ('GetPositionCacheSize', 0, 0, 0),
+    'SetPositionCache' : ('SetPositionCacheSize', 0, 0),
+    'GetPositionCache' : ('GetPositionCacheSize', 0, 0),
 
     'GetLexerLanguage' :(0,
      'wxString %s() const;',
@@ -919,26 +899,24 @@ methodOverrideMap = {
          SendMsg(msg, 0, (sptr_t)buf);
          mbuf.UngetWriteBuf(len);
          mbuf.AppendByte(0);
-         return stc2wx(buf);''',
-
-         ('Retrieve the lexing language of the document.',)),
+         return stc2wx(buf);'''
+    ),
 
-    'SetFontQuality' : (None, 0, 0, 0),
-    'GetFontQuality' : (None, 0, 0, 0),
-    'SetSelection' : (None, 0, 0, 0),
+    'SetFontQuality' : (None, 0, 0),
+    'GetFontQuality' : (None, 0, 0),
+    'SetSelection' : (None, 0, 0),
 
     'GetCharacterPointer' : (0,
                              'const char* %s() const;',
                              'const char* %s() const {\n'
-                             '    return (const char*)SendMsg(%s, 0, 0);',
-                             0),
-    
+                             '    return (const char*)SendMsg(%s, 0, 0);'
+                            ),
+
     'GetRangePointer' : (0,
                              'const char* %s(int position, int rangeLength) const;',
                              'const char* %s(int position, int rangeLength) const {\n'
-                             '    return (const char*)SendMsg(%s, position, rangeLength);',
-                             0),
-    
+                             '    return (const char*)SendMsg(%s, position, rangeLength);'
+                        ),
 
     'GetWordChars' :
     (0,
@@ -954,9 +932,8 @@ methodOverrideMap = {
          SendMsg(msg, 0, (sptr_t)buf);
          mbuf.UngetWriteBuf(len);
          mbuf.AppendByte(0);
-         return stc2wx(buf);''',
-
-     ('Get the set of characters making up words for when moving or selecting by word.',)),
+         return stc2wx(buf);'''
+    ),
 
     'GetTag' :
     (0,
@@ -972,8 +949,8 @@ methodOverrideMap = {
          SendMsg(msg, tagNumber, (sptr_t)buf);
          mbuf.UngetWriteBuf(len);
          mbuf.AppendByte(0);
-         return stc2wx(buf);''',
-     0),
+         return stc2wx(buf);'''
+    ),
 
     'GetWhitespaceChars' :
     (0,
@@ -989,8 +966,8 @@ methodOverrideMap = {
          SendMsg(msg, 0, (sptr_t)buf);
          mbuf.UngetWriteBuf(len);
          mbuf.AppendByte(0);
-         return stc2wx(buf);''',
-     0),
+         return stc2wx(buf);'''
+    ),
 
 
     'GetPunctuationChars' :
@@ -1007,8 +984,8 @@ methodOverrideMap = {
          SendMsg(msg, 0, (sptr_t)buf);
          mbuf.UngetWriteBuf(len);
          mbuf.AppendByte(0);
-         return stc2wx(buf);''',
-     0),
+         return stc2wx(buf);'''
+    ),
 
 
     'PropertyNames' :
@@ -1025,8 +1002,8 @@ methodOverrideMap = {
          SendMsg(msg, 0, (sptr_t)buf);
          mbuf.UngetWriteBuf(len);
          mbuf.AppendByte(0);
-         return stc2wx(buf);''',
-     0),
+         return stc2wx(buf);'''
+    ),
 
 
 
@@ -1044,8 +1021,8 @@ methodOverrideMap = {
          SendMsg(msg, (sptr_t)(const char*)wx2stc(name), (sptr_t)buf);
          mbuf.UngetWriteBuf(len);
          mbuf.AppendByte(0);
-         return stc2wx(buf);''',
-     0),
+         return stc2wx(buf);'''
+    ),
 
 
 
@@ -1063,38 +1040,37 @@ methodOverrideMap = {
          SendMsg(msg, 0, (sptr_t)buf);
          mbuf.UngetWriteBuf(len);
          mbuf.AppendByte(0);
-         return stc2wx(buf);''',
-     0),
-     
+         return stc2wx(buf);'''
+    ),
 
     'MarkerDefineRGBAImage' :
     (0,
     'void %s(int markerNumber, const unsigned char* pixels);',
     '''void %s(int markerNumber, const unsigned char* pixels) {
-           SendMsg(%s, markerNumber, (sptr_t)pixels);''',
-    0),
+           SendMsg(%s, markerNumber, (sptr_t)pixels);'''
+    ),
 
 
     'RegisterRGBAImage' :
     (0,
     'void %s(int type, const unsigned char* pixels);',
     '''void %s(int type, const unsigned char* pixels) {
-           SendMsg(%s, type, (sptr_t)pixels);''',
-    0),
+           SendMsg(%s, type, (sptr_t)pixels);'''
+    ),
 
 
     # I think these are only available on the native OSX backend, so
     # don't add them to the wx API...
-    'FindIndicatorShow' : (None, 0,0,0),
-    'FindIndicatorFlash' : (None, 0,0,0),
-    'FindIndicatorHide' : (None, 0,0,0),
+    'FindIndicatorShow' : (None, 0,0),
+    'FindIndicatorFlash' : (None, 0,0),
+    'FindIndicatorHide' : (None, 0,0),
 
     'CreateLoader' :
     (0,
      'void* %s(int bytes) const;',
      """void* %s(int bytes) const {
-         return (void*)(sptr_t)SendMsg(%s, bytes); """,
-     0),
+         return (void*)(sptr_t)SendMsg(%s, bytes); """
+    ),
 
     'GetRepresentation' :
     (0,
@@ -1109,19 +1085,15 @@ methodOverrideMap = {
          SendMsg(msg, (sptr_t)(const char*)wx2stc(encodedCharacter), (sptr_t)buf);
          mbuf.UngetWriteBuf(len);
          mbuf.AppendByte(0);
-         return stc2wx(buf);''',
-     0),
+         return stc2wx(buf);'''
+    ),
 
      'PrivateLexerCall' :
      (0,
       'void* %s(int operation, void* pointer);',
       """void* %s(int operation, void* pointer) {
-           return (void*)(sptr_t)SendMsg(%s, operation, (sptr_t)pointer); """,
-      0),
-      
-    'GetMultiPaste' : 
-    (0, 0, 0, 
-    ('Retrieve the effect of pasting when there are multiple selections.',)),
+           return (void*)(sptr_t)SendMsg(%s, operation, (sptr_t)pointer); """
+     ),
 
     'GetSubStyleBases' :
     (0,
@@ -1136,10 +1108,10 @@ methodOverrideMap = {
          SendMsg(msg, 0, (sptr_t)buf);
          mbuf.UngetWriteBuf(len);
          mbuf.AppendByte(0);
-         return stc2wx(buf);''',
-     0),
-    
-    '' : ('', 0, 0, 0),
+         return stc2wx(buf);'''
+    ),
+
+    '' : ('', 0, 0),
 
     }
 
@@ -1215,6 +1187,16 @@ def processIface(iface, h_tmplt, cpp_tmplt, ih_tmplt, h_dest, cpp_dest, docstr_d
         else:
             print('***** Unknown line type: %s' % line)
 
+    # build the items for the table of contents in the interface header
+    tableitems=''
+    firstitem=True
+    for category, title, description  in categoriesList:
+        if firstitem:
+            firstitem=False
+        else:
+            tableitems+='\n'
+        tableitems+='    - @ref_member_group{'+category+', '+title+'}'
+
     # process templates
     data = {}
     data['VALUES'] = processVals(values)
@@ -1223,6 +1205,7 @@ def processIface(iface, h_tmplt, cpp_tmplt, ih_tmplt, h_dest, cpp_dest, docstr_d
     data['METHOD_DEFS'] = defs
     data['METHOD_IDEFS'] = idefs
     data['METHOD_IMPS'] = imps
+    data['TABLE_OF_CONTENTS'] = tableitems
 
     # get template text
     h_text = open(h_tmplt).read()
@@ -1288,16 +1271,23 @@ def processMethods(methods):
     idefs = []
     imps = []
     dstr = []
+    piecesForInterface = {}
 
-    for retType, name, number, param1, param2, docs, is_const, is_override in methods:
+    # Initialize each of the piecesForInterface with an empty list
+    for c in categoriesList:
+        piecesForInterface[c[0]]=[]
+
+    for retType, interfName, number, param1, param2, docs, is_const, is_override in methods:
         retType = retTypeMap.get(retType, retType)
         params = makeParamString(param1, param2)
 
-        name, theDef, theImp, docs = checkMethodOverride(name, number, docs)
+        name, theDef, theImp = checkMethodOverride(interfName, number)
 
         if name is None:
             continue
 
+        category, docs, docsLong = buildDocs(interfName, docs)
+
         # Build docstrings
         st = 'DocStr(wxStyledTextCtrl::%s,\n' \
              '"%s", "");\n' % (name, joinWithNewLines(docs))
@@ -1322,17 +1312,29 @@ def processMethods(methods):
           theDef = theDef.replace(' wxOVERRIDE', '')
 
         # Build the method definition for the interface .h file
+        intrflines = []
         if docs:
-            idefs.append('')
-            idefs.append('    /**')
+            intrflines.append('')
+            intrflines.append('    /**')
             for x in docs:
-                idefs.append('        ' + x)
-            idefs.append('    */')
+                intrflines.append('        ' + x)
+
+            if docsLong != 0:
+                intrflines.append('')
+                for y in docsLong:
+                    intrflines.append('        ' + y)
+            intrflines.append('    */')
+        else:
+            print('warning: ' + name + ' is undocumented.')
+
         if name == 'GetCurLine':
-            idefs.append('    wxString GetCurLine(int* linePos=NULL);')
+            intrflines.append('    wxString GetCurLine(int* linePos=NULL);')
         else:
-            idefs.append(theDef)
-                     
+            intrflines.append(theDef)
+
+        piecesForInterface[category]+=intrflines
+
+
         # Build the method implementation string
         if docs:
             imps.append('')
@@ -1358,13 +1360,29 @@ def processMethods(methods):
             theImp = theImp + ';\n}'
         imps.append(theImp)
 
+    # For the interface file, merge all the pieces into one list
+    for c in categoriesList:
+        idefs.append('')
+        idefs.append('    /**')
+        idefs.append('        @member_group_name{' + c[0] + ', ' + c[1] + '}')
 
-    return joinWithNewLines(defs), joinWithNewLines(imps), joinWithNewLines(dstr), joinWithNewLines(idefs)
+        if c[2] != 0:
+            idefs.append('')
+            for z in c[2]:
+                idefs.append('        ' + z)
+
+        idefs.append('    */')
+        idefs.append('    //@{')
 
+        idefs+=piecesForInterface[c[0]]
+        idefs.append('')
+        idefs.append('    //@}')
+
+    return joinWithNewLines(defs), joinWithNewLines(imps), joinWithNewLines(dstr), joinWithNewLines(idefs)
 
 #----------------------------------------------------------------------------
 
-def checkMethodOverride(name, number, docs):
+def checkMethodOverride(name, number):
     theDef = theImp = None
     if name in methodOverrideMap:
         item = methodOverrideMap[name]
@@ -1376,13 +1394,11 @@ def checkMethodOverride(name, number, docs):
                 theDef = '    ' + (item[1] % name)
             if item[2] != 0:
                 theImp = item[2] % ('wxStyledTextCtrl::'+name, number) + '\n}'
-            if item[3] != 0:
-                docs = item[3]
         except:
             print("************* " + name)
             raise
 
-    return name, theDef, theImp, docs
+    return name, theDef, theImp
 
 #----------------------------------------------------------------------------
 
diff --git a/src/stc/scintilla/README.txt b/src/stc/scintilla/README.txt
index cea8c56..79de26b 100644
--- a/src/stc/scintilla/README.txt
+++ b/src/stc/scintilla/README.txt
@@ -46,7 +46,8 @@ that list. Also, for any enums that begin with 'SCXX_' instead of
 'SC_', add an entry to valPrefixes to make sure the new names for
 constants are generated consistently.
 
-7. Run gen_iface.py.
+7. Run gen_iface.py.  It's best to use python 2.6 or later.  If
+using an earlier version, please delete any .pyc files generated.
 
 8. Any other new methods should be checked to ensure that the
 generated code is appropriate for what they are doing and if not then
@@ -56,7 +57,8 @@ instead.
 9. Add documentation code for any new methods to
 interface/wx/stc/stc.h, also check any documentation-only changes from
 Scintilla.iface and see if the existing docs for those items should be
-updated too.
+updated too.  For new functions in Scintilla.iface, an entry should be
+added to the docsMap and sinceAnnotations dictionaries in gen_docs.py.
 
 10. Apply the fix for scintilla/src/UniConversion.h based on commit by
 Vadim Zeitlin <vadim@wxwidgets.org> from March 5th, 2016.
diff --git a/src/stc/stc.cpp b/src/stc/stc.cpp
index fad8f97..c45d240 100644
--- a/src/stc/stc.cpp
+++ b/src/stc/stc.cpp
@@ -287,7 +287,7 @@ void wxStyledTextCtrl::InsertText(int pos, const wxString& text)
     SendMsg(SCI_INSERTTEXT, pos, (sptr_t)(const char*)wx2stc(text));
 }
 
-// Change the text that is being inserted in response to SC_MOD_INSERTCHECK
+// Change the text that is being inserted in response to wxSTC_MOD_INSERTCHECK
 void wxStyledTextCtrl::ChangeInsertion(int length, const wxString& text)
 {
     SendMsg(SCI_CHANGEINSERTION, length, (sptr_t)(const char*)wx2stc(text));
@@ -409,7 +409,7 @@ bool wxStyledTextCtrl::GetUndoCollection() const
 }
 
 // Are white space characters currently visible?
-// Returns one of SCWS_* constants.
+// Returns one of wxSTC_WS_* constants.
 int wxStyledTextCtrl::GetViewWhiteSpace() const
 {
     return SendMsg(SCI_GETVIEWWS, 0, 0);
@@ -422,7 +422,7 @@ void wxStyledTextCtrl::SetViewWhiteSpace(int viewWS)
 }
 
 // Retrieve the current tab draw mode.
-// Returns one of SCTD_* constants.
+// Returns one of wxSTC_TD_* constants.
 int wxStyledTextCtrl::GetTabDrawMode() const
 {
     return SendMsg(SCI_GETTABDRAWMODE, 0, 0);
@@ -440,7 +440,7 @@ int wxStyledTextCtrl::PositionFromPoint(wxPoint pt) const {
 }
 
 // Find the position from a point within the window but return
-// INVALID_POSITION if not close to text.
+// wxSTC_INVALID_POSITION if not close to text.
 int wxStyledTextCtrl::PositionFromPointClose(int x, int y)
 {
     return SendMsg(SCI_POSITIONFROMPOINTCLOSE, x, y);
@@ -466,8 +466,6 @@ void wxStyledTextCtrl::SetAnchor(int anchor)
 }
 
 // Retrieve the text of the line containing the caret.
-// Returns the index of the caret on the line.
-// Result is NUL-terminated.
 wxString wxStyledTextCtrl::GetCurLine(int* linePos) {
         int len = LineLength(GetCurrentLine());
         if (!len) {
@@ -497,7 +495,7 @@ void wxStyledTextCtrl::ConvertEOLs(int eolMode)
     SendMsg(SCI_CONVERTEOLS, eolMode, 0);
 }
 
-// Retrieve the current end of line mode - one of CRLF, CR, or LF.
+// Retrieve the current end of line mode - one of wxSTC_EOL_CRLF, wxSTC_EOL_CR, or wxSTC_EOL_LF.
 int wxStyledTextCtrl::GetEOLMode() const
 {
     return SendMsg(SCI_GETEOLMODE, 0, 0);
@@ -755,7 +753,7 @@ int wxStyledTextCtrl::GetMarginCursor(int margin) const
     return SendMsg(SCI_GETMARGINCURSORN, margin, 0);
 }
 
-// Set the background colour of a margin. Only visible for SC_MARGIN_COLOUR.
+// Set the background colour of a margin. Only visible for wxSTC_MARGIN_COLOUR.
 void wxStyledTextCtrl::SetMarginBackground(int margin, const wxColour& back)
 {
     SendMsg(SCI_SETMARGINBACKN, margin, wxColourAsLong(back));
@@ -958,7 +956,6 @@ int wxStyledTextCtrl::StyleGetWeight(int style) const
 }
 
 // Set the character set of the font in a style.
-// Converts the Scintilla character set values to a wxFontEncoding.
 void wxStyledTextCtrl::StyleSetCharacterSet(int style, int characterSet) {
         wxFontEncoding encoding;
 
@@ -2074,7 +2071,7 @@ void wxStyledTextCtrl::TargetWholeDocument()
 // Replace the target text with the argument text after \\d processing.
 // Text is counted so it can contain NULs.
 // Looks for \\d where d is between 1 and 9 and replaces these with the strings
-// matched in the last search operation which were surrounded by \( and \).
+// matched in the last search operation which were surrounded by \\( and \\).
 // Returns the length of the replacement text including any change
 // caused by processing the \\d patterns.
 
@@ -2158,7 +2155,7 @@ void wxStyledTextCtrl::CallTipSetForegroundHighlight(const wxColour& fore)
     SendMsg(SCI_CALLTIPSETFOREHLT, wxColourAsLong(fore), 0);
 }
 
-// Enable use of STYLE_CALLTIP and set call tip tab size in pixels.
+// Enable use of wxSTC_STYLE_CALLTIP and set call tip tab size in pixels.
 void wxStyledTextCtrl::CallTipUseStyle(int tabSize)
 {
     SendMsg(SCI_CALLTIPUSESTYLE, tabSize, 0);
@@ -2437,13 +2434,13 @@ int wxStyledTextCtrl::GetWrapStartIndent() const
     return SendMsg(SCI_GETWRAPSTARTINDENT, 0, 0);
 }
 
-// Sets how wrapped sublines are placed. Default is fixed.
+// Sets how wrapped sublines are placed. Default is wxSTC_WRAPINDENT_FIXED.
 void wxStyledTextCtrl::SetWrapIndentMode(int wrapIndentMode)
 {
     SendMsg(SCI_SETWRAPINDENTMODE, wrapIndentMode, 0);
 }
 
-// Retrieve how wrapped sublines are placed. Default is fixed.
+// Retrieve how wrapped sublines are placed. Default is wxSTC_WRAPINDENT_FIXED.
 int wxStyledTextCtrl::GetWrapIndentMode() const
 {
     return SendMsg(SCI_GETWRAPINDENTMODE, 0, 0);
@@ -2486,7 +2483,6 @@ bool wxStyledTextCtrl::GetScrollWidthTracking() const
 }
 
 // Measure the pixel width of some text in a particular style.
-// NUL terminated text argument.
 // Does not handle tab or control characters.
 int wxStyledTextCtrl::TextWidth(int style, const wxString& text)
 {
@@ -2579,7 +2575,6 @@ int wxStyledTextCtrl::GetMultiPaste() const
 }
 
 // Retrieve the value of a tag from a regular expression search.
-// Result is NUL-terminated.
 wxString wxStyledTextCtrl::GetTag(int tagNumber) const {
          const int msg = SCI_GETTAG;
          int len = SendMsg(msg, tagNumber, (sptr_t)NULL);
@@ -3013,7 +3008,7 @@ void wxStyledTextCtrl::BraceBadLightIndicator(bool useSetting, int indicator)
     SendMsg(SCI_BRACEBADLIGHTINDICATOR, useSetting, indicator);
 }
 
-// Find the position of a matching brace or INVALID_POSITION if no match.
+// Find the position of a matching brace or wxSTC_INVALID_POSITION if no match.
 // The maxReStyle must be 0 for now. It may be defined in a future release.
 int wxStyledTextCtrl::BraceMatch(int pos, int maxReStyle){
         wxASSERT_MSG(maxReStyle==0,
@@ -3069,8 +3064,8 @@ int wxStyledTextCtrl::GetEdgeMode() const
     return SendMsg(SCI_GETEDGEMODE, 0, 0);
 }
 
-// The edge may be displayed by a line (EDGE_LINE/EDGE_MULTILINE) or by highlighting text that
-// goes beyond it (EDGE_BACKGROUND) or not displayed at all (EDGE_NONE).
+// The edge may be displayed by a line (wxSTC_EDGE_LINE/wxSTC_EDGE_MULTILINE) or by highlighting text that
+// goes beyond it (wxSTC_EDGE_BACKGROUND) or not displayed at all (wxSTC_EDGE_NONE).
 void wxStyledTextCtrl::SetEdgeMode(int edgeMode)
 {
     SendMsg(SCI_SETEDGEMODE, edgeMode, 0);
@@ -3223,7 +3218,7 @@ bool wxStyledTextCtrl::GetMouseWheelCaptures() const
     return SendMsg(SCI_GETMOUSEWHEELCAPTURES, 0, 0) != 0;
 }
 
-// Sets the cursor to one of the SC_CURSOR* values.
+// Sets the cursor to one of the wxSTC_CURSOR* values.
 void wxStyledTextCtrl::SetSTCCursor(int cursorType)
 {
     SendMsg(SCI_SETCURSOR, cursorType, 0);
@@ -3293,11 +3288,13 @@ void wxStyledTextCtrl::DelLineRight()
     SendMsg(SCI_DELLINERIGHT, 0, 0);
 }
 
-// Get and Set the xOffset (ie, horizontal scroll position).
+// Set the xOffset (ie, horizontal scroll position).
 void wxStyledTextCtrl::SetXOffset(int xOffset)
 {
     SendMsg(SCI_SETXOFFSET, xOffset, 0);
 }
+
+// Get the xOffset (ie, horizontal scroll position).
 int wxStyledTextCtrl::GetXOffset() const
 {
     return SendMsg(SCI_GETXOFFSET, 0, 0);
@@ -3323,7 +3320,7 @@ void wxStyledTextCtrl::SetYCaretPolicy(int caretPolicy, int caretSlop)
     SendMsg(SCI_SETYCARETPOLICY, caretPolicy, caretSlop);
 }
 
-// Set printing to line wrapped (SC_WRAP_WORD) or not line wrapped (SC_WRAP_NONE).
+// Set printing to line wrapped (wxSTC_WRAP_WORD) or not line wrapped (wxSTC_WRAP_NONE).
 void wxStyledTextCtrl::SetPrintWrapMode(int wrapMode)
 {
     SendMsg(SCI_SETPRINTWRAPMODE, wrapMode, 0);
@@ -3442,8 +3439,8 @@ void wxStyledTextCtrl::CopyText(int length, const wxString& text)
     SendMsg(SCI_COPYTEXT, length, (sptr_t)(const char*)wx2stc(text));
 }
 
-// Set the selection mode to stream (SC_SEL_STREAM) or rectangular (SC_SEL_RECTANGLE/SC_SEL_THIN) or
-// by lines (SC_SEL_LINES).
+// Set the selection mode to stream (wxSTC_SEL_STREAM) or rectangular (wxSTC_SEL_RECTANGLE/wxSTC_SEL_THIN) or
+// by lines (wxSTC_SEL_LINES).
 void wxStyledTextCtrl::SetSelectionMode(int selectionMode)
 {
     SendMsg(SCI_SETSELECTIONMODE, selectionMode, 0);
@@ -3455,13 +3452,13 @@ int wxStyledTextCtrl::GetSelectionMode() const
     return SendMsg(SCI_GETSELECTIONMODE, 0, 0);
 }
 
-// Retrieve the position of the start of the selection at the given line (INVALID_POSITION if no selection on this line).
+// Retrieve the position of the start of the selection at the given line (wxSTC_INVALID_POSITION if no selection on this line).
 int wxStyledTextCtrl::GetLineSelStartPosition(int line)
 {
     return SendMsg(SCI_GETLINESELSTARTPOSITION, line, 0);
 }
 
-// Retrieve the position of the end of the selection at the given line (INVALID_POSITION if no selection on this line).
+// Retrieve the position of the end of the selection at the given line (wxSTC_INVALID_POSITION if no selection on this line).
 int wxStyledTextCtrl::GetLineSelEndPosition(int line)
 {
     return SendMsg(SCI_GETLINESELENDPOSITION, line, 0);
@@ -4077,7 +4074,7 @@ int wxStyledTextCtrl::CharPositionFromPoint(int x, int y)
 }
 
 // Find the position of a character from a point within the window.
-// Return INVALID_POSITION if not close to text.
+// Return wxSTC_INVALID_POSITION if not close to text.
 int wxStyledTextCtrl::CharPositionFromPointClose(int x, int y)
 {
     return SendMsg(SCI_CHARPOSITIONFROMPOINTCLOSE, x, y);
@@ -4320,7 +4317,7 @@ int wxStyledTextCtrl::GetVirtualSpaceOptions() const
 // On GTK+, allow selecting the modifier key to use for mouse-based
 // rectangular selection. Often the window manager requires Alt+Mouse Drag
 // for moving windows.
-// Valid values are SCMOD_CTRL(default), SCMOD_ALT, or SCMOD_SUPER.
+// Valid values are wxSTC_KEYMOD_CTRL (default), wxSTC_KEYMOD_ALT, or wxSTC_KEYMOD_SUPER.
 void wxStyledTextCtrl::SetRectangularSelectionModifier(int modifier)
 {
     SendMsg(SCI_SETRECTANGULARSELECTIONMODIFIER, modifier, 0);
@@ -4550,7 +4547,6 @@ void wxStyledTextCtrl::SetRepresentation(const wxString& encodedCharacter, const
 }
 
 // Set the way a character is drawn.
-// Result is NUL-terminated.
 wxString wxStyledTextCtrl::GetRepresentation(const wxString& encodedCharacter) const {
          int msg = SCI_GETREPRESENTATION;
          int len = SendMsg(msg, (sptr_t)(const char*)wx2stc(encodedCharacter), (sptr_t)NULL);
@@ -4624,7 +4620,7 @@ void wxStyledTextCtrl::LoadLexerLibrary(const wxString& path)
     SendMsg(SCI_LOADLEXERLIBRARY, 0, (sptr_t)(const char*)wx2stc(path));
 }
 
-// Retrieve a 'property' value previously set with SetProperty.
+// Retrieve a "property" value previously set with SetProperty.
 wxString wxStyledTextCtrl::GetProperty(const wxString& key) {
          int len = SendMsg(SCI_GETPROPERTY, (sptr_t)(const char*)wx2stc(key), 0);
          if (!len) return wxEmptyString;
@@ -4637,8 +4633,8 @@ wxString wxStyledTextCtrl::GetProperty(const wxString& key) {
          return stc2wx(buf);
 }
 
-// Retrieve a 'property' value previously set with SetProperty,
-// with '$()' variable replacement on returned buffer.
+// Retrieve a "property" value previously set with SetProperty,
+// with "$()" variable replacement on returned buffer.
 wxString wxStyledTextCtrl::GetPropertyExpanded(const wxString& key) {
          int len = SendMsg(SCI_GETPROPERTYEXPANDED, (uptr_t)(const char*)wx2stc(key), 0);
          if (!len) return wxEmptyString;
@@ -4651,8 +4647,8 @@ wxString wxStyledTextCtrl::GetPropertyExpanded(const wxString& key) {
          return stc2wx(buf);
 }
 
-// Retrieve a 'property' value previously set with SetProperty,
-// interpreted as an int AFTER any '$()' variable replacement.
+// Retrieve a "property" value previously set with SetProperty,
+// interpreted as an int AFTER any "$()" variable replacement.
 int wxStyledTextCtrl::GetPropertyInt(const wxString &key, int defaultValue) const {
         return SendMsg(SCI_GETPROPERTYINT, (uptr_t)(const char*)wx2stc(key), defaultValue);
 }
@@ -4682,8 +4678,7 @@ void* wxStyledTextCtrl::PrivateLexerCall(int operation, void* pointer) {
            return (void*)(sptr_t)SendMsg(SCI_PRIVATELEXERCALL, operation, (sptr_t)pointer); 
 }
 
-// Retrieve a '\n' separated list of properties understood by the current lexer.
-// Result is NUL-terminated.
+// Retrieve a '\\n' separated list of properties understood by the current lexer.
 wxString wxStyledTextCtrl::PropertyNames() const {
          const int msg = SCI_PROPERTYNAMES;
          int len = SendMsg(msg, 0, (sptr_t)NULL);
@@ -4704,7 +4699,6 @@ int wxStyledTextCtrl::PropertyType(const wxString& name)
 }
 
 // Describe a property.
-// Result is NUL-terminated.
 wxString wxStyledTextCtrl::DescribeProperty(const wxString& name) const {
          const int msg = SCI_DESCRIBEPROPERTY;
          int len = SendMsg(msg, (sptr_t)(const char*)wx2stc(name), (sptr_t)NULL);
@@ -4718,8 +4712,7 @@ wxString wxStyledTextCtrl::DescribeProperty(const wxString& name) const {
          return stc2wx(buf);
 }
 
-// Retrieve a '\n' separated list of descriptions of the keyword sets understood by the current lexer.
-// Result is NUL-terminated.
+// Retrieve a '\\n' separated list of descriptions of the keyword sets understood by the current lexer.
 wxString wxStyledTextCtrl::DescribeKeyWordSets() const {
          const int msg = SCI_DESCRIBEKEYWORDSETS;
          int len = SendMsg(msg, 0, (sptr_t)NULL);
@@ -4790,7 +4783,6 @@ int wxStyledTextCtrl::DistanceToSecondaryStyles() const
 }
 
 // Get the set of base styles that can be extended with sub styles
-// Result is NUL-terminated.
 wxString wxStyledTextCtrl::GetSubStyleBases() const {
          int msg = SCI_GETSUBSTYLEBASES;
          int len = SendMsg(msg, 0, (sptr_t)NULL);
diff --git a/src/stc/stc.interface.h.in b/src/stc/stc.interface.h.in
index 3603715..2e4d121 100644
--- a/src/stc/stc.interface.h.in
+++ b/src/stc/stc.interface.h.in
@@ -50,7 +50,7 @@
 
     Links for quick access to the various categories of wxStyledTextCtrl functions:
     - @ref_member_group{ctor, Constructors and related methods}
-    - @ref_member_group{scintilla_functions, Scintilla methods}
+%(TABLE_OF_CONTENTS)s
     - @ref_member_group{additional_methods, Additional wxStyledTextCtrl methods}
     - @ref_member_group{raw_variants , Raw variants}
     - @ref_member_group{text_entry, Text entry methods}
@@ -181,8 +181,6 @@ public:
 
     // Scintilla methods (generated by gen_iface.py)
     // ----------------------------------------------
-    ///@member_group_name{scintilla_functions, Scintilla methods}
-    //@{
 
     // **** Generated methods {{{
 
@@ -190,8 +188,6 @@ public:
 
     //}}}
 
-    //@}
-
 
     // Manually declared methods
     // ----------------------------------------------

--- /cygdrive/c/wxWidgets-2.9.4/samples/dll/my_dll.cpp	2012-07-09 16:03:03.000000000 +0300
+++ /cygdrive/c/wxWidgets-2.9.4/samples/dll/wxdll_minimal_sample/my_dll.cpp	2012-11-15 16:16:43.890625000 +0200
@@ -1,30 +1,7 @@
-/////////////////////////////////////////////////////////////////////////////
-// Name:        my_dll.cpp
-// Purpose:     Sample showing how to use wx from a DLL
-// Author:      Vaclav Slavik
-// Created:     2009-12-03
-// RCS-ID:      $Id$
-// Copyright:   (c) 2009 Vaclav Slavik
-// Licence:     wxWindows licence
-/////////////////////////////////////////////////////////////////////////////
-
-// ============================================================================
-// declarations
-// ============================================================================
 
-// ----------------------------------------------------------------------------
-// headers
-// ----------------------------------------------------------------------------
 
-#include "wx/wxprec.h"
 
-#ifdef __BORLANDC__
-    #pragma hdrstop
-#endif
-
-#ifndef __WINDOWS__
-    #error "This sample is Windows-only"
-#endif
+#include "my_dll.h"
 
 #include "wx/app.h"
 #include "wx/dynlib.h"
@@ -36,33 +13,136 @@
 #include "wx/thread.h"
 #include "wx/msgdlg.h"
 #include "wx/msw/wrapwin.h"
+#include "wx/textctrl.h"
 
 #include <process.h> // for _beginthreadex()
 
-#include "my_dll.h"
+static const int CMD_SHOW_WINDOW = wxNewId();
+static const int CMD_TERMINATE = wxNewId();
 
-// ----------------------------------------------------------------------------
-// GUI classes
-// ----------------------------------------------------------------------------
 
-class MyDllFrame : public wxFrame
+static bool notRunning = true;
+HANDLE h_thread;
+HANDLE h_event;
+HINSTANCE hinst;
+
+enum {
+
+ID_FRAME = 5000,
+ID_TEXTCTRL,
+ID_LABELTEXTCTRL,
+ID_BUTTON1,
+ID_BUTTON2,
+
+};
+
+class MyFrame : public wxFrame
 {
 public:
-    MyDllFrame(wxWindow *parent, const wxString& label);
+	MyFrame(const wxWindowID id,const wxString& title,
+		const wxPoint& pos, const wxSize& size,long style);
+	MyFrame(const wxWindowID id,const wxString& title);
+virtual ~MyFrame();
+wxPanel *mypanel;
+wxTextCtrl *textctrl;
+wxTextCtrl *labeltextctrl;
+protected:
+	void OnButton1(wxCommandEvent& event);
+	void OnButton2(wxCommandEvent &event);
+private:
+    DECLARE_EVENT_TABLE()
+};
 
-    void OnAbout(wxCommandEvent& event);
+class MyPanel : public wxPanel {
+public:
+	MyPanel() {}
+	MyPanel(wxFrame *frame, int x, int y, int w, int h);
+    MyPanel(wxWindow* parent,
+		wxWindowID id = wxID_ANY,
+		const wxPoint& pos = wxDefaultPosition,
+		const wxSize& size = wxDefaultSize,
+		long style = wxTAB_TRAVERSAL,
+		const wxString& name = wxT("panel"))
+		:wxPanel(parent,id,pos,size,style,name) {}
+	virtual ~MyPanel() {};
 
-    DECLARE_EVENT_TABLE()
 };
 
 
-static const int CMD_SHOW_WINDOW = wxNewId();
-static const int CMD_TERMINATE = wxNewId();
+class MyTextCtrl : public wxTextCtrl
+{
+public:
+	MyTextCtrl(wxWindow* parent, wxWindowID id,
+			const wxString& value = wxT(""),
+			const wxPoint& pos = wxDefaultPosition,
+			const wxSize& size = wxDefaultSize,
+			long style = 0, const wxValidator& validator = wxDefaultValidator,
+			const wxString& name = wxTextCtrlNameStr)
+	:wxTextCtrl(parent,id,value,pos,size,style,validator,name) { }
+protected:
+	void OnTextCtrlType(wxCommandEvent& event);
+
+};
+
+BEGIN_EVENT_TABLE(MyFrame, wxFrame)
+//EVT_BUTTON(ID_BUTTON1,MyFrame::OnButton1)
+//EVT_BUTTON(ID_BUTTON2,MyFrame::OnButton2)
+END_EVENT_TABLE()
+
+
+
+MyFrame::MyFrame(const wxWindowID id,const wxString& title)
+	   : wxFrame((wxFrame *)NULL, id, title,wxDefaultPosition,wxSize(500,250))
+{
+
+CreateStatusBar(2);
+
+wxPanel *global = new wxPanel(this);
+wxBoxSizer *globalSizer = new wxBoxSizer(wxVERTICAL);
+
+wxPanel *controlsPanel = new wxPanel(global);
+wxBoxSizer *controlsSizer = new wxBoxSizer(wxHORIZONTAL);
+
+wxPanel *textctrlPanel = new wxPanel(global);
+wxBoxSizer *textctrlSizer = new wxBoxSizer(wxHORIZONTAL);
+
+
+
+wxButton *createAndShowGUIButton = new wxButton(controlsPanel,ID_BUTTON1,wxT("Create GUI"));
+controlsSizer->Add(createAndShowGUIButton);
+controlsSizer->AddSpacer(5);
+
+labeltextctrl = new wxTextCtrl(controlsPanel,ID_LABELTEXTCTRL,wxEmptyString,wxDefaultPosition,wxSize(200,23));
+controlsSizer->Add(labeltextctrl);
+
+wxButton *setTextCtrlButton = new wxButton(controlsPanel,ID_BUTTON2,wxT("Set GUI Label"));
+controlsSizer->Add(setTextCtrlButton);
+
+controlsPanel->SetSizer(controlsSizer);
+
+textctrl = new wxTextCtrl(textctrlPanel,ID_TEXTCTRL,wxEmptyString,wxDefaultPosition,wxDefaultSize,wxTE_MULTILINE,wxDefaultValidator,wxTextCtrlNameStr);
+textctrlSizer->Add(textctrl,1,wxEXPAND);
+textctrlPanel->SetSizer(textctrlSizer);
+
+
+
+globalSizer->Add(controlsPanel);
+globalSizer->AddSpacer(20);
+globalSizer->Add(textctrlPanel,1,wxEXPAND);
+global->SetSizer(globalSizer);
+
+}
+
+MyFrame::~MyFrame() {
+
+}
 
 class MyDllApp : public wxApp
 {
 public:
     MyDllApp();
+	virtual int OnExit();
+	virtual ~MyDllApp();
 
 private:
     void OnShowWindow(wxThreadEvent& event);
@@ -70,61 +150,6 @@
 };
 
 
-// ============================================================================
-// implementation
-// ============================================================================
-
-// ----------------------------------------------------------------------------
-// MyDllFrame
-// ----------------------------------------------------------------------------
-
-BEGIN_EVENT_TABLE(MyDllFrame, wxFrame)
-    EVT_BUTTON(wxID_ABOUT, MyDllFrame::OnAbout)
-END_EVENT_TABLE()
-
-MyDllFrame::MyDllFrame(wxWindow *parent, const wxString& label)
-    : wxFrame(parent, wxID_ANY, label)
-{
-    wxPanel *p = new wxPanel(this, wxID_ANY);
-    wxSizer *sizer = new wxBoxSizer(wxVERTICAL);
-
-    sizer->Add
-           (
-               new wxStaticText
-                   (
-                       p, wxID_ANY,
-                       wxString::Format
-                       (
-                           "Running using %s\n"
-                           "wxApp instance is %p, thread ID %ld",
-                           wxVERSION_STRING,
-                           wxApp::GetInstance(),
-                           wxThread::GetCurrentId()
-                       )
-                   ),
-               wxSizerFlags(1).Expand().Border(wxALL, 10)
-           );
-
-    sizer->Add
-           (
-               new wxButton(p, wxID_ABOUT, "Show info"),
-               wxSizerFlags(0).Right().Border(wxALL, 10)
-           );
-
-    p->SetSizerAndFit(sizer);
-
-    wxSizer *fsizer = new wxBoxSizer(wxVERTICAL);
-    fsizer->Add(p, wxSizerFlags(1).Expand());
-    SetSizerAndFit(fsizer);
-}
-
-void MyDllFrame::OnAbout(wxCommandEvent& WXUNUSED(event))
-{
-    wxMessageBox("This window is running in its own thread,\n"
-                 "using private wxWidgets instance compiled into the DLL.",
-                 "About",
-                 wxOK | wxICON_INFORMATION);
-}
 
 
 // ----------------------------------------------------------------------------
@@ -146,29 +171,41 @@
     // Also note that this is efficient, because if there are no windows, the
     // thread will sleep waiting for a new event. We could safe some memory
     // by shutting the thread down when it's no longer needed, though.
-    SetExitOnFrameDelete(false);
+    //SetExitOnFrameDelete(true);
 
     Connect(wxEVT_IDLE, wxIdleEventHandler(MyDllApp::OnIdle));
-    Connect(CMD_SHOW_WINDOW,
-            wxEVT_THREAD,
-            wxThreadEventHandler(MyDllApp::OnShowWindow));
-    Connect(CMD_TERMINATE,
-            wxEVT_THREAD,
-            wxThreadEventHandler(MyDllApp::OnTerminate));
+    Connect(CMD_SHOW_WINDOW,wxEVT_THREAD,wxThreadEventHandler(MyDllApp::OnShowWindow));
+    Connect(CMD_TERMINATE,wxEVT_THREAD,wxThreadEventHandler(MyDllApp::OnTerminate));
 }
 
 void MyDllApp::OnShowWindow(wxThreadEvent& event)
 {
-    wxFrame *f = new MyDllFrame(NULL, event.GetString());
+	wxFrame *f = new MyFrame(ID_FRAME,event.GetString());
+	f->Centre();
     f->Show(true);
 }
 
+
 void MyDllApp::OnTerminate(wxThreadEvent& WXUNUSED(event))
 {
-    ExitMainLoop();
+ExitMainLoop();
+}
+
+int MyDllApp::OnExit()
+{
+notRunning=false;
+return wxApp::OnExit();
+}
+
+bool isRunning() {
+return notRunning;
 }
 
 
+MyDllApp::~MyDllApp() {
+//ExitProcess(0);
+}
+
 // ----------------------------------------------------------------------------
 // application startup
 // ----------------------------------------------------------------------------
@@ -176,8 +213,7 @@
 // we can't have WinMain() in a DLL and want to start the app ourselves
 IMPLEMENT_APP_NO_MAIN(MyDllApp)
 
-namespace
-{
+namespace {
 
 // Critical section that guards everything related to wxWidgets "main" thread
 // startup or shutdown.
@@ -186,6 +222,7 @@
 HANDLE gs_wxMainThread = NULL;
 
 
+
 //  wx application startup code -- runs from its own thread
 unsigned wxSTDCALL MyAppLauncher(void* event)
 {
@@ -234,6 +271,7 @@
 extern "C"
 {
 
+
 void run_wx_gui_from_dll(const char *title)
 {
     // In order to prevent conflicts with hosting app's event loop, we
@@ -248,10 +286,11 @@
     // Note that we cannot use wxThread here, because the wx library wasn't
     // initialized yet. wxCriticalSection is safe to use, though.
 
+	
     wxCriticalSectionLocker lock(gs_wxStartupCS);
 
     if ( !gs_wxMainThread )
-    {
+     {
         HANDLE hEvent = CreateEvent
                         (
                             NULL,  // default security attributes
@@ -285,12 +324,13 @@
         WaitForSingleObject(hEvent, INFINITE);
         CloseHandle(hEvent);
     }
+    
 
-    // Send a message to wx thread to show a new frame:
-    wxThreadEvent *event =
-        new wxThreadEvent(wxEVT_THREAD, CMD_SHOW_WINDOW);
+	// Send a message to wx thread to show a new frame:
+    wxThreadEvent *event = new wxThreadEvent(wxEVT_THREAD, CMD_SHOW_WINDOW);
     event->SetString(title);
     wxQueueEvent(wxApp::GetInstance(), event);
+
 }
 
 void wx_dll_cleanup()
@@ -302,14 +342,16 @@
 
     // If wx main thread is running, we need to stop it. To accomplish this,
     // send a message telling it to terminate the app.
-    wxThreadEvent *event =
-        new wxThreadEvent(wxEVT_THREAD, CMD_TERMINATE);
-    wxQueueEvent(wxApp::GetInstance(), event);
-
-    // We must then wait for the thread to actually terminate.
-    WaitForSingleObject(gs_wxMainThread, INFINITE);
+    //wxThreadEvent *event =
+    //    new wxThreadEvent(wxEVT_THREAD, CMD_TERMINATE);
+    //wxQueueEvent(wxApp::GetInstance(), event);
+	//wxThreadEvent *event = new wxThreadEvent(wxEVT_THREAD, CMD_TERMINATE);
+	//wxQueueEvent(wxApp::GetInstance(), event);
+	
+	// We must then wait for the thread to actually terminate.
+	//WaitForSingleObject(gs_wxMainThread, INFINITE);
     CloseHandle(gs_wxMainThread);
     gs_wxMainThread = NULL;
 }
 
-} // extern "C"
+} // extern "C"
\ No newline at end of file

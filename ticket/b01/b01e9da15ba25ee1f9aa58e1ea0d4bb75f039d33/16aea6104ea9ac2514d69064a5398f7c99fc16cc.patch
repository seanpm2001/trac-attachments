--- src\common\sizer-o.cpp	2007-03-05 15:32:12.562500000 +0100
+++ src\common\sizer.cpp	2007-04-25 20:51:50.343750000 +0200
@@ -94,6 +94,7 @@
 {
     Init();
 
+    
     m_proportion = flags.GetProportion();
     m_flag = flags.GetFlags();
     m_border = flags.GetBorderInPixels();
@@ -106,8 +107,6 @@
     m_proportion = 0;
     m_border = 0;
     m_flag = 0;
-
-    m_kind = Item_None;
 }
 
 // window item
@@ -128,17 +127,46 @@
     SetRatio(m_minSize);
 }
 
+// window item
+void wxSizerItem::AssignWindow(wxWindow *window)
+{
+    wxCHECK_RET( window, _T("NULL window in wxSizerItem::AssignWindow()") );
+
+    Free( );
+    
+    m_kind = Item_Window;
+    m_window = window;
+    // window doesn't become smaller than its initial size, whatever happens
+    m_minSize = window->GetSize();
+
+    if ( m_flag & wxFIXED_MINSIZE )
+        window->SetMinSize(m_minSize);
+
+    // aspect ratio calculated from initial size
+    SetRatio(m_minSize);
+}
+
+void wxSizerItem::AssignWindow(wxWindow *window, wxSizer *parent)
+{
+    wxASSERT_MSG( parent, _T("Should not have NULL parent") );
+    AssignWindow(window);
+    if( window )
+        window->SetContainingSizer(parent);
+}
+
 wxSizerItem::wxSizerItem(wxWindow *window,
                          int proportion,
                          int flag,
                          int border,
                          wxObject* userData)
-           : m_proportion(proportion),
+           : m_kind(Item_None),
+             m_sizer(NULL),
+             m_proportion(proportion),
              m_border(border),
              m_flag(flag),
              m_userData(userData)
 {
-    SetWindow(window);
+    AssignWindow(window);
 }
 
 // sizer item
@@ -148,18 +176,27 @@
     m_sizer = sizer;
 }
 
+void wxSizerItem::AssignSizer(wxSizer *sizer)
+{
+    Free( );
+    m_kind = Item_Sizer;
+    m_sizer = sizer;
+}
+
 wxSizerItem::wxSizerItem(wxSizer *sizer,
                          int proportion,
                          int flag,
                          int border,
                          wxObject* userData)
-           : m_proportion(proportion),
+           : m_kind(Item_None),
+             m_sizer(NULL),
+             m_proportion(proportion),
              m_border(border),
              m_flag(flag),
              m_ratio(0.0),
              m_userData(userData)
 {
-    SetSizer(sizer);
+    AssignSizer(sizer);
 
     // m_minSize is set later
 }
@@ -173,25 +210,45 @@
     SetRatio(size);
 }
 
+void wxSizerItem::SetSpacer(int width, int height)
+{ 
+    AssignSpacer(wxSize(width, height)); 
+} 
+
+// spacer item
+void wxSizerItem::AssignSpacer(const wxSize& size)
+{
+    Free();
+    m_kind = Item_Spacer;
+    m_spacer = new wxSizerSpacer(size);
+    m_minSize = size;
+    SetRatio(size);
+}
+
 wxSizerItem::wxSizerItem(int width,
                          int height,
                          int proportion,
                          int flag,
                          int border,
                          wxObject* userData)
-           : m_minSize(width, height), // minimal size is the initial size
+           : m_kind(Item_None),
+             m_sizer(NULL),
+             m_minSize(width, height), // minimal size is the initial size
              m_proportion(proportion),
              m_border(border),
              m_flag(flag),
              m_userData(userData)
 {
-    SetSpacer(width, height);
+    AssignSpacer(width, height);
 }
 
 wxSizerItem::~wxSizerItem()
 {
     delete m_userData;
+    Free( );
+}
 
+void wxSizerItem::Free( ){
     switch ( m_kind )
     {
         case Item_None:
@@ -213,6 +270,9 @@
         default:
             wxFAIL_MSG( _T("unexpected wxSizerItem::m_kind") );
     }
+    
+    m_kind = Item_None;// To avoid freeing them again
+    m_sizer = NULL;
 }
 
 wxSize wxSizerItem::GetSpacer() const
@@ -665,7 +725,7 @@
         if (item->GetWindow() == oldwin)
         {
             item->GetWindow()->SetContainingSizer( NULL );
-            item->SetWindow(newwin);
+            item->AssignWindow(newwin);
             newwin->SetContainingSizer( this );
             return true;
         }
@@ -694,7 +754,7 @@
         if (item->GetSizer() == oldsz)
         {
             wxSizer *old = item->GetSizer();
-            item->SetSizer(newsz);
+            item->AssignSizer(newsz);
             delete old;
             return true;
         }
--- include\wx\sizer-o.h	2007-02-12 08:53:52.000000000 +0100
+++ include\wx\sizer.h	2007-04-25 20:47:36.562500000 +0200
@@ -345,21 +323,32 @@
     wxPoint GetPosition() const
         { return m_pos; }
 
+    // these functions will free/delete the old sizer/spacer. A wxWindow is not deleted
+    void AssignWindow(wxWindow *window,wxSizer *parent);
+    void AssignSizer(wxSizer *sizer);
+    void AssignSpacer(const wxSize& size);
+    void AssignSpacer(int width, int height) { AssignSpacer(wxSize(width, height)); }
 
     // these functions do not free old sizer/spacer
-    void SetWindow(wxWindow *window);
-    void SetSizer(wxSizer *sizer);
-    void SetSpacer(const wxSize& size);
-    void SetSpacer(int width, int height) { SetSpacer(wxSize(width, height)); }
+    wxDEPRECATED( void SetWindow(wxWindow *window) );
+    wxDEPRECATED( void SetSizer(wxSizer *sizer) );
+    wxDEPRECATED( void SetSpacer(const wxSize& size) );
+    wxDEPRECATED( void SetSpacer(int width, int height) );
 
 protected:
     // common part of several ctors
-    void Init() { m_userData = NULL; }
+    void Init() { m_userData = NULL; m_kind = Item_None; m_sizer=NULL; }
 
     // common part of ctors taking wxSizerFlags
     void Init(const wxSizerFlags& flags);
 
-
+    // Before setting s sizeritem to something else, release previous (windows) item
+    void Free( );
+ 
+    // Hide this one away, except for from wxSizer
+    friend class wxSizer;
+    void AssignWindow(wxWindow *window);
+    
     // discriminated union: depending on m_kind one of the fields is valid
     enum
     {

 	  	 

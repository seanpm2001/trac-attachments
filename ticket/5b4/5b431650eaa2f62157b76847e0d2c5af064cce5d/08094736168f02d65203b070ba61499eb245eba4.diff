Index: dcclient.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/os2/dcclient.cpp,v
retrieving revision 1.37
diff -u -r1.37 dcclient.cpp
--- dcclient.cpp	2005/05/31 09:28:39	1.37
+++ dcclient.cpp	2006/01/02 12:52:05
@@ -172,8 +172,8 @@
     vColor.Set( wxT("WHITE") );
     m_brush.SetColour(vColor);
     InitializePalette();
-    wxFont*                         pFont = new wxFont( 12
-                                                       ,wxNORMAL
+    wxFont*                         pFont = new wxFont( 10
+                                                       ,wxMODERN
                                                        ,wxNORMAL
                                                        ,wxBOLD
                                                       );
Index: dialog.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/os2/dialog.cpp,v
retrieving revision 1.25
diff -u -r1.25 dialog.cpp
--- dialog.cpp	2005/11/04 21:13:02	1.25
+++ dialog.cpp	2006/01/02 12:52:06
@@ -266,7 +266,7 @@
     if ( bShow )
     {
         // dialogs don't get WM_SIZE message after creation unlike most (all?)
-        // other windows and so could start their life non laid out correctly
+        // other windows and so could start their life not laid out correctly
         // if we didn't call Layout() from here
         //
         // NB: normally we should call it just the first time but doing it
Index: listbox.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/os2/listbox.cpp,v
retrieving revision 1.36
diff -u -r1.36 listbox.cpp
--- listbox.cpp	2005/10/16 17:09:57	1.36
+++ listbox.cpp	2006/01/02 12:52:13
@@ -192,11 +192,11 @@
     SetFont(*pTextFont);

     //
-    // Set standard wxWidgets colors for Listbox items and highlighting
+    // Set OS/2 system colours for Listbox items and highlighting
     //
     wxColour                        vColour;

-    vColour.Set(wxString(wxT("WHITE")));
+    vColour = wxSystemSettingsNative::GetColour(wxSYS_COLOUR_HIGHLIGHTTEXT);

     LONG                            lColor = (LONG)vColour.GetPixel();

@@ -205,7 +205,7 @@
                       ,sizeof(LONG)
                       ,(PVOID)&lColor
                      );
-    vColour.Set(wxString(wxT("NAVY")));
+    vColour = wxSystemSettingsNative::GetColour(wxSYS_COLOUR_HIGHLIGHT);
     lColor = (LONG)vColour.GetPixel();
     ::WinSetPresParam( m_hWnd
                       ,PP_HILITEBACKGROUNDCOLOR
@@ -213,6 +213,8 @@
                       ,(PVOID)&lColor
                      );

+    SetXComp(0);
+    SetYComp(0);
     SetSize( nX
             ,nY
             ,nWidth
Index: settings.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/os2/settings.cpp,v
retrieving revision 1.22
diff -u -r1.22 settings.cpp
--- settings.cpp	2005/07/21 17:00:04	1.22
+++ settings.cpp	2006/01/02 12:52:18
@@ -78,137 +78,126 @@
 {
     COLORREF                        vRef;
     wxColour                        vCol;
+    LONG                            vSysClr;
     switch (nIndex)
     {
         //
         // PM actually has values for these
         //
         case wxSYS_COLOUR_WINDOW:
-            vRef = (ULONG)::WinQuerySysColor( HWND_DESKTOP
-                                             ,SYSCLR_WINDOW
-                                             ,0L
-                                            );
-            vCol.Set( GetRValue(vRef)
-                     ,GetGValue(vRef)
-                     ,GetBValue(vRef)
-                    );
+            vSysClr = SYSCLR_WINDOW;
             break;

         case wxSYS_COLOUR_WINDOWFRAME:
-            vRef = (ULONG)::WinQuerySysColor( HWND_DESKTOP
-                                             ,SYSCLR_WINDOWFRAME
-                                             ,0L
-                                            );
-            vCol.Set( GetRValue(vRef)
-                     ,GetGValue(vRef)
-                     ,GetBValue(vRef)
-                    );
+            vSysClr = SYSCLR_WINDOWFRAME;
             break;

         case wxSYS_COLOUR_MENUTEXT:
-            vRef = (ULONG)::WinQuerySysColor( HWND_DESKTOP
-                                             ,SYSCLR_MENUTEXT
-                                             ,0L
-                                            );
-            vCol.Set( GetRValue(vRef)
-                     ,GetGValue(vRef)
-                     ,GetBValue(vRef)
-                    );
+            vSysClr = SYSCLR_MENUTEXT;
             break;

+        case wxSYS_COLOUR_MENUHILIGHT:
+            vSysClr = SYSCLR_MENUHILITE;
+            break;
+
         case wxSYS_COLOUR_BTNFACE:
-            vRef = (ULONG)::WinQuerySysColor( HWND_DESKTOP
-                                             ,SYSCLR_BUTTONDEFAULT
-                                             ,0L
-                                            );
-            vCol.Set( GetRValue(vRef)
-                     ,GetGValue(vRef)
-                     ,GetBValue(vRef)
-                    );
+            vSysClr = SYSCLR_BUTTONMIDDLE;
             break;

         case wxSYS_COLOUR_BTNSHADOW:
-            vRef = (ULONG)::WinQuerySysColor( HWND_DESKTOP
-                                             ,SYSCLR_BUTTONMIDDLE
-                                             ,0L
-                                            );
-            vCol.Set( GetRValue(vRef)
-                     ,GetGValue(vRef)
-                     ,GetBValue(vRef)
-                    );
+            vSysClr = SYSCLR_BUTTONDARK;
             break;

         case wxSYS_COLOUR_BTNHIGHLIGHT:
-            vRef = (ULONG)::WinQuerySysColor( HWND_DESKTOP
-                                             ,SYSCLR_BUTTONLIGHT
-                                             ,0L
-                                            );
-            vCol.Set( GetRValue(vRef)
-                     ,GetGValue(vRef)
-                     ,GetBValue(vRef)
-                    );
+            vSysClr = SYSCLR_BUTTONLIGHT;
+            break;
+
+        case wxSYS_COLOUR_BACKGROUND:
+            vSysClr = SYSCLR_BACKGROUND;
             break;

+        case wxSYS_COLOUR_APPWORKSPACE:
+            vSysClr = SYSCLR_APPWORKSPACE;
+            break;
+
         case wxSYS_COLOUR_MENUBAR:
-            vRef = (ULONG)::WinQuerySysColor( HWND_DESKTOP
-                                             ,SYSCLR_MENU
-                                             ,0L
-                                            );
-            vCol.Set( GetRValue(vRef)
-                     ,GetGValue(vRef)
-                     ,GetBValue(vRef)
-                    );
+        case wxSYS_COLOUR_MENU:
+            vSysClr = SYSCLR_MENU;
             break;

-        //
-        // We'll have to just give values to these
-        //
+        case wxSYS_COLOUR_INACTIVECAPTION:
+            vSysClr = SYSCLR_INACTIVETITLE;
+            break;
+
+        case wxSYS_COLOUR_INACTIVEBORDER:
+            vSysClr = SYSCLR_INACTIVEBORDER;
+            break;
+
         case wxSYS_COLOUR_LISTBOX:
+            vSysClr = SYSCLR_ENTRYFIELD;
+            break;
+
         case wxSYS_COLOUR_CAPTIONTEXT:
-            return(*wxWHITE);
+            vSysClr = SYSCLR_TITLETEXT;
+            break;

-        case wxSYS_COLOUR_WINDOWTEXT:
         case wxSYS_COLOUR_INACTIVECAPTIONTEXT:
+            vSysClr = SYSCLR_INACTIVETITLETEXT;
+            break;
+
+        case wxSYS_COLOUR_WINDOWTEXT:
         case wxSYS_COLOUR_BTNTEXT:
-        case wxSYS_COLOUR_INFOTEXT:
-            vCol = (*wxBLACK);
+            vSysClr = SYSCLR_WINDOWTEXT;
             break;

-        //
-        // We should customize these to look like other ports
-        //
+        case wxSYS_COLOUR_INFOTEXT:
+            vSysClr = SYSCLR_HELPTEXT;
+            break;

         case wxSYS_COLOUR_ACTIVECAPTION:
+            vSysClr = SYSCLR_ACTIVETITLE;
+            break;
+
         case wxSYS_COLOUR_ACTIVEBORDER:
+            vSysClr = SYSCLR_ACTIVEBORDER;
+            break;
+
         case wxSYS_COLOUR_HIGHLIGHT:
-            vCol = (*wxBLUE);
+            vSysClr = SYSCLR_HILITEBACKGROUND;
             break;

         case wxSYS_COLOUR_SCROLLBAR:
-        case wxSYS_COLOUR_BACKGROUND:
-        case wxSYS_COLOUR_INACTIVECAPTION:
-        case wxSYS_COLOUR_MENU:
-        case wxSYS_COLOUR_INACTIVEBORDER:
-        case wxSYS_COLOUR_APPWORKSPACE:
+            vSysClr = SYSCLR_SCROLLBAR;
+            break;
+
         case wxSYS_COLOUR_HIGHLIGHTTEXT:
+            vSysClr = SYSCLR_HILITEFOREGROUND;
+            break;
+
+        case wxSYS_COLOUR_INFOBK:
+            vSysClr = SYSCLR_HELPBACKGROUND;
+            break;
+
+        // Don't know what these should be, so leave them grey (normally)
         case wxSYS_COLOUR_GRAYTEXT:
         case wxSYS_COLOUR_3DDKSHADOW:
         case wxSYS_COLOUR_3DLIGHT:
-        case wxSYS_COLOUR_INFOBK:
-            vCol = (*wxLIGHT_GREY);
+        case wxSYS_COLOUR_HOTLIGHT:
+        case wxSYS_COLOUR_GRADIENTACTIVECAPTION:
+        case wxSYS_COLOUR_GRADIENTINACTIVECAPTION:
+            vSysClr = SYSCLR_BUTTONMIDDLE;
             break;

         default:
-            vRef = (ULONG)::WinQuerySysColor( HWND_DESKTOP
-                                             ,SYSCLR_WINDOW
-                                             ,0L
-                                            );
-            vCol.Set( GetRValue(vRef)
-                     ,GetGValue(vRef)
-                     ,GetBValue(vRef)
-                    );
+            vSysClr = SYSCLR_WINDOW;
             break;
     }
+    vRef = (ULONG)::WinQuerySysColor(   HWND_DESKTOP,
+                                        vSysClr,
+                                        0L  );
+    vCol.Set(   GetRValue(vRef),
+                GetGValue(vRef),
+                GetBValue(vRef)  );
     return(vCol);
 } // end of wxSystemSettingsNative::GetColour

@@ -283,8 +272,12 @@
         // TODO case wxSYS_FRAMESIZE_Y:
         // TODO case wxSYS_SMALLICON_X:
         // TODO case wxSYS_SMALLICON_Y:
-        // TODO case wxSYS_HSCROLL_Y:
-        // TODO case wxSYS_VSCROLL_X:
+
+        case wxSYS_HSCROLL_Y:
+            return ::WinQuerySysValue(HWND_DESKTOP,SV_CYHSCROLL);
+        case wxSYS_VSCROLL_X:
+            return ::WinQuerySysValue(HWND_DESKTOP,SV_CXVSCROLL);
+
         // TODO case wxSYS_VSCROLL_ARROW_X:
         // TODO case wxSYS_VSCROLL_ARROW_Y:
         // TODO case wxSYS_VTHUMB_Y:
Index: slider.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/os2/slider.cpp,v
retrieving revision 1.29
diff -u -r1.29 slider.cpp
--- slider.cpp	2005/11/09 20:14:35	1.29
+++ slider.cpp	2006/01/02 12:52:20
@@ -812,8 +813,10 @@
         vPoint.x -= vPt.x;
         vPoint.y -= vPt.y;
     }
-    *pnX = vPoint.x;
-    *pnY = vPoint.y;
+    if (pnX)
+        *pnX = vPoint.x;
+    if (pnY)
+        *pnY = vPoint.y;
 } // end of wxSlider::GetPosition

 int wxSlider::GetSelEnd() const
Index: spinctrl.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/os2/spinctrl.cpp,v
retrieving revision 1.23
diff -u -r1.23 spinctrl.cpp
--- spinctrl.cpp	2005/09/23 12:55:32	1.23
+++ spinctrl.cpp	2006/01/02 12:52:21
@@ -1,6 +1,6 @@
 /////////////////////////////////////////////////////////////////////////////
-// Name:        msw/spinctrl.cpp
-// Purpose:     wxSpinCtrl class implementation for Win32
+// Name:        os2/spinctrl.cpp
+// Purpose:     wxSpinCtrl class implementation for OS/2
 // Author:      David Webster
 // Modified by:
 // Created:     10/15/99
Index: toplevel.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/os2/toplevel.cpp,v
retrieving revision 1.41
diff -u -r1.41 toplevel.cpp
--- toplevel.cpp	2005/11/19 01:07:53	1.41
+++ toplevel.cpp	2006/01/02 12:52:25
@@ -34,6 +34,7 @@
     #include "wx/frame.h"
     #include "wx/control.h"
     #include "wx/containr.h"        // wxSetFocusToChild()
+    #include "wx/settings.h"
 #endif //WX_PRECOMP

 #include "wx/module.h"        // wxSetFocusToChild()
@@ -407,9 +408,9 @@
         nX = (vSizeDpy.x - nWidth) / 2;
         nY = (vSizeDpy.y - nHeight) / 2;
     }
-    m_backgroundColour.Set(wxString(wxT("LIGHT GREY")));
+    SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_APPWORKSPACE));

-    LONG                            lColor = (LONG)m_backgroundColour.GetPixel();
+    LONG lColor = (LONG)m_backgroundColour.GetPixel();

     if (!::WinSetPresParam( m_hWnd
                            ,PP_BACKGROUNDCOLOR
@@ -502,9 +507,9 @@
     wxAssociateWinWithHandle(m_hWnd, this);
     wxAssociateWinWithHandle(m_hFrame, this);

-    m_backgroundColour.Set(wxString(wxT("MEDIUM GREY")));
+    SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_APPWORKSPACE));

-    LONG                            lColor = (LONG)m_backgroundColour.GetPixel();
+    LONG lColor = (LONG)m_backgroundColour.GetPixel();

     if (!::WinSetPresParam( m_hWnd
                            ,PP_BACKGROUNDCOLOR
Index: utilsgui.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/os2/utilsgui.cpp,v
retrieving revision 1.10
diff -u -r1.10 utilsgui.cpp
--- utilsgui.cpp	2005/05/31 09:28:39	1.10
+++ utilsgui.cpp	2006/01/02 12:52:27
@@ -428,8 +428,10 @@
         ::DevCloseDC(hdcScreen);
         ::WinReleasePS(hpsScreen);
     }
-    *pWidth = (int)lWidth;
-    *pHeight = (int)lHeight;
+    if (pWidth)
+        *pWidth = (int)lWidth;
+    if (pHeight)
+        *pHeight = (int)lHeight;
 }

 void wxDisplaySizeMM(
Index: window.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/os2/window.cpp,v
retrieving revision 1.163
diff -u -r1.163 window.cpp
--- window.cpp	2005/11/04 21:13:03	1.163
+++ window.cpp	2006/01/02 12:52:38
@@ -721,19 +723,23 @@
                                 int  nRange,
                                 bool WXUNUSED(bRefresh) )
 {
-    HWND                            hWnd = GetHwnd();
-    int                             nOldRange = nRange - nThumbVisible;
-    int                             nRange1 = nOldRange;
-    int                             nPageSize = nThumbVisible;
+    HWND        hWnd       = GetHwnd();
+    int         nOldRange  = nRange - nThumbVisible;
+    int         nRange1    = nOldRange;
+    int         nPageSize  = nThumbVisible;
+    int         nVSBWidth  = wxSystemSettingsNative::GetMetric(wxSYS_VSCROLL_X,
+                                                               this);
+    int         nHSBHeight = wxSystemSettingsNative::GetMetric(wxSYS_HSCROLL_Y,
+                                                               this);
+
+    SBCDATA     vInfo;
+    ULONG       ulStyle    = WS_VISIBLE | WS_SYNCPAINT;
+    SWP         vSwp;
+    SWP         vSwpOwner;
+    HWND        hWndParent;
+    HWND        hWndClient;
+    wxWindow*   pParent    = GetParent();

-    SBCDATA                         vInfo;
-    ULONG                           ulStyle = WS_VISIBLE | WS_SYNCPAINT;
-    SWP                             vSwp;
-    SWP                             vSwpOwner;
-    HWND                            hWndParent;
-    HWND                            hWndClient;
-    wxWindow*                       pParent = GetParent();
-
     if (pParent && pParent->IsKindOf(CLASSINFO(wxFrame)))
     {
         wxFrame*                    pFrame;
@@ -786,8 +792,8 @@
                                                     ,ulStyle
                                                     ,vSwp.x
                                                     ,vSwp.y
-                                                    ,vSwp.cx - 20
-                                                    ,20
+                                                    ,vSwp.cx - nVSBWidth
+                                                    ,nHSBHeight
                                                     ,hWnd
                                                     ,HWND_TOP
                                                     ,60000
@@ -804,18 +810,19 @@
             // origin, not the frame's client window origin.
             // The starting x position is the same as the starting x position
             // of the owner, but in terms of the parent frame.
-            // The starting y position is 20 pels below the origin of the
-            // owner in terms of the parent frame.
-            // The horz bar is the same width as the owner and 20 pels high.
+            // The starting y position is wxSYS_HSCROLL_Y pels below the origin
+            // of the owner in terms of the parent frame.
+            // The horz bar is the same width as the owner and wxSYS_HSCROLL_Y
+            // pels high.
             //
             if (nRange1 >= nThumbVisible)
             {
                 ::WinSetWindowPos( m_hWndScrollBarHorz
                                   ,HWND_TOP
                                   ,vSwp.x + vSwpOwner.x
-                                  ,(vSwp.y + vSwpOwner.y) - 20
+                                  ,(vSwp.y + vSwpOwner.y) - nHSBHeight
                                   ,vSwpOwner.cx
-                                  ,20
+                                  ,nHSBHeight
                                   ,SWP_MOVE | SWP_SIZE | SWP_SHOW | SWP_ACTIVATE | SWP_ZORDER
                                  );
                 ::WinSendMsg( m_hWndScrollBarHorz
@@ -856,10 +863,10 @@
                                                     ,WC_SCROLLBAR
                                                     ,(PSZ)NULL
                                                     ,ulStyle
-                                                    ,vSwp.x + vSwp.cx - 20
-                                                    ,vSwp.y + 20
-                                                    ,20
-                                                    ,vSwp.cy - 20
+                                                    ,vSwp.x + vSwp.cx - nVSBWidth
+                                                    ,vSwp.y + nHSBHeight
+                                                    ,nVSBWidth
+                                                    ,vSwp.cy - nHSBHeight
                                                     ,hWnd
                                                     ,HWND_TOP
                                                     ,60001
@@ -882,7 +889,7 @@
             // position of the scrollbar relative to the parent frame (the vert
             // scrollbar is on the right and starts at the bottom of the
             // owner window).
-            // It is 20 pels wide and the same height as the owner.
+            // It is wxSYS_VSCROLL_X pels wide and the same height as the owner.
             //
             if (nRange1 >= nThumbVisible)
             {
@@ -890,7 +897,7 @@
                                   ,HWND_TOP
                                   ,vSwp.x + vSwpOwner.x + vSwpOwner.cx
                                   ,vSwp.y + vSwpOwner.y
-                                  ,20
+                                  ,nVSBWidth
                                   ,vSwpOwner.cy
                                   ,SWP_ACTIVATE | SWP_MOVE | SWP_SIZE | SWP_SHOW
                                  );
@@ -1553,20 +1550,20 @@
                       ,SWP_SIZE | SWP_MOVE
                      );
     if (m_vWinSwp.cx == 0 && m_vWinSwp.cy == 0 && m_vWinSwp.fl == 0)
+    {
         //
         // Uninitialized
         //
-        ::WinQueryWindowPos(GetHwnd(), &m_vWinSwp);
+        ::WinQueryWindowPos(hWnd, &m_vWinSwp);
+    }
     else
     {
-        int                         nYDiff = m_vWinSwp.cy - nHeight;
-
         //
         // Handle resizing of scrolled windows.  The target or window to
-        // be scrolled is the owner (gets the scroll notificaitons).  The
+        // be scrolled is the owner (gets the scroll notifications).  The
         // parent is usually the parent frame of the scrolled panel window.
         // In order to show the scrollbars the target window will be shrunk
-        // by the size of the scroll bar widths (20) and moved in the X and Y
+        // by the size of the scroll bar widths and moved in the X and Y
         // directon.  That value will be computed as part of the diff for
         // moving the children.  Everytime the window is sized the
         // toplevel OnSize is going to resize the panel to fit the client
@@ -1577,22 +1574,26 @@
         //
         if (IsKindOf(CLASSINFO(wxScrolledWindow)))
         {
-            int                     nAdjustWidth  = 0;
-            int                     nAdjustHeight = 0;
-            SWP                     vSwpScroll;
+            int nAdjustWidth  = 0;
+            int nAdjustHeight = 0;
+            int nHSBHeight = wxSystemSettingsNative::GetMetric(wxSYS_HSCROLL_Y,
+                                                               this);
+            int nVSBWidth  = wxSystemSettingsNative::GetMetric(wxSYS_VSCROLL_X,
+                                                               this);
+            SWP vSwpScroll;

             if (GetScrollBarHorz() == NULLHANDLE ||
                 !WinIsWindowShowing(GetScrollBarHorz()))
                 nAdjustHeight = 0L;
             else
-                nAdjustHeight = 20L;
+                nAdjustHeight = nHSBHeight;
             if (GetScrollBarVert() == NULLHANDLE ||
                 !WinIsWindowShowing(GetScrollBarVert()))
                 nAdjustWidth = 0L;
             else
-                nAdjustWidth = 20L;
-            ::WinQueryWindowPos(GetHWND(), &vSwpScroll);
-            ::WinSetWindowPos( GetHWND()
+                nAdjustWidth = nVSBWidth;
+            ::WinQueryWindowPos(hWnd, &vSwpScroll);
+            ::WinSetWindowPos( hWnd
                               ,HWND_TOP
                               ,vSwpScroll.x
                               ,vSwpScroll.y + nAdjustHeight
@@ -3114,7 +3101,7 @@
     SubclassWin(m_hWnd);
     SetFont(wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT));

-    m_backgroundColour.Set(wxString(wxT("GREY")));
+    SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_APPWORKSPACE));

     LONG lColor = (LONG)m_backgroundColour.GetPixel();


 	  	 

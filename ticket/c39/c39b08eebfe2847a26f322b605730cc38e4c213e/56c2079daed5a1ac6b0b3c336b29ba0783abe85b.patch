--- C:\Users\nmccorkx\version controlled\blueline\ThirdParty\lib\wx-3.0-msw\wx\lib\agw\hypertreelist.py	2014-07-18 14:45:25.000000000 -0700
+++ C:\Users\nmccorkx\Downloads\wxpy3.0.1\wx-3.0-msw\wx\lib\agw\hypertreelist.py	2014-07-07 20:00:08.000000000 -0700
@@ -1,12 +1,12 @@
 # --------------------------------------------------------------------------------- #
 # HYPERTREELIST wxPython IMPLEMENTATION
 # Inspired By And Heavily Based On wx.gizmos.TreeListCtrl.
 #
 # Andrea Gavana, @ 08 May 2006
-# Latest Revision: 18 Jul 2014, 9.41 GMT
+# Latest Revision: 03 Jan 2014, 23.00 GMT
 #
 #
 # TODO List
 #
 # Almost All The Features Of wx.gizmos.TreeListCtrl Are Available, And There Is
 # Practically No Limit In What Could Be Added To This Class. The First Things
@@ -258,13 +258,13 @@
 
 License And Version
 ===================
 
 :class:`HyperTreeList` is distributed under the wxPython license.
 
-Latest Revision: Nathan McCorkle @ 18 Jul 2014, 9.41 GMT
+Latest Revision: Andrea Gavana @ 03 Jan 2014, 23.00 GMT
 
 Version 1.3
 
 """
 
 import wx
@@ -1334,18 +1334,18 @@
     def DeleteChildren(self, tree):
         """
         Deletes the item children.
 
         :param `tree`: the main :class:`TreeListMainWindow` instance.
         """
-        
+
         for child in self._children:
-            child.DeleteChildren(tree)
             if tree:
-                tree.Delete(child)
                 tree.SendDeleteEvent(child)
+
+            child.DeleteChildren(tree)
             
             if child == tree._selectItem:
                 tree._selectItem = None
 
             # We have to destroy the associated window
             for wnd in child._wnd:
@@ -2449,13 +2449,12 @@
         if not item:
             raise Exception("\nERROR: Invalid Tree Item. ")
         
         self._dirty = True     # do this first so stuff below doesn't cause flicker
 
         if self._editCtrl != None and self.IsDescendantOf(item, self._editCtrl.item()):
-
             # can't delete the item being edited, cancel editing it first
             self._editCtrl.StopEditing()
 
         # don't stay with invalid self._shiftItem or we will crash in the next call to OnChar()
         changeKeyCurrent = False
         itemKey = self._shiftItem
@@ -2513,24 +2512,20 @@
             
     def DeleteRoot(self):
         """
         Removes the tree root item (and subsequently all the items in
         :class:`TreeListMainWindow`.
         """
-        #make sure there is an anchor (root item)
+
         if self._anchor:
 
             self._dirty = True
-
-            #call Delete the item's children, passing this HyperTreeList instance
-            self._anchor.DeleteChildren(self)
-            self.Delete(self._anchor)
             self.SendDeleteEvent(self._anchor)
             self._current = None
             self._selectItem = None
-            
+            self._anchor.DeleteChildren(self)
             del self._anchor
             self._anchor = None
 
 
     def DeleteAllItems(self):
         """ Delete all items in the :class:`TreeListMainWindow`. """
@@ -3425,13 +3420,13 @@
         le.SetEventObject(self._owner)
         le.SetLabel("")
         le._editCancelled = True
 
         self._owner.GetEventHandler().ProcessEvent(le)
 
-
+    
     def OnMouse(self, event):
         """
         Handles the ``wx.EVT_MOUSE_EVENTS`` event for :class:`TreeListMainWindow`.
 
         :param `event`: a :class:`MouseEvent` event to be processed.
         """
@@ -3648,14 +3643,13 @@
 
         elif event.LeftUp():
 
             if self._lastOnSame:
                 if item == self._current and self._curColumn != -1 and \
                    self._owner.GetHeaderWindow().IsColumnEditable(self._curColumn) and \
-                   flags & (wx.TREE_HITTEST_ONITEMLABEL | wx.TREE_HITTEST_ONITEMCOLUMN) and \
-                    ((self._editCtrl!=None and column != self._editCtrl.column()) or self._editCtrl==None):
+                   flags & (wx.TREE_HITTEST_ONITEMLABEL | wx.TREE_HITTEST_ONITEMCOLUMN):
                     self._editTimer.Start(_EDIT_TIMER_TICKS, wx.TIMER_ONE_SHOT)
                 
                 self._lastOnSame = False
             
             if (((flags & wx.TREE_HITTEST_ONITEMBUTTON) or (flags & wx.TREE_HITTEST_ONITEMICON)) and \
                 self.HasButtons() and item.HasPlus()):
@@ -4384,21 +4378,21 @@
 
         :param `column`: an integer specifying the column index;
         :param `width`: the new column width, in pixels.
         """
 
         if width == wx.LIST_AUTOSIZE_USEHEADER:
-
+        
             font = self._header_win.GetFont()
             dc = wx.ClientDC(self._header_win)
             width, dummy, dummy = dc.GetMultiLineTextExtent(self._header_win.GetColumnText(column))
             # Search TreeListHeaderWindow.OnPaint to understand this:
             width += 2*_EXTRA_WIDTH + _MARGIN
         
         elif width == wx.LIST_AUTOSIZE:
-
+        
             width = self._main_win.GetBestColumnWidth(column)
         
         self._header_win.SetColumnWidth(column, width)
         self._header_win.Refresh()
 
 

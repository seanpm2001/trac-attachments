--- hypertreelist.py Revision 755	2014-07-21 11:45:10.000000000 -0700
+++ hypertreelist.py Revision 756	2014-07-21 12:49:41.000000000 -0700
@@ -258,13 +258,13 @@
 
 License And Version
 ===================
 
 :class:`HyperTreeList` is distributed under the wxPython license.
 
-Latest Revision: Andrea Gavana @ 03 Jan 2014, 23.00 GMT
+Latest Revision: Nathan McCorkle @ 18 Jul 2014, 9.41 GMT
 
 Version 1.3
 
 """
 
 import wx
@@ -1336,16 +1336,16 @@
         Deletes the item children.
 
         :param `tree`: the main :class:`TreeListMainWindow` instance.
         """
 
         for child in self._children:
+            child.DeleteChildren(tree)
             if tree:
+                tree.Delete(child)
                 tree.SendDeleteEvent(child)
 
-            child.DeleteChildren(tree)
             
             if child == tree._selectItem:
                 tree._selectItem = None
 
             # We have to destroy the associated window
             for wnd in child._wnd:
@@ -2518,14 +2519,18 @@
 
         if self._anchor:
 
             self._dirty = True
 
 
+            self._anchor.DeleteChildren(self)
+            self.Delete(self._anchor)
             self.SendDeleteEvent(self._anchor)
             self._current = None
             self._selectItem = None
-            self._anchor.DeleteChildren(self)
+            
             del self._anchor
             self._anchor = None
 
 
     def DeleteAllItems(self):
         """ Delete all items in the :class:`TreeListMainWindow`. """
@@ -3643,13 +3648,14 @@
 
         elif event.LeftUp():
 
             if self._lastOnSame:
                 if item == self._current and self._curColumn != -1 and \
                    self._owner.GetHeaderWindow().IsColumnEditable(self._curColumn) and \
-                   flags & (wx.TREE_HITTEST_ONITEMLABEL | wx.TREE_HITTEST_ONITEMCOLUMN):
+                   flags & (wx.TREE_HITTEST_ONITEMLABEL | wx.TREE_HITTEST_ONITEMCOLUMN) and \
+                    ((self._editCtrl!=None and column != self._editCtrl.column()) or self._editCtrl==None):
                     self._editTimer.Start(_EDIT_TIMER_TICKS, wx.TIMER_ONE_SHOT)
                 
                 self._lastOnSame = False
             
             if (((flags & wx.TREE_HITTEST_ONITEMBUTTON) or (flags & wx.TREE_HITTEST_ONITEMICON)) and \
                 self.HasButtons() and item.HasPlus()):
@@ -4083,13 +4089,13 @@
 class HyperTreeList(wx.PyControl):
     """
     :class:`HyperTreeList` is a class that mimics the behaviour of :class:`gizmos.TreeListCtrl`, with
     almost the same base functionalities plus some more enhancements. This class does
     not rely on the native control, as it is a full owner-drawn tree-list control.
     """
-    
+    LIST_AUTOSIZE_CONTENT_OR_HEADER = -555
     def __init__(self, parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize,
                  style=0, agwStyle=wx.TR_DEFAULT_STYLE, validator=wx.DefaultValidator,
                  name="HyperTreeList"):
         """
         Default class constructor.
         
@@ -4388,12 +4394,20 @@
             # Search TreeListHeaderWindow.OnPaint to understand this:
             width += 2*_EXTRA_WIDTH + _MARGIN
         
         elif width == wx.LIST_AUTOSIZE:
         
             width = self._main_win.GetBestColumnWidth(column)
+        elif width == self.LIST_AUTOSIZE_CONTENT_OR_HEADER:
+            width1 = self._main_win.GetBestColumnWidth(column)
+            font = self._header_win.GetFont()
+            dc = wx.ClientDC(self._header_win)
+            width2, dummy, dummy = dc.GetMultiLineTextExtent(self._header_win.GetColumnText(column))
 
+            width2 += 2*_EXTRA_WIDTH + _MARGIN
+            width = max(width1, width2)
         
         self._header_win.SetColumnWidth(column, width)
         self._header_win.Refresh()
 
 
     def GetColumnWidth(self, column):

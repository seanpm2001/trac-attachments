Index: include/wx/convauto.h
===================================================================
--- include/wx/convauto.h	(revision 69638)
+++ include/wx/convauto.h	(working copy)
@@ -84,6 +84,8 @@
     // return the BOM type of this buffer
     static wxBOM DetectBOM(const char *src, size_t srcLen);
 
+    static const char* GetBOMChars(wxBOM, size_t* count);
+
     wxBOM GetBOM() const
     {
         return m_bomType;
Index: interface/wx/convauto.h
===================================================================
--- interface/wx/convauto.h	(revision 69638)
+++ interface/wx/convauto.h	(working copy)
@@ -148,6 +148,14 @@
     wxBOM GetBOM() const;
 
     /**
+        Return a pointer to the characters that makes up this BOM.
+        The returned character count is 2, 3 or 4, or undefined if the return value is NULL.
+
+        @since 2.9.3
+    */
+    const char* GetBOMChars(wxBOM bom, size_t* count);
+
+    /**
         Disable the use of the fall back encoding: if the input doesn't have a
         BOM and is not valid UTF-8, the conversion will fail.
     */
Index: src/common/convauto.cpp
===================================================================
--- src/common/convauto.cpp	(revision 69638)
+++ src/common/convauto.cpp	(working copy)
@@ -44,7 +44,30 @@
     ms_defaultMBEncoding = enc;
 }
 
+static const char BOM_UTF32BE[] = { '\x00', '\x00', '\xFE', '\xFF' };
+static const char BOM_UTF32LE[] = { '\xFF', '\xFE', '\x00', '\x00' };
+static const char BOM_UTF16BE[] = { '\xFE', '\xFF'                 };
+static const char BOM_UTF16LE[] = { '\xFF', '\xFE'                 };
+static const char BOM_UTF8[]    = { '\xEF', '\xBB', '\xBF'         };
+
 /* static */
+const char* wxConvAuto::GetBOMChars(wxBOM bom, size_t* count)
+{
+    wxCHECK_MSG(count != NULL, NULL, wxT("GetBOMChars: count pointer must be provided"));
+    switch (bom)
+    {
+        case wxBOM_UTF32BE: *count = WXSIZEOF(BOM_UTF32BE); return BOM_UTF32BE;
+        case wxBOM_UTF32LE: *count = WXSIZEOF(BOM_UTF32LE); return BOM_UTF32LE;
+        case wxBOM_UTF16BE: *count = WXSIZEOF(BOM_UTF16BE); return BOM_UTF16BE;
+        case wxBOM_UTF16LE: *count = WXSIZEOF(BOM_UTF16LE); return BOM_UTF16LE;
+        case wxBOM_UTF8   : *count = WXSIZEOF(BOM_UTF8   ); return BOM_UTF8;
+        default: return NULL;
+    }
+}
+
+#define BOM_EQUAL(src,array) ( 0 == memcmp((src), array, sizeof(array) ) )
+
+/* static */
 wxBOM wxConvAuto::DetectBOM(const char *src, size_t srcLen)
 {
     // examine the buffer for BOM presence
@@ -86,10 +109,10 @@
                 return wxBOM_Unknown;
             }
 
-            if ( src[0] == '\xFE' && src[1] == '\xFF' )
+            if ( BOM_EQUAL(src, BOM_UTF16BE) )
                 return wxBOM_UTF16BE;
 
-            if ( src[0] == '\xFF' && src[1] == '\xFE' )
+            if ( BOM_EQUAL(src, BOM_UTF16LE) )
             {
                 // if the next byte is 0, it could be an UTF-32LE BOM but if it
                 // isn't we can be sure it's UTF-16LE
@@ -113,21 +136,19 @@
         default:
             // we have at least 4 characters so we may finally decide whether
             // we have a BOM or not
-            if ( src[0] == '\xEF' && src[1] == '\xBB' && src[2] == '\xBF' )
+            if ( BOM_EQUAL(src, BOM_UTF8) )
                 return wxBOM_UTF8;
 
-            if ( src[0] == '\x00' && src[1] == '\x00' &&
-                 src[2] == '\xFE' && src[3] == '\xFF' )
+            if ( BOM_EQUAL(src, BOM_UTF32BE) )
                 return wxBOM_UTF32BE;
 
-            if ( src[0] == '\xFF' && src[1] == '\xFE' &&
-                 src[2] == '\x00' && src[3] == '\x00' )
+            if ( BOM_EQUAL(src, BOM_UTF32LE) )
                 return wxBOM_UTF32LE;
 
-            if ( src[0] == '\xFE' && src[1] == '\xFF' )
+            if ( BOM_EQUAL(src, BOM_UTF16BE) )
                 return wxBOM_UTF16BE;
 
-            if ( src[0] == '\xFF' && src[1] == '\xFE' )
+            if ( BOM_EQUAL(src, BOM_UTF16LE) )
                 return wxBOM_UTF16LE;
     }
 

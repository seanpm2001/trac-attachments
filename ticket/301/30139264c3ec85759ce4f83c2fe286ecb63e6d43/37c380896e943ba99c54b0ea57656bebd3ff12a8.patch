Index: src/common/datavcmn.cpp
===================================================================
--- src/common/datavcmn.cpp	£¨ÐÞ¶©°æ 47837£©
+++ src/common/datavcmn.cpp	£¨¹¤×÷¿½±´£©
@@ -246,8 +246,8 @@
 void wxDataViewIndexListModel::RowDeleted( unsigned int row )
 {
     wxDataViewItem item( m_hash[row] );
+    wxDataViewModel::ItemDeleted( wxDataViewItem(0), item );
     m_hash.RemoveAt( row );
-    wxDataViewModel::ItemDeleted( wxDataViewItem(0), item );
 }
 
 void wxDataViewIndexListModel::RowChanged( unsigned int row )
Index: src/generic/datavgen.cpp
===================================================================
--- src/generic/datavgen.cpp	£¨ÐÞ¶©°æ 47837£©
+++ src/generic/datavgen.cpp	£¨¹¤×÷¿½±´£©
@@ -347,6 +347,30 @@
             parent->ChangeSubTreeCount(num);
     }
 
+    void Resort()
+    {
+        wxDataViewTreeNodes nds = nodes;
+        wxDataViewTreeLeaves lvs = leaves;
+        nodes.Empty();
+        leaves.Empty();
+		
+        int len = nds.GetCount();
+        if(len > 0)
+        {
+            for(int i = 0; i < len; i ++)
+                nodes.Add(nds[i]);
+            for(int i = 0; i < len; i ++)
+                nodes[i]->Resort();
+        }
+
+        len = lvs.GetCount();
+        if(len > 0)
+        {
+            for(int i = 0; i < len; i++)
+                leaves.Add(lvs[i]);
+        }
+    }
+
 private:
     wxDataViewTreeNode * parent;
     wxDataViewTreeNodes  nodes;
@@ -398,6 +422,7 @@
     bool ItemChanged( const wxDataViewItem &item );
     bool ValueChanged( const wxDataViewItem &item, unsigned int col );
     bool Cleared();
+    void Resort(){ g_model = GetOwner()->GetModel(); m_root->Resort(); UpdateDisplay(); }
 
     void SetOwner( wxDataViewCtrl* owner ) { m_owner = owner; }
     wxDataViewCtrl *GetOwner() { return m_owner; }
@@ -528,6 +553,8 @@
         { return m_mainWindow->ValueChanged( item, col ); }
     virtual bool Cleared()
         { return m_mainWindow->Cleared(); }
+    virtual void Resort()
+    	 { return m_mainWindow->Resort(); }
 
     wxDataViewMainWindow    *m_mainWindow;
 };
@@ -1149,6 +1176,7 @@
     // add the updated array of columns to the header control
     unsigned int cols = GetOwner()->GetColumnCount();
     unsigned int added = 0;
+    wxDataViewModel * model = GetOwner()->GetModel();
     for (unsigned int i = 0; i < cols; i++)
     {
         wxDataViewColumn *col = GetColumn( i );
@@ -1162,6 +1190,14 @@
         hdi.cchTextMax = sizeof(hdi.pszText)/sizeof(hdi.pszText[0]);
         hdi.fmt = HDF_LEFT | HDF_STRING;
 
+        //sorting support
+        if(model && model->GetSortingColumn() == i)
+        {
+            //The Microsoft Comctrl32.dll 6.0 support SORTUP/SORTDOWN, but they are not default
+            //see http://msdn2.microsoft.com/en-us/library/ms649534.aspx for more detail
+            //hdi.fmt |= model->GetSortOrderAscending()? HDF_SORTUP:HDF_SORTDOWN;
+        }
+
         // lParam is reserved for application's use:
         // we store there the column index to use it later in MSWOnNotify
         // (since columns may have been hidden)
@@ -1282,6 +1318,30 @@
         case HDN_ITEMCLICK:
             {
                 unsigned int idx = GetColumnIdxFromHeader(nmHDR);
+                wxDataViewModel * model = GetOwner()->GetModel();
+
+                if(nmHDR->iButton == 0)
+                {
+                    wxDataViewColumn *col = GetColumn(idx);
+                    if(col->IsSortable())
+                    {
+                        if(model && model->GetSortingColumn() == idx)
+                        {
+                            bool order = col->IsSortOrderAscending();
+                            col->SetSortOrder(!order);
+                            model->SetSortOrderAscending(!order);
+                        }
+                        else if(model)
+                        {
+                            model->SetSortingColumn(idx);
+                            model->SetSortOrderAscending(true);
+                        }
+                    }
+                    UpdateDisplay();
+                    if(model)
+                        model->Resort();
+                }
+
                 wxEventType evt = nmHDR->iButton == 0 ?
                         wxEVT_COMMAND_DATAVIEW_COLUMN_HEADER_CLICK :
                         wxEVT_COMMAND_DATAVIEW_COLUMN_HEADER_RIGHT_CLICK;
@@ -1923,8 +1983,7 @@
     g_model = GetOwner()->GetModel();
 
     wxDataViewTreeNode * node;
-    wxDataViewItem parent_item = g_model->GetParent( item );
-    node = FindNode(parent_item);
+    node = FindNode(parent);
 
     if( node == NULL || node->GetChildren().Index( item.GetID() ) == wxNOT_FOUND )
     {
Index: include/wx/dataview.h
===================================================================
--- include/wx/dataview.h	£¨ÐÞ¶©°æ 47837£©
+++ include/wx/dataview.h	£¨¹¤×÷¿½±´£©
@@ -97,7 +97,7 @@
     virtual bool ValueChanged( const wxDataViewItem &item, unsigned int col ) = 0;
     virtual bool Cleared() = 0;
     
-    virtual void Resort() { }
+    virtual void Resort() = 0;
 
     void SetOwner( wxDataViewModel *owner ) { m_owner = owner; }
     wxDataViewModel *GetOwner()             { return m_owner; }
Index: samples/dataview/dataview.cpp
===================================================================
--- samples/dataview/dataview.cpp	£¨ÐÞ¶©°æ 47837£©
+++ samples/dataview/dataview.cpp	£¨¹¤×÷¿½±´£©
@@ -161,11 +161,16 @@
     {
         MyMusicModelNode *node = (MyMusicModelNode*) item.GetID();
         wxDataViewItem parent( node->GetParent() );
-        node->GetParent()->GetChildren().Remove( node );
-        delete node;
         
         // notify control
         ItemDeleted( parent, item );
+        //We must delete the node after we call ItemDeleted
+        //The reason is that:
+        //When we use wxSortedArray, the array find a node through binary search for speed.
+        //And when the array is searching for some node, it call the model's compare function.
+        //The compare function need the node to be compared. So we should delete the node later, here.
+        node->GetParent()->GetChildren().Remove( node );
+        delete node;
     }
     
     // override sorting to always sort branches ascendingly

 	  	 

diff -rU2 wxWidgets.orig/include/wx/msw/radiobox.h wxWidgets/include/wx/msw/radiobox.h
--- wxWidgets.orig/include/wx/msw/radiobox.h	2005-02-24 03:39:23.000000000 +1100
+++ wxWidgets/include/wx/msw/radiobox.h	2005-03-28 23:55:35.687949568 +1000
@@ -145,4 +145,6 @@
     virtual wxSize DoGetBestSize() const;
 
+    virtual WXHRGN MSWCalculateClippingRegion();
+    virtual WXLRESULT MSWWindowProc(WXUINT nMsg, WXWPARAM wParam, WXLPARAM lParam);
 
     // the buttons we contain
diff -rU2 wxWidgets.orig/include/wx/msw/statbox.h wxWidgets/include/wx/msw/statbox.h
--- wxWidgets.orig/include/wx/msw/statbox.h	2005-03-08 10:41:02.000000000 +1100
+++ wxWidgets/include/wx/msw/statbox.h	2005-03-28 23:55:36.217869008 +1000
@@ -49,6 +49,10 @@
     virtual WXLRESULT MSWWindowProc(WXUINT nMsg, WXWPARAM wParam, WXLPARAM lParam);
 
+    virtual WXHRGN MSWCalculateClippingRegion();
+    virtual void MSWClipBoxRegion(HRGN hrgn, const RECT *rc);
+    void OnPaint(wxPaintEvent& event);
 
     DECLARE_DYNAMIC_CLASS_NO_COPY(wxStaticBox)
+    DECLARE_EVENT_TABLE()
 };
 
diff -rU2 wxWidgets.orig/src/msw/radiobox.cpp wxWidgets/src/msw/radiobox.cpp
--- wxWidgets.orig/src/msw/radiobox.cpp	2005-02-28 03:39:56.000000000 +1100
+++ wxWidgets/src/msw/radiobox.cpp	2005-03-28 23:55:51.887486864 +1000
@@ -166,7 +166,4 @@
 #endif // wxUSE_VALIDATORS/!wxUSE_VALIDATORS
 
-    // and now create the buttons
-    HWND hwndParent = GetHwndOf(parent);
-
     m_radioButtons = new wxSubwindows(n);
     m_radioWidth = new int[n];
@@ -187,5 +184,5 @@
                                       styleBtn,
                                       0, 0, 0, 0,   // will be set in SetSize()
-                                      hwndParent,
+                                      GetHwnd(),
                                       (HMENU)newId,
                                       wxGetInstance(),
@@ -210,5 +207,5 @@
                          wxEmptyString,
                          WS_GROUP | BS_AUTORADIOBUTTON | WS_CHILD,
-                         0, 0, 0, 0, hwndParent,
+                         0, 0, 0, 0, GetHwnd(),
                          (HMENU)NewControlId(), wxGetInstance(), NULL);
 
@@ -516,6 +513,6 @@
         yy = currentY;
 
-    int y_offset = yy;
-    int x_offset = xx;
+    int y_offset = 0;
+    int x_offset = 0;
 
     int cx1, cy1;
@@ -820,4 +817,51 @@
 }
 
+WXHRGN wxRadioBox::MSWCalculateClippingRegion()
+{
+    RECT rc;
+    ::GetWindowRect(GetHwnd(), &rc);
+    HRGN hrgn = ::CreateRectRgn(rc.left, rc.top, rc.right + 1, rc.bottom + 1);
+
+    size_t count = GetCount();
+    for ( size_t i = 0; i < count; ++i )
+    {
+        ::GetWindowRect((*m_radioButtons)[i], &rc);
+        HRGN hrgnchild = ::CreateRectRgnIndirect(&rc);
+        ::CombineRgn(hrgn, hrgn, hrgnchild, RGN_DIFF);
+        ::DeleteObject(hrgnchild);
+    }
+
+    ::GetWindowRect(GetHwnd(), &rc);
+    ::OffsetRgn(hrgn, -rc.left, -rc.top);
+
+    return hrgn;
+}
+
+WXLRESULT wxRadioBox::MSWWindowProc(WXUINT nMsg, WXWPARAM wParam, WXLPARAM lParam)
+{
+    if ( nMsg == WM_PRINTCLIENT )
+    {
+        // first check to see if a parent window knows how to paint us better
+        for ( wxWindow *win = GetParent(); win; win = win->GetParent() )
+            if ( win->MSWPrintChild(this, wParam, lParam) )
+                return true;
+
+        // nope, so lets do it ourselves
+        RECT rc;
+        WXHBRUSH hbr = DoMSWControlColor((HDC)wParam, wxNullColour);
+        if ( !hbr )
+        {
+            wxBrush *brush = wxTheBrushList->FindOrCreateBrush(GetBackgroundColour(), wxSOLID);
+            hbr = (WXHBRUSH)brush->GetResourceHandle();
+        }
+
+        ::GetClientRect(GetHwnd(), &rc);
+        ::FillRect((HDC)wParam, &rc, (HBRUSH)hbr);
+
+        return true;
+    }
+
+    return wxStaticBox::MSWWindowProc(nMsg, wParam, lParam);
+}
 #endif // wxUSE_RADIOBOX
 
diff -rU2 wxWidgets.orig/src/msw/statbox.cpp wxWidgets/src/msw/statbox.cpp
--- wxWidgets.orig/src/msw/statbox.cpp	2005-03-08 10:41:07.000000000 +1100
+++ wxWidgets/src/msw/statbox.cpp	2005-03-28 23:59:05.671027288 +1000
@@ -39,13 +39,8 @@
 #include "wx/notebook.h"
 #include "wx/sysopt.h"
+#include "wx/image.h"
 
 #include "wx/msw/private.h"
 
-// under CE this style is not defined but we don't need to make static boxes
-// transparent there neither
-#ifndef WS_EX_TRANSPARENT
-    #define WS_EX_TRANSPARENT 0
-#endif
-
 // ----------------------------------------------------------------------------
 // wxWin macros
@@ -104,4 +99,8 @@
 #endif
 
+BEGIN_EVENT_TABLE(wxStaticBox, wxControl)
+    EVT_PAINT(wxStaticBox::OnPaint)
+END_EVENT_TABLE()
+
 // ============================================================================
 // implementation
@@ -133,6 +132,10 @@
     long styleWin = wxStaticBoxBase::MSWGetStyle(style, exstyle);
 
+    // no need for it anymore, must be removed for wxRadioBox child
+    // buttons to be able to repaint themselves
+    styleWin &= ~WS_CLIPCHILDREN;
+
     if ( exstyle )
-        *exstyle = WS_EX_TRANSPARENT;
+        *exstyle = 0;
 
     return styleWin | BS_GROUPBOX;
@@ -195,4 +198,129 @@
 }
 
+// rc must be in client coords!
+void wxStaticBox::MSWClipBoxRegion(HRGN hrgn, const RECT *rc)
+{
+    HRGN hrgnchild;
+
+    // top
+    hrgnchild = ::CreateRectRgn(0, 0, rc->right, 14);
+    ::CombineRgn(hrgn, hrgn, hrgnchild, RGN_DIFF);
+    ::DeleteObject(hrgnchild);
+
+    // bottom
+    hrgnchild = ::CreateRectRgn(0, rc->bottom - 7, rc->right, rc->bottom);
+    ::CombineRgn(hrgn, hrgn, hrgnchild, RGN_DIFF);
+    ::DeleteObject(hrgnchild);
+
+    // left
+    hrgnchild = ::CreateRectRgn(0, 0, 7, rc->bottom);
+    ::CombineRgn(hrgn, hrgn, hrgnchild, RGN_DIFF);
+    ::DeleteObject(hrgnchild);
+
+    // right
+    hrgnchild = ::CreateRectRgn(rc->right - 7, 0, rc->right, rc->bottom);
+    ::CombineRgn(hrgn, hrgn, hrgnchild, RGN_DIFF);
+    ::DeleteObject(hrgnchild);
+}
+
+WXHRGN wxStaticBox::MSWCalculateClippingRegion()
+{
+    RECT rc;
+    ::GetWindowRect(GetHwnd(), &rc);
+    HRGN hrgn = ::CreateRectRgn(rc.left, rc.top, rc.right + 1, rc.bottom + 1);
+
+    wxWindowList::compatibility_iterator node = GetParent()->GetChildren().GetFirst();
+    while ( node )
+    {
+        wxWindow *child = node->GetData();
+
+        // can't just test for (this != child) here since if a wxStaticBox
+        // overlaps another wxStaticBox then neither are drawn. The overlapping
+        // region will flicker but we shouldn't have overlapping windows anyway.
+        if ( !child->IsKindOf(CLASSINFO(wxStaticBox)) )
+        {
+            ::GetWindowRect(GetHwndOf(child), &rc);
+            if ( RectInRegion(hrgn, &rc) )
+            {
+                // need to remove WS_CLIPSIBLINGS from all sibling windows
+                // that are within this staticbox if set
+                LONG style = ::GetWindowLong(GetHwndOf(child), GWL_STYLE);
+                if ( style & WS_CLIPSIBLINGS )
+                {
+                    style &= ~WS_CLIPSIBLINGS;
+                    ::SetWindowLong(GetHwndOf(child), GWL_STYLE, style);
+
+                    // MSDN: "If you have changed certain window data using
+                    // SetWindowLong, you must call SetWindowPos to have the
+                    // changes take effect."
+                    ::SetWindowPos(GetHwndOf(child), NULL, 0, 0, 0, 0,
+                                   SWP_NOMOVE | SWP_NOSIZE | SWP_NOZORDER |
+                                   SWP_FRAMECHANGED);
+                }
+
+                HRGN hrgnchild = ::CreateRectRgnIndirect(&rc);
+                ::CombineRgn(hrgn, hrgn, hrgnchild, RGN_DIFF);
+                ::DeleteObject(hrgnchild);
+            }
+        }
+
+        node = node->GetNext();
+    }
+    ::GetWindowRect(GetHwnd(), &rc);
+    ::OffsetRgn(hrgn, -rc.left, -rc.top);
+
+    return hrgn;
+}
+
+void wxStaticBox::OnPaint(wxPaintEvent& WXUNUSED(event))
+{
+    wxPaintDC dc(this);
+    RECT rc;
+    ::GetClientRect(GetHwnd(), &rc);
+
+    // paint the actual box
+    wxMemoryDC memdc;
+    wxBitmap bitmap(rc.right, rc.bottom);
+    memdc.SelectObject(bitmap);
+
+    // get bg brush
+    WXHBRUSH hbr = DoMSWControlColor(GetHdcOf(memdc), wxNullColour);
+    if ( !hbr )
+    {
+        wxBrush *brush = wxTheBrushList->FindOrCreateBrush(GetBackgroundColour(), wxSOLID);
+        hbr = (WXHBRUSH)brush->GetResourceHandle();
+    }
+
+    // draw solid box, but only blit the good bits
+    ::FillRect(GetHdcOf(memdc), &rc, (HBRUSH)hbr);
+    MSWDefWindowProc(WM_PAINT, (WPARAM)GetHdcOf(memdc), 0);
+
+    // top
+    dc.Blit(7, 0, rc.right - 7, 14, &memdc, 7, 0);
+    // bottom
+    dc.Blit(7, rc.bottom - 7, rc.right - 7, rc.bottom, &memdc, 7, rc.bottom - 7);
+    // left
+    dc.Blit(0, 0, 7, rc.bottom, &memdc, 0, 0);
+    // right
+    dc.Blit(rc.right - 7, 0, rc.right, rc.bottom, &memdc, rc.right - 7, 0);
+
+    // paint the inner
+    HRGN hrgn = (HRGN)MSWCalculateClippingRegion();
+    // now remove the box itself
+    MSWClipBoxRegion(hrgn, &rc);
+
+    hbr = DoMSWControlColor(GetHdcOf(dc), wxNullColour);
+    if ( !hbr )
+    {
+        wxBrush *brush = wxTheBrushList->FindOrCreateBrush(GetBackgroundColour(), wxSOLID);
+        hbr = (WXHBRUSH)brush->GetResourceHandle();
+    }
+
+    ::SelectClipRgn(GetHdcOf(dc), hrgn);
+    ::FillRect(GetHdcOf(dc), &rc, (HBRUSH)hbr);
+    ::SelectClipRgn(GetHdcOf(dc), NULL);
+    ::DeleteObject(hrgn);
+}
+
 #endif // wxUSE_STATBOX
 

 	  	 

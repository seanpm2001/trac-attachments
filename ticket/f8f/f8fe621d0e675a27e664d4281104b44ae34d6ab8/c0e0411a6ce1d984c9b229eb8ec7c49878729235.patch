Index: include/wx/generic/splitter.h
===================================================================
--- include/wx/generic/splitter.h	(revision 70838)
+++ include/wx/generic/splitter.h	(working copy)
@@ -136,8 +136,12 @@
     // Sets the border size
     void SetBorderSize(int WXUNUSED(width)) { }
 
+    void SetSashInvisible(bool invisible=true);
+    bool IsSashInvisible() const { return HasFlag(wxSP_NOSASH); }
+
     // Gets the sash size
     int GetSashSize() const;
+    int GetDefaultSashSize() const;
 
     // Gets the border size
     int GetBorderSize() const;
Index: interface/wx/splitter.h
===================================================================
--- interface/wx/splitter.h	(revision 70838)
+++ interface/wx/splitter.h	(working copy)
@@ -163,16 +163,25 @@
     int GetSashPosition() const;
 
     /**
-        Returns the sash size in pixels.
+        Returns the default sash size in pixels or 0 if it is invisible.
 
+        @see GetDefaultSashSize(), IsSashInvisible()
+     */
+    int GetSashSize() const;
+
+    /**
+        Returns the default sash size in pixels.
+
         The size of the sash is its width for a vertically split window and its
         height for a horizontally split one. Its other direction is the same as
         the client size of the window in the corresponding direction.
 
         The sash size is platform-dependent because it conforms to the current
         platform look-and-feel and cannot be changed.
+
+        @since 2.9.4
      */
-    int GetSashSize() const;
+    int GetDefaultSashSize() const;
 
     /**
         Gets the split mode.
@@ -206,6 +215,17 @@
     void Initialize(wxWindow* window);
 
     /**
+        Returns @true if the sash is invisible even when the window is split, @false otherwise.
+
+        @remark This is a shortcut for HasFlag(wxSP_NOSASH)
+
+        @see SetSashInvisible()
+
+        @since 2.9.4
+    */
+    bool IsSashInvisible() const;
+
+    /**
         Returns @true if the window is split, @false otherwise.
     */
     bool IsSplit() const;
@@ -336,6 +356,22 @@
     void SetSplitMode(int mode);
 
     /**
+        Sets whether the sash should be invisible, even when the window is
+        split.
+
+        @remarks Only sets the internal variable; does not update the display.
+
+        @param invisible
+            If @true, the sash is always invisible, else it is shown when the
+            window is split.
+
+        @see IsSashInvisible()
+
+        @since 2.9.4
+    */
+    void SetSashInvisible(bool invisible=true);
+
+    /**
         Initializes the top and bottom panes of the splitter window.
         The child windows are shown if they are currently hidden.
 
Index: samples/splitter/splitter.cpp
===================================================================
--- samples/splitter/splitter.cpp	(revision 70838)
+++ samples/splitter/splitter.cpp	(working copy)
@@ -60,7 +60,8 @@
     SPLIT_SETPOSITION,
     SPLIT_SETMINSIZE,
     SPLIT_SETGRAVITY,
-    SPLIT_REPLACE
+    SPLIT_REPLACE,
+    SPLIT_INVISIBLE
 };
 
 // ----------------------------------------------------------------------------
@@ -99,6 +100,7 @@
     void OnSetMinSize(wxCommandEvent& event);
     void OnSetGravity(wxCommandEvent& event);
     void OnReplace(wxCommandEvent &event);
+    void OnToggleInvisible(wxCommandEvent &event);
 
     void OnQuit(wxCommandEvent& event);
 
@@ -106,6 +108,7 @@
     void OnUpdateUIHorizontal(wxUpdateUIEvent& event);
     void OnUpdateUIVertical(wxUpdateUIEvent& event);
     void OnUpdateUIUnsplit(wxUpdateUIEvent& event);
+    void OnUpdateUIInvisible(wxUpdateUIEvent& event);
 
 private:
     wxScrolledWindow *m_left, *m_right;
@@ -187,12 +190,14 @@
     EVT_MENU(SPLIT_SETMINSIZE, MyFrame::OnSetMinSize)
     EVT_MENU(SPLIT_SETGRAVITY, MyFrame::OnSetGravity)
     EVT_MENU(SPLIT_REPLACE, MyFrame::OnReplace)
+    EVT_MENU(SPLIT_INVISIBLE, MyFrame::OnToggleInvisible)
 
     EVT_MENU(SPLIT_QUIT, MyFrame::OnQuit)
 
     EVT_UPDATE_UI(SPLIT_VERTICAL, MyFrame::OnUpdateUIVertical)
     EVT_UPDATE_UI(SPLIT_HORIZONTAL, MyFrame::OnUpdateUIHorizontal)
     EVT_UPDATE_UI(SPLIT_UNSPLIT, MyFrame::OnUpdateUIUnsplit)
+    EVT_UPDATE_UI(SPLIT_INVISIBLE, MyFrame::OnUpdateUIInvisible)
 END_EVENT_TABLE()
 
 // My frame constructor
@@ -218,6 +223,9 @@
     splitMenu->Append(SPLIT_UNSPLIT,
                       wxT("&Unsplit\tCtrl-U"),
                       wxT("Unsplit"));
+    splitMenu->AppendCheckItem(SPLIT_INVISIBLE,
+                      wxT("Toggle sash &invisibility\tCtrl-I"),
+                      wxT("Toggle sash invisibility"));
     splitMenu->AppendSeparator();
 
     splitMenu->AppendCheckItem(SPLIT_LIVE,
@@ -436,6 +444,12 @@
     }
 }
 
+void MyFrame::OnToggleInvisible(wxCommandEvent& WXUNUSED(event) )
+{
+    m_splitter->SetSashInvisible(!m_splitter->IsSashInvisible());
+    m_splitter->SizeWindows();
+}
+
 // Update UI handlers
 
 void MyFrame::OnUpdateUIHorizontal(wxUpdateUIEvent& event)
@@ -453,6 +467,11 @@
     event.Enable( m_splitter->IsSplit() );
 }
 
+void MyFrame::OnUpdateUIInvisible(wxUpdateUIEvent& event)
+{
+    event.Check( m_splitter->IsSashInvisible() );
+}
+
 // ----------------------------------------------------------------------------
 // MySplitterWindow
 // ----------------------------------------------------------------------------
Index: src/generic/splitter.cpp
===================================================================
--- src/generic/splitter.cpp	(revision 70838)
+++ src/generic/splitter.cpp	(working copy)
@@ -496,8 +496,19 @@
     return z >=  hitMin && z <= hitMax;
 }
 
+void wxSplitterWindow::SetSashInvisible(bool invisible)
+{
+    if ( IsSashInvisible() != invisible )
+        SetWindowStyleFlag (GetWindowStyleFlag() ^ wxSP_NOSASH);
+}
+
 int wxSplitterWindow::GetSashSize() const
 {
+    return IsSashInvisible() ? 0 : GetDefaultSashSize();
+}
+
+int wxSplitterWindow::GetDefaultSashSize() const
+{
     return wxRendererNative::Get().GetSplitterParams(this).widthSash;
 }
 
@@ -522,7 +533,7 @@
         return;
 
     // nor if we're configured to not show it
-    if ( HasFlag(wxSP_NOSASH) )
+    if ( IsSashInvisible() )
         return;
 
     wxRendererNative::Get().DrawSplitterSash

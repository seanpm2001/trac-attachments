Index: docs/latex/wx/listbox.tex
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/docs/latex/wx/listbox.tex,v
retrieving revision 1.30
diff -b -u -2 -r1.30 listbox.tex
--- docs/latex/wx/listbox.tex	2006/01/01 18:44:06	1.30
+++ docs/latex/wx/listbox.tex	2006/03/09 05:24:42
@@ -202,4 +202,20 @@
 and {\tt items}.}
 
+\membersection{wxListBox::HitTest}\label{wxlistboxhittest}
+
+\constfunc{int}{HitTest}{\param{const wxPoint&}{ point}}
+
+Returns the item located at {\tt point}, or wxNOT\_FOUND if there
+is no item located at {\tt point}.
+
+\wxheading{Parameters}
+
+\docparam{point}{Point of item (in client coordinates) to obtain}
+
+\wxheading{Return value}
+
+Item located at {\tt point}, or wxNOT\_FOUND if unimplemented
+or the item does not exist.
+
 \membersection{wxListBox::IsSelected}\label{wxlistboxisselected}
 
Index: include/wx/listbox.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/listbox.h,v
retrieving revision 1.30
diff -b -u -2 -r1.30 listbox.h
--- include/wx/listbox.h	2006/01/23 03:27:32	1.30
+++ include/wx/listbox.h	2006/03/09 07:12:13
@@ -108,4 +108,7 @@
     bool Selected(int n) const { return IsSelected(n); }
 
+    // returns the item number at a point or wxNOT_FOUND
+    int HitTest(const wxPoint& point) { return DoListHitTest(point); }
+
 protected:
     // NB: due to wxGTK implementation details, DoInsert() is implemented
@@ -121,4 +124,7 @@
 
     virtual void DoSetSelection(int n, bool select) = 0;
+
+    virtual int DoListHitTest(const wxPoint& WXUNUSED(point))
+        { return wxNOT_FOUND; } //Can't be DoHitTest due to function hiding
 
 
Index: include/wx/gtk/listbox.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/gtk/listbox.h,v
retrieving revision 1.55
diff -b -u -2 -r1.55 listbox.h
--- include/wx/gtk/listbox.h	2006/03/02 09:55:07	1.55
+++ include/wx/gtk/listbox.h	2006/03/09 07:12:14
@@ -115,4 +115,6 @@
     virtual void DoSetItemClientObject(int n, wxClientData* clientData);
     virtual wxClientData* DoGetItemClientObject(int n) const;
+    virtual int DoListHitTest(const wxPoint& point);
+
     void DoApplyWidgetStyle(GtkRcStyle *style);
 
Index: include/wx/mac/carbon/listbox.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/mac/carbon/listbox.h,v
retrieving revision 1.16
diff -b -u -2 -r1.16 listbox.h
--- include/wx/mac/carbon/listbox.h	2006/02/08 21:46:10	1.16
+++ include/wx/mac/carbon/listbox.h	2006/03/09 07:37:55
@@ -114,4 +114,5 @@
     virtual wxClientData* DoGetItemClientObject(int n) const;
     virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags = wxSIZE_AUTO);
+    virtual int DoListHitTest(const wxPoint& point);
 
     void            MacDelete( int n ) ;
@@ -127,4 +128,5 @@
     void            MacScrollTo( int n ) ;
     bool            MacSuppressSelection( bool suppress ) ;
+    int             MacHitTest( const wxPoint& point ) ;
 
     // free memory (common part of Clear() and dtor)
Index: include/wx/msw/listbox.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/msw/listbox.h,v
retrieving revision 1.46
diff -b -u -2 -r1.46 listbox.h
--- include/wx/msw/listbox.h	2006/02/08 21:46:20	1.46
+++ include/wx/msw/listbox.h	2006/03/09 07:26:25
@@ -143,4 +143,5 @@
     virtual void DoSetItemClientObject(int n, wxClientData* clientData);
     virtual wxClientData* DoGetItemClientObject(int n) const;
+    virtual int DoListHitTest(const wxPoint& point);
 
     // free memory (common part of Clear() and dtor)
Index: samples/listbox/lboxtest.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/samples/listbox/lboxtest.cpp,v
retrieving revision 1.11
diff -b -u -2 -r1.11 lboxtest.cpp
--- samples/listbox/lboxtest.cpp	2005/06/16 15:18:57	1.11
+++ samples/listbox/lboxtest.cpp	2006/03/09 07:26:23
@@ -125,4 +125,5 @@
     void OnListbox(wxCommandEvent& event);
     void OnListboxDClick(wxCommandEvent& event);
+    void OnListboxRDown(wxMouseEvent& event);
 
     void OnCheckOrRadioBox(wxCommandEvent& event);
@@ -488,4 +489,7 @@
     wxLog::SetActiveTarget(m_logTarget);
 #endif // wxUSE_LOG
+
+    m_lbox->Connect(wxEVT_RIGHT_DOWN, 
+        wxMouseEventHandler(LboxTestFrame::OnListboxRDown), NULL, this);
 }
 
@@ -698,4 +702,16 @@
     int sel = event.GetInt();
     wxLogMessage(_T("Listbox item %d double clicked"), sel);
+}
+
+void LboxTestFrame::OnListboxRDown(wxMouseEvent& event)
+{
+    int item = m_lbox->HitTest(event.GetPosition());
+
+    if(item != wxNOT_FOUND)
+        wxLogMessage(_T("Listbox item %d right clicked"), item);
+    else
+        wxLogMessage(_T("Listbox right clicked but no item clicked upon"));
+
+    event.Skip();
 }
 
Index: src/gtk/listbox.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/gtk/listbox.cpp,v
retrieving revision 1.165
diff -b -u -2 -r1.165 listbox.cpp
--- src/gtk/listbox.cpp	2006/03/09 00:32:42	1.165
+++ src/gtk/listbox.cpp	2006/03/09 07:12:15
@@ -1019,4 +1019,28 @@
 }
 
+// ----------------------------------------------------------------------------
+// hittest
+// ----------------------------------------------------------------------------
+
+int wxListBox::DoListHitTest(const wxPoint& point)
+{
+    //Need to translate from master window since it is in client coords
+    gint binx, biny;
+    gdk_window_get_geometry(gtk_tree_view_get_bin_window(m_treeview), 
+                            &binx, &biny, NULL, NULL, NULL);
+
+    GtkTreePath* path;
+    if(!gtk_tree_view_get_path_at_pos(m_treeview, 
+                                  point.x - binx, point.y - biny,
+                                  &path, NULL, NULL, NULL)) //last two == x,y rel to cell
+    {
+        return wxNOT_FOUND;
+    }
+
+    int index = gtk_tree_path_get_indices(path)[0];
+    gtk_tree_path_free(path);
+
+    return index;
+}
 
 // ----------------------------------------------------------------------------
Index: src/mac/carbon/listbox.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/mac/carbon/listbox.cpp,v
retrieving revision 1.106
diff -b -u -2 -r1.106 listbox.cpp
--- src/mac/carbon/listbox.cpp	2006/01/04 11:49:01	1.106
+++ src/mac/carbon/listbox.cpp	2006/03/09 07:37:56
@@ -534,4 +534,9 @@
 }
 
+int wxListBox::DoListHitTest(const wxPoint& point)
+{
+    return MacHitTest(point);
+}
+
 void wxListBox::SetString(int n, const wxString& s)
 {
@@ -781,4 +786,43 @@
     UInt32 id = n + 1 ;
     verify_noerr( m_peer->RevealItem( id , kTextColumnId , kDataBrowserRevealWithoutSelecting ) ) ;
+}
+
+int wxListBox::MacHitTest(const wxPoint& point)
+{
+    //Yuck - there is no easy way to get a databrowseritem from a point
+    //so we need to iterate through our items to see which one this falls under
+    int count = GetCount();
+    DataBrowserTableViewColumnID colId = 0;
+
+    //Get column property id (req. for call to itempartbounds)
+    GetDataBrowserTableViewColumnProperty(m_peer->GetControlRef(), 0, &colId);
+    
+    for(int i = 1; i <= count; ++i)
+    {
+        Rect bounds;
+        GetDataBrowserItemPartBounds(m_peer->GetControlRef(), i, colId, 
+                                     kDataBrowserPropertyEnclosingPart,
+                                     &bounds);
+        
+        //translate to client coords
+        MacRootWindowToWindow(&bounds.left, &bounds.top);
+        MacRootWindowToWindow(&bounds.right, &bounds.bottom);
+        
+#if 0 //debugging :)
+        wxPrintf(wxT("L:%i R:%i T:%i B:%i HT:%i,%i\n"),
+                    bounds.left, bounds.right,
+                    bounds.top, bounds.bottom, 
+                    point.x, point.y);
+        fflush(stdout);
+#endif
+        //if point is within the bounds, return this item
+        if( (point.x >= bounds.left && point.x <= bounds.right) &&
+            (point.y >= bounds.top && point.y <= bounds.bottom) )
+        {
+            return i - 1; //found
+        }
+    }
+    
+    return wxNOT_FOUND;
 }
 
Index: src/msw/listbox.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/msw/listbox.cpp,v
retrieving revision 1.127
diff -b -u -2 -r1.127 listbox.cpp
--- src/msw/listbox.cpp	2005/12/25 02:34:42	1.127
+++ src/msw/listbox.cpp	2006/03/09 07:44:34
@@ -553,4 +553,18 @@
 }
 
+int wxListBox::DoListHitTest(const wxPoint& point)
+{
+    //Fourth param - lowword == x, hiword == y (in client coords)
+    //MSDN apparently are incorrect and hiword of return 
+    //value specifies 1 if an item is not hit and 0 if one is
+    LRESULT lRes =  ::SendMessage(GetHwnd(), LB_ITEMFROMPOINT, 
+                                  0L, MAKELONG(point.x, point.y));
+
+    if(HIWORD(lRes) != 0)
+        return wxNOT_FOUND;
+
+    return lRes;
+}
+
 void wxListBox::SetString(int N, const wxString& s)
 {

 	  	 

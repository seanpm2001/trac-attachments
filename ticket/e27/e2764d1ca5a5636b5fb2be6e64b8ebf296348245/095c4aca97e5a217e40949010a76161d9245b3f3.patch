Index: include/wx/prntbase.h
===================================================================
--- include/wx/prntbase.h	(revision 67367)
+++ include/wx/prntbase.h	(working copy)
@@ -54,6 +54,22 @@
 };
 
 //----------------------------------------------------------------------------
+// Flags used with wxPreviewFrame Initialize()
+//----------------------------------------------------------------------------
+
+enum wxPreviewFrameInitializeFlags
+{
+    // Disable all other wxTopLevelWindows.
+    wxPreviewFrame_AppModal = 0,
+
+    // Disable parent wxTopLevelWindow only.
+    wxPreviewFrame_WindowModal = 1,
+
+    // Disable no wxTopLevelWindow.
+    wxPreviewFrame_NonModal = 2
+};
+
+//----------------------------------------------------------------------------
 // wxPrintFactory
 //----------------------------------------------------------------------------
 
@@ -385,7 +401,7 @@
     virtual ~wxPreviewFrame();
 
     void OnCloseWindow(wxCloseEvent& event);
-    virtual void Initialize();
+    virtual void Initialize( int flags = wxPreviewFrame_AppModal );
     virtual void CreateCanvas();
     virtual void CreateControlBar();
 
Index: interface/wx/print.h
===================================================================
--- interface/wx/print.h	(revision 67367)
+++ interface/wx/print.h	(working copy)
@@ -117,8 +117,32 @@
     void OnPaint(wxPaintEvent& event);
 };
 
+/**
+   wxPreviewFrame initialize flags.
 
+    These flags can be used with wxPreviewFrame::Initialize().
 
+    @since 2.9.2
+*/
+enum wxPreviewFrameInitializeFlags
+{
+    /**
+        Disable all other wxTopLevelWindows when the PreviewFrame is shown 
+        (default).
+     */
+    wxPreviewFrame_AppModal = 0,
+
+    /** 
+        Disable only the parent wxTopLevelWindow when the PreviewFrame is shown.
+     */
+    wxPreviewFrame_WindowModal = 1,
+
+    /** 
+        Show the frame non-modal, do not disable any wxTopLevelWindows.
+     */
+    wxPreviewFrame_NonModal = 2
+};
+
 /**
     @class wxPreviewFrame
 
@@ -129,7 +153,8 @@
     @library{wxbase}
     @category{printing}
 
-    @see wxPreviewCanvas, wxPreviewControlBar, wxPrintPreview
+    @see wxPreviewCanvas, wxPreviewControlBar, wxPrintPreview, 
+    wxPreviewFrameInitializeFlags
 */
 class wxPreviewFrame : public wxFrame
 {
@@ -169,15 +194,17 @@
     virtual void CreateControlBar();
 
     /**
-        Creates the preview canvas and control bar, and calls wxWindow::MakeModal(@true)
-        to disable other top-level windows in the application.
+        Creates the preview canvas and control bar. Also calls 
+        wxWindow::MakeModal(@true) to disable other top-level windows in the
+        application. Since 2.9.2 the PreviewFrame can also be shown non-modally or
+        modal to a parent window using wxPreviewFrameInitializeFlags.
 
         This function should be called by the application prior to showing the frame.
     */
-    virtual void Initialize();
+    virtual void Initialize(int flags = wxPreviewFrame_AppModal);
 
     /**
-        Enables the other frames in the application, and deletes the print preview
+        Enables any disabled frames in the application, and deletes the print preview
         object, implicitly deleting any printout objects associated with the print
         preview object.
     */
Index: src/common/prntbase.cpp
===================================================================
--- src/common/prntbase.cpp	(revision 67367)
+++ src/common/prntbase.cpp	(working copy)
@@ -1564,14 +1564,9 @@
 
 wxPreviewFrame::~wxPreviewFrame()
 {
-}
-
-void wxPreviewFrame::OnCloseWindow(wxCloseEvent& WXUNUSED(event))
-{
-    if (m_windowDisabler)
-        delete m_windowDisabler;
-
     // Need to delete the printout and the print preview
+    // here because the Frame will not get an OnClose event
+    // when Destroy() is called in AppExit
     wxPrintout *printout = m_printPreview->GetPrintout();
     if (printout)
     {
@@ -1583,11 +1578,24 @@
 
     m_previewCanvas->SetPreview(NULL);
     wxDELETE(m_printPreview);
+}
 
+void wxPreviewFrame::OnCloseWindow(wxCloseEvent& WXUNUSED(event))
+{
+    if (m_windowDisabler)
+    {
+        delete m_windowDisabler;
+    }
+    else if( GetParent() ) // check whether parent was disabled
+    {
+        if( !GetParent()->IsEnabled() )
+            GetParent()->Enable( true );
+    }
+ 
     Destroy();
 }
 
-void wxPreviewFrame::Initialize()
+void wxPreviewFrame::Initialize( int flags )
 {
 #if wxUSE_STATUSBAR
     CreateStatusBar();
@@ -1606,7 +1614,22 @@
     SetAutoLayout( true );
     SetSizer( item0 );
 
-    m_windowDisabler = new wxWindowDisabler(this);
+    if( !( flags & wxPreviewFrame_NonModal ) )
+    {
+        if( flags & wxPreviewFrame_WindowModal )
+        {
+            wxASSERT_MSG( GetParent(), 
+                    "wxPreviewFrame_ParentModal used with no parent." );
+            if( GetParent() )
+            {
+                GetParent()->Enable( false );
+            }
+        }
+        else // flags == wxPreviewFrame_AppModal
+        {
+            m_windowDisabler = new wxWindowDisabler( this );
+        }
+    }
 
     Layout();
 

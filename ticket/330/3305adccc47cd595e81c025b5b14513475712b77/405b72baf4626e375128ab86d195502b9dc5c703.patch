diff -uNr wxWidgets-orig/include/wx/html/forcelnk.h wxWidgets-mine/include/wx/html/forcelnk.h
--- wxWidgets-orig/include/wx/html/forcelnk.h	2009-03-06 12:00:50.000000000 +0000
+++ wxWidgets-mine/include/wx/html/forcelnk.h	2009-05-14 17:56:16.796875000 +0100
@@ -56,7 +56,8 @@
     FORCE_LINK(m_hline) \
     FORCE_LINK(m_links) \
     FORCE_LINK(m_tables) \
-    FORCE_LINK(m_style)
+    FORCE_LINK(m_style) \
+    FORCE_LINK(m_span)
 
 
 #endif // _WX_FORCELNK_H_
diff -uNr wxWidgets-orig/include/wx/html/htmlcolourp.h wxWidgets-mine/include/wx/html/htmlcolourp.h
--- wxWidgets-orig/include/wx/html/htmlcolourp.h	1970-01-01 00:00:00.000000000 +0000
+++ wxWidgets-mine/include/wx/html/htmlcolourp.h	2009-05-15 13:53:53.437500000 +0100
@@ -0,0 +1,31 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        htmlcolourp.h
+// Purpose:     wxHtml helper code for extracting colour parameters 
+// Author:      Nigel Paton
+// RCS-ID:      $Id$
+// Copyright:   
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+#ifndef _WX_COLOURP_H_
+#define _WX_COLOURP_H_
+
+#include "wx/defs.h"
+
+#if wxUSE_HTML
+/** Class to help handle colour parameters HTML tags. */
+class WXDLLIMPEXP_HTML wxHtmlColourParams
+{
+public:
+    /** Get the value of the named parameter as a colour. */
+    bool GetParamAsColour(const wxString& par, wxColour *clr) const;
+
+protected:
+    /** Get the value of the named colour parameter. */
+    virtual wxString GetColourParam(const wxString& par) const = 0;
+};
+
+
+#endif
+#endif
+
diff -uNr wxWidgets-orig/include/wx/html/htmlstylep.h wxWidgets-mine/include/wx/html/htmlstylep.h
--- wxWidgets-orig/include/wx/html/htmlstylep.h	1970-01-01 00:00:00.000000000 +0000
+++ wxWidgets-mine/include/wx/html/htmlstylep.h	2009-05-15 13:08:19.890625000 +0100
@@ -0,0 +1,54 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        htmlstylep.h
+// Purpose:     wxHtml helper code for extracting style parameters 
+// Author:      Nigel Paton
+// RCS-ID:      $Id$
+// Copyright:   
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+#ifndef _WX_STYLEP_H_
+#define _WX_STYLEP_H_
+
+#include "wx/defs.h"
+
+#if wxUSE_HTML
+
+#include "wx/arrstr.h"
+#include "wx/object.h"
+#include "wx/html/htmlcolourp.h"
+
+class wxHtmlTag;
+
+/** Class to parse 'style' parameter values in HTML tags. */
+class WXDLLIMPEXP_HTML wxHtmlStyleParams : public wxObject, public wxHtmlColourParams
+{
+    DECLARE_DYNAMIC_CLASS(wxHtmlStyleParams)
+
+public:
+    wxHtmlStyleParams() : wxObject() {}
+
+    /** Extract the style parameter from the given tag.
+     * This function will clear the current parameters in this class and
+     * then extract and style parameters from the passed in tag. */
+    void Set(const wxHtmlTag& tag);
+    /** Check whether the named parameter is present or not. */
+    bool HasParam(const wxString& par) const;
+    /** Get the value of the named parameter. */
+    wxString GetParam(const wxString& par) const;
+
+protected:
+    /** Get the value of the named colour parameter. */
+    wxString GetColourParam(const wxString& par) const { return (GetParam(par)); }
+
+private:
+    /** Array of value name strings. */
+    wxArrayString   m_names;
+    /** Array of value strings. */
+    wxArrayString   m_values;
+};
+
+
+#endif
+#endif
+
diff -uNr wxWidgets-orig/include/wx/html/htmltag.h wxWidgets-mine/include/wx/html/htmltag.h
--- wxWidgets-orig/include/wx/html/htmltag.h	2009-03-06 12:00:50.000000000 +0000
+++ wxWidgets-mine/include/wx/html/htmltag.h	2009-05-15 13:33:01.515625000 +0100
@@ -16,6 +16,7 @@
 
 #include "wx/object.h"
 #include "wx/arrstr.h"
+#include "wx/html/htmlcolourp.h"
 
 class WXDLLIMPEXP_FWD_CORE wxColour;
 class WXDLLIMPEXP_FWD_HTML wxHtmlEntitiesParser;
@@ -54,7 +55,7 @@
 //                  by wxHtmlParser.
 //--------------------------------------------------------------------------------
 
-class WXDLLIMPEXP_HTML wxHtmlTag : public wxObject
+class WXDLLIMPEXP_HTML wxHtmlTag : public wxObject, public wxHtmlColourParams
 {
     DECLARE_CLASS(wxHtmlTag)
 
@@ -66,6 +67,9 @@
               const wxString& source, int pos, int end_pos,
               wxHtmlTagsCache *cache,
               wxHtmlEntitiesParser *entParser);
+    /** Get the value of the named colour parameter. */
+    wxString GetColourParam(const wxString& par) const { return (GetParam(par)); }
+
     friend class wxHtmlParser;
 public:
     virtual ~wxHtmlTag();
@@ -95,7 +99,6 @@
     wxString GetParam(const wxString& par, bool with_commas = false) const;
 
     // Convenience functions:
-    bool GetParamAsColour(const wxString& par, wxColour *clr) const;
     bool GetParamAsInt(const wxString& par, int *clr) const;
 
     // Scans param like scanf() functions family does.
diff -uNr wxWidgets-orig/include/wx/html/winpars.h wxWidgets-mine/include/wx/html/winpars.h
--- wxWidgets-orig/include/wx/html/winpars.h	2009-03-06 12:00:50.000000000 +0000
+++ wxWidgets-mine/include/wx/html/winpars.h	2009-05-15 13:54:47.781250000 +0100
@@ -107,6 +107,8 @@
 
     int GetFontSize() const {return m_FontSize;}
     void SetFontSize(int s);
+    /** Try and map a font point size into the 1-7 font size. */ 
+    void SetFontPointSize(int pt); 
     int GetFontBold() const {return m_FontBold;}
     void SetFontBold(int x) {m_FontBold = x;}
     int GetFontItalic() const {return m_FontItalic;}
diff -uNr wxWidgets-orig/src/html/htmlcolourp.cpp wxWidgets-mine/src/html/htmlcolourp.cpp
--- wxWidgets-orig/src/html/htmlcolourp.cpp	1970-01-01 00:00:00.000000000 +0000
+++ wxWidgets-mine/src/html/htmlcolourp.cpp	2009-05-15 13:02:55.015625000 +0100
@@ -0,0 +1,64 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        src/html/htmlcolourp.cpp
+// Purpose:     wxHtml helper code for extracting colour parameters 
+// Author:      Nigel Paton
+// RCS-ID:      $Id$
+// Copyright:   
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+#include "wx/wxprec.h"
+#include "wx/html/htmlcolourp.h"
+
+#ifdef __BORLANDC__
+    #pragma hdrstop
+#endif
+
+#if wxUSE_HTML
+
+#ifndef WXPRECOMP
+#endif
+
+
+bool wxHtmlColourParams::GetParamAsColour(const wxString& par, wxColour *clr) const
+{
+    wxCHECK_MSG( clr, false, _T("invalid colour argument") );
+
+    wxString str = GetColourParam(par);
+
+    // handle colours defined in HTML 4.0 first:
+    if (str.length() > 1 && str[0] != _T('#'))
+    {
+        #define HTML_COLOUR(name, r, g, b)              \
+            if (str.IsSameAs(wxT(name), false))         \
+                { clr->Set(r, g, b); return true; }
+        HTML_COLOUR("black",   0x00,0x00,0x00)
+        HTML_COLOUR("silver",  0xC0,0xC0,0xC0)
+        HTML_COLOUR("gray",    0x80,0x80,0x80)
+        HTML_COLOUR("white",   0xFF,0xFF,0xFF)
+        HTML_COLOUR("maroon",  0x80,0x00,0x00)
+        HTML_COLOUR("red",     0xFF,0x00,0x00)
+        HTML_COLOUR("purple",  0x80,0x00,0x80)
+        HTML_COLOUR("fuchsia", 0xFF,0x00,0xFF)
+        HTML_COLOUR("green",   0x00,0x80,0x00)
+        HTML_COLOUR("lime",    0x00,0xFF,0x00)
+        HTML_COLOUR("olive",   0x80,0x80,0x00)
+        HTML_COLOUR("yellow",  0xFF,0xFF,0x00)
+        HTML_COLOUR("navy",    0x00,0x00,0x80)
+        HTML_COLOUR("blue",    0x00,0x00,0xFF)
+        HTML_COLOUR("teal",    0x00,0x80,0x80)
+        HTML_COLOUR("aqua",    0x00,0xFF,0xFF)
+        #undef HTML_COLOUR
+    }
+
+    // then try to parse #rrggbb representations or set from other well
+    // known names (note that this doesn't strictly conform to HTML spec,
+    // but it doesn't do real harm -- but it *must* be done after the standard
+    // colors are handled above):
+    if (clr->Set(str))
+        return true;
+
+    return false;
+}
+
+#endif
diff -uNr wxWidgets-orig/src/html/htmlstylep.cpp wxWidgets-mine/src/html/htmlstylep.cpp
--- wxWidgets-orig/src/html/htmlstylep.cpp	1970-01-01 00:00:00.000000000 +0000
+++ wxWidgets-mine/src/html/htmlstylep.cpp	2009-05-15 13:07:50.859375000 +0100
@@ -0,0 +1,104 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        src/html/htmlstylep.cpp
+// Purpose:     wxHtml helper code for extracting style parameters 
+// Author:      Nigel Paton
+// RCS-ID:      $Id$
+// Copyright:   
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+#include "wx/wxprec.h"
+#include "wx/tokenzr.h"
+#include "wx/html/htmltag.h"
+#include "wx/html/htmlstylep.h"
+
+#ifdef __BORLANDC__
+    #pragma hdrstop
+#endif
+
+#if wxUSE_HTML
+
+#ifndef WXPRECOMP
+#endif
+
+IMPLEMENT_CLASS(wxHtmlStyleParams,wxObject)
+
+void wxHtmlStyleParams::Set(const wxHtmlTag& tag)
+{
+    // Make sure existing valuea are cleared
+    m_names.Clear();
+    m_values.Clear();
+    // Parse style if present
+    if (tag.HasParam(wxT("STYLE")))
+    {
+        wxString wd = tag.GetParam(wxT("STYLE"));
+        // Make sure no whitespace
+        wd.Trim();
+        wd.Trim(false);
+        // Check for bracketed entries
+        // Only support element properties and not pseudo-element or pseudo-classes
+        if (wd.Find('{') == 0)
+        {
+            // Extract string up to end bracket
+            int endBracket = wd.Find('}');
+            if (endBracket != wxNOT_FOUND)
+            {
+                // Replace original string with bracketed options
+                wd = wd.SubString(1, endBracket - 1);
+                // Make sure no whitespace
+                wd.Trim();
+                wd.Trim(false);
+            }
+            else
+            {
+                // Syntax problem change to blank string
+                wd = "";
+            }
+        }
+
+        // Should now have a semi-colon delimited list of options
+        // Each option is a name and a value separated by a colon
+        // Split the list into names and values
+        wxStringTokenizer tkz(wd, wxT(";"), wxTOKEN_STRTOK);
+        while ( tkz.HasMoreTokens() )
+        {
+            wxString token = tkz.GetNextToken();
+            // Split into name and value
+            int colonIndex = token.Find(':');
+            if ((colonIndex != wxNOT_FOUND) && // Not a name value pair
+                (colonIndex != 0))             // No name
+            {
+                wxString tempString;
+                // Extract and trim name
+                tempString = token.SubString(0, colonIndex - 1); 
+                tempString.Trim();
+                tempString.Trim(false);
+                // Add to name list
+                m_names.Add(tempString);
+
+                // Extract and trim values
+                tempString = token.SubString(colonIndex + 1, token.Length() - 1); 
+                tempString.Trim();
+                tempString.Trim(false);
+                // Add to values list
+                m_values.Add(tempString);
+            }
+        }
+    }
+}
+
+bool wxHtmlStyleParams::HasParam(const wxString& par) const
+{
+    return (m_names.Index(par, false) != wxNOT_FOUND);
+}
+
+wxString wxHtmlStyleParams::GetParam(const wxString& par) const
+{
+    int index = m_names.Index(par, false);
+    if (index == wxNOT_FOUND)
+        return wxEmptyString;
+    else
+        return m_values[index];
+}
+
+#endif
diff -uNr wxWidgets-orig/src/html/htmltag.cpp wxWidgets-mine/src/html/htmltag.cpp
--- wxWidgets-orig/src/html/htmltag.cpp	2009-03-06 12:00:48.000000000 +0000
+++ wxWidgets-mine/src/html/htmltag.cpp	2009-05-15 13:41:52.359375000 +0100
@@ -22,6 +22,7 @@
 #endif
 
 #include "wx/html/htmlpars.h"
+#include "wx/html/htmlstylep.h"
 #include <stdio.h> // for vsscanf
 #include <stdarg.h>
 
@@ -366,6 +367,32 @@
     cache->QueryTag(pos, &m_End1, &m_End2);
     if (m_End1 > end_pos) m_End1 = end_pos;
     if (m_End2 > end_pos) m_End2 = end_pos;
+
+    // Try and parse any style param
+    wxHtmlStyleParams  styleParams;
+    styleParams.Set(*this);
+
+    // See if we can convert to existing tag format
+    if ((styleParams.HasParam("text-align") == true) && (HasParam("ALIGN") == false))
+    {   // Add as currently supported ALIGN param
+        m_ParamNames.Add("ALIGN");
+        m_ParamValues.Add(styleParams.GetParam("text-align"));
+    }
+    if ((styleParams.HasParam("width") == true) && (HasParam("WIDTH") == false))
+    {   // Add as currently supported WIDTH param
+        m_ParamNames.Add("WIDTH");
+        m_ParamValues.Add(styleParams.GetParam("width"));
+    }
+    if ((styleParams.HasParam("vertical-align") == true) && (HasParam("VALIGN") == false))
+    {   // Add as currently supported VALIGN param
+        m_ParamNames.Add("VALIGN");
+        m_ParamValues.Add(styleParams.GetParam("vertical-align"));
+    }
+    if ((styleParams.HasParam("background") == true) && (HasParam("BGCOLOR") == false))
+    {   // Add as currently supported BGCOLOR param
+        m_ParamNames.Add("BGCOLOR");
+        m_ParamValues.Add(styleParams.GetParam("background"));
+    }
 }
 
 wxHtmlTag::~wxHtmlTag()
@@ -409,47 +436,6 @@
     return wxSscanf(parval, format, param);
 }
 
-bool wxHtmlTag::GetParamAsColour(const wxString& par, wxColour *clr) const
-{
-    wxCHECK_MSG( clr, false, _T("invalid colour argument") );
-
-    wxString str = GetParam(par);
-
-    // handle colours defined in HTML 4.0 first:
-    if (str.length() > 1 && str[0] != _T('#'))
-    {
-        #define HTML_COLOUR(name, r, g, b)              \
-            if (str.IsSameAs(wxT(name), false))         \
-                { clr->Set(r, g, b); return true; }
-        HTML_COLOUR("black",   0x00,0x00,0x00)
-        HTML_COLOUR("silver",  0xC0,0xC0,0xC0)
-        HTML_COLOUR("gray",    0x80,0x80,0x80)
-        HTML_COLOUR("white",   0xFF,0xFF,0xFF)
-        HTML_COLOUR("maroon",  0x80,0x00,0x00)
-        HTML_COLOUR("red",     0xFF,0x00,0x00)
-        HTML_COLOUR("purple",  0x80,0x00,0x80)
-        HTML_COLOUR("fuchsia", 0xFF,0x00,0xFF)
-        HTML_COLOUR("green",   0x00,0x80,0x00)
-        HTML_COLOUR("lime",    0x00,0xFF,0x00)
-        HTML_COLOUR("olive",   0x80,0x80,0x00)
-        HTML_COLOUR("yellow",  0xFF,0xFF,0x00)
-        HTML_COLOUR("navy",    0x00,0x00,0x80)
-        HTML_COLOUR("blue",    0x00,0x00,0xFF)
-        HTML_COLOUR("teal",    0x00,0x80,0x80)
-        HTML_COLOUR("aqua",    0x00,0xFF,0xFF)
-        #undef HTML_COLOUR
-    }
-
-    // then try to parse #rrggbb representations or set from other well
-    // known names (note that this doesn't strictly conform to HTML spec,
-    // but it doesn't do real harm -- but it *must* be done after the standard
-    // colors are handled above):
-    if (clr->Set(str))
-        return true;
-
-    return false;
-}
-
 bool wxHtmlTag::GetParamAsInt(const wxString& par, int *clr) const
 {
     if ( !HasParam(par) )
diff -uNr wxWidgets-orig/src/html/m_span.cpp wxWidgets-mine/src/html/m_span.cpp
--- wxWidgets-orig/src/html/m_span.cpp	1970-01-01 00:00:00.000000000 +0000
+++ wxWidgets-mine/src/html/m_span.cpp	2009-05-15 13:41:53.656250000 +0100
@@ -0,0 +1,128 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        src/html/m_span.cpp
+// Purpose:     wxHtml module for span handling
+// Author:      Nigel Paton
+// RCS-ID:      $Id$
+// Copyright:   
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+#include "wx/wxprec.h"
+
+#ifdef __BORLANDC__
+    #pragma hdrstop
+#endif
+
+#if wxUSE_HTML && wxUSE_STREAMS
+
+#ifndef WXPRECOMP
+#endif
+
+#include "wx/html/forcelnk.h"
+#include "wx/html/m_templ.h"
+#include "wx/fontenum.h"
+#include "wx/tokenzr.h"
+#include "wx/html/htmlstylep.h"
+
+FORCE_LINK_ME(m_span)
+
+
+TAG_HANDLER_BEGIN(SPAN, "SPAN" )
+
+    TAG_HANDLER_VARS
+        wxArrayString m_Faces;
+
+    TAG_HANDLER_CONSTR(SPAN) { }
+
+    TAG_HANDLER_PROC(tag)
+    {
+        wxColour oldclr = m_WParser->GetActualColor();
+        int oldsize = m_WParser->GetFontSize();
+        int oldbold = m_WParser->GetFontBold();
+
+        // Load any style parameters
+        wxHtmlStyleParams  styleParams;
+        styleParams.Set(tag);
+
+        if (styleParams.HasParam(wxT("color")) == true)
+        {   
+            wxColour clr;
+            if (styleParams.GetParamAsColour(wxT("color"), &clr))
+            {
+                m_WParser->SetActualColor(clr);
+                m_WParser->GetContainer()->InsertCell(new wxHtmlColourCell(clr));
+            }
+        }
+
+        if (styleParams.HasParam(wxT("font-size")) == true)
+        {   
+            wxString fontSize = styleParams.GetParam(wxT("font-size"));
+            int foundIndex;
+            long sizeValue;
+            // Point size
+            foundIndex = fontSize.Find(wxT("pt"));
+            if (foundIndex != wxNOT_FOUND)
+            {
+                fontSize.Truncate(foundIndex);
+                if (fontSize.ToLong(&sizeValue) == true)
+                {
+                    // Set point size
+                    m_WParser->SetFontPointSize(sizeValue);
+                    m_WParser->GetContainer()->InsertCell(
+                         new wxHtmlFontCell(m_WParser->CreateCurrentFont()));
+                }
+            }
+            // else check for other ways of specifying size TBD
+
+        }
+
+        if (styleParams.HasParam(wxT("font-weight")) == true)
+        {
+            // Only bold and normal supported just now
+            wxString fontWeight = styleParams.GetParam(wxT("font-weight"));
+            if (fontWeight == wxT("bold"))
+            {
+                m_WParser->SetFontBold(true);
+                m_WParser->GetContainer()->InsertCell(
+                     new wxHtmlFontCell(m_WParser->CreateCurrentFont()));
+            }
+            else if (fontWeight == wxT("normal"))
+            {
+                m_WParser->SetFontBold(false);
+                m_WParser->GetContainer()->InsertCell(
+                     new wxHtmlFontCell(m_WParser->CreateCurrentFont()));
+            }
+        }
+
+        ParseInner(tag);
+
+        if (oldbold != m_WParser->GetFontBold())
+        {
+            m_WParser->SetFontBold(oldbold);
+            m_WParser->GetContainer()->InsertCell(new wxHtmlFontCell(m_WParser->CreateCurrentFont()));
+        }
+        if (oldsize != m_WParser->GetFontSize())
+        {
+            m_WParser->SetFontSize(oldsize);
+            m_WParser->GetContainer()->InsertCell(new wxHtmlFontCell(m_WParser->CreateCurrentFont()));
+        }
+        if (oldclr != m_WParser->GetActualColor())
+        {
+            m_WParser->SetActualColor(oldclr);
+            m_WParser->GetContainer()->InsertCell(new wxHtmlColourCell(oldclr));
+        }
+
+        return true;
+    }
+
+TAG_HANDLER_END(SPAN)
+
+
+TAGS_MODULE_BEGIN(Spans)
+
+    TAGS_MODULE_ADD(SPAN)
+
+TAGS_MODULE_END(Spans)
+
+
+#endif
diff -uNr wxWidgets-orig/src/html/winpars.cpp wxWidgets-mine/src/html/winpars.cpp
--- wxWidgets-orig/src/html/winpars.cpp	2009-03-06 12:00:48.000000000 +0000
+++ wxWidgets-mine/src/html/winpars.cpp	2009-05-14 18:04:47.515625000 +0100
@@ -674,7 +674,33 @@
     m_FontSize = s;
 }
 
+void wxHtmlWinParser::SetFontPointSize(int pt)
+{
+    if (pt <= m_FontsSizes[0])
+        m_FontSize = 1;
+    else if (pt >= m_FontsSizes[6])
+        m_FontSize = 7;
+    else
+    {
+        // Somewhere in between
+        int counter;
+        for (counter = 0; counter < 6; counter++)
+        {
+            if ((pt > m_FontsSizes[counter]) && (pt <= m_FontsSizes[counter + 1]))
+            {
+                // In this range, find out which entry it is closest to
+                if ((pt - m_FontsSizes[counter]) < (m_FontsSizes[counter + 1] - pt))
+                    m_FontSize = counter;
+                else
+                    m_FontSize = counter + 1;
+
+                break;
+            }
+            // else check next range
+        }
+    }
 
+}
 
 wxFont* wxHtmlWinParser::CreateCurrentFont()
 {

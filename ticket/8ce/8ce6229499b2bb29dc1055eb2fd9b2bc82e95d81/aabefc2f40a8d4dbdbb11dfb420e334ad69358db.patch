Index: docs/tech/tn0014.txt
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/docs/tech/tn0014.txt,v
retrieving revision 1.9
diff -b -u -2 -r1.9 tn0014.txt
--- docs/tech/tn0014.txt	2004/05/04 08:26:58	1.9
+++ docs/tech/tn0014.txt	2004/10/11 12:30:40
@@ -156,9 +156,10 @@
     "\r"   -> carriage return (C character '\r')
     "\t"   -> tabelator (C character '\t')
+    "\\"   -> "\"
 
 Version Note:
     '$' was used instead of '_' prior to version 2.3.0.1.
+    '\\' escaping backslash was added to  version 2.3.0.2
 
-
 I18nString
 ----------
@@ -224,4 +225,26 @@
 Boolean value, either "0" (false) or "1" (true).
 
+Font
+----
+Font value. A font can be instantiated from wxFont() or as a system font, wxSystemSettings::GetSystemFont(sysfont)
+
+<font>
+    <sysfont>wxSYS_DEFAULT_GUI_FONT</sysfont>   optional: wxWidgets system font
+    <size>10</size>                             optional: size in points (default: wxDEFAULT)
+    <style>italic</style>                       optional: style normal, italic, slant (default: wxNORMAL)
+    <weight>italic</weight>                     optional: weight normal, bold, light (default: wxNORMAL)
+    <underlined>1</underlined>                  optional: underlined if 1 (default: 0)
+    <family>roman</family>                      optional: decorative, roman, script, swiss, modern, teletype (default: wxDEFAULT)
+    <face></face>                               optional: comma delimited list of specific face names from wxFontEnumerator.EnumerateFacenames() - xrc picks first available font
+    <encoding>UTF-8</encoding>                  optional: encoding string that can be handled by wxFontMapper.CharsetToEncoding() (default: wxFONTENCODING_DEFAULT)
+</font>
+
+Colour
+------
+A colour can be expressed in html rgb ##RRGGBB, or as a wxWindows system colour.
+
+e.g.
+<bg>wxSYS_COLOUR_SCROLLBAR</bg>
+<fg>#FF0000</fg>
 
 
Index: include/wx/xrc/xmlres.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/xrc/xmlres.h,v
retrieving revision 1.35
diff -b -u -2 -r1.35 xmlres.h
--- include/wx/xrc/xmlres.h	2004/10/07 22:58:05	1.35
+++ include/wx/xrc/xmlres.h	2004/10/11 12:35:16
@@ -396,4 +396,7 @@
     long GetLong( const wxString& param, long defaultv = 0 );
 
+    // Get system colour index using indexname
+    bool GetSystemColour(wxSystemColour& syscolour, const wxString& indexname);
+
     // Gets colour in HTML syntax (#RRGGBB).
     wxColour GetColour(const wxString& param);
@@ -417,4 +420,7 @@
                    const wxArtClient& defaultArtClient = wxART_OTHER,
                    wxSize size = wxDefaultSize);
+
+    // Get system font index using indexname
+    bool GetSystemFont(wxSystemFont& sysfont, const wxString& indexname);
 
     // Gets a font.
Index: src/xrc/xmlres.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/xrc/xmlres.cpp,v
retrieving revision 1.57
diff -b -u -2 -r1.57 xmlres.cpp
--- src/xrc/xmlres.cpp	2004/09/23 09:18:13	1.57
+++ src/xrc/xmlres.cpp	2004/10/11 07:54:35
@@ -796,4 +796,5 @@
                 case wxT('t') : str2 << wxT('\t'); break;
                 case wxT('r') : str2 << wxT('\r'); break;
+                case wxT('\\') : str2 << wxT('\\'); break;
                 default       : str2 << wxT('\\') << *dt; break;
             }
@@ -865,9 +866,67 @@
 }
 
+// Get system colour index using indexname
+bool wxXmlResourceHandler::GetSystemColour(wxSystemColour& syscolour, const wxString& indexname)
+{
+#define IF_ENUM(X) if (indexname.CmpNoCase(wxT(#X)) == 0) { syscolour = X; return true; }
+#define ELIF_ENUM(X) else if (indexname.CmpNoCase(wxT(#X)) == 0) { syscolour = X; return true; }
+
+    // System Colours
+    IF_ENUM(wxSYS_COLOUR_SCROLLBAR)
+    ELIF_ENUM(wxSYS_COLOUR_BACKGROUND)
+    ELIF_ENUM(wxSYS_COLOUR_DESKTOP)
+    ELIF_ENUM(wxSYS_COLOUR_ACTIVECAPTION)
+    ELIF_ENUM(wxSYS_COLOUR_INACTIVECAPTION)
+    ELIF_ENUM(wxSYS_COLOUR_MENU)
+    ELIF_ENUM(wxSYS_COLOUR_WINDOW)
+    ELIF_ENUM(wxSYS_COLOUR_WINDOWFRAME)
+    ELIF_ENUM(wxSYS_COLOUR_MENUTEXT)
+    ELIF_ENUM(wxSYS_COLOUR_WINDOWTEXT)
+    ELIF_ENUM(wxSYS_COLOUR_CAPTIONTEXT)
+    ELIF_ENUM(wxSYS_COLOUR_ACTIVEBORDER)
+    ELIF_ENUM(wxSYS_COLOUR_INACTIVEBORDER)
+    ELIF_ENUM(wxSYS_COLOUR_APPWORKSPACE)
+    ELIF_ENUM(wxSYS_COLOUR_HIGHLIGHT)
+    ELIF_ENUM(wxSYS_COLOUR_HIGHLIGHTTEXT)
+    ELIF_ENUM(wxSYS_COLOUR_BTNFACE)
+    ELIF_ENUM(wxSYS_COLOUR_3DFACE)
+    ELIF_ENUM(wxSYS_COLOUR_BTNSHADOW)
+    ELIF_ENUM(wxSYS_COLOUR_3DSHADOW)
+    ELIF_ENUM(wxSYS_COLOUR_GRAYTEXT)
+    ELIF_ENUM(wxSYS_COLOUR_BTNTEXT)
+    ELIF_ENUM(wxSYS_COLOUR_INACTIVECAPTIONTEXT)
+    ELIF_ENUM(wxSYS_COLOUR_BTNHIGHLIGHT)
+    ELIF_ENUM(wxSYS_COLOUR_BTNHILIGHT)
+    ELIF_ENUM(wxSYS_COLOUR_3DHIGHLIGHT)
+    ELIF_ENUM(wxSYS_COLOUR_3DHILIGHT)
+    ELIF_ENUM(wxSYS_COLOUR_3DDKSHADOW)
+    ELIF_ENUM(wxSYS_COLOUR_3DLIGHT)
+    ELIF_ENUM(wxSYS_COLOUR_INFOTEXT)
+    ELIF_ENUM(wxSYS_COLOUR_INFOBK)
+    ELIF_ENUM(wxSYS_COLOUR_LISTBOX)
+    ELIF_ENUM(wxSYS_COLOUR_HOTLIGHT)
+    ELIF_ENUM(wxSYS_COLOUR_GRADIENTACTIVECAPTION)
+    ELIF_ENUM(wxSYS_COLOUR_GRADIENTINACTIVECAPTION)
+    ELIF_ENUM(wxSYS_COLOUR_MENUHILIGHT)
+    ELIF_ENUM(wxSYS_COLOUR_MENUBAR)
 
+#undef IF_ENUM
+#undef ELIF_ENUM
+
+    return false;
+}
 
 wxColour wxXmlResourceHandler::GetColour(const wxString& param)
 {
     wxString v = GetParamValue(param);
+
+    // find colour using system colour string index e.g wxSYS_COLOUR_SCROLLBAR, wxSYS_COLOUR_3DFACE
+    wxSystemColour syscolour;
+    if (GetSystemColour(syscolour, v))
+    {
+        return wxSystemSettings::GetSystemColour(syscolour);
+    }
+
+    // find colour using HTML syntax (#RRGGBB)
     unsigned long tmp = 0;
 
@@ -1070,4 +1129,25 @@
 
 
+// Get system font index using indexname
+bool wxXmlResourceHandler::GetSystemFont(wxSystemFont& sysfont, const wxString& indexname)
+{
+#define IF_ENUM(X) if (indexname.CmpNoCase(wxT(#X)) == 0) { sysfont = X; return true; }
+#define ELIF_ENUM(X) else if (indexname.CmpNoCase(wxT(#X)) == 0) { sysfont = X; return true; }
+
+    // System Fonts
+    IF_ENUM(wxSYS_OEM_FIXED_FONT)
+    ELIF_ENUM(wxSYS_ANSI_FIXED_FONT)
+    ELIF_ENUM(wxSYS_ANSI_VAR_FONT)
+    ELIF_ENUM(wxSYS_SYSTEM_FONT)
+    ELIF_ENUM(wxSYS_DEVICE_DEFAULT_FONT)
+    ELIF_ENUM(wxSYS_DEFAULT_PALETTE)
+    ELIF_ENUM(wxSYS_SYSTEM_FIXED_FONT)
+    ELIF_ENUM(wxSYS_DEFAULT_GUI_FONT)
+
+#undef IF_ENUM
+#undef ELIF_ENUM
+
+    return false;
+}
 
 wxFont wxXmlResourceHandler::GetFont(const wxString& param)
@@ -1083,14 +1163,31 @@
     m_node = font_node;
 
-    long size = GetLong(wxT("size"), 12);
+    // Font Attribs
 
+    // size
+    int isize = wxDEFAULT;
+    if (GetParamNode(wxT("size"))) 
+        isize = GetLong(wxT("size"), 12);
+
+    // style
+    int istyle = wxNORMAL;
     wxString style = GetParamValue(wxT("style"));
+    if (style == wxT("italic")) 
+        istyle = wxITALIC;
+    else if (style == wxT("slant")) 
+        istyle = wxSLANT;
+
+    // weight
+    int iweight = wxNORMAL;
     wxString weight = GetParamValue(wxT("weight"));
-    int istyle = wxNORMAL, iweight = wxNORMAL;
-    if (style == wxT("italic")) istyle = wxITALIC;
-    else if (style == wxT("slant")) istyle = wxSLANT;
-    if (weight == wxT("bold")) iweight = wxBOLD;
-    else if (weight == wxT("light")) iweight = wxLIGHT;
+    if (weight == wxT("bold")) 
+        iweight = wxBOLD;
+    else if (weight == wxT("light")) 
+        iweight = wxLIGHT;
+   
+    // underline
+    bool underlined = GetBool(wxT("underlined"), false);
 
+    // family and facename
     wxString family = GetParamValue(wxT("family"));
     int ifamily = wxDEFAULT;
@@ -1100,15 +1197,6 @@
     else if (family == wxT("swiss")) ifamily = wxSWISS;
     else if (family == wxT("modern")) ifamily = wxMODERN;
+    else if (family == wxT("teletype")) ifamily = wxTELETYPE;
 
-    bool underlined = GetBool(wxT("underlined"), false);
-
-    wxString encoding = GetParamValue(wxT("encoding"));
-    wxFontMapper mapper;
-    wxFontEncoding enc = wxFONTENCODING_DEFAULT;
-    if (!encoding.IsEmpty())
-        enc = mapper.CharsetToEncoding(encoding);
-    if (enc == wxFONTENCODING_SYSTEM)
-        enc = wxFONTENCODING_DEFAULT;
-
     wxString faces = GetParamValue(wxT("face"));
     wxString facename = wxEmptyString;
@@ -1126,7 +1214,51 @@
     }
 
+    // encoding
+    wxString encoding = GetParamValue(wxT("encoding"));
+    wxFontMapper mapper;
+    wxFontEncoding enc = wxFONTENCODING_DEFAULT;
+    if (!encoding.IsEmpty())
+        enc = mapper.CharsetToEncoding(encoding);
+    if (enc == wxFONTENCODING_SYSTEM)
+        enc = wxFONTENCODING_DEFAULT;
+
+    // System Font
+    wxSystemFont sysfont;
+    if (GetSystemFont(sysfont, GetParamValue(wxT("sysfont"))))
+    {
+        // use the designated a system font
+        wxFont systemfont = wxSystemSettings::GetSystemFont(sysfont);
+
+        if (isize != wxDEFAULT)
+            systemfont.SetPointSize(isize);
+
+        if (istyle != systemfont.GetStyle())
+            systemfont.SetStyle(istyle);
+
+        if (iweight != systemfont.GetWeight())
+            systemfont.SetWeight(iweight);
+
+        if (underlined != systemfont.GetUnderlined())
+            systemfont.SetUnderlined(underlined);
+
+        if (ifamily != wxDEFAULT && ifamily != systemfont.GetFamily())
+            systemfont.SetFamily(ifamily);
+
+        if (!facename.IsEmpty() && facename != systemfont.GetFaceName())
+            systemfont.SetFaceName(facename);
+
+        if (enc != wxFONTENCODING_DEFAULT && enc != systemfont.GetDefaultEncoding())
+            systemfont.SetDefaultEncoding(enc);
+
+        m_node = oldnode;
+
+        return systemfont;
+    }
+
+    // create font
+    wxFont font(isize, ifamily, istyle, iweight, underlined, facename, enc);
+
     m_node = oldnode;
 
-    wxFont font(size, ifamily, istyle, iweight, underlined, facename, enc);
     return font;
 }

 	  	 

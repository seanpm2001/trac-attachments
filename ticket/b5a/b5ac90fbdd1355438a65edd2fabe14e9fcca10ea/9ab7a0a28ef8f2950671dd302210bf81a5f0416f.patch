Index: docs/latex/wx/filesys.tex
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/docs/latex/wx/filesys.tex,v
retrieving revision 1.13
diff -bu2 -r1.13 docs/latex/wx/filesys.tex
--- docs/latex/wx/filesys.tex
+++ docs/latex/wx/filesys.tex
@@ -52,4 +52,18 @@
 care about it.

+\membersection{wxFileSystem::IsHandlerRegistered}\label{wxfilesystemishandlerregistered}
+
+\func{static bool}{IsHandlerRegistered}{\param{const wxString \&}{ handlername}}
+
+This static function returns \true if a class with the given name has been registered in the
+list of the wxFileSystemHandlers.
+
+\membersection{wxFileSystem::IsHandlerRegisteredForPath}\label{wxfilesystemishandlerregisteredforpath}
+
+\func{static bool}{IsHandlerRegisteredForPath}{\param{const wxString \&}{ location}}
+
+This static function returns \true if there is a registered handler which can open the given
+location.
+
 \membersection{wxFileSystem::ChangePathTo}\label{wxfilesystemchangepathto}

Index: include/wx/filesys.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/filesys.h,v
retrieving revision 1.31
diff -bu2 -r1.31 include/wx/filesys.h
--- include/wx/filesys.h
+++ include/wx/filesys.h
@@ -186,4 +186,10 @@
     static void AddHandler(wxFileSystemHandler *handler);

+    // Returns true if a class with given name has been registered as a FS handler.
+    static bool IsHandlerRegistered(const wxString &handlername);
+
+    // Returns true if there is an handler which can open the given location.
+    static bool IsHandlerRegisteredForPath(const wxString &location);
+
     // remove all items from the m_Handlers list
     static void CleanUpHandlers();
Index: include/wx/fs_inet.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/fs_inet.h,v
retrieving revision 1.18
diff -bu2 -r1.18 include/wx/fs_inet.h
--- include/wx/fs_inet.h
+++ include/wx/fs_inet.h
@@ -23,6 +23,12 @@
 {
     public:
+        wxInternetFSHandler() {}
+
         virtual bool CanOpen(const wxString& location);
         virtual wxFSFile* OpenFile(wxFileSystem& fs, const wxString& location);
+
+    private:
+        DECLARE_NO_COPY_CLASS(wxInternetFSHandler);
+        DECLARE_CLASS(wxInternetFSHandler);
 };

Index: include/wx/fs_mem.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/fs_mem.h,v
retrieving revision 1.26
diff -bu2 -r1.26 include/wx/fs_mem.h
--- include/wx/fs_mem.h
+++ include/wx/fs_mem.h
@@ -60,4 +60,6 @@
 {
 public:
+    wxMemoryFSHandler() {}
+
     // bring the base class versions into the scope, otherwise they would be
     // inaccessible in wxMemoryFSHandler
@@ -85,4 +87,7 @@
 #endif // wxUSE_IMAGE

+private:
+    DECLARE_NO_COPY_CLASS(wxMemoryFSHandler);
+    DECLARE_CLASS(wxMemoryFSHandler);
 };

@@ -92,4 +97,9 @@
 class WXDLLIMPEXP_BASE wxMemoryFSHandler : public wxMemoryFSHandlerBase
 {
+private:
+    wxMemoryFSHandler() {}
+
+    DECLARE_NO_COPY_CLASS(wxMemoryFSHandler);
+    DECLARE_CLASS(wxMemoryFSHandler);
 };

Index: include/wx/fs_zip.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/fs_zip.h,v
retrieving revision 1.31
diff -bu2 -r1.31 include/wx/fs_zip.h
--- include/wx/fs_zip.h
+++ include/wx/fs_zip.h
@@ -47,4 +47,5 @@

     DECLARE_NO_COPY_CLASS(wxZipFSHandler)
+    DECLARE_CLASS(wxZipFSHandler)
 };

Index: src/common/filesys.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/filesys.cpp,v
retrieving revision 1.62
diff -bu2 -r1.62 src/common/filesys.cpp
--- src/common/filesys.cpp
+++ src/common/filesys.cpp
@@ -455,4 +455,29 @@
 }

+bool wxFileSystem::IsHandlerRegistered(const wxString &handlername)
+{
+    for ( wxList::compatibility_iterator node = m_Handlers.GetFirst();
+           node; node = node->GetNext() )
+    {
+        wxFileSystemHandler *h = (wxFileSystemHandler*) node->GetData();
+        if (h->GetClassInfo()->GetClassName() == handlername)
+            return true;
+    }
+
+    return false;
+}
+
+bool wxFileSystem::IsHandlerRegisteredForPath(const wxString &location)
+{
+    for ( wxList::compatibility_iterator node = m_Handlers.GetFirst();
+           node; node = node->GetNext() )
+    {
+        wxFileSystemHandler *h = (wxFileSystemHandler*) node->GetData();
+        if (h->CanOpen(location))
+            return true;
+    }
+
+    return false;
+}

 void wxFileSystem::CleanUpHandlers()
Index: src/common/fs_inet.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/fs_inet.cpp,v
retrieving revision 1.36
diff -bu2 -r1.36 src/common/fs_inet.cpp
--- src/common/fs_inet.cpp
+++ src/common/fs_inet.cpp
@@ -61,4 +61,6 @@
 // ----------------------------------------------------------------------------

+IMPLEMENT_CLASS(wxInternetFSHandler, wxFileSystemHandler)
+
 static wxString StripProtocolAnchor(const wxString& location)
 {
Index: src/common/fs_mem.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/fs_mem.cpp,v
retrieving revision 1.34
diff -bu2 -r1.34 src/common/fs_mem.cpp
--- src/common/fs_mem.cpp
+++ src/common/fs_mem.cpp
@@ -79,4 +79,5 @@
 //--------------------------------------------------------------------------------

+IMPLEMENT_CLASS(wxMemoryFSHandler, wxFileSystemHandler)

 wxHashTable *wxMemoryFSHandlerBase::m_Hash = NULL;
Index: src/common/fs_zip.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/fs_zip.cpp,v
retrieving revision 1.44
diff -bu2 -r1.44 src/common/fs_zip.cpp
--- src/common/fs_zip.cpp
+++ src/common/fs_zip.cpp
@@ -54,4 +54,6 @@
 //----------------------------------------------------------------------------

+IMPLEMENT_CLASS(wxZipFSHandler, wxFileSystemHandler)
+
 wxZipFSHandler::wxZipFSHandler() : wxFileSystemHandler()
 {

 	  	 

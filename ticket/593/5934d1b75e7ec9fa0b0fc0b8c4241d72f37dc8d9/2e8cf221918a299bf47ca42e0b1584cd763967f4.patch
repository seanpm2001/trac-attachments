Index: include/wx/private/socket.h
===================================================================
--- include/wx/private/socket.h	(révision 73824)
+++ include/wx/private/socket.h	(copie de travail)
@@ -79,10 +79,6 @@
 
 // define some symbols which winsock.h defines but traditional BSD headers
 // don't
-#ifndef __WINDOWS__
-    #define SOCKET int
-#endif
-
 #ifndef INVALID_SOCKET
     #define INVALID_SOCKET (-1)
 #endif
@@ -293,7 +289,7 @@
     // TODO: make these fields protected and provide accessors for those of
     //       them that wxSocketBase really needs
 //protected:
-    SOCKET m_fd;
+    wxSOCKET_T m_fd;
 
     int m_initialRecvBufferSize;
     int m_initialSendBufferSize;
Index: include/wx/socket.h
===================================================================
--- include/wx/socket.h	(révision 73824)
+++ include/wx/socket.h	(copie de travail)
@@ -30,6 +30,15 @@
 // Types and constants
 // ------------------------------------------------------------------------
 
+// Defines the type of native sockets
+#if defined(__WINDOWS__)
+    #include "wx/msw/wrapwin.h"
+    typedef SOCKET wxSOCKET_T;
+#else 
+    typedef int wxSOCKET_T;
+#endif
+
+
 // Types of different socket notifications or events.
 //
 // NB: the values here should be consecutive and start with 0 as they are
@@ -186,6 +195,9 @@
     void SetEventHandler(wxEvtHandler& handler, int id = wxID_ANY);
     void SetNotify(wxSocketEventFlags flags);
     void Notify(bool notify);
+    
+    // low level access
+    wxSOCKET_T GetSocket() const;
 
     // initialize/shutdown the sockets (done automatically so there is no need
     // to call these functions usually)
Index: interface/wx/socket.h
===================================================================
--- interface/wx/socket.h	(révision 73824)
+++ interface/wx/socket.h	(copie de travail)
@@ -7,6 +7,9 @@
 /////////////////////////////////////////////////////////////////////////////
 
 
+/** The type of a native socket (the mapping is more complex than a simple @c typedef and is not shown here). */
+typedef int wxSOCKET_T;
+
 /**
     @class wxIPaddress
 
@@ -1386,6 +1389,19 @@
         For more information on socket events see @ref wxSocketEventFlags .
     */
     void SetNotify(wxSocketEventFlags flags);
+    
+    /**
+        Returns the native socket descriptor. 
+        
+        This is intended to use with rarely used specific platform features that can only
+        be accessed via the actual socket descriptor.
+        
+        Use with extreme care: do not attempt to use native functions to perform any task 
+        that can be achieved by the wxSocket functions to avoid getting unexpected behaviour.
+        
+        @return Returns the native socket descriptor.
+    */
+    wxSOCKET_T GetSocket() const;
 
     //@}
 };
Index: src/common/socket.cpp
===================================================================
--- src/common/socket.cpp	(révision 73824)
+++ src/common/socket.cpp	(copie de travail)
@@ -526,7 +526,7 @@
 {
     wxSockAddressStorage from;
     WX_SOCKLEN_T fromlen = sizeof(from);
-    const SOCKET fd = accept(m_fd, &from.addr, &fromlen);
+    const wxSOCKET_T fd = accept(m_fd, &from.addr, &fromlen);
 
     // accepting is similar to reading in the sense that it resets "ready for
     // read" flag on the socket
@@ -1826,8 +1826,8 @@
         return;
     }
 
-    // Notice that we need a cast as SOCKET is 64 bit under Win64 and that the
-    // cast is safe because a SOCKET is a handle and so limited to 32 (or,
+    // Notice that we need a cast as wxSOCKET_T is 64 bit under Win64 and that the
+    // cast is safe because a wxSOCKET_T is a handle and so limited to 32 (or,
     // actually, even 24) bit values anyhow.
     wxLogTrace( wxTRACE_Socket, wxT("wxSocketServer on fd %u"),
                 static_cast<unsigned>(m_impl->m_fd) );
@@ -1894,6 +1894,14 @@
     return DoWait(seconds, milliseconds, wxSOCKET_CONNECTION_FLAG) == 1;
 }
 
+wxSOCKET_T wxSocketBase::GetSocket() const
+{
+    wxASSERT_MSG( m_impl, wxT("Socket not initialised") );
+    
+    return m_impl->m_fd;
+}
+
+
 bool wxSocketBase::GetOption(int level, int optname, void *optval, int *optlen)
 {
     wxASSERT_MSG( m_impl, wxT("Socket not initialised") );

diff -ru2 -xCVS -x.#* -x*.orig -x*.rej -x*~ wxWindows/include/wx/html/htmlcell.h /wx-html-changes-3/include/wx/html/htmlcell.h
--- wxWindows/include/wx/html/htmlcell.h	Thu Jan 02 22:50:17 2003
+++ /wx-html-changes-3/include/wx/html/htmlcell.h	Fri Jan 17 12:33:08 2003
@@ -109,5 +109,5 @@
     // Returned value : true if pagebreak was modified, false otherwise
     // Usage : while (container->AdjustPagebreak(&p)) {}
-    virtual bool AdjustPagebreak(int *pagebreak) const;
+    virtual bool AdjustPagebreak(int *pagebreak, int *known_pagebreaks = NULL, int number_of_pages = 0) const;
 
     // Sets cell's behaviour on pagebreaks (see AdjustPagebreak). Default
@@ -192,5 +192,5 @@
     virtual void Draw(wxDC& dc, int x, int y, int view_y1, int view_y2);
     virtual void DrawInvisible(wxDC& dc, int x, int y);
-    virtual bool AdjustPagebreak(int *pagebreak) const;
+    virtual bool AdjustPagebreak(int *pagebreak, int *known_pagebreaks = NULL, int number_of_pages = 0) const;
 
     // insert cell at the end of m_Cells list
diff -ru2 -xCVS -x.#* -x*.orig -x*.rej -x*~ wxWindows/include/wx/html/htmprint.h /wx-html-changes-3/include/wx/html/htmprint.h
--- wxWindows/include/wx/html/htmprint.h	Thu Jan 02 22:50:17 2003
+++ /wx-html-changes-3/include/wx/html/htmprint.h	Fri Jan 17 12:36:30 2003
@@ -26,4 +26,6 @@
 #include "wx/printdlg.h"
 
+#include <limits.h> // INT_MAX
+
 //--------------------------------------------------------------------------------
 // wxHtmlDCRenderer
@@ -40,5 +42,5 @@
     // Following 3 methods *must* be called before any call to Render:
 
-    // Asign DC to this render
+    // Assign DC to this render
     void SetDC(wxDC *dc, double pixel_scale = 1.0);
 
@@ -55,5 +57,6 @@
 
     // [x,y] is position of upper-left corner of printing rectangle (see SetSize)
-    // from is y-coordinate of the very first visible cell 
+    // from is y-coordinate of the very first visible cell
+    // to is y-coordinate of the next following page break, if any
     // Returned value is y coordinate of first cell than didn't fit onto page.
     // Use this value as 'from' in next call to Render in order to print multiple pages
@@ -62,6 +65,13 @@
     // pixels and return y coord of the next page
     //
-    // CAUTION! Render() changes DC's user scale and does NOT restore it! 
-    int Render(int x, int y, int from = 0, int dont_render = FALSE);
+    // known_pagebreaks and number_of_pages are used only when counting pages;
+    // otherwise, their default values should be used. Their purpose is to
+    // support pagebreaks using a subset of CSS2's <DIV>. The <DIV> handler
+    // needs to know what pagebreaks have already been set so that it doesn't
+    // set the same pagebreak twice.
+    //
+    // CAUTION! Render() changes DC's user scale and does NOT restore it!
+    int Render(int x, int y, int from = 0, int dont_render = FALSE, int to = INT_MAX,
+               int *known_pagebreaks = NULL, int number_of_pages = 0);
 
     // returns total height of the html document
@@ -213,5 +223,5 @@
             // (You can set their parameters.)
 
-protected:                
+protected:
     virtual wxHtmlPrintout *CreatePrintout();
     virtual bool DoPreview(wxHtmlPrintout *printout1, wxHtmlPrintout *printout2);
diff -ru2 -xCVS -x.#* -x*.orig -x*.rej -x*~ wxWindows/samples/html/printing/test.htm /wx-html-changes-3/samples/html/printing/test.htm
--- wxWindows/samples/html/printing/test.htm	Tue Feb 19 18:58:39 2002
+++ /wx-html-changes-3/samples/html/printing/test.htm	Fri Jan 17 22:23:02 2003
@@ -41,4 +41,5 @@
 available at dates convenient to the developers.<P>
 
+<div style="page-break-before:always"></div>
 <HR> <FONT SIZE=+2><I><B><a name="schedule">Schedule</a></B></I></FONT> <HR>
 <P>
@@ -121,5 +122,5 @@
 <P>
 
-<HR> <FONT SIZE=+2><I><B><a name="todo">To-Do List</a></B></I></FONT> <HR>
+<HR> <FONT SIZE=+2><I><B><a name="todo"><div style="page-break-before:always">To-Do List</div></a></B></I></FONT> <HR>
 
 <P>
diff -ru2 -xCVS -x.#* -x*.orig -x*.rej -x*~ wxWindows/src/html/htmlcell.cpp /wx-html-changes-3/src/html/htmlcell.cpp
--- wxWindows/src/html/htmlcell.cpp	Thu Dec 19 17:14:33 2002
+++ /wx-html-changes-3/src/html/htmlcell.cpp	Fri Jan 17 12:40:50 2003
@@ -69,5 +69,5 @@
 
 
-bool wxHtmlCell::AdjustPagebreak(int *pagebreak) const
+bool wxHtmlCell::AdjustPagebreak(int *pagebreak, int* WXUNUSED(known_pagebreaks), int WXUNUSED(number_of_pages)) const
 {
     if ((!m_CanLiveOnPagebreak) &&
@@ -216,8 +216,8 @@
 
 
-bool wxHtmlContainerCell::AdjustPagebreak(int *pagebreak) const
+bool wxHtmlContainerCell::AdjustPagebreak(int *pagebreak, int* known_pagebreaks, int number_of_pages) const
 {
     if (!m_CanLiveOnPagebreak)
-        return wxHtmlCell::AdjustPagebreak(pagebreak);
+        return wxHtmlCell::AdjustPagebreak(pagebreak, known_pagebreaks, number_of_pages);
 
     else
@@ -229,5 +229,5 @@
         while (c)
         {
-            if (c->AdjustPagebreak(&pbrk))
+            if (c->AdjustPagebreak(&pbrk, known_pagebreaks, number_of_pages))
                 rt = TRUE;
             c = c->GetNext();
diff -ru2 -xCVS -x.#* -x*.orig -x*.rej -x*~ wxWindows/src/html/htmprint.cpp /wx-html-changes-3/src/html/htmprint.cpp
--- wxWindows/src/html/htmprint.cpp	Wed Dec 04 09:08:16 2002
+++ /wx-html-changes-3/src/html/htmprint.cpp	Fri Jan 17 12:46:34 2003
@@ -95,5 +95,5 @@
 
 
-int wxHtmlDCRenderer::Render(int x, int y, int from, int dont_render)
+int wxHtmlDCRenderer::Render(int x, int y, int from, int dont_render, int to, int *known_pagebreaks, int number_of_pages)
 {
     int pbreak, hght;
@@ -102,6 +102,8 @@
 
     pbreak = (int)(from + m_Height);
-    while (m_Cells->AdjustPagebreak(&pbreak)) {}
+    while (m_Cells->AdjustPagebreak(&pbreak, known_pagebreaks, number_of_pages)) {}
     hght = pbreak - from;
+    if(to < hght)
+        hght = to;
 
     if (!dont_render)
@@ -330,5 +332,5 @@
         pos = m_Renderer->Render((int)( ppmm_h * m_MarginLeft),
                                    (int) (ppmm_v * (m_MarginTop + (m_HeaderHeight == 0 ? 0 : m_MarginSpace)) + m_HeaderHeight),
-                                   pos, TRUE);
+                                   pos, TRUE, INT_MAX, m_PageBreaks, m_NumPages);
         m_PageBreaks[++m_NumPages] = pos;
     } while (pos < m_Renderer->GetTotalHeight());
@@ -364,5 +366,5 @@
     m_Renderer->Render((int) (ppmm_h * m_MarginLeft),
                          (int) (ppmm_v * (m_MarginTop + (m_HeaderHeight == 0 ? 0 : m_MarginSpace)) + m_HeaderHeight),
-                         m_PageBreaks[page-1]);
+                         m_PageBreaks[page-1], FALSE, m_PageBreaks[page]-m_PageBreaks[page-1]);
 
     m_RendererHdr->SetDC(dc, (double)ppiPrinterY / (double)ppiScreenY);
diff -ru2 -xCVS -x.#* -x*.orig -x*.rej -x*~ wxWindows/src/html/m_layout.cpp /wx-html-changes-3/src/html/m_layout.cpp
--- wxWindows/src/html/m_layout.cpp	Wed Dec 04 09:08:17 2002
+++ /wx-html-changes-3/src/html/m_layout.cpp	Fri Jan 17 21:56:55 2003
@@ -32,4 +32,99 @@
 
 
+#include <stdlib.h> // bsearch()
+
+//-----------------------------------------------------------------------------
+// wxHtmlPageBreakCell
+//-----------------------------------------------------------------------------
+
+// Since html isn't a page-layout language, it doesn't support page
+// page breaks directly--that requires CSS2 support. But a page-break
+// facility is handy, and has been requested more than once on the
+// mailing lists. This wxHtml tag handler implements just enough of
+// CSS2 to support a page break by recognizing only
+//   <div style="page-break-before:always">
+//
+// wxHtml maintains page breaks in wxHtmlPrintout::m_PageBreaks. The
+// tag handler below adds appropriate offsets to that array member.
+// wxHtmlDCRenderer::Render() accesses that array and makes a new page
+// begin after each page-break tag.
+
+// The page-break handler does all its work in AdjustPagebreak(). For
+// all tag handlers, that function adjusts the page-break position.
+// For other tags, it determines whether the html element can fit on
+// the remainder of the page; if it cannot fit, but must not be split,
+// then the function moves the page break provided in the argument up,
+// and returns 'true' to inform the caller that the argument was
+// modified.
+//
+// Due to its special purpose, the page-break facility differs from
+// other tags. It takes up no space, but it behaves as though there is
+// never enough room to fit it on the remainder of the page--it always
+// forces a page break. Therefore, unlike other elements that trigger
+// a page break, it would never 'fit' on the following page either.
+// Therefore it's necessary to compare each pagebreak candidate to the
+// array wxHtmlPrintout::m_PageBreaks of pagebreaks already set, and
+// set a new one only if it's not in that array.
+
+class WXDLLEXPORT wxHtmlPageBreakCell : public wxHtmlCell
+{
+  public:
+    wxHtmlPageBreakCell() {}
+
+    bool AdjustPagebreak(int* pagebreak, int* known_pagebreaks = NULL, int number_of_pages = 0) const;
+
+  private:
+    DECLARE_NO_COPY_CLASS(wxHtmlPageBreakCell)
+};
+
+// Comparison routine for bsearch into an int* array of pagebreaks.
+static int integer_compare(void const* i0, void const* i1)
+{
+    return *(int*)i0 - *(int*)i1;
+}
+
+bool wxHtmlPageBreakCell::AdjustPagebreak(int* pagebreak, int* known_pagebreaks, int number_of_pages) const
+{
+    // When we are counting pages, 'known_pagebreaks' is non-NULL.
+    // That's the only time we change 'pagebreak'. Otherwise, pages
+    // were already counted, 'known_pagebreaks' is NULL, and we don't
+    // do anything except return FALSE.
+    //
+    // We also simply return FALSE if the 'pagebreak' argument is
+    // less than (vertically above) or the same as the current
+    // vertical position. Otherwise we'd be setting a pagebreak above
+    // the current cell, which is incorrect, or duplicating a
+    // pagebreak that has already been set.
+    if(NULL == known_pagebreaks || *pagebreak <= m_PosY)
+        {
+        return FALSE;
+        }
+
+    // m_PosY is only the vertical offset from the parent. The pagebreak
+    // required here is the total page offset, so m_PosY must be added
+    // to the parent's offset and height.
+    int total_height = m_PosY + GetParent()->GetPosY() + GetParent()->GetHeight();
+
+    // Search the array of pagebreaks to see whether we've already set
+    // a pagebreak here. The standard bsearch() function is appropriate
+    // because the array of pagebreaks through known_pagebreaks[number_of_pages]
+    // is known to be sorted in strictly increasing order. '1 + number_of_pages'
+    // is used as a bsearch() argument because the array contains a leading
+    // zero plus one element for each page.
+    int* where = (int*) bsearch(&total_height, known_pagebreaks,
+                                1 + number_of_pages, sizeof(int),
+                                integer_compare);
+    // Add a pagebreak only if there isn't one already set here.
+    if(NULL != where)
+        {
+        return FALSE;
+        }
+    else
+        {
+        *pagebreak = m_PosY;
+        return TRUE;
+        }
+}
+
 TAG_HANDLER_BEGIN(P, "P")
 
@@ -111,32 +206,55 @@
     TAG_HANDLER_PROC(tag)
     {
-        int old = m_WParser->GetAlign();
-        wxHtmlContainerCell *c = m_WParser->GetContainer();
-        if (c->GetFirstCell() != NULL)
+        if(tag.HasParam("STYLE"))
         {
-            m_WParser->CloseContainer();
-            m_WParser->OpenContainer();
-            c = m_WParser->GetContainer();
-            c->SetAlign(tag);
-            m_WParser->SetAlign(c->GetAlignHor());
+            if(tag.GetParam("STYLE").IsSameAs(wxString("PAGE-BREAK-BEFORE:ALWAYS"), FALSE))
+            {
+                m_WParser->CloseContainer();
+                m_WParser->OpenContainer()->InsertCell(new wxHtmlPageBreakCell);
+                m_WParser->CloseContainer();
+                m_WParser->OpenContainer();
+                return FALSE;
+            }
+            else
+            {
+                // Treat other STYLE parameters here when they're supported.
+                return FALSE;
+            }
         }
-        else
+        else if(tag.HasParam("ALIGN"))
         {
-            c->SetAlign(tag);
-            m_WParser->SetAlign(c->GetAlignHor());
-        }
+            int old = m_WParser->GetAlign();
+            wxHtmlContainerCell *c = m_WParser->GetContainer();
+            if (c->GetFirstCell() != NULL)
+            {
+                m_WParser->CloseContainer();
+                m_WParser->OpenContainer();
+                c = m_WParser->GetContainer();
+                c->SetAlign(tag);
+                m_WParser->SetAlign(c->GetAlignHor());
+            }
+            else
+            {
+                c->SetAlign(tag);
+                m_WParser->SetAlign(c->GetAlignHor());
+            }
 
-        ParseInner(tag);
+            ParseInner(tag);
 
-        m_WParser->SetAlign(old);
-        if (c->GetFirstCell() != NULL)
-        {
-            m_WParser->CloseContainer();
-            m_WParser->OpenContainer();
+            m_WParser->SetAlign(old);
+            if (c->GetFirstCell() != NULL)
+            {
+                m_WParser->CloseContainer();
+                m_WParser->OpenContainer();
+            }
+            else
+                c->SetAlignHor(old);
+
+            return TRUE;
         }
         else
-            c->SetAlignHor(old);
-
-        return TRUE;
+        {
+            return FALSE;
+        }
     }
 

 	  	 

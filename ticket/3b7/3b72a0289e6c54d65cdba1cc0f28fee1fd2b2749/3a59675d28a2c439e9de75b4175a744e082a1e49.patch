Index: src/osx/cocoa/button.mm
===================================================================
--- src/osx/cocoa/button.mm	(revision 66834)
+++ src/osx/cocoa/button.mm	(working copy)
@@ -17,6 +17,7 @@
 #endif
 
 #include "wx/osx/private.h"
+#include "wx/toplevel.h"
 
 wxSize wxButton::DoGetBestSize() const
 {
@@ -167,6 +168,42 @@
             }
         }
     }
+
+    void SetAcceleratorFromLabel(const wxString &label)
+    {
+        wxChar acceleratorkey=0;
+        bool nextisaccel=false;
+        for(size_t i=0; i < label.Length(); i++)
+        {
+            wxChar c=label[i];
+            if(c == '&')
+            {
+                nextisaccel=!nextisaccel;
+            }
+            else
+            {
+                if(nextisaccel)
+                {
+                    acceleratorkey=c;
+                    break;
+                }
+            }
+
+        }
+        if(acceleratorkey)
+        {
+            wxString accelstring(acceleratorkey,1);
+            accelstring.MakeLower();
+            wxCFStringRef cfText(accelstring);
+            [GetNSButton() setKeyEquivalent:cfText.AsNSString()];
+            [GetNSButton() setKeyEquivalentModifierMask:NSCommandKeyMask];
+
+        }
+        else
+        {
+            [GetNSButton() setKeyEquivalent:@""];          
+        }
+    }
     
     
 private:
@@ -180,6 +217,29 @@
 
 } // anonymous namespace
 
+// Set the keyboard accelerator key from the label (e.g. "Click &Me")
+void wxButton::MacSetAcceleratorFromLabel(const wxString &label)
+{
+    // see if we are the default button for this window
+    bool isDefaultButton=false;
+    wxTopLevelWindow * const
+        tlw = wxDynamicCast(wxGetTopLevelParent(this), wxTopLevelWindow);
+    if(tlw)
+    {
+        if(tlw->GetDefaultItem() == this)
+        {
+            isDefaultButton=true;
+        }
+    }
+    // only set the accelerator if we are not the default button.
+    // Otherwise we would loose the Enter key accelerator.
+    if(!isDefaultButton)
+    {
+        wxButtonCocoaImpl *impl=(wxButtonCocoaImpl*)m_peer;
+        impl->SetAcceleratorFromLabel(label);
+    }
+}
+
 extern "C" void SetBezelStyleFromBorderFlags(NSButton *v, long style);
     
 // set bezel style depending on the wxBORDER_XXX flags specified by the style
@@ -229,7 +289,9 @@
     }
 
     [v setButtonType:NSMomentaryPushInButton];
-    return new wxButtonCocoaImpl( wxpeer, v );
+    wxButtonCocoaImpl *impl=new wxButtonCocoaImpl( wxpeer, v );
+    impl->SetAcceleratorFromLabel(label);
+    return impl;
 }
 
 void wxWidgetCocoaImpl::SetDefaultButton( bool isDefault )
@@ -237,7 +299,10 @@
     if ( [m_osxView isKindOfClass:[NSButton class]] )
     {
         if ( isDefault )
+        {
             [(NSButton*)m_osxView setKeyEquivalent: @"\r" ];
+            [(NSButton*)m_osxView setKeyEquivalentModifierMask: 0];
+        }
         else
             [(NSButton*)m_osxView setKeyEquivalent: @"" ];
     }
Index: src/osx/button_osx.cpp
===================================================================
--- src/osx/button_osx.cpp	(revision 66834)
+++ src/osx/button_osx.cpp	(working copy)
@@ -114,6 +114,7 @@
     }
 
     wxButtonBase::SetLabel(label);
+    MacSetAcceleratorFromLabel(label);
 }
 
 wxBitmap wxButton::DoGetBitmap(State which) const
Index: include/wx/osx/button.h
===================================================================
--- include/wx/osx/button.h	(revision 66834)
+++ include/wx/osx/button.h	(working copy)
@@ -61,6 +61,10 @@
     virtual void DoSetBitmap(const wxBitmap& bitmap, State which);
     virtual void DoSetBitmapPosition(wxDirection dir);
 
+#ifdef wxOSX_USE_COCOA
+    void MacSetAcceleratorFromLabel(const wxString &label);
+#endif
+
     virtual void DoSetBitmapMargins(int x, int y)
     {
         m_marginX = x;

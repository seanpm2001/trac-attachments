diff -ru wxWidgets.orig/docs/changes.txt wxWidgets/docs/changes.txt
--- wxWidgets.orig/docs/changes.txt	2008-07-18 19:29:36.000000000 +0200
+++ wxWidgets/docs/changes.txt	2008-07-18 19:30:18.308065400 +0200
@@ -106,6 +106,7 @@
 - Fix changing size of merged cells in wxGrid (Laurent Humbertclaude).
 - Fixed wrapping bug in wxRichTextCtrl when there were images present;
   now sets the cursor to the next line after pressing Shift+Enter.
+- Add wxQuantize flag wxQUANTIZE_NO_DITHER (troelsk).
 
 All (Unix):
 
diff -ru wxWidgets.orig/include/wx/quantize.h wxWidgets/include/wx/quantize.h
--- wxWidgets.orig/include/wx/quantize.h	2008-06-20 09:59:44.000000000 +0200
+++ wxWidgets/include/wx/quantize.h	2008-07-18 19:21:48.000000000 +0200
@@ -33,6 +33,9 @@
 #define wxQUANTIZE_INCLUDE_WINDOWS_COLOURS      0x01
 #define wxQUANTIZE_RETURN_8BIT_DATA             0x02
 #define wxQUANTIZE_FILL_DESTINATION_IMAGE       0x04
+#if wxABI_VERSION >= 20809
+#define wxQUANTIZE_NO_DITHER                    0x08
+#endif
 
 class WXDLLEXPORT wxQuantize: public wxObject
 {
@@ -69,7 +72,6 @@
     // (in_rows contains w * 3 bytes per row, out_rows w bytes per row)
     // fills out_rows with indexes into palette (which is also stored into palette variable)
     static void DoQuantize(unsigned w, unsigned h, unsigned char **in_rows, unsigned char **out_rows, unsigned char *palette, int desiredNoColours);
-
 };
 
 #endif
diff -ru wxWidgets.orig/src/common/quantize.cpp wxWidgets/src/common/quantize.cpp
--- wxWidgets.orig/src/common/quantize.cpp	2008-06-20 09:59:48.000000000 +0200
+++ wxWidgets/src/common/quantize.cpp	2008-07-18 19:23:20.000000000 +0200
@@ -319,6 +319,7 @@
   FSERRPTR fserrors;        /* accumulated errors */
   bool on_odd_row;      /* flag to remember which row we are on */
   int * error_limiter;      /* table for clamping the applied error */
+  bool dither;
 } my_cquantizer;
 
 typedef my_cquantizer * my_cquantize_ptr;
@@ -1308,7 +1309,7 @@
     cquantize->needs_zeroed = true; /* Always zero histogram */
   } else {
     /* Set up method pointers */
-    cquantize->pub.color_quantize = pass2_fs_dither;
+    cquantize->pub.color_quantize = cquantize->dither ? pass2_fs_dither : pass2_no_dither;
     cquantize->pub.finish_pass = finish_pass2;
 
     {
@@ -1450,8 +1451,8 @@
 
 IMPLEMENT_DYNAMIC_CLASS(wxQuantize, wxObject)
 
-void wxQuantize::DoQuantize(unsigned w, unsigned h, unsigned char **in_rows, unsigned char **out_rows,
-    unsigned char *palette, int desiredNoColours)
+static void DoQuantize(unsigned w, unsigned h, unsigned char **in_rows, unsigned char **out_rows,
+    unsigned char *palette, int desiredNoColours, bool dither)
 {
     j_decompress dec;
     my_cquantize_ptr cquantize;
@@ -1461,7 +1462,7 @@
     prepare_range_limit_table(&dec);
     jinit_2pass_quantizer(&dec);
     cquantize = (my_cquantize_ptr) dec.cquantize;
-
+    cquantize->dither = dither;
 
     cquantize->pub.start_pass(&dec, true);
     cquantize->pub.color_quantize(&dec, in_rows, out_rows, h);
@@ -1493,6 +1494,12 @@
     free(cquantize);
 }
 
+void wxQuantize::DoQuantize(unsigned w, unsigned h, unsigned char **in_rows, unsigned char **out_rows,
+    unsigned char *palette, int desiredNoColours)
+{
+   ::DoQuantize(w, h, in_rows, out_rows, palette, desiredNoColours, true);
+}
+
 // TODO: somehow make use of the Windows system colours, rather than ignoring them for the
 // purposes of quantization.
 
@@ -1537,7 +1544,7 @@
         outrows[i] = data8bit + w * i;
 
     //RGB->palette
-    DoQuantize(w, h, rows, outrows, palette, desiredNoColours);
+    ::DoQuantize(w, h, rows, outrows, palette, desiredNoColours, !(flags & wxQUANTIZE_NO_DITHER));
 
     delete[] rows;
     delete[] outrows;

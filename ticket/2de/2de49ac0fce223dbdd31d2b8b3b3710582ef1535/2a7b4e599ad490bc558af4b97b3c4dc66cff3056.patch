Index: docs/latex/wx/pickerbase.tex
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/docs/latex/wx/pickerbase.tex,v
retrieving revision 1.1
diff -u2 -r1.1 docs/latex/wx/pickerbase.tex
--- docs/latex/wx/pickerbase.tex
+++ docs/latex/wx/pickerbase.tex
@@ -48,4 +48,5 @@

 Sets the margin (in pixel) between the picker and the text control.
+This function can be used only when \helpref{wxpickerbasehastextctrl}{HasTextCtrl} returns \true.


@@ -55,4 +56,5 @@

 Returns the margin (in pixel) between the picker and the text control.
+This function can be used only when \helpref{wxpickerbasehastextctrl}{HasTextCtrl} returns \true.


@@ -63,25 +65,61 @@
 Sets the proportion between the text control and the picker.
 Look at the overview of wxPickerBase for more details about this.
+This function can be used only when \helpref{wxpickerbasehastextctrl}{HasTextCtrl} returns \true.


-\membersection{wxPickerBase::GetTextCtrlProportion}\label{wxpickerbasesgettextctrlproportion}
+\membersection{wxPickerBase::GetTextCtrlProportion}\label{wxpickerbasegettextctrlproportion}

 \constfunc{int}{GetTextCtrlProportion}{}

 Returns the proportion between the text control and the picker.
+This function can be used only when \helpref{wxpickerbasehastextctrl}{HasTextCtrl} returns \true.


-\membersection{wxPickerBase::HasTextCtrl}\label{wxpickerbaseshastextctrl}
+
+\membersection{wxPickerBase::HasTextCtrl}\label{wxpickerbasehastextctrl}

 \constfunc{bool}{HasTextCtrl}{}

-Returns true if this class has a valid text control (i.e. if the \windowstyle{wxPB\_USE\_TEXTCTRL} style was
+Returns true if this window has a valid text control (i.e. if the \windowstyle{wxPB\_USE\_TEXTCTRL} style was
 given when creating this control).


-\membersection{wxPickerBase::GetTextCtrl}\label{wxpickerbasesgetextctrl}
+\membersection{wxPickerBase::GetTextCtrl}\label{wxpickerbasegetextctrl}

 \func{wxTextCtrl *}{GetTextCtrl}{}

-Returns a pointer to the text control handled by this class or \texttt{NULL} if the \windowstyle{wxPB\_USE\_TEXTCTRL} style was not specified when this control was created.
+Returns a pointer to the text control handled by this window or \texttt{NULL} if the \windowstyle{wxPB\_USE\_TEXTCTRL} style was not specified when this control was created.
 Very important: the contents of the text control could be containing an invalid representation of the entity which can be chosen through the picker (e.g. the user entered an invalid colour syntax because of a typo). Thus you should never parse the content of the textctrl to get the user's input; rather use the derived-class getter (e.g. \helpref{wxColourPickerCtrl::GetColour}{wxcolourpickerctrlgetcolour}, \helpref{wxFilePickerCtrl::GetPath}{wxfilepickerctrlgetpath}, etc).
+
+
+\membersection{wxPickerBase::IsTextCtrlGrowable}\label{wxpickerbaseistextctrlgrowable}
+
+\constfunc{bool}{IsTextCtrlGrowable}{}
+
+Returns \true if the text control is growable.
+This function can be used only when \helpref{wxpickerbasehastextctrl}{HasTextCtrl} returns \true.
+
+
+\membersection{wxPickerBase::SetTextCtrlGrowable}\label{wxpickerbasesettextctrlgrowable}
+
+\func{void}{SetTextCtrlGrowable}{\param{bool}{ grow = true}}
+
+Sets the text control as growable when {\tt grow} is \true.
+This function can be used only when \helpref{wxpickerbasehastextctrl}{HasTextCtrl} returns \true.
+
+
+
+\membersection{wxPickerBase::IsPickerCtrlGrowable}\label{wxpickerbaseispickerctrlgrowable}
+
+\constfunc{bool}{IsPickerCtrlGrowable}{}
+
+Returns \true if the picker control is growable.
+
+
+\membersection{wxPickerBase::SetPickerCtrlGrowable}\label{wxpickerbasesetpickerctrlgrowable}
+
+\func{void}{SetPickerCtrlGrowable}{\param{bool}{ grow = true}}
+
+Sets the picker control as growable when {\tt grow} is \true.
+This function has effects only when \helpref{wxpickerbasehastextctrl}{HasTextCtrl} returns \true.
+
Index: include/wx/pickerbase.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/pickerbase.h,v
retrieving revision 1.3
diff -u2 -r1.3 include/wx/pickerbase.h
--- include/wx/pickerbase.h
+++ include/wx/pickerbase.h
@@ -34,7 +34,7 @@
 public:
     // ctor: text is the associated text control
-    wxPickerBase() : m_text(NULL), m_picker(NULL),
-                     m_margin(5), m_textProportion(2) {}
-    virtual ~wxPickerBase();
+    wxPickerBase() : m_text(NULL), m_picker(NULL), m_sizer(NULL)
+        { m_container.SetContainerWindow(this); }
+    virtual ~wxPickerBase() {}


@@ -52,11 +52,37 @@

     // margin between the text control and the picker
-    void SetInternalMargin(int newmargin);
-    int GetInternalMargin() const { return m_margin; }
+    void SetInternalMargin(int newmargin)
+        { GetTextCtrlItem()->SetBorder(newmargin); m_sizer->Layout(); }
+    int GetInternalMargin() const
+        { return GetTextCtrlItem()->GetBorder(); }

     // proportion of the text control respect the picker
     // (which has a fixed proportion value of 1)
-    void SetTextCtrlProportion(int prop) { wxASSERT(prop>=1); m_textProportion=prop; }
-    int GetTextCtrlProportion() const { return m_textProportion; }
+    void SetTextCtrlProportion(int prop)
+        { GetTextCtrlItem()->SetProportion(prop); m_sizer->Layout(); }
+    int GetTextCtrlProportion() const
+        { return GetTextCtrlItem()->GetProportion(); }
+
+    bool IsTextCtrlGrowable() const
+        { return GetTextCtrlItem()->GetFlag() & wxGROW; }
+    void SetTextCtrlGrowable(bool grow = true)
+    {
+        int f = GetDefaultTextCtrlFlag();
+        if (grow)
+            GetTextCtrlItem()->SetFlag(f | wxGROW);
+        else
+            GetTextCtrlItem()->SetFlag(f & ~wxGROW);
+    }
+
+    bool IsPickerCtrlGrowable() const
+        { return GetPickerCtrlItem()->GetFlag() & wxGROW; }
+    void SetPickerCtrlGrowable(bool grow = true)
+    {
+        int f = GetDefaultPickerCtrlFlag();
+        if (grow)
+            GetPickerCtrlItem()->SetFlag(f | wxGROW);
+        else
+            GetPickerCtrlItem()->SetFlag(f & ~wxGROW);
+    }

     bool HasTextCtrl() const
@@ -67,18 +93,4 @@
         { return m_picker; }

-public:     // wxWindow overrides
-
-    void DoSetSizeHints(int minW, int minH,
-                        int maxW = wxDefaultCoord, int maxH = wxDefaultCoord,
-                        int incW = wxDefaultCoord, int incH = wxDefaultCoord );
-
-protected:
-    void DoSetSize(int x, int y,
-                   int width, int height,
-                   int sizeFlags = wxSIZE_AUTO);
-
-    wxSize DoGetBestSize() const;
-
-
 public:     // methods that derived class must/may override

@@ -88,6 +100,4 @@
 protected:        // utility functions

-    inline int GetTextCtrlWidth(int given);
-
     // event handlers
     void OnTextCtrlDelete(wxWindowDestroyEvent &);
@@ -95,4 +105,6 @@
     void OnTextCtrlKillFocus(wxFocusEvent &);

+    void OnSize(wxSizeEvent &);
+
     // returns the set of styles for the attached wxTextCtrl
     // from given wxPickerBase's styles
@@ -104,13 +116,54 @@
         { return (style & wxWINDOW_STYLE_MASK); }

+
+    wxSizerItem *GetPickerCtrlItem() const
+    {
+        if (this->HasTextCtrl())
+            return m_sizer->GetItem((size_t)1);
+        return m_sizer->GetItem((size_t)0);
+    }
+
+    wxSizerItem *GetTextCtrlItem() const
+    {
+        wxASSERT(this->HasTextCtrl());
+        return m_sizer->GetItem((size_t)0);
+    }
+
+    int GetDefaultPickerCtrlFlag() const
+    {
+        // on macintosh, without additional borders
+        // there's not enough space for focus rect
+        return wxALIGN_CENTER_VERTICAL|wxGROW
+#ifdef __WXMAC__
+            | wxTOP | wxRIGHT | wxBOTTOM
+#endif
+            ;
+    }
+
+    int GetDefaultTextCtrlFlag() const
+    {
+        // on macintosh, without wxALL there's not enough space for focus rect
+        return wxALIGN_CENTER_VERTICAL
+#ifdef __WXMAC__
+            | wxALL
+#else
+            | wxRIGHT
+#endif
+            ;
+    }
+
+    void PostCreation();
+
 protected:
     wxTextCtrl *m_text;     // can be NULL
     wxControl *m_picker;
-
-    int m_margin;           // distance between subcontrols
-    int m_textProportion;   // proportion between textctrl and other item
+    wxBoxSizer *m_sizer;

 private:
     DECLARE_ABSTRACT_CLASS(wxPickerBase)
+    DECLARE_EVENT_TABLE()
+
+    // This class must be something just like a panel...
+    WX_DECLARE_CONTROL_CONTAINER();
 };

Index: include/wx/gtk/fontpicker.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/gtk/fontpicker.h,v
retrieving revision 1.2
diff -u2 -r1.2 include/wx/gtk/fontpicker.h
--- include/wx/gtk/fontpicker.h
+++ include/wx/gtk/fontpicker.h
@@ -61,6 +61,4 @@
         { m_selectedFont.SetNativeFontInfo(wxString::FromAscii(gtkdescription)); }

-    wxWindow *m_topParent;
-
 private:
     DECLARE_DYNAMIC_CLASS(wxFontButton)
Index: src/common/clrpickercmn.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/clrpickercmn.cpp,v
retrieving revision 1.4
diff -u2 -r1.4 src/common/clrpickercmn.cpp
--- src/common/clrpickercmn.cpp
+++ src/common/clrpickercmn.cpp
@@ -62,4 +62,8 @@
     m_picker = new wxColourPickerWidget(this, wxID_ANY, col, wxPoint(40,0), wxSize(30,-1),
                                         GetPickerStyle(style));
+
+    // complete sizer creation
+    wxPickerBase::PostCreation();
+
     m_picker->Connect(wxEVT_COMMAND_COLOURPICKER_CHANGED,
             wxColourPickerEventHandler(wxColourPickerCtrl::OnColourChange),
Index: src/common/filepickercmn.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/filepickercmn.cpp,v
retrieving revision 1.5
diff -u2 -r1.5 src/common/filepickercmn.cpp
--- src/common/filepickercmn.cpp
+++ src/common/filepickercmn.cpp
@@ -77,4 +77,8 @@
     if (!CreatePicker(this, path, message, wildcard))
         return false;
+
+    // complete sizer creation
+    wxPickerBase::PostCreation();
+
     m_picker->Connect(GetEventType(),
             wxFileDirPickerEventHandler(wxFileDirPickerCtrlBase::OnFileDirChange),
Index: src/common/fontpickercmn.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/fontpickercmn.cpp,v
retrieving revision 1.4
diff -u2 -r1.4 src/common/fontpickercmn.cpp
--- src/common/fontpickercmn.cpp
+++ src/common/fontpickercmn.cpp
@@ -56,7 +56,4 @@
                         const wxString &name )
 {
-    // by default, the textctrl is, if present, as big as the picker, for wxFontPickerCtrl
-    SetTextCtrlProportion(1);
-
     if (!wxPickerBase::CreateBase(parent, id, Font2String(initial),
                                   pos, size, style, validator, name))
@@ -67,4 +64,7 @@
                                       wxDefaultPosition, wxDefaultSize,
                                       GetPickerStyle(style));
+    // complete sizer creation
+    wxPickerBase::PostCreation();
+
     m_picker->Connect(wxEVT_COMMAND_FONTPICKER_CHANGED,
             wxFontPickerEventHandler(wxFontPickerCtrl::OnFontChange),
Index: src/common/pickerbase.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/pickerbase.cpp,v
retrieving revision 1.5
diff -u2 -r1.5 src/common/pickerbase.cpp
--- src/common/pickerbase.cpp
+++ src/common/pickerbase.cpp
@@ -42,18 +42,15 @@
 IMPLEMENT_ABSTRACT_CLASS(wxPickerBase, wxWindow)

+BEGIN_EVENT_TABLE(wxPickerBase, wxControl)
+    EVT_SIZE(wxPickerBase::OnSize)
+    WX_EVENT_TABLE_CONTROL_CONTAINER(wxPickerBase)
+END_EVENT_TABLE()
+WX_DELEGATE_TO_CONTROL_CONTAINER(wxPickerBase)
+
+
 // ----------------------------------------------------------------------------
 // wxPickerBase
 // ----------------------------------------------------------------------------

-wxPickerBase::~wxPickerBase()
-{
-    // destroy the windows we are managing: these are not automatically
-    // destroyed by wxWindow because they are not built as our children
-    // but rather as children of the parent of the wxPickerBase class
-    // (since wxPickerBase does not represent a real window)
-    if (m_text) m_text->Destroy();
-    if (m_picker) m_picker->Destroy();
-}
-
 bool wxPickerBase::CreateBase(wxWindow *parent,
                          wxWindowID id,
@@ -69,7 +66,9 @@
     style &= ~wxBORDER_MASK;
     if (!wxControl::Create(parent, id, pos, size, style | wxNO_BORDER | wxTAB_TRAVERSAL,
-                            validator, name))
+                           validator, name))
         return false;

+    m_sizer = new wxBoxSizer(wxHORIZONTAL);
+
     if (HasFlag(wxPB_USE_TEXTCTRL))
     {
@@ -77,6 +76,6 @@
         //       attached text control are different: GetTextCtrlStyle() extracts
         //       the styles related to the textctrl from the styles passed here
-        m_text = new wxTextCtrl(this, wxID_ANY, wxEmptyString, wxPoint(0, 0),
-                                wxSize(40, size.GetHeight()), GetTextCtrlStyle(style));
+        m_text = new wxTextCtrl(this, wxID_ANY, wxEmptyString, wxDefaultPosition,
+                                wxDefaultSize, GetTextCtrlStyle(style));
         if (!m_text)
         {
@@ -105,4 +104,6 @@
                 wxWindowDestroyEventHandler(wxPickerBase::OnTextCtrlDelete),
                 NULL, this);
+
+        m_sizer->Add(m_text, 2, GetDefaultTextCtrlFlag(), 5);
     }

@@ -110,4 +111,13 @@
 }

+void wxPickerBase::PostCreation()
+{
+    // the picker's proportion value is fixed
+    m_sizer->Add(m_picker, 1, GetDefaultPickerCtrlFlag(), 5);
+
+    SetSizer(m_sizer);
+    m_sizer->SetSizeHints(this);
+}
+
 void wxPickerBase::OnTextCtrlKillFocus(wxFocusEvent &)
 {
@@ -131,78 +141,9 @@
 }

-int wxPickerBase::GetTextCtrlWidth(int given)
-{
-    // compute the width of m_text like a wxBoxSizer(wxHORIZONTAL) would do
-    // NOTE: the proportion of m_picker is fixed to 1
-    return ((given - m_margin) / (m_textProportion + 1)) * m_textProportion;
-}
-
-void wxPickerBase::DoSetSizeHints(int minW, int minH, int maxW, int maxH, int incW, int incH)
-{
-    wxControl::DoSetSizeHints(minW, minH, maxW, maxH, incW, incH);
-
-    if (m_text)
-    {
-        // compute minWidth and maxWidth of the ausiliary textctrl
-        int textCtrlMinW = -1, textCtrlMaxW = -1;
-        if (minW != -1)
-        {
-            textCtrlMinW = GetTextCtrlWidth(minW);
-            minW -= textCtrlMinW + m_margin;
-        }
-
-        if (maxW != -1)
-        {
-            textCtrlMaxW = GetTextCtrlWidth(maxW);
-            maxW -= textCtrlMaxW + m_margin;
-        }
-
-        m_text->SetSizeHints(textCtrlMinW, minH, textCtrlMaxW, maxH, incW, incH);
-    }
-
-    if (m_picker)
-        m_picker->SetSizeHints(minW, minH, maxW, maxH, incW, incH);
-}
-
-void wxPickerBase::DoSetSize(int x, int y, int width, int height, int sizeFlags)
-{
-    wxControl::DoSetSize(x, y, width, height, sizeFlags);
-
-    int pickerx = 0;
-    if (m_text)
-    {
-        // compute width of the ausiliary textctrl
-        int textCtrlW = GetTextCtrlWidth(width);
-
-        // set the m_text's position relatively to this window
-        m_text->SetSize(0, 0, textCtrlW, height, sizeFlags);
-
-        // change position of the real picker
-        pickerx += textCtrlW + m_margin;
-        width -= textCtrlW + m_margin;
-    }
-
-    if (m_picker)
-        m_picker->SetSize(pickerx, 0, width, height, sizeFlags);
-}
-
-wxSize wxPickerBase::DoGetBestSize() const
-{
-    wxSize ret = m_picker->GetBestSize();
-
-    if (m_text)
-    {
-        wxSize sz = m_text->GetBestSize();
-
-        ret.SetWidth( ret.GetWidth() + sz.GetWidth() + m_margin );
-        ret.SetHeight( wxMax(ret.GetHeight(), sz.GetHeight()) );
-    }
-
-    return ret;
-}
-
-void wxPickerBase::SetInternalMargin(int newmargin)
+void wxPickerBase::OnSize(wxSizeEvent &event)
 {
-    m_margin = newmargin;
+    if (GetAutoLayout())
+        Layout();
+    event.Skip();
 }

Index: src/gtk/clrpicker.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/gtk/clrpicker.cpp,v
retrieving revision 1.4
diff -u2 -r1.4 src/gtk/clrpicker.cpp
--- src/gtk/clrpicker.cpp
+++ src/gtk/clrpicker.cpp
@@ -63,4 +63,5 @@
     {
         m_needParent = true;
+        m_acceptsFocus = true;

         if (!PreCreation( parent, pos, size ) ||
Index: src/gtk/filepicker.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/gtk/filepicker.cpp,v
retrieving revision 1.5
diff -u2 -r1.5 src/gtk/filepicker.cpp
--- src/gtk/filepicker.cpp
+++ src/gtk/filepicker.cpp
@@ -46,8 +46,9 @@
     if (!gtk_check_version(2,6,0))
     {
-        // VERY IMPORTANT: this code is identic to relative code in wxFileButton;
-        //                 if you find a problem here, fix it also in wxFileButton !
+        // VERY IMPORTANT: this code is identic to relative code in wxDirButton;
+        //                 if you find a problem here, fix it also in wxDirButton !

         m_needParent = true;
+        m_acceptsFocus = true;

         if (!PreCreation( parent, pos, size ) ||
@@ -128,5 +129,4 @@
 }

-
 void wxFileButton::SetPath(const wxString &str)
 {
@@ -201,4 +201,5 @@

         m_needParent = true;
+        m_acceptsFocus = true;

         if (!PreCreation( parent, pos, size ) ||
Index: src/gtk/fontpicker.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/gtk/fontpicker.cpp,v
retrieving revision 1.3
diff -u2 -r1.3 src/gtk/fontpicker.cpp
--- src/gtk/fontpicker.cpp
+++ src/gtk/fontpicker.cpp
@@ -62,4 +62,5 @@
     {
         m_needParent = true;
+        m_acceptsFocus = true;

         if (!PreCreation( parent, pos, size ) ||

 	  	 

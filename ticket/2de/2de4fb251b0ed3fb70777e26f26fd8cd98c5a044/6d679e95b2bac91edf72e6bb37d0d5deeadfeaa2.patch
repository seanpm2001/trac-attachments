Index: wxWidgets/src/ribbon/bar.cpp
===================================================================
--- wxWidgets/src/ribbon/bar.cpp	(revision 72054)
+++ wxWidgets/src/ribbon/bar.cpp	(working copy)
@@ -66,6 +66,7 @@
     info.page = page;
     info.active = false;
     info.hovered = false;
+    info.show_tab = true;
     // info.rect not set (intentional)
 
     wxClientDC dcTemp(this);
@@ -141,6 +142,7 @@
     for(i = 0; i < numtabs; ++i)
     {
         wxRibbonPageTabInfo& info = m_pages.Item(i);
+        if (!info.show_tab) continue;
         RepositionPage(info.page);
         if(!info.page->Realize())
         {
@@ -281,6 +283,25 @@
     return m_pages.GetCount();
 }
 
+bool wxRibbonBar::IsTabShown(size_t page)
+{
+    if (page < 0 || (size_t)page >= m_pages.GetCount())
+        return false;
+    return m_pages.Item(page).show_tab;
+}
+
+void wxRibbonBar::ShowTab(size_t page, bool show_tab)
+{
+    if(page < 0 || (size_t)page >= m_pages.GetCount())
+        return;
+    m_pages.Item(page).show_tab = show_tab;
+}
+
+void wxRibbonBar::HideTab(size_t page)
+{
+    ShowTab(page, false);
+}
+
 void wxRibbonBar::DeletePage(size_t n)
 {
     if(n < m_pages.GetCount())
@@ -361,6 +382,7 @@
     }
     m_current_page = (int)page;
     m_pages.Item(page).active = true;
+    m_pages.Item(page).show_tab = true;
     {
         wxRibbonPage* wnd = m_pages.Item(page).page;
         RepositionPage(wnd);
@@ -386,6 +408,21 @@
     return false;
 }
 
+int wxRibbonBar::GetPageNumber(wxRibbonPage* page)
+{
+    size_t numpages = m_pages.GetCount();
+    size_t i;
+    for(i = 0; i < numpages; ++i)
+    {
+        if(m_pages.Item(i).page == page)
+        {
+            return i;
+        }
+    }
+    return wxNOT_FOUND;
+}
+
+
 int wxRibbonBar::GetActivePage() const
 {
     return m_current_page;
@@ -423,6 +460,7 @@
         for(i = 0; i < numtabs; ++i)
         {
             wxRibbonPageTabInfo& info = m_pages.Item(i);
+            if (!info.show_tab) continue;
             info.rect.x = x;
             info.rect.y = y;
             info.rect.width = info.ideal_width;
@@ -440,6 +478,7 @@
         for(i = 0; i < numtabs; ++i)
         {
             wxRibbonPageTabInfo& info = m_pages.Item(i);
+            if (!info.show_tab) continue;
             info.rect.x = x;
             info.rect.y = y;
             info.rect.width = info.minimum_width;
@@ -476,6 +515,7 @@
         for(i = 0; i < numtabs; ++i)
         {
             wxRibbonPageTabInfo& info = m_pages.Item(i);
+            if (!info.show_tab) continue;
             info.rect.x -= m_tab_scroll_amount;
         }
     }
@@ -497,6 +537,7 @@
         for(i = 0; i < numtabs; ++i)
         {
             wxRibbonPageTabInfo& info = m_pages.Item(i);
+            if (!info.show_tab) continue;
             if(info.small_must_have_separator_width < smallest_tab_width)
             {
                 smallest_tab_width = info.small_must_have_separator_width;
@@ -512,6 +553,7 @@
             for(i = 0; i < numtabs; ++i)
             {
                 wxRibbonPageTabInfo& info = m_pages.Item(i);
+                if (!info.show_tab) continue;
                 int delta = info.ideal_width - info.small_must_have_separator_width;
                 info.rect.x = x;
                 info.rect.y = y;
@@ -530,6 +572,7 @@
             for(i = 0; i < numtabs; ++i)
             {
                 wxRibbonPageTabInfo& info = m_pages.Item(i);
+                if (!info.show_tab) continue;
                 if(info.minimum_width < smallest_tab_width)
                 {
                     total_small_width += smallest_tab_width;
@@ -546,6 +589,7 @@
                 for(i = 0; i < numtabs; ++i)
                 {
                     // Sneaky obj array trickery to not copy the tab descriptors
+                    if (!m_pages.Item(i).show_tab) continue;
                     sorted_pages.Add(&m_pages.Item(i));
                 }
                 sorted_pages.Sort(OrderPageTabInfoBySmallWidthAsc);
@@ -553,6 +597,7 @@
                 for(i = 0; i < numtabs; ++i)
                 {
                     wxRibbonPageTabInfo& info = sorted_pages.Item(i);
+                    if (!info.show_tab) continue;
                     if(info.small_must_have_separator_width * (int)(numtabs - i) <= width)
                     {
                         info.rect.width = info.small_must_have_separator_width;;
@@ -566,6 +611,7 @@
                 for(i = 0; i < numtabs; ++i)
                 {
                     wxRibbonPageTabInfo& info = m_pages.Item(i);
+                    if (!info.show_tab) continue;
                     info.rect.x = x;
                     info.rect.y = y;
                     info.rect.height = m_tab_height;
@@ -583,6 +629,7 @@
                 for(i = 0; i < numtabs; ++i)
                 {
                     wxRibbonPageTabInfo& info = m_pages.Item(i);
+                    if (!info.show_tab) continue;
                     int delta = smallest_tab_width - info.minimum_width;
                     info.rect.x = x;
                     info.rect.y = y;
@@ -718,6 +765,7 @@
     for(i = 0; i < numtabs; ++i)
     {
         wxRibbonPageTabInfo& info = m_pages.Item(i);
+        if (!info.show_tab) continue;
 
         dc.DestroyClippingRegion();
         if(m_tab_scroll_buttons_shown)
@@ -750,6 +798,7 @@
         for(i = 0; i < numtabs - 1; ++i)
         {
             wxRibbonPageTabInfo& info = m_pages.Item(i);
+            if (!info.show_tab) continue;
             rect.x = info.rect.x + info.rect.width;
 
             if(m_tab_scroll_buttons_shown && !tabs_rect.Intersects(rect))
@@ -822,6 +871,7 @@
         for(i = 0; i < numtabs; ++i)
         {
             wxRibbonPageTabInfo& info = m_pages.Item(i);
+            if (!info.show_tab) continue;
             if(info.rect.Contains(position))
             {
                 if(index != NULL)
@@ -919,6 +969,7 @@
     for(i = 0; i < numtabs; ++i)
     {
         wxRibbonPageTabInfo& info = m_pages.Item(i);
+        if (!info.show_tab) continue;
         info.rect.SetX(info.rect.GetX() - amount);
     }
     if(show_right != (m_tab_scroll_right_button_rect.GetWidth() != 0) ||
@@ -1009,6 +1060,7 @@
         for(i = 1; i < numtabs; ++i)
         {
             wxRibbonPageTabInfo& info = m_pages.Item(i);
+            if (!info.show_tab) continue;
             wxSize page_min = info.page->GetMinSize();
 
             min_size.x = wxMax(min_size.x, page_min.x);
Index: wxWidgets/include/wx/ribbon/bar.h
===================================================================
--- wxWidgets/include/wx/ribbon/bar.h	(revision 72054)
+++ wxWidgets/include/wx/ribbon/bar.h	(working copy)
@@ -80,6 +80,7 @@
     int minimum_width;
     bool active;
     bool hovered;
+    bool show_tab;
 };
 
 #ifndef SWIG
@@ -115,10 +116,15 @@
     wxRibbonPage* GetPage(int n);
     size_t GetPageCount() const;
     bool DismissExpandedPanel();
+    int GetPageNumber(wxRibbonPage* page);
 
     void DeletePage(size_t n);
     void ClearPages();
 
+    bool IsTabShown(size_t page);
+    void ShowTab(size_t page, bool show_tab=true);
+    void HideTab(size_t page);
+
     void ShowPanels(bool show = true);
     void HidePanels() { ShowPanels(false); }
     bool ArePanelsShown() const { return m_arePanelsShown; }
Index: wxWidgets/interface/wx/ribbon/bar.h
===================================================================
--- wxWidgets/interface/wx/ribbon/bar.h	(revision 72054)
+++ wxWidgets/interface/wx/ribbon/bar.h	(working copy)
@@ -222,6 +222,13 @@
     bool DismissExpandedPanel();
 
     /**
+        Returns the number for a given ribbon bar page.
+
+        The number can be used in other ribbon bar calls.
+    */
+    int GetPageNumber(wxRibbonPage* page);
+    
+    /**
         Delete a single page from this ribbon bar.
 
         The user must call wxRibbonBar::Realize() after one (or more) calls to
@@ -239,6 +246,28 @@
     void ClearPages();
 
     /**
+        Indicates whether the tab for the given page is shown to the user or not.
+        By default all page tabs are shown.
+    */
+    bool IsTabShown(size_t page);
+    
+    /**
+        Show or hide the tab for a given page.
+
+        After showing or hiding a tab, you need to call wxRibbonBar::Realize(). 
+        If you hide the tab for the currently active page (GetActivePage) then
+        you should call SetActivePage to activate a different page.
+    */
+    void ShowTab(size_t page, bool show_tab=true);
+    
+    /**
+        Hides the tab for a given page. 
+        
+        Equivalent to ShowTab(page,false);
+    */
+    void HideTab(size_t page);
+    
+    /**
         Shows or hides the panel area of the ribbon bar.
 
         If the panel area is hidden, then only the tab of the ribbon bar will
Index: wxWidgets/samples/ribbon/ribbondemo.cpp
===================================================================
--- wxWidgets/samples/ribbon/ribbondemo.cpp	(revision 72054)
+++ wxWidgets/samples/ribbon/ribbondemo.cpp	(working copy)
@@ -83,7 +83,9 @@
         ID_CHANGE_TEXT1,
         ID_CHANGE_TEXT2,
         ID_UI_CHANGE_TEXT_UPDATED,
-        ID_REMOVE_PAGE
+        ID_REMOVE_PAGE,
+        ID_HIDE_TABS,
+        ID_SHOW_TABS
     };
 
     void OnEnableUpdateUI(wxUpdateUIEvent& evt);
@@ -129,6 +131,8 @@
     void OnPositionLeftBoth(wxCommandEvent& evt);
     void OnPositionLeftDropdown(wxRibbonToolBarEvent& evt);
     void OnRemovePage(wxRibbonButtonBarEvent& evt);
+    void OnHideTabs(wxRibbonButtonBarEvent& evt);
+    void OnShowTabs(wxRibbonButtonBarEvent& evt);
     void OnTogglePanels(wxCommandEvent& evt);
 
     void OnExtButton(wxRibbonPanelEvent& evt);
@@ -228,6 +232,8 @@
 EVT_TOGGLEBUTTON(ID_TOGGLE_PANELS, MyFrame::OnTogglePanels)
 EVT_RIBBONPANEL_EXTBUTTON_ACTIVATED(wxID_ANY, MyFrame::OnExtButton)
 EVT_RIBBONBUTTONBAR_CLICKED(ID_REMOVE_PAGE, MyFrame::OnRemovePage)
+EVT_RIBBONBUTTONBAR_CLICKED(ID_HIDE_TABS, MyFrame::OnHideTabs)
+EVT_RIBBONBUTTONBAR_CLICKED(ID_SHOW_TABS, MyFrame::OnShowTabs)
 END_EVENT_TABLE()
 
 #include "align_center.xpm"
@@ -393,6 +399,8 @@
         wxRibbonPanel *panel = new wxRibbonPanel(page, wxID_ANY, wxT("Page manipulation"), ribbon_xpm);
         wxRibbonButtonBar *bar = new wxRibbonButtonBar(panel, wxID_ANY);
         bar->AddButton(ID_REMOVE_PAGE, wxT("Remove"), wxArtProvider::GetBitmap(wxART_DELETE, wxART_OTHER, wxSize(24, 24)));
+        bar->AddButton(ID_HIDE_TABS, wxT("Hide Tabs"), ribbon_xpm);
+        bar->AddButton(ID_SHOW_TABS, wxT("Show Tabs"), ribbon_xpm);
     }
 
     m_ribbon->Realize();
@@ -984,3 +992,19 @@
         m_ribbon->Realize();
     }
 }
+
+void MyFrame::OnHideTabs(wxRibbonButtonBarEvent& WXUNUSED(evt))
+{
+    m_ribbon->HideTab(1);
+    m_ribbon->HideTab(2);
+    m_ribbon->HideTab(3);
+    m_ribbon->Realize();
+}
+
+void MyFrame::OnShowTabs(wxRibbonButtonBarEvent& WXUNUSED(evt))
+{
+    m_ribbon->ShowTab(1);
+    m_ribbon->ShowTab(2);
+    m_ribbon->ShowTab(3);
+    m_ribbon->Realize();
+}

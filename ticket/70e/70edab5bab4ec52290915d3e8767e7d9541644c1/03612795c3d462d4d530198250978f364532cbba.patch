diff --git a/Makefile.in b/Makefile.in
index aca8240..4dd4148 100644
--- a/Makefile.in
+++ b/Makefile.in
@@ -255,6 +255,7 @@ WXSCINTILLA_OBJECTS =  \
 	wxscintilla_LexDMAP.o \
 	wxscintilla_LexDMIS.o \
 	wxscintilla_LexECL.o \
+	wxscintilla_LexEDIFACT.o \
 	wxscintilla_LexEiffel.o \
 	wxscintilla_LexErlang.o \
 	wxscintilla_LexErrorList.o \
@@ -15287,6 +15288,9 @@ wxscintilla_LexDMIS.o: $(srcdir)/src/stc/scintilla/lexers/LexDMIS.cxx
 wxscintilla_LexECL.o: $(srcdir)/src/stc/scintilla/lexers/LexECL.cxx
 	$(CXXC) -c -o $@ $(WXSCINTILLA_CXXFLAGS) $(srcdir)/src/stc/scintilla/lexers/LexECL.cxx
 
+wxscintilla_LexEDIFACT.o: $(srcdir)/src/stc/scintilla/lexers/LexEDIFACT.cxx
+	$(CXXC) -c -o $@ $(WXSCINTILLA_CXXFLAGS) $(srcdir)/src/stc/scintilla/lexers/LexEDIFACT.cxx
+
 wxscintilla_LexEiffel.o: $(srcdir)/src/stc/scintilla/lexers/LexEiffel.cxx
 	$(CXXC) -c -o $@ $(WXSCINTILLA_CXXFLAGS) $(srcdir)/src/stc/scintilla/lexers/LexEiffel.cxx
 
diff --git a/build/bakefiles/scintilla.bkl b/build/bakefiles/scintilla.bkl
index 7cc28d5..76f7d26 100644
--- a/build/bakefiles/scintilla.bkl
+++ b/build/bakefiles/scintilla.bkl
@@ -88,6 +88,7 @@
             src/stc/scintilla/lexers/LexDMAP.cxx
             src/stc/scintilla/lexers/LexDMIS.cxx
             src/stc/scintilla/lexers/LexECL.cxx
+            src/stc/scintilla/lexers/LexEDIFACT.cxx
             src/stc/scintilla/lexers/LexEiffel.cxx
             src/stc/scintilla/lexers/LexErlang.cxx
             src/stc/scintilla/lexers/LexErrorList.cxx
diff --git a/build/msw/makefile.bcc b/build/msw/makefile.bcc
index fe3d0a2..450b5da 100644
--- a/build/msw/makefile.bcc
+++ b/build/msw/makefile.bcc
@@ -235,6 +235,7 @@ WXSCINTILLA_OBJECTS =  \
 	$(OBJS)\wxscintilla_LexDMAP.obj \
 	$(OBJS)\wxscintilla_LexDMIS.obj \
 	$(OBJS)\wxscintilla_LexECL.obj \
+	$(OBJS)\wxscintilla_LexEDIFACT.obj \
 	$(OBJS)\wxscintilla_LexEiffel.obj \
 	$(OBJS)\wxscintilla_LexErlang.obj \
 	$(OBJS)\wxscintilla_LexErrorList.obj \
@@ -6074,6 +6075,9 @@ $(OBJS)\wxscintilla_LexDMIS.obj: ..\..\src\stc\scintilla\lexers\LexDMIS.cxx
 $(OBJS)\wxscintilla_LexECL.obj: ..\..\src\stc\scintilla\lexers\LexECL.cxx
 	$(CXX) -q -c -P -o$@ $(WXSCINTILLA_CXXFLAGS) ..\..\src\stc\scintilla\lexers\LexECL.cxx
 
+$(OBJS)\wxscintilla_LexEDIFACT.obj: ..\..\src\stc\scintilla\lexers\LexEDIFACT.cxx
+	$(CXX) -q -c -P -o$@ $(WXSCINTILLA_CXXFLAGS) ..\..\src\stc\scintilla\lexers\LexEDIFACT.cxx
+
 $(OBJS)\wxscintilla_LexEiffel.obj: ..\..\src\stc\scintilla\lexers\LexEiffel.cxx
 	$(CXX) -q -c -P -o$@ $(WXSCINTILLA_CXXFLAGS) ..\..\src\stc\scintilla\lexers\LexEiffel.cxx
 
diff --git a/build/msw/makefile.gcc b/build/msw/makefile.gcc
index 69f6d3a..8ab514c 100644
--- a/build/msw/makefile.gcc
+++ b/build/msw/makefile.gcc
@@ -223,6 +223,7 @@ WXSCINTILLA_OBJECTS =  \
 	$(OBJS)\wxscintilla_LexDMAP.o \
 	$(OBJS)\wxscintilla_LexDMIS.o \
 	$(OBJS)\wxscintilla_LexECL.o \
+	$(OBJS)\wxscintilla_LexEDIFACT.o \
 	$(OBJS)\wxscintilla_LexEiffel.o \
 	$(OBJS)\wxscintilla_LexErlang.o \
 	$(OBJS)\wxscintilla_LexErrorList.o \
@@ -6250,6 +6251,9 @@ $(OBJS)\wxscintilla_LexDMIS.o: ../../src/stc/scintilla/lexers/LexDMIS.cxx
 $(OBJS)\wxscintilla_LexECL.o: ../../src/stc/scintilla/lexers/LexECL.cxx
 	$(CXX) -c -o $@ $(WXSCINTILLA_CXXFLAGS) $(CPPDEPS) $<
 
+$(OBJS)\wxscintilla_LexEDIFACT.o: ../../src/stc/scintilla/lexers/LexEDIFACT.cxx
+	$(CXX) -c -o $@ $(WXSCINTILLA_CXXFLAGS) $(CPPDEPS) $<
+
 $(OBJS)\wxscintilla_LexEiffel.o: ../../src/stc/scintilla/lexers/LexEiffel.cxx
 	$(CXX) -c -o $@ $(WXSCINTILLA_CXXFLAGS) $(CPPDEPS) $<
 
diff --git a/build/msw/makefile.vc b/build/msw/makefile.vc
index 6e47a6e..5e456d5 100644
--- a/build/msw/makefile.vc
+++ b/build/msw/makefile.vc
@@ -246,6 +246,7 @@ WXSCINTILLA_OBJECTS =  \
 	$(OBJS)\wxscintilla_LexDMAP.obj \
 	$(OBJS)\wxscintilla_LexDMIS.obj \
 	$(OBJS)\wxscintilla_LexECL.obj \
+	$(OBJS)\wxscintilla_LexEDIFACT.obj \
 	$(OBJS)\wxscintilla_LexEiffel.obj \
 	$(OBJS)\wxscintilla_LexErlang.obj \
 	$(OBJS)\wxscintilla_LexErrorList.obj \
@@ -5707,7 +5708,7 @@ __THREADSFLAG = L
 __THREADSFLAG = T
 !endif
 !if "$(USE_RTTI)" == "0"
-__RTTIFLAG = /GR-
+__RTTIFLAG = 
 !endif
 !if "$(USE_RTTI)" == "1"
 __RTTIFLAG = /GR
@@ -6767,6 +6768,9 @@ $(OBJS)\wxscintilla_LexDMIS.obj: ..\..\src\stc\scintilla\lexers\LexDMIS.cxx
 $(OBJS)\wxscintilla_LexECL.obj: ..\..\src\stc\scintilla\lexers\LexECL.cxx
 	$(CXX) /c /nologo /TP /Fo$@ $(WXSCINTILLA_CXXFLAGS) ..\..\src\stc\scintilla\lexers\LexECL.cxx
 
+$(OBJS)\wxscintilla_LexEDIFACT.obj: ..\..\src\stc\scintilla\lexers\LexEDIFACT.cxx
+	$(CXX) /c /nologo /TP /Fo$@ $(WXSCINTILLA_CXXFLAGS) ..\..\src\stc\scintilla\lexers\LexEDIFACT.cxx
+
 $(OBJS)\wxscintilla_LexEiffel.obj: ..\..\src\stc\scintilla\lexers\LexEiffel.cxx
 	$(CXX) /c /nologo /TP /Fo$@ $(WXSCINTILLA_CXXFLAGS) ..\..\src\stc\scintilla\lexers\LexEiffel.cxx
 
diff --git a/build/msw/wx_vc7_base.vcproj b/build/msw/wx_vc7_base.vcproj
index 9716586..0be0770 100644
--- a/build/msw/wx_vc7_base.vcproj
+++ b/build/msw/wx_vc7_base.vcproj
@@ -882,6 +882,9 @@
 				RelativePath="..\..\include\wx\msw\winundef.h">
 			</File>
 			<File
+				RelativePath="..\..\include\wx\msw\winver.h">
+			</File>
+			<File
 				RelativePath="..\..\include\wx\msw\wrapcctl.h">
 			</File>
 			<File
diff --git a/build/msw/wx_vc7_wxscintilla.vcproj b/build/msw/wx_vc7_wxscintilla.vcproj
index 709608e..529990a 100644
--- a/build/msw/wx_vc7_wxscintilla.vcproj
+++ b/build/msw/wx_vc7_wxscintilla.vcproj
@@ -398,6 +398,9 @@
 				RelativePath="..\..\src\stc\scintilla\lexers\LexECL.cxx">
 			</File>
 			<File
+				RelativePath="..\..\src\stc\scintilla\lexers\LexEDIFACT.cxx">
+			</File>
+			<File
 				RelativePath="..\..\src\stc\scintilla\lexers\LexEScript.cxx">
 			</File>
 			<File
diff --git a/build/msw/wx_vc8_base.vcproj b/build/msw/wx_vc8_base.vcproj
index c629c82..614663f 100644
--- a/build/msw/wx_vc8_base.vcproj
+++ b/build/msw/wx_vc8_base.vcproj
@@ -1774,6 +1774,10 @@
 				>
 			</File>
 			<File
+				RelativePath="..\..\include\wx\msw\winver.h"
+				>
+			</File>
+			<File
 				RelativePath="..\..\include\wx\msw\wrapcctl.h"
 				>
 			</File>
diff --git a/build/msw/wx_vc8_wxscintilla.vcproj b/build/msw/wx_vc8_wxscintilla.vcproj
index ec8bb84..eed2e3d 100644
--- a/build/msw/wx_vc8_wxscintilla.vcproj
+++ b/build/msw/wx_vc8_wxscintilla.vcproj
@@ -879,6 +879,10 @@
 				>
 			</File>
 			<File
+				RelativePath="..\..\src\stc\scintilla\lexers\LexEDIFACT.cxx"
+				>
+			</File>
+			<File
 				RelativePath="..\..\src\stc\scintilla\lexers\LexEScript.cxx"
 				>
 			</File>
diff --git a/build/msw/wx_vc9_base.vcproj b/build/msw/wx_vc9_base.vcproj
index f3bd6b8..7182c38 100644
--- a/build/msw/wx_vc9_base.vcproj
+++ b/build/msw/wx_vc9_base.vcproj
@@ -1770,6 +1770,10 @@
 				>
 			</File>
 			<File
+				RelativePath="..\..\include\wx\msw\winver.h"
+				>
+			</File>
+			<File
 				RelativePath="..\..\include\wx\msw\wrapcctl.h"
 				>
 			</File>
diff --git a/build/msw/wx_vc9_wxscintilla.vcproj b/build/msw/wx_vc9_wxscintilla.vcproj
index 94d099e..4010755 100644
--- a/build/msw/wx_vc9_wxscintilla.vcproj
+++ b/build/msw/wx_vc9_wxscintilla.vcproj
@@ -875,6 +875,10 @@
 				>
 			</File>
 			<File
+				RelativePath="..\..\src\stc\scintilla\lexers\LexEDIFACT.cxx"
+				>
+			</File>
+			<File
 				RelativePath="..\..\src\stc\scintilla\lexers\LexEScript.cxx"
 				>
 			</File>
diff --git a/build/msw/wx_wxscintilla.vcxproj b/build/msw/wx_wxscintilla.vcxproj
index 3b45689..583ce4c 100644
--- a/build/msw/wx_wxscintilla.vcxproj
+++ b/build/msw/wx_wxscintilla.vcxproj
@@ -452,6 +452,7 @@
     <ClCompile Include="..\..\src\stc\scintilla\lexers\LexDMAP.cxx" />
     <ClCompile Include="..\..\src\stc\scintilla\lexers\LexDMIS.cxx" />
     <ClCompile Include="..\..\src\stc\scintilla\lexers\LexECL.cxx" />
+    <ClCompile Include="..\..\src\stc\scintilla\lexers\LexEDIFACT.cxx" />
     <ClCompile Include="..\..\src\stc\scintilla\lexers\LexEScript.cxx" />
     <ClCompile Include="..\..\src\stc\scintilla\lexers\LexEiffel.cxx" />
     <ClCompile Include="..\..\src\stc\scintilla\lexers\LexErlang.cxx" />
diff --git a/build/msw/wx_wxscintilla.vcxproj.filters b/build/msw/wx_wxscintilla.vcxproj.filters
index 37f440c..4cdff93 100644
--- a/build/msw/wx_wxscintilla.vcxproj.filters
+++ b/build/msw/wx_wxscintilla.vcxproj.filters
@@ -161,6 +161,9 @@
     <ClCompile Include="..\..\src\stc\scintilla\lexers\LexECL.cxx">
       <Filter>Source Files</Filter>
     </ClCompile>
+    <ClCompile Include="..\..\src\stc\scintilla\lexers\LexEDIFACT.cxx">
+      <Filter>Source Files</Filter>
+    </ClCompile>
     <ClCompile Include="..\..\src\stc\scintilla\lexers\LexEScript.cxx">
       <Filter>Source Files</Filter>
     </ClCompile>
diff --git a/include/wx/stc/stc.h b/include/wx/stc/stc.h
index 49c16d0..df5c54f 100644
--- a/include/wx/stc/stc.h
+++ b/include/wx/stc/stc.h
@@ -69,6 +69,8 @@ class WXDLLIMPEXP_FWD_CORE wxScrollBar;
 #define wxSTC_WS_VISIBLEALWAYS 1
 #define wxSTC_WS_VISIBLEAFTERINDENT 2
 #define wxSTC_WS_VISIBLEONLYININDENT 3
+#define wxSTC_SCTD_LONGARROW 0
+#define wxSTC_SCTD_STRIKEOUT 1
 #define wxSTC_EOL_CRLF 0
 #define wxSTC_EOL_CR 1
 #define wxSTC_EOL_LF 2
@@ -133,6 +135,7 @@ class WXDLLIMPEXP_FWD_CORE wxScrollBar;
 #define wxSTC_MARGIN_FORE 3
 #define wxSTC_MARGIN_TEXT 4
 #define wxSTC_MARGIN_RTEXT 5
+#define wxSTC_MARGIN_COLOUR 6
 
 /// Styles in range 32..38 are predefined for parts of the UI and are not used as normal styles.
 /// Style 39 is for future use.
@@ -143,6 +146,7 @@ class WXDLLIMPEXP_FWD_CORE wxScrollBar;
 #define wxSTC_STYLE_CONTROLCHAR 36
 #define wxSTC_STYLE_INDENTGUIDE 37
 #define wxSTC_STYLE_CALLTIP 38
+#define wxSTC_STYLE_FOLDDISPLAYTEXT 39
 #define wxSTC_STYLE_LASTPREDEFINED 39
 #define wxSTC_STYLE_MAX 255
 
@@ -198,6 +202,8 @@ class WXDLLIMPEXP_FWD_CORE wxScrollBar;
 #define wxSTC_INDIC_COMPOSITIONTHIN 15
 #define wxSTC_INDIC_FULLBOX 16
 #define wxSTC_INDIC_TEXTFORE 17
+#define wxSTC_INDIC_POINT 18
+#define wxSTC_INDIC_POINTCHARACTER 19
 #define wxSTC_INDIC_IME 32
 #define wxSTC_INDIC_IME_MAX 35
 #define wxSTC_INDIC_MAX 35
@@ -238,6 +244,9 @@ class WXDLLIMPEXP_FWD_CORE wxScrollBar;
 #define wxSTC_FOLDLEVELWHITEFLAG 0x1000
 #define wxSTC_FOLDLEVELHEADERFLAG 0x2000
 #define wxSTC_FOLDLEVELNUMBERMASK 0x0FFF
+#define wxSTC_FOLDDISPLAYTEXT_HIDDEN 0
+#define wxSTC_FOLDDISPLAYTEXT_STANDARD 1
+#define wxSTC_FOLDDISPLAYTEXT_BOXED 2
 #define wxSTC_FOLDACTION_CONTRACT 0
 #define wxSTC_FOLDACTION_EXPAND 1
 #define wxSTC_FOLDACTION_TOGGLE 2
@@ -288,6 +297,10 @@ class WXDLLIMPEXP_FWD_CORE wxScrollBar;
 #define wxSTC_EDGE_NONE 0
 #define wxSTC_EDGE_LINE 1
 #define wxSTC_EDGE_BACKGROUND 2
+#define wxSTC_EDGE_MULTILINE 3
+#define wxSTC_POPUP_NEVER 0
+#define wxSTC_POPUP_ALL 1
+#define wxSTC_POPUP_TEXT 2
 #define wxSTC_STATUS_OK 0
 #define wxSTC_STATUS_FAILURE 1
 #define wxSTC_STATUS_BADALLOC 2
@@ -357,6 +370,7 @@ class WXDLLIMPEXP_FWD_CORE wxScrollBar;
 #define wxSTC_SCVS_NONE 0
 #define wxSTC_SCVS_RECTANGULARSELECTION 1
 #define wxSTC_SCVS_USERACCESSIBLE 2
+#define wxSTC_SCVS_NOWRAPLINESTART 4
 #define wxSTC_TECHNOLOGY_DEFAULT 0
 #define wxSTC_TECHNOLOGY_DIRECTWRITE 1
 #define wxSTC_TECHNOLOGY_DIRECTWRITERETAIN 2
@@ -561,6 +575,7 @@ class WXDLLIMPEXP_FWD_CORE wxScrollBar;
 #define wxSTC_LEX_IHEX 118
 #define wxSTC_LEX_TEHEX 119
 #define wxSTC_LEX_JSON 120
+#define wxSTC_LEX_EDIFACT 121
 
 /// When a lexer specifies its language as SCLEX_AUTOMATIC it receives a
 /// value assigned in sequence from SCLEX_AUTOMATIC+1.
@@ -1094,6 +1109,20 @@ class WXDLLIMPEXP_FWD_CORE wxScrollBar;
 #define wxSTC_BAAN_IDENTIFIER 8
 #define wxSTC_BAAN_STRINGEOL 9
 #define wxSTC_BAAN_WORD2 10
+#define wxSTC_BAAN_WORD3 11
+#define wxSTC_BAAN_WORD4 12
+#define wxSTC_BAAN_WORD5 13
+#define wxSTC_BAAN_WORD6 14
+#define wxSTC_BAAN_WORD7 15
+#define wxSTC_BAAN_WORD8 16
+#define wxSTC_BAAN_WORD9 17
+#define wxSTC_BAAN_TABLEDEF 18
+#define wxSTC_BAAN_TABLESQL 19
+#define wxSTC_BAAN_FUNCTION 20
+#define wxSTC_BAAN_DOMDEF 21
+#define wxSTC_BAAN_FUNCDEF 22
+#define wxSTC_BAAN_OBJECTDEF 23
+#define wxSTC_BAAN_DEFINEDEF 24
 
 /// Lexical states for SCLEX_LISP
 #define wxSTC_LISP_DEFAULT 0
@@ -1865,38 +1894,19 @@ class WXDLLIMPEXP_FWD_CORE wxScrollBar;
 #define wxSTC_PLM_KEYWORD 7
 
 /// Lexical state for SCLEX_PROGRESS
-#define wxSTC_4GL_DEFAULT 0
-#define wxSTC_4GL_NUMBER 1
-#define wxSTC_4GL_WORD 2
-#define wxSTC_4GL_STRING 3
-#define wxSTC_4GL_CHARACTER 4
-#define wxSTC_4GL_PREPROCESSOR 5
-#define wxSTC_4GL_OPERATOR 6
-#define wxSTC_4GL_IDENTIFIER 7
-#define wxSTC_4GL_BLOCK 8
-#define wxSTC_4GL_END 9
-#define wxSTC_4GL_COMMENT1 10
-#define wxSTC_4GL_COMMENT2 11
-#define wxSTC_4GL_COMMENT3 12
-#define wxSTC_4GL_COMMENT4 13
-#define wxSTC_4GL_COMMENT5 14
-#define wxSTC_4GL_COMMENT6 15
-#define wxSTC_4GL_DEFAULT_ 16
-#define wxSTC_4GL_NUMBER_ 17
-#define wxSTC_4GL_WORD_ 18
-#define wxSTC_4GL_STRING_ 19
-#define wxSTC_4GL_CHARACTER_ 20
-#define wxSTC_4GL_PREPROCESSOR_ 21
-#define wxSTC_4GL_OPERATOR_ 22
-#define wxSTC_4GL_IDENTIFIER_ 23
-#define wxSTC_4GL_BLOCK_ 24
-#define wxSTC_4GL_END_ 25
-#define wxSTC_4GL_COMMENT1_ 26
-#define wxSTC_4GL_COMMENT2_ 27
-#define wxSTC_4GL_COMMENT3_ 28
-#define wxSTC_4GL_COMMENT4_ 29
-#define wxSTC_4GL_COMMENT5_ 30
-#define wxSTC_4GL_COMMENT6_ 31
+#define wxSTC_ABL_DEFAULT 0
+#define wxSTC_ABL_NUMBER 1
+#define wxSTC_ABL_WORD 2
+#define wxSTC_ABL_STRING 3
+#define wxSTC_ABL_CHARACTER 4
+#define wxSTC_ABL_PREPROCESSOR 5
+#define wxSTC_ABL_OPERATOR 6
+#define wxSTC_ABL_IDENTIFIER 7
+#define wxSTC_ABL_BLOCK 8
+#define wxSTC_ABL_END 9
+#define wxSTC_ABL_COMMENT 10
+#define wxSTC_ABL_TASKMARKER 11
+#define wxSTC_ABL_LINECOMMENT 12
 
 /// Lexical states for SCLEX_ABAQUS
 #define wxSTC_ABAQUS_DEFAULT 0
@@ -2450,6 +2460,15 @@ class WXDLLIMPEXP_FWD_CORE wxScrollBar;
 #define wxSTC_JSON_KEYWORD 11
 #define wxSTC_JSON_LDKEYWORD 12
 #define wxSTC_JSON_ERROR 13
+#define wxSTC_EDI_DEFAULT 0
+#define wxSTC_EDI_SEGMENTSTART 1
+#define wxSTC_EDI_SEGMENTEND 2
+#define wxSTC_EDI_SEP_ELEMENT 3
+#define wxSTC_EDI_SEP_COMPOSITE 4
+#define wxSTC_EDI_SEP_RELEASE 5
+#define wxSTC_EDI_UNA 6
+#define wxSTC_EDI_UNH 7
+#define wxSTC_EDI_BADSEGMENT 8
 
 //}}}
 //----------------------------------------------------------------------
@@ -2637,16 +2656,28 @@ class WXDLLIMPEXP_FWD_CORE wxScrollBar;
 /// caret position.
 #define wxSTC_CMD_LINEENDDISPLAYEXTEND 2348
 
-/// These are like their namesakes Home(Extend)?, LineEnd(Extend)?, VCHome(Extend)?
-/// except they behave differently when word-wrap is enabled:
-/// They go first to the start / end of the display line, like (Home|LineEnd)Display
-/// The difference is that, the cursor is already at the point, it goes on to the start
-/// or end of the document line, as appropriate for (Home|LineEnd|VCHome)(Extend)?.
+/// Like Home but when word-wrap is enabled goes first to start of display line
+/// HomeDisplay, then to start of document line Home.
 #define wxSTC_CMD_HOMEWRAP 2349
+
+/// Like HomeExtend but when word-wrap is enabled extends first to start of display line
+/// HomeDisplayExtend, then to start of document line HomeExtend.
 #define wxSTC_CMD_HOMEWRAPEXTEND 2450
+
+/// Like LineEnd but when word-wrap is enabled goes first to end of display line
+/// LineEndDisplay, then to start of document line LineEnd.
 #define wxSTC_CMD_LINEENDWRAP 2451
+
+/// Like LineEndExtend but when word-wrap is enabled extends first to end of display line
+/// LineEndDisplayExtend, then to start of document line LineEndExtend.
 #define wxSTC_CMD_LINEENDWRAPEXTEND 2452
+
+/// Like VCHome but when word-wrap is enabled goes first to start of display line
+/// VCHomeDisplay, then behaves like VCHome.
 #define wxSTC_CMD_VCHOMEWRAP 2453
+
+/// Like VCHomeExtend but when word-wrap is enabled extends first to start of display line
+/// VCHomeDisplayExtend, then behaves like VCHomeExtend.
 #define wxSTC_CMD_VCHOMEWRAPEXTEND 2454
 
 /// Copy the line containing the caret.
@@ -2672,10 +2703,16 @@ class WXDLLIMPEXP_FWD_CORE wxScrollBar;
 /// Delete forwards from the current position to the end of the line.
 #define wxSTC_CMD_DELLINERIGHT 2396
 
-/// Move caret between paragraphs (delimited by empty lines).
+/// Move caret down one paragraph (delimited by empty lines).
 #define wxSTC_CMD_PARADOWN 2413
+
+/// Extend selection down one paragraph (delimited by empty lines).
 #define wxSTC_CMD_PARADOWNEXTEND 2414
+
+/// Move caret up one paragraph (delimited by empty lines).
 #define wxSTC_CMD_PARAUP 2415
+
+/// Extend selection up one paragraph (delimited by empty lines).
 #define wxSTC_CMD_PARAUPEXTEND 2416
 
 /// Move caret down one line, extending rectangular selection to new caret position.
@@ -2823,7 +2860,7 @@ public:
     void ClearAll();
 
     // Delete a range of text in the document.
-    void DeleteRange(int pos, int deleteLength);
+    void DeleteRange(int start, int lengthDelete);
 
     // Set all style bytes to 0, remove all folding information.
     void ClearDocumentStyle();
@@ -2864,10 +2901,10 @@ public:
     bool CanRedo() const wxOVERRIDE;
 
     // Retrieve the line number at which a particular marker is located.
-    int MarkerLineFromHandle(int handle);
+    int MarkerLineFromHandle(int markerHandle);
 
     // Delete a marker.
-    void MarkerDeleteHandle(int handle);
+    void MarkerDeleteHandle(int markerHandle);
 
     // Is undo history being collected?
     bool GetUndoCollection() const;
@@ -2879,6 +2916,13 @@ public:
     // Make white space characters invisible, always visible or visible outside indentation.
     void SetViewWhiteSpace(int viewWS);
 
+    // Retrieve the current tab draw mode.
+    // Returns one of SCTD_* constants.
+    int GetTabDrawMode() const;
+
+    // Set how tabs are drawn when visible.
+    void SetTabDrawMode(int tabDrawMode);
+
     // Find the position from a point within the window.
     int PositionFromPoint(wxPoint pt) const;
 
@@ -2890,11 +2934,11 @@ public:
     void GotoLine(int line);
 
     // Set caret to a position and ensure it is visible.
-    void GotoPos(int pos);
+    void GotoPos(int caret);
 
     // Set the selection anchor to a position. The anchor is the opposite
     // end of the selection from the caret.
-    void SetAnchor(int posAnchor);
+    void SetAnchor(int anchor);
 
     // Retrieve the text of the line containing the caret.
     // Returns the index of the caret on the line.
@@ -2917,9 +2961,9 @@ public:
     // Set the current end of line mode.
     void SetEOLMode(int eolMode);
 
-    // Set the current styling position to pos and the styling mask to mask.
-    // The styling mask can be used to protect some bits in each styling byte from modification.
-    void StartStyling(int pos, int mask);
+    // Set the current styling position to start.
+    // The unused parameter is no longer used and should be set to 0.
+    void StartStyling(int start, int unused=0);
 
     // Change style from current styling position for length characters to a style
     // and move the current styling position to after this newly styled segment.
@@ -2997,7 +3041,7 @@ public:
     void MarkerDefineBitmap(int markerNumber, const wxBitmap& bmp);
 
     // Add a set of markers to a line.
-    void MarkerAddSet(int line, int set);
+    void MarkerAddSet(int line, int markerSet);
 
     // Set the alpha used for a marker that is drawn in the text area, not the margin.
     void MarkerSetAlpha(int markerNumber, int alpha);
@@ -3032,6 +3076,18 @@ public:
     // Retrieve the cursor shown in a margin.
     int GetMarginCursor(int margin) const;
 
+    // Set the background colour of a margin. Only visible for SC_MARGIN_COLOUR.
+    void SetMarginBackground(int margin, const wxColour& back);
+
+    // Retrieve the background colour of a margin
+    wxColour GetMarginBackground(int margin) const;
+
+    // Allocate a non-standard number of margins.
+    void SetMarginCount(int margins);
+
+    // How many margins are there?.
+    int GetMarginCount() const;
+
     // Clear all the styles and make equivalent to the global default style.
     void StyleClearAll();
 
@@ -3054,7 +3110,7 @@ public:
     void StyleSetFaceName(int style, const wxString& fontName);
 
     // Set a style to have its end of line filled or not.
-    void StyleSetEOLFilled(int style, bool filled);
+    void StyleSetEOLFilled(int style, bool eolFilled);
 
     // Reset the default style to its state at startup
     void StyleResetDefault();
@@ -3103,10 +3159,10 @@ public:
     bool StyleGetHotSpot(int style) const;
 
     // Set a style to be mixed case, or to force upper or lower case.
-    void StyleSetCase(int style, int caseForce);
+    void StyleSetCase(int style, int caseVisible);
 
     // Set the size of characters of a style. Size is in points multiplied by 100.
-    void StyleSetSizeFractional(int style, int caseForce);
+    void StyleSetSizeFractional(int style, int sizeHundredthPoints);
 
     // Get the size of characters of a style in points multiplied by 100
     int StyleGetSizeFractional(int style) const;
@@ -3141,10 +3197,10 @@ public:
     // Set the foreground colour of the caret.
     void SetCaretForeground(const wxColour& fore);
 
-    // When key+modifier combination km is pressed perform msg.
+    // When key+modifier combination keyDefinition is pressed perform sciCommand.
     void CmdKeyAssign(int key, int modifiers, int cmd);
 
-    // When key+modifier combination km is pressed do nothing.
+    // When key+modifier combination keyDefinition is pressed do nothing.
     void CmdKeyClear(int key, int modifiers);
 
     // Drop all key mappings.
@@ -3177,40 +3233,40 @@ public:
     void EndUndoAction();
 
     // Set an indicator to plain, squiggle or TT.
-    void IndicatorSetStyle(int indic, int style);
+    void IndicatorSetStyle(int indicator, int indicatorStyle);
 
     // Retrieve the style of an indicator.
-    int IndicatorGetStyle(int indic) const;
+    int IndicatorGetStyle(int indicator) const;
 
     // Set the foreground colour of an indicator.
-    void IndicatorSetForeground(int indic, const wxColour& fore);
+    void IndicatorSetForeground(int indicator, const wxColour& fore);
 
     // Retrieve the foreground colour of an indicator.
-    wxColour IndicatorGetForeground(int indic) const;
+    wxColour IndicatorGetForeground(int indicator) const;
 
     // Set an indicator to draw under text or over(default).
-    void IndicatorSetUnder(int indic, bool under);
+    void IndicatorSetUnder(int indicator, bool under);
 
     // Retrieve whether indicator drawn under or over text.
-    bool IndicatorGetUnder(int indic) const;
+    bool IndicatorGetUnder(int indicator) const;
 
     // Set a hover indicator to plain, squiggle or TT.
-    void IndicatorSetHoverStyle(int indic, int style);
+    void IndicatorSetHoverStyle(int indicator, int indicatorStyle);
 
     // Retrieve the hover style of an indicator.
-    int IndicatorGetHoverStyle(int indic) const;
+    int IndicatorGetHoverStyle(int indicator) const;
 
     // Set the foreground hover colour of an indicator.
-    void IndicatorSetHoverForeground(int indic, const wxColour& fore);
+    void IndicatorSetHoverForeground(int indicator, const wxColour& fore);
 
     // Retrieve the foreground hover colour of an indicator.
-    wxColour IndicatorGetHoverForeground(int indic) const;
+    wxColour IndicatorGetHoverForeground(int indicator) const;
 
     // Set the attributes of an indicator.
-    void IndicatorSetFlags(int indic, int flags);
+    void IndicatorSetFlags(int indicator, int flags);
 
     // Retrieve the attributes of an indicator.
-    int IndicatorGetFlags(int indic) const;
+    int IndicatorGetFlags(int indicator) const;
 
     // Set the foreground colour of all whitespace and whether to use this setting.
     void SetWhitespaceForeground(bool useSetting, const wxColour& fore);
@@ -3258,9 +3314,9 @@ public:
     void StyleSetChangeable(int style, bool changeable);
 
     // Display a auto-completion list.
-    // The lenEntered parameter indicates how many characters before
+    // The lengthEntered parameter indicates how many characters before
     // the caret should be used to provide context.
-    void AutoCompShow(int lenEntered, const wxString& itemList);
+    void AutoCompShow(int lengthEntered, const wxString& itemList);
 
     // Remove the auto-completion list from the screen.
     void AutoCompCancel();
@@ -3285,7 +3341,7 @@ public:
     int AutoCompGetSeparator() const;
 
     // Select the item in the auto-completion list that starts with a string.
-    void AutoCompSelect(const wxString& text);
+    void AutoCompSelect(const wxString& select);
 
     // Should the auto-completion list be cancelled if the user backspaces to a
     // position before where the box was created.
@@ -3368,7 +3424,7 @@ public:
     bool GetUseTabs() const;
 
     // Change the indentation of a line to a number of columns.
-    void SetLineIndentation(int line, int indentSize);
+    void SetLineIndentation(int line, int indentation);
 
     // Retrieve the number of columns that a line is indented.
     int GetLineIndentation(int line) const;
@@ -3380,10 +3436,10 @@ public:
     int GetColumn(int pos) const;
 
     // Count characters between two positions.
-    int CountCharacters(int startPos, int endPos);
+    int CountCharacters(int start, int end);
 
     // Show or hide the horizontal scroll bar.
-    void SetUseHorizontalScrollBar(bool show);
+    void SetUseHorizontalScrollBar(bool visible);
 
     // Is the horizontal scroll bar visible?
     bool GetUseHorizontalScrollBar() const;
@@ -3414,22 +3470,22 @@ public:
     bool GetReadOnly() const;
 
     // Sets the position of the caret.
-    void SetCurrentPos(int pos);
+    void SetCurrentPos(int caret);
 
     // Sets the position that starts the selection - this becomes the anchor.
-    void SetSelectionStart(int pos);
+    void SetSelectionStart(int anchor);
 
     // Returns the position at the start of the selection.
     int GetSelectionStart() const;
 
-    // Sets the position that ends the selection - this becomes the currentPosition.
-    void SetSelectionEnd(int pos);
+    // Sets the position that ends the selection - this becomes the caret.
+    void SetSelectionEnd(int caret);
 
     // Returns the position at the end of the selection.
     int GetSelectionEnd() const;
 
     // Set caret to a position, while removing any existing selection.
-    void SetEmptySelection(int pos);
+    void SetEmptySelection(int caret);
 
     // Sets the print magnification added to the point size of each style for printing.
     void SetPrintMagnification(int magnification);
@@ -3486,7 +3542,7 @@ public:
     wxString GetTextRange(int startPos, int endPos);
 
     // Draw the selection in normal style or with selection highlighted.
-    void HideSelection(bool normal);
+    void HideSelection(bool hide);
 
     // Retrieve the line containing a position.
     int LineFromPosition(int pos) const;
@@ -3552,7 +3608,7 @@ public:
     void* GetDirectPointer() const;
 
     // Set to overtype (true) or insert mode.
-    void SetOvertype(bool overtype);
+    void SetOvertype(bool overType);
 
     // Returns true if overtype mode is active otherwise false is returned.
     bool GetOvertype() const;
@@ -3565,14 +3621,14 @@ public:
 
     // Sets the position that starts the target which is used for updating the
     // document without affecting the scroll position.
-    void SetTargetStart(int pos);
+    void SetTargetStart(int start);
 
     // Get the position that starts the target.
     int GetTargetStart() const;
 
     // Sets the position that ends the target which is used for updating the
     // document without affecting the scroll position.
-    void SetTargetEnd(int pos);
+    void SetTargetEnd(int end);
 
     // Get the position that ends the target.
     int GetTargetEnd() const;
@@ -3608,7 +3664,7 @@ public:
     int SearchInTarget(const wxString& text);
 
     // Set the search flags used by SearchInTarget.
-    void SetSearchFlags(int flags);
+    void SetSearchFlags(int searchFlags);
 
     // Get the search flags used by SearchInTarget.
     int GetSearchFlags() const;
@@ -3629,7 +3685,7 @@ public:
     void CallTipSetPosAtStart(int posStart);
 
     // Highlight a segment of the definition.
-    void CallTipSetHighlight(int start, int end);
+    void CallTipSetHighlight(int highlightStart, int highlightEnd);
 
     // Set the background colour for the call tip.
     void CallTipSetBackground(const wxColour& back);
@@ -3647,13 +3703,13 @@ public:
     void CallTipSetPosition(bool above);
 
     // Find the display line of a document line taking hidden lines into account.
-    int VisibleFromDocLine(int line);
+    int VisibleFromDocLine(int docLine);
 
     // Find the document line of a display line taking hidden lines into account.
-    int DocLineFromVisible(int lineDisplay);
+    int DocLineFromVisible(int displayLine);
 
     // The number of display lines needed to wrap a document line
-    int WrapCount(int line);
+    int WrapCount(int docLine);
 
     // Set the fold level of a line.
     // This encodes an integer level along with flags indicating whether the
@@ -3690,6 +3746,12 @@ public:
     // Switch a header line between expanded and contracted.
     void ToggleFold(int line);
 
+    // Switch a header line between expanded and contracted and show some text after the line.
+    void ToggleFoldShowText(int line, const wxString& text);
+
+    // Set the style of fold display text
+    void FoldDisplayTextSetStyle(int style);
+
     // Expand or contract a fold header.
     void FoldLine(int line, int action);
 
@@ -3752,7 +3814,7 @@ public:
     int GetIdleStyling() const;
 
     // Sets whether text is word wrapped.
-    void SetWrapMode(int mode);
+    void SetWrapMode(int wrapMode);
 
     // Retrieve whether text is word wrapped.
     int GetWrapMode() const;
@@ -3776,13 +3838,13 @@ public:
     int GetWrapStartIndent() const;
 
     // Sets how wrapped sublines are placed. Default is fixed.
-    void SetWrapIndentMode(int mode);
+    void SetWrapIndentMode(int wrapIndentMode);
 
     // Retrieve how wrapped sublines are placed. Default is fixed.
     int GetWrapIndentMode() const;
 
     // Sets the degree of caching of layout information.
-    void SetLayoutCache(int mode);
+    void SetLayoutCache(int cacheMode);
 
     // Retrieve the degree of caching of layout information.
     int GetLayoutCache() const;
@@ -3817,7 +3879,7 @@ public:
     int TextHeight(int line);
 
     // Show or hide the vertical scroll bar.
-    void SetUseVerticalScrollBar(bool show);
+    void SetUseVerticalScrollBar(bool visible);
 
     // Is the vertical scroll bar visible?
     bool GetUseVerticalScrollBar() const;
@@ -3842,7 +3904,7 @@ public:
     void SetPhasesDraw(int phases);
 
     // Scroll so that a display line is at the top of the display.
-    void SetFirstVisibleLine(int lineDisplay);
+    void SetFirstVisibleLine(int displayLine);
 
     // Change the effect of pasting when there are multiple selections.
     void SetMultiPaste(int multiPaste);
@@ -3861,8 +3923,10 @@ public:
     // where possible.
     void LinesSplit(int pixelWidth);
 
-    // Set the colours used as a chequerboard pattern in the fold margin
+    // Set one of the colours used as a chequerboard pattern in the fold margin
     void SetFoldMarginColour(bool useSetting, const wxColour& back);
+
+    // Set the other colour used as a chequerboard pattern in the fold margin
     void SetFoldMarginHiColour(bool useSetting, const wxColour& fore);
 
     // Move caret down one line.
@@ -4023,16 +4087,28 @@ public:
     // caret position.
     void LineEndDisplayExtend();
 
-    // These are like their namesakes Home(Extend)?, LineEnd(Extend)?, VCHome(Extend)?
-    // except they behave differently when word-wrap is enabled:
-    // They go first to the start / end of the display line, like (Home|LineEnd)Display
-    // The difference is that, the cursor is already at the point, it goes on to the start
-    // or end of the document line, as appropriate for (Home|LineEnd|VCHome)(Extend)?.
+    // Like Home but when word-wrap is enabled goes first to start of display line
+    // HomeDisplay, then to start of document line Home.
     void HomeWrap();
+
+    // Like HomeExtend but when word-wrap is enabled extends first to start of display line
+    // HomeDisplayExtend, then to start of document line HomeExtend.
     void HomeWrapExtend();
+
+    // Like LineEnd but when word-wrap is enabled goes first to end of display line
+    // LineEndDisplay, then to start of document line LineEnd.
     void LineEndWrap();
+
+    // Like LineEndExtend but when word-wrap is enabled extends first to end of display line
+    // LineEndDisplayExtend, then to start of document line LineEndExtend.
     void LineEndWrapExtend();
+
+    // Like VCHome but when word-wrap is enabled goes first to start of display line
+    // VCHomeDisplay, then behaves like VCHome.
     void VCHomeWrap();
+
+    // Like VCHomeExtend but when word-wrap is enabled extends first to start of display line
+    // VCHomeDisplayExtend, then behaves like VCHomeExtend.
     void VCHomeWrapExtend();
 
     // Copy the line containing the caret.
@@ -4045,19 +4121,20 @@ public:
     int LineLength(int line) const;
 
     // Highlight the characters at two positions.
-    void BraceHighlight(int pos1, int pos2);
+    void BraceHighlight(int posA, int posB);
 
     // Use specified indicator to highlight matching braces instead of changing their style.
-    void BraceHighlightIndicator(bool useBraceHighlightIndicator, int indicator);
+    void BraceHighlightIndicator(bool useSetting, int indicator);
 
     // Highlight the character at a position indicating there is no matching brace.
     void BraceBadLight(int pos);
 
     // Use specified indicator to highlight non matching brace instead of changing its style.
-    void BraceBadLightIndicator(bool useBraceBadLightIndicator, int indicator);
+    void BraceBadLightIndicator(bool useSetting, int indicator);
 
     // Find the position of a matching brace or INVALID_POSITION if no match.
-    int BraceMatch(int pos);
+    // The maxReStyle must be 0 for now. It may be defined in a future release.
+    int BraceMatch(int pos, int maxReStyle=0);
 
     // Are the end of line characters visible?
     bool GetViewEOL() const;
@@ -4072,7 +4149,7 @@ public:
     void SetDocPointer(void* docPointer);
 
     // Set which document modification events are sent to the container.
-    void SetModEventMask(int mask);
+    void SetModEventMask(int eventMask);
 
     // Retrieve the column number which text should be kept within.
     int GetEdgeColumn() const;
@@ -4084,9 +4161,9 @@ public:
     // Retrieve the edge highlight mode.
     int GetEdgeMode() const;
 
-    // The edge may be displayed by a line (EDGE_LINE) or by highlighting text that
+    // The edge may be displayed by a line (EDGE_LINE/EDGE_MULTILINE) or by highlighting text that
     // goes beyond it (EDGE_BACKGROUND) or not displayed at all (EDGE_NONE).
-    void SetEdgeMode(int mode);
+    void SetEdgeMode(int edgeMode);
 
     // Retrieve the colour used in edge indication.
     wxColour GetEdgeColour() const;
@@ -4094,30 +4171,36 @@ public:
     // Change the colour used in edge indication.
     void SetEdgeColour(const wxColour& edgeColour);
 
+    // Add a new vertical edge to the view.
+    void MultiEdgeAddLine(int column, const wxColour& edgeColour);
+
+    // Clear all vertical edges.
+    void MultiEdgeClearAll();
+
     // Sets the current caret position to be the search anchor.
     void SearchAnchor();
 
     // Find some text starting at the search anchor.
     // Does not ensure the selection is visible.
-    int SearchNext(int flags, const wxString& text);
+    int SearchNext(int searchFlags, const wxString& text);
 
     // Find some text starting at the search anchor and moving backwards.
     // Does not ensure the selection is visible.
-    int SearchPrev(int flags, const wxString& text);
+    int SearchPrev(int searchFlags, const wxString& text);
 
     // Retrieves the number of lines completely visible.
     int LinesOnScreen() const;
 
     // Set whether a pop up menu is displayed automatically when the user presses
-    // the wrong mouse button.
-    void UsePopUp(bool allowPopUp);
+    // the wrong mouse button on certain areas.
+    void UsePopUp(int popUpMode);
 
     // Is the selection rectangular? The alternative is the more common stream selection.
     bool SelectionIsRectangle() const;
 
     // Set the zoom level. This number of points is added to the size of all fonts.
     // It may be positive to magnify or negative to reduce.
-    void SetZoom(int zoom);
+    void SetZoom(int zoomInPoints);
 
     // Retrieve the zoom level.
     int GetZoom() const;
@@ -4142,7 +4225,7 @@ public:
     bool GetSTCFocus() const;
 
     // Change error status - 0 = OK.
-    void SetStatus(int statusCode);
+    void SetStatus(int status);
 
     // Get error status.
     int GetStatus() const;
@@ -4153,6 +4236,12 @@ public:
     // Get whether mouse gets captured.
     bool GetMouseDownCaptures() const;
 
+    // Set whether the mouse wheel can be active outside the window.
+    void SetMouseWheelCaptures(bool captures);
+
+    // Get whether mouse wheel can be active outside the window.
+    bool GetMouseWheelCaptures() const;
+
     // Sets the cursor to one of the SC_CURSOR* values.
     void SetSTCCursor(int cursorType);
 
@@ -4191,7 +4280,7 @@ public:
     void DelLineRight();
 
     // Get and Set the xOffset (ie, horizontal scroll position).
-    void SetXOffset(int newOffset);
+    void SetXOffset(int xOffset);
     int GetXOffset() const;
 
     // Set the last x chosen value to be the caret x position.
@@ -4206,7 +4295,7 @@ public:
     void SetYCaretPolicy(int caretPolicy, int caretSlop);
 
     // Set printing to line wrapped (SC_WRAP_WORD) or not line wrapped (SC_WRAP_NONE).
-    void SetPrintWrapMode(int mode);
+    void SetPrintWrapMode(int wrapMode);
 
     // Is printing line wrapped?
     int GetPrintWrapMode() const;
@@ -4235,10 +4324,16 @@ public:
     // Get the HotspotSingleLine property
     bool GetHotspotSingleLine() const;
 
-    // Move caret between paragraphs (delimited by empty lines).
+    // Move caret down one paragraph (delimited by empty lines).
     void ParaDown();
+
+    // Extend selection down one paragraph (delimited by empty lines).
     void ParaDownExtend();
+
+    // Move caret up one paragraph (delimited by empty lines).
     void ParaUp();
+
+    // Extend selection up one paragraph (delimited by empty lines).
     void ParaUpExtend();
 
     // Given a valid document position, return the previous position taking code
@@ -4261,7 +4356,7 @@ public:
 
     // Set the selection mode to stream (SC_SEL_STREAM) or rectangular (SC_SEL_RECTANGLE/SC_SEL_THIN) or
     // by lines (SC_SEL_LINES).
-    void SetSelectionMode(int mode);
+    void SetSelectionMode(int selectionMode);
 
     // Get the mode of the current selection.
     int GetSelectionMode() const;
@@ -4413,22 +4508,22 @@ public:
     int GetIndicatorValue() const;
 
     // Turn a indicator on over a range.
-    void IndicatorFillRange(int position, int fillLength);
+    void IndicatorFillRange(int start, int lengthFill);
 
     // Turn a indicator off over a range.
-    void IndicatorClearRange(int position, int clearLength);
+    void IndicatorClearRange(int start, int lengthClear);
 
-    // Are any indicators present at position?
-    int IndicatorAllOnFor(int position);
+    // Are any indicators present at pos?
+    int IndicatorAllOnFor(int pos);
 
-    // What value does a particular indicator have at at a position?
-    int IndicatorValueAt(int indicator, int position);
+    // What value does a particular indicator have at a position?
+    int IndicatorValueAt(int indicator, int pos);
 
     // Where does a particular indicator start?
-    int IndicatorStart(int indicator, int position);
+    int IndicatorStart(int indicator, int pos);
 
     // Where does a particular indicator end?
-    int IndicatorEnd(int indicator, int position);
+    int IndicatorEnd(int indicator, int pos);
 
     // Set number of entries in position cache
     void SetPositionCacheSize(int size);
@@ -4445,7 +4540,7 @@ public:
 
     // Return a read-only pointer to a range of characters in the document.
     // May move the gap so that the range is contiguous, but will only move up
-    // to rangeLength bytes.
+    // to lengthRange bytes.
     const char* GetRangePointer(int position, int rangeLength) const;
 
     // Return a position which, to avoid performance costs, should not be within
@@ -4589,7 +4684,7 @@ public:
     bool GetAdditionalCaretsBlink() const;
 
     // Set whether additional carets are visible
-    void SetAdditionalCaretsVisible(bool additionalCaretsBlink);
+    void SetAdditionalCaretsVisible(bool additionalCaretsVisible);
 
     // Whether additional carets are visible
     bool GetAdditionalCaretsVisible() const;
@@ -4614,35 +4709,71 @@ public:
 
     // Which selection is the main selection
     int GetMainSelection() const;
-    void SetSelectionNCaret(int selection, int pos);
+
+    // Set the caret position of the nth selection.
+    void SetSelectionNCaret(int selection, int caret);
+
+    // Return the caret position of the nth selection.
     int GetSelectionNCaret(int selection) const;
-    void SetSelectionNAnchor(int selection, int posAnchor);
+
+    // Set the anchor position of the nth selection.
+    void SetSelectionNAnchor(int selection, int anchor);
+
+    // Return the anchor position of the nth selection.
     int GetSelectionNAnchor(int selection) const;
+
+    // Set the virtual space of the caret of the nth selection.
     void SetSelectionNCaretVirtualSpace(int selection, int space);
+
+    // Return the virtual space of the caret of the nth selection.
     int GetSelectionNCaretVirtualSpace(int selection) const;
+
+    // Set the virtual space of the anchor of the nth selection.
     void SetSelectionNAnchorVirtualSpace(int selection, int space);
+
+    // Return the virtual space of the anchor of the nth selection.
     int GetSelectionNAnchorVirtualSpace(int selection) const;
 
     // Sets the position that starts the selection - this becomes the anchor.
-    void SetSelectionNStart(int selection, int pos);
+    void SetSelectionNStart(int selection, int anchor);
 
     // Returns the position at the start of the selection.
     int GetSelectionNStart(int selection) const;
 
     // Sets the position that ends the selection - this becomes the currentPosition.
-    void SetSelectionNEnd(int selection, int pos);
+    void SetSelectionNEnd(int selection, int caret);
 
     // Returns the position at the end of the selection.
     int GetSelectionNEnd(int selection) const;
-    void SetRectangularSelectionCaret(int pos);
+
+    // Set the caret position of the rectangular selection.
+    void SetRectangularSelectionCaret(int caret);
+
+    // Return the caret position of the rectangular selection.
     int GetRectangularSelectionCaret() const;
-    void SetRectangularSelectionAnchor(int posAnchor);
+
+    // Set the anchor position of the rectangular selection.
+    void SetRectangularSelectionAnchor(int anchor);
+
+    // Return the anchor position of the rectangular selection.
     int GetRectangularSelectionAnchor() const;
+
+    // Set the virtual space of the caret of the rectangular selection.
     void SetRectangularSelectionCaretVirtualSpace(int space);
+
+    // Return the virtual space of the caret of the rectangular selection.
     int GetRectangularSelectionCaretVirtualSpace() const;
+
+    // Set the virtual space of the anchor of the rectangular selection.
     void SetRectangularSelectionAnchorVirtualSpace(int space);
+
+    // Return the virtual space of the anchor of the rectangular selection.
     int GetRectangularSelectionAnchorVirtualSpace() const;
+
+    // Set options for virtual space behaviour.
     void SetVirtualSpaceOptions(int virtualSpaceOptions);
+
+    // Return options for virtual space behaviour.
     int GetVirtualSpaceOptions() const;
 
     // On GTK+, allow selecting the modifier key to use for mouse-based
@@ -4794,7 +4925,7 @@ public:
     void SetProperty(const wxString& key, const wxString& value);
 
     // Set up the key words used by the lexer.
-    void SetKeyWords(int keywordSet, const wxString& keyWords);
+    void SetKeyWords(int keyWordSet, const wxString& keyWords);
 
     // Set the lexing language of the document based on string name.
     void SetLexerLanguage(const wxString& language);
@@ -4811,7 +4942,7 @@ public:
 
     // Retrieve a 'property' value previously set with SetProperty,
     // interpreted as an int AFTER any '$()' variable replacement.
-    int GetPropertyInt(const wxString& key) const;
+    int GetPropertyInt(const wxString &key, int defaultValue=0) const;
 
     // Retrieve the number of bits the current lexer needs for styling.
     int GetStyleBitsNeeded() const;
@@ -5213,6 +5344,13 @@ public:
     {
         return wxTextAreaBase::HitTest(pt, col, row);
     }
+    
+    // methods deprecated due to changes in the scintilla library
+    // ---------------------------------------------
+    
+    wxDEPRECATED_MSG("use UsePopUp(int) instead.") 
+    void UsePopUp(bool allowPopUp);
+
 
     static wxVersionInfo GetLibraryVersionInfo();
 
@@ -5231,6 +5369,7 @@ protected:
     void OnScroll(wxScrollEvent& evt);
     void OnSize(wxSizeEvent& evt);
     void OnMouseLeftDown(wxMouseEvent& evt);
+    void OnMouseRightDown(wxMouseEvent& evt);
     void OnMouseMove(wxMouseEvent& evt);
     void OnMouseLeftUp(wxMouseEvent& evt);
     void OnMouseRightUp(wxMouseEvent& evt);
@@ -5432,6 +5571,8 @@ wxDECLARE_EXPORTED_EVENT( WXDLLIMPEXP_STC, wxEVT_STC_HOTSPOT_RELEASE_CLICK, wxSt
 wxDECLARE_EXPORTED_EVENT( WXDLLIMPEXP_STC, wxEVT_STC_CLIPBOARD_COPY, wxStyledTextEvent );
 wxDECLARE_EXPORTED_EVENT( WXDLLIMPEXP_STC, wxEVT_STC_CLIPBOARD_PASTE, wxStyledTextEvent );
 wxDECLARE_EXPORTED_EVENT( WXDLLIMPEXP_STC, wxEVT_STC_AUTOCOMP_COMPLETED, wxStyledTextEvent );
+wxDECLARE_EXPORTED_EVENT( WXDLLIMPEXP_STC, wxEVT_STC_MARGIN_RIGHT_CLICK, wxStyledTextEvent );
+
 #else
     enum {
         wxEVT_STC_CHANGE,
@@ -5467,7 +5608,8 @@ wxDECLARE_EXPORTED_EVENT( WXDLLIMPEXP_STC, wxEVT_STC_AUTOCOMP_COMPLETED, wxStyle
         wxEVT_STC_HOTSPOT_RELEASE_CLICK,
         wxEVT_STC_CLIPBOARD_COPY,
         wxEVT_STC_CLIPBOARD_PASTE,
-        wxEVT_STC_AUTOCOMP_COMPLETED
+        wxEVT_STC_AUTOCOMP_COMPLETED,
+        wxEVT_STC_MARGIN_RIGHT_CLICK
     };
 #endif
 
@@ -5513,6 +5655,7 @@ typedef void (wxEvtHandler::*wxStyledTextEventFunction)(wxStyledTextEvent&);
 #define EVT_STC_CLIPBOARD_COPY(id, fn)        wxDECLARE_EVENT_TABLE_ENTRY( wxEVT_STC_CLIPBOARD_COPY,        id, wxID_ANY, wxStyledTextEventHandler( fn ), (wxObject *) NULL ),
 #define EVT_STC_CLIPBOARD_PASTE(id, fn)       wxDECLARE_EVENT_TABLE_ENTRY( wxEVT_STC_CLIPBOARD_PASTE,       id, wxID_ANY, wxStyledTextEventHandler( fn ), (wxObject *) NULL ),
 #define EVT_STC_AUTOCOMP_COMPLETED(id, fn)    wxDECLARE_EVENT_TABLE_ENTRY( wxEVT_STC_AUTOCOMP_COMPLETED,    id, wxID_ANY, wxStyledTextEventHandler( fn ), (wxObject *) NULL ),
+#define EVT_STC_MARGIN_RIGHT_CLICK(id, fn)    wxDECLARE_EVENT_TABLE_ENTRY( wxEVT_STC_MARGIN_RIGHT_CLICK,    id, wxID_ANY, wxStyledTextEventHandler( fn ), (wxObject *) NULL ),
 
 #endif
 
diff --git a/interface/wx/stc/stc.h b/interface/wx/stc/stc.h
index 021667e..d54b6aa 100644
--- a/interface/wx/stc/stc.h
+++ b/interface/wx/stc/stc.h
@@ -25,6 +25,8 @@
 #define wxSTC_WS_VISIBLEALWAYS 1
 #define wxSTC_WS_VISIBLEAFTERINDENT 2
 #define wxSTC_WS_VISIBLEONLYININDENT 3
+#define wxSTC_SCTD_LONGARROW 0
+#define wxSTC_SCTD_STRIKEOUT 1
 #define wxSTC_EOL_CRLF 0
 #define wxSTC_EOL_CR 1
 #define wxSTC_EOL_LF 2
@@ -89,6 +91,7 @@
 #define wxSTC_MARGIN_FORE 3
 #define wxSTC_MARGIN_TEXT 4
 #define wxSTC_MARGIN_RTEXT 5
+#define wxSTC_MARGIN_COLOUR 6
 
 /// Styles in range 32..38 are predefined for parts of the UI and are not used as normal styles.
 /// Style 39 is for future use.
@@ -99,6 +102,7 @@
 #define wxSTC_STYLE_CONTROLCHAR 36
 #define wxSTC_STYLE_INDENTGUIDE 37
 #define wxSTC_STYLE_CALLTIP 38
+#define wxSTC_STYLE_FOLDDISPLAYTEXT 39
 #define wxSTC_STYLE_LASTPREDEFINED 39
 #define wxSTC_STYLE_MAX 255
 
@@ -154,6 +158,8 @@
 #define wxSTC_INDIC_COMPOSITIONTHIN 15
 #define wxSTC_INDIC_FULLBOX 16
 #define wxSTC_INDIC_TEXTFORE 17
+#define wxSTC_INDIC_POINT 18
+#define wxSTC_INDIC_POINTCHARACTER 19
 #define wxSTC_INDIC_IME 32
 #define wxSTC_INDIC_IME_MAX 35
 #define wxSTC_INDIC_MAX 35
@@ -194,6 +200,9 @@
 #define wxSTC_FOLDLEVELWHITEFLAG 0x1000
 #define wxSTC_FOLDLEVELHEADERFLAG 0x2000
 #define wxSTC_FOLDLEVELNUMBERMASK 0x0FFF
+#define wxSTC_FOLDDISPLAYTEXT_HIDDEN 0
+#define wxSTC_FOLDDISPLAYTEXT_STANDARD 1
+#define wxSTC_FOLDDISPLAYTEXT_BOXED 2
 #define wxSTC_FOLDACTION_CONTRACT 0
 #define wxSTC_FOLDACTION_EXPAND 1
 #define wxSTC_FOLDACTION_TOGGLE 2
@@ -244,6 +253,10 @@
 #define wxSTC_EDGE_NONE 0
 #define wxSTC_EDGE_LINE 1
 #define wxSTC_EDGE_BACKGROUND 2
+#define wxSTC_EDGE_MULTILINE 3
+#define wxSTC_POPUP_NEVER 0
+#define wxSTC_POPUP_ALL 1
+#define wxSTC_POPUP_TEXT 2
 #define wxSTC_STATUS_OK 0
 #define wxSTC_STATUS_FAILURE 1
 #define wxSTC_STATUS_BADALLOC 2
@@ -313,6 +326,7 @@
 #define wxSTC_SCVS_NONE 0
 #define wxSTC_SCVS_RECTANGULARSELECTION 1
 #define wxSTC_SCVS_USERACCESSIBLE 2
+#define wxSTC_SCVS_NOWRAPLINESTART 4
 #define wxSTC_TECHNOLOGY_DEFAULT 0
 #define wxSTC_TECHNOLOGY_DIRECTWRITE 1
 #define wxSTC_TECHNOLOGY_DIRECTWRITERETAIN 2
@@ -517,6 +531,7 @@
 #define wxSTC_LEX_IHEX 118
 #define wxSTC_LEX_TEHEX 119
 #define wxSTC_LEX_JSON 120
+#define wxSTC_LEX_EDIFACT 121
 
 /// When a lexer specifies its language as SCLEX_AUTOMATIC it receives a
 /// value assigned in sequence from SCLEX_AUTOMATIC+1.
@@ -1050,6 +1065,20 @@
 #define wxSTC_BAAN_IDENTIFIER 8
 #define wxSTC_BAAN_STRINGEOL 9
 #define wxSTC_BAAN_WORD2 10
+#define wxSTC_BAAN_WORD3 11
+#define wxSTC_BAAN_WORD4 12
+#define wxSTC_BAAN_WORD5 13
+#define wxSTC_BAAN_WORD6 14
+#define wxSTC_BAAN_WORD7 15
+#define wxSTC_BAAN_WORD8 16
+#define wxSTC_BAAN_WORD9 17
+#define wxSTC_BAAN_TABLEDEF 18
+#define wxSTC_BAAN_TABLESQL 19
+#define wxSTC_BAAN_FUNCTION 20
+#define wxSTC_BAAN_DOMDEF 21
+#define wxSTC_BAAN_FUNCDEF 22
+#define wxSTC_BAAN_OBJECTDEF 23
+#define wxSTC_BAAN_DEFINEDEF 24
 
 /// Lexical states for SCLEX_LISP
 #define wxSTC_LISP_DEFAULT 0
@@ -1821,38 +1850,19 @@
 #define wxSTC_PLM_KEYWORD 7
 
 /// Lexical state for SCLEX_PROGRESS
-#define wxSTC_4GL_DEFAULT 0
-#define wxSTC_4GL_NUMBER 1
-#define wxSTC_4GL_WORD 2
-#define wxSTC_4GL_STRING 3
-#define wxSTC_4GL_CHARACTER 4
-#define wxSTC_4GL_PREPROCESSOR 5
-#define wxSTC_4GL_OPERATOR 6
-#define wxSTC_4GL_IDENTIFIER 7
-#define wxSTC_4GL_BLOCK 8
-#define wxSTC_4GL_END 9
-#define wxSTC_4GL_COMMENT1 10
-#define wxSTC_4GL_COMMENT2 11
-#define wxSTC_4GL_COMMENT3 12
-#define wxSTC_4GL_COMMENT4 13
-#define wxSTC_4GL_COMMENT5 14
-#define wxSTC_4GL_COMMENT6 15
-#define wxSTC_4GL_DEFAULT_ 16
-#define wxSTC_4GL_NUMBER_ 17
-#define wxSTC_4GL_WORD_ 18
-#define wxSTC_4GL_STRING_ 19
-#define wxSTC_4GL_CHARACTER_ 20
-#define wxSTC_4GL_PREPROCESSOR_ 21
-#define wxSTC_4GL_OPERATOR_ 22
-#define wxSTC_4GL_IDENTIFIER_ 23
-#define wxSTC_4GL_BLOCK_ 24
-#define wxSTC_4GL_END_ 25
-#define wxSTC_4GL_COMMENT1_ 26
-#define wxSTC_4GL_COMMENT2_ 27
-#define wxSTC_4GL_COMMENT3_ 28
-#define wxSTC_4GL_COMMENT4_ 29
-#define wxSTC_4GL_COMMENT5_ 30
-#define wxSTC_4GL_COMMENT6_ 31
+#define wxSTC_ABL_DEFAULT 0
+#define wxSTC_ABL_NUMBER 1
+#define wxSTC_ABL_WORD 2
+#define wxSTC_ABL_STRING 3
+#define wxSTC_ABL_CHARACTER 4
+#define wxSTC_ABL_PREPROCESSOR 5
+#define wxSTC_ABL_OPERATOR 6
+#define wxSTC_ABL_IDENTIFIER 7
+#define wxSTC_ABL_BLOCK 8
+#define wxSTC_ABL_END 9
+#define wxSTC_ABL_COMMENT 10
+#define wxSTC_ABL_TASKMARKER 11
+#define wxSTC_ABL_LINECOMMENT 12
 
 /// Lexical states for SCLEX_ABAQUS
 #define wxSTC_ABAQUS_DEFAULT 0
@@ -2406,6 +2416,15 @@
 #define wxSTC_JSON_KEYWORD 11
 #define wxSTC_JSON_LDKEYWORD 12
 #define wxSTC_JSON_ERROR 13
+#define wxSTC_EDI_DEFAULT 0
+#define wxSTC_EDI_SEGMENTSTART 1
+#define wxSTC_EDI_SEGMENTEND 2
+#define wxSTC_EDI_SEP_ELEMENT 3
+#define wxSTC_EDI_SEP_COMPOSITE 4
+#define wxSTC_EDI_SEP_RELEASE 5
+#define wxSTC_EDI_UNA 6
+#define wxSTC_EDI_UNH 7
+#define wxSTC_EDI_BADSEGMENT 8
 
 //}}}
 
@@ -2591,16 +2610,28 @@
 /// caret position.
 #define wxSTC_CMD_LINEENDDISPLAYEXTEND 2348
 
-/// These are like their namesakes Home(Extend)?, LineEnd(Extend)?, VCHome(Extend)?
-/// except they behave differently when word-wrap is enabled:
-/// They go first to the start / end of the display line, like (Home|LineEnd)Display
-/// The difference is that, the cursor is already at the point, it goes on to the start
-/// or end of the document line, as appropriate for (Home|LineEnd|VCHome)(Extend)?.
+/// Like Home but when word-wrap is enabled goes first to start of display line
+/// HomeDisplay, then to start of document line Home.
 #define wxSTC_CMD_HOMEWRAP 2349
+
+/// Like HomeExtend but when word-wrap is enabled extends first to start of display line
+/// HomeDisplayExtend, then to start of document line HomeExtend.
 #define wxSTC_CMD_HOMEWRAPEXTEND 2450
+
+/// Like LineEnd but when word-wrap is enabled goes first to end of display line
+/// LineEndDisplay, then to start of document line LineEnd.
 #define wxSTC_CMD_LINEENDWRAP 2451
+
+/// Like LineEndExtend but when word-wrap is enabled extends first to end of display line
+/// LineEndDisplayExtend, then to start of document line LineEndExtend.
 #define wxSTC_CMD_LINEENDWRAPEXTEND 2452
+
+/// Like VCHome but when word-wrap is enabled goes first to start of display line
+/// VCHomeDisplay, then behaves like VCHome.
 #define wxSTC_CMD_VCHOMEWRAP 2453
+
+/// Like VCHomeExtend but when word-wrap is enabled extends first to start of display line
+/// VCHomeDisplayExtend, then behaves like VCHomeExtend.
 #define wxSTC_CMD_VCHOMEWRAPEXTEND 2454
 
 /// Copy the line containing the caret.
@@ -2626,10 +2657,16 @@
 /// Delete forwards from the current position to the end of the line.
 #define wxSTC_CMD_DELLINERIGHT 2396
 
-/// Move caret between paragraphs (delimited by empty lines).
+/// Move caret down one paragraph (delimited by empty lines).
 #define wxSTC_CMD_PARADOWN 2413
+
+/// Extend selection down one paragraph (delimited by empty lines).
 #define wxSTC_CMD_PARADOWNEXTEND 2414
+
+/// Move caret up one paragraph (delimited by empty lines).
 #define wxSTC_CMD_PARAUP 2415
+
+/// Extend selection up one paragraph (delimited by empty lines).
 #define wxSTC_CMD_PARAUPEXTEND 2416
 
 /// Move caret down one line, extending rectangular selection to new caret position.
@@ -2804,6 +2841,10 @@
     @event{EVT_STC_AUTOCOMP_COMPLETED(id, fn)}
         Process a @c wxEVT_STC_AUTOCOMP_COMPLETED event, generated after an autocompletion list has closed and inserted its text into the control. Valid event functions: @link wxStyledTextEvent::GetPosition GetPosition@endlink, @link wxStyledTextEvent::GetString GetString@endlink, @link wxStyledTextEvent::GetKey GetKey@endlink, @link wxStyledTextEvent::GetListCompletionMethod GetListCompletionMethod@endlink.
         @since 3.1.1
+        
+    @event{EVT_STC_MARGIN_RIGHT_CLICK(id, fn)}
+        Process a @c wxEVT_STC_MARGIN_RIGHT_CLICK event. Valid event functions: @link wxStyledTextEvent::GetMargin GetMargin@endlink, @link wxStyledTextEvent::GetModifiers GetModifiers@endlink, @link wxStyledTextEvent::GetPosition GetPosition@endlink, @link wxStyledTextEvent::GetAlt GetAlt@endlink, @link wxStyledTextEvent::GetControl GetControl@endlink, @link wxStyledTextEvent::GetShift GetShift@endlink.
+        @since 3.1.1
 
     @endEventTable
 
@@ -2875,7 +2916,7 @@ public:
     /**
         Delete a range of text in the document.
     */
-    void DeleteRange(int pos, int deleteLength);
+    void DeleteRange(int start, int lengthDelete);
 
     /**
         Set all style bytes to 0, remove all folding information.
@@ -2942,12 +2983,12 @@ public:
     /**
         Retrieve the line number at which a particular marker is located.
     */
-    int MarkerLineFromHandle(int handle);
+    int MarkerLineFromHandle(int markerHandle);
 
     /**
         Delete a marker.
     */
-    void MarkerDeleteHandle(int handle);
+    void MarkerDeleteHandle(int markerHandle);
 
     /**
         Is undo history being collected?
@@ -2966,6 +3007,17 @@ public:
     void SetViewWhiteSpace(int viewWS);
 
     /**
+        Retrieve the current tab draw mode.
+        Returns one of SCTD_* constants.
+    */
+    int GetTabDrawMode() const;
+
+    /**
+        Set how tabs are drawn when visible.
+    */
+    void SetTabDrawMode(int tabDrawMode);
+
+    /**
         Find the position from a point within the window.
     */
     int PositionFromPoint(wxPoint pt) const;
@@ -2984,13 +3036,13 @@ public:
     /**
         Set caret to a position and ensure it is visible.
     */
-    void GotoPos(int pos);
+    void GotoPos(int caret);
 
     /**
         Set the selection anchor to a position. The anchor is the opposite
         end of the selection from the caret.
     */
-    void SetAnchor(int posAnchor);
+    void SetAnchor(int anchor);
 
     /**
         Retrieve the text of the line containing the caret.
@@ -3020,10 +3072,10 @@ public:
     void SetEOLMode(int eolMode);
 
     /**
-        Set the current styling position to pos and the styling mask to mask.
-        The styling mask can be used to protect some bits in each styling byte from modification.
+        Set the current styling position to start.
+        The unused parameter is no longer used and should be set to 0.
     */
-    void StartStyling(int pos, int mask);
+    void StartStyling(int start, int unused=0);
 
     /**
         Change style from current styling position for length characters to a style
@@ -3149,7 +3201,7 @@ public:
     /**
         Add a set of markers to a line.
     */
-    void MarkerAddSet(int line, int set);
+    void MarkerAddSet(int line, int markerSet);
 
     /**
         Set the alpha used for a marker that is drawn in the text area, not the margin.
@@ -3207,6 +3259,26 @@ public:
     int GetMarginCursor(int margin) const;
 
     /**
+        Set the background colour of a margin. Only visible for SC_MARGIN_COLOUR.
+    */
+    void SetMarginBackground(int margin, const wxColour& back);
+
+    /**
+        Retrieve the background colour of a margin
+    */
+    wxColour GetMarginBackground(int margin) const;
+
+    /**
+        Allocate a non-standard number of margins.
+    */
+    void SetMarginCount(int margins);
+
+    /**
+        How many margins are there?.
+    */
+    int GetMarginCount() const;
+
+    /**
         Clear all the styles and make equivalent to the global default style.
     */
     void StyleClearAll();
@@ -3244,7 +3316,7 @@ public:
     /**
         Set a style to have its end of line filled or not.
     */
-    void StyleSetEOLFilled(int style, bool filled);
+    void StyleSetEOLFilled(int style, bool eolFilled);
 
     /**
         Reset the default style to its state at startup
@@ -3325,12 +3397,12 @@ public:
     /**
         Set a style to be mixed case, or to force upper or lower case.
     */
-    void StyleSetCase(int style, int caseForce);
+    void StyleSetCase(int style, int caseVisible);
 
     /**
         Set the size of characters of a style. Size is in points multiplied by 100.
     */
-    void StyleSetSizeFractional(int style, int caseForce);
+    void StyleSetSizeFractional(int style, int sizeHundredthPoints);
 
     /**
         Get the size of characters of a style in points multiplied by 100
@@ -3388,12 +3460,12 @@ public:
     void SetCaretForeground(const wxColour& fore);
 
     /**
-        When key+modifier combination km is pressed perform msg.
+        When key+modifier combination keyDefinition is pressed perform sciCommand.
     */
     void CmdKeyAssign(int key, int modifiers, int cmd);
 
     /**
-        When key+modifier combination km is pressed do nothing.
+        When key+modifier combination keyDefinition is pressed do nothing.
     */
     void CmdKeyClear(int key, int modifiers);
 
@@ -3447,62 +3519,62 @@ public:
     /**
         Set an indicator to plain, squiggle or TT.
     */
-    void IndicatorSetStyle(int indic, int style);
+    void IndicatorSetStyle(int indicator, int indicatorStyle);
 
     /**
         Retrieve the style of an indicator.
     */
-    int IndicatorGetStyle(int indic) const;
+    int IndicatorGetStyle(int indicator) const;
 
     /**
         Set the foreground colour of an indicator.
     */
-    void IndicatorSetForeground(int indic, const wxColour& fore);
+    void IndicatorSetForeground(int indicator, const wxColour& fore);
 
     /**
         Retrieve the foreground colour of an indicator.
     */
-    wxColour IndicatorGetForeground(int indic) const;
+    wxColour IndicatorGetForeground(int indicator) const;
 
     /**
         Set an indicator to draw under text or over(default).
     */
-    void IndicatorSetUnder(int indic, bool under);
+    void IndicatorSetUnder(int indicator, bool under);
 
     /**
         Retrieve whether indicator drawn under or over text.
     */
-    bool IndicatorGetUnder(int indic) const;
+    bool IndicatorGetUnder(int indicator) const;
 
     /**
         Set a hover indicator to plain, squiggle or TT.
     */
-    void IndicatorSetHoverStyle(int indic, int style);
+    void IndicatorSetHoverStyle(int indicator, int indicatorStyle);
 
     /**
         Retrieve the hover style of an indicator.
     */
-    int IndicatorGetHoverStyle(int indic) const;
+    int IndicatorGetHoverStyle(int indicator) const;
 
     /**
         Set the foreground hover colour of an indicator.
     */
-    void IndicatorSetHoverForeground(int indic, const wxColour& fore);
+    void IndicatorSetHoverForeground(int indicator, const wxColour& fore);
 
     /**
         Retrieve the foreground hover colour of an indicator.
     */
-    wxColour IndicatorGetHoverForeground(int indic) const;
+    wxColour IndicatorGetHoverForeground(int indicator) const;
 
     /**
         Set the attributes of an indicator.
     */
-    void IndicatorSetFlags(int indic, int flags);
+    void IndicatorSetFlags(int indicator, int flags);
 
     /**
         Retrieve the attributes of an indicator.
     */
-    int IndicatorGetFlags(int indic) const;
+    int IndicatorGetFlags(int indicator) const;
 
     /**
         Set the foreground colour of all whitespace and whether to use this setting.
@@ -3579,10 +3651,10 @@ public:
 
     /**
         Display a auto-completion list.
-        The lenEntered parameter indicates how many characters before
+        The lengthEntered parameter indicates how many characters before
         the caret should be used to provide context.
     */
-    void AutoCompShow(int lenEntered, const wxString& itemList);
+    void AutoCompShow(int lengthEntered, const wxString& itemList);
 
     /**
         Remove the auto-completion list from the screen.
@@ -3623,7 +3695,7 @@ public:
     /**
         Select the item in the auto-completion list that starts with a string.
     */
-    void AutoCompSelect(const wxString& text);
+    void AutoCompSelect(const wxString& select);
 
     /**
         Should the auto-completion list be cancelled if the user backspaces to a
@@ -3756,7 +3828,7 @@ public:
     /**
         Change the indentation of a line to a number of columns.
     */
-    void SetLineIndentation(int line, int indentSize);
+    void SetLineIndentation(int line, int indentation);
 
     /**
         Retrieve the number of columns that a line is indented.
@@ -3776,12 +3848,12 @@ public:
     /**
         Count characters between two positions.
     */
-    int CountCharacters(int startPos, int endPos);
+    int CountCharacters(int start, int end);
 
     /**
         Show or hide the horizontal scroll bar.
     */
-    void SetUseHorizontalScrollBar(bool show);
+    void SetUseHorizontalScrollBar(bool visible);
 
     /**
         Is the horizontal scroll bar visible?
@@ -3832,12 +3904,12 @@ public:
     /**
         Sets the position of the caret.
     */
-    void SetCurrentPos(int pos);
+    void SetCurrentPos(int caret);
 
     /**
         Sets the position that starts the selection - this becomes the anchor.
     */
-    void SetSelectionStart(int pos);
+    void SetSelectionStart(int anchor);
 
     /**
         Returns the position at the start of the selection.
@@ -3845,9 +3917,9 @@ public:
     int GetSelectionStart() const;
 
     /**
-        Sets the position that ends the selection - this becomes the currentPosition.
+        Sets the position that ends the selection - this becomes the caret.
     */
-    void SetSelectionEnd(int pos);
+    void SetSelectionEnd(int caret);
 
     /**
         Returns the position at the end of the selection.
@@ -3857,7 +3929,7 @@ public:
     /**
         Set caret to a position, while removing any existing selection.
     */
-    void SetEmptySelection(int pos);
+    void SetEmptySelection(int caret);
 
     /**
         Sets the print magnification added to the point size of each style for printing.
@@ -3948,7 +4020,7 @@ public:
     /**
         Draw the selection in normal style or with selection highlighted.
     */
-    void HideSelection(bool normal);
+    void HideSelection(bool hide);
 
     /**
         Retrieve the line containing a position.
@@ -4056,7 +4128,7 @@ public:
     /**
         Set to overtype (true) or insert mode.
     */
-    void SetOvertype(bool overtype);
+    void SetOvertype(bool overType);
 
     /**
         Returns true if overtype mode is active otherwise false is returned.
@@ -4077,7 +4149,7 @@ public:
         Sets the position that starts the target which is used for updating the
         document without affecting the scroll position.
     */
-    void SetTargetStart(int pos);
+    void SetTargetStart(int start);
 
     /**
         Get the position that starts the target.
@@ -4088,7 +4160,7 @@ public:
         Sets the position that ends the target which is used for updating the
         document without affecting the scroll position.
     */
-    void SetTargetEnd(int pos);
+    void SetTargetEnd(int end);
 
     /**
         Get the position that ends the target.
@@ -4142,7 +4214,7 @@ public:
     /**
         Set the search flags used by SearchInTarget.
     */
-    void SetSearchFlags(int flags);
+    void SetSearchFlags(int searchFlags);
 
     /**
         Get the search flags used by SearchInTarget.
@@ -4177,7 +4249,7 @@ public:
     /**
         Highlight a segment of the definition.
     */
-    void CallTipSetHighlight(int start, int end);
+    void CallTipSetHighlight(int highlightStart, int highlightEnd);
 
     /**
         Set the background colour for the call tip.
@@ -4207,17 +4279,17 @@ public:
     /**
         Find the display line of a document line taking hidden lines into account.
     */
-    int VisibleFromDocLine(int line);
+    int VisibleFromDocLine(int docLine);
 
     /**
         Find the document line of a display line taking hidden lines into account.
     */
-    int DocLineFromVisible(int lineDisplay);
+    int DocLineFromVisible(int displayLine);
 
     /**
         The number of display lines needed to wrap a document line
     */
-    int WrapCount(int line);
+    int WrapCount(int docLine);
 
     /**
         Set the fold level of a line.
@@ -4277,6 +4349,16 @@ public:
     void ToggleFold(int line);
 
     /**
+        Switch a header line between expanded and contracted and show some text after the line.
+    */
+    void ToggleFoldShowText(int line, const wxString& text);
+
+    /**
+        Set the style of fold display text
+    */
+    void FoldDisplayTextSetStyle(int style);
+
+    /**
         Expand or contract a fold header.
     */
     void FoldLine(int line, int action);
@@ -4380,7 +4462,7 @@ public:
     /**
         Sets whether text is word wrapped.
     */
-    void SetWrapMode(int mode);
+    void SetWrapMode(int wrapMode);
 
     /**
         Retrieve whether text is word wrapped.
@@ -4420,7 +4502,7 @@ public:
     /**
         Sets how wrapped sublines are placed. Default is fixed.
     */
-    void SetWrapIndentMode(int mode);
+    void SetWrapIndentMode(int wrapIndentMode);
 
     /**
         Retrieve how wrapped sublines are placed. Default is fixed.
@@ -4430,7 +4512,7 @@ public:
     /**
         Sets the degree of caching of layout information.
     */
-    void SetLayoutCache(int mode);
+    void SetLayoutCache(int cacheMode);
 
     /**
         Retrieve the degree of caching of layout information.
@@ -4485,7 +4567,7 @@ public:
     /**
         Show or hide the vertical scroll bar.
     */
-    void SetUseVerticalScrollBar(bool show);
+    void SetUseVerticalScrollBar(bool visible);
 
     /**
         Is the vertical scroll bar visible?
@@ -4524,7 +4606,7 @@ public:
     /**
         Scroll so that a display line is at the top of the display.
     */
-    void SetFirstVisibleLine(int lineDisplay);
+    void SetFirstVisibleLine(int displayLine);
 
     /**
         Change the effect of pasting when there are multiple selections.
@@ -4554,9 +4636,13 @@ public:
     void LinesSplit(int pixelWidth);
 
     /**
-        Set the colours used as a chequerboard pattern in the fold margin
+        Set one of the colours used as a chequerboard pattern in the fold margin
     */
     void SetFoldMarginColour(bool useSetting, const wxColour& back);
+
+    /**
+        Set the other colour used as a chequerboard pattern in the fold margin
+    */
     void SetFoldMarginHiColour(bool useSetting, const wxColour& fore);
 
     /**
@@ -4820,17 +4906,39 @@ public:
     void LineEndDisplayExtend();
 
     /**
-        These are like their namesakes Home(Extend)?, LineEnd(Extend)?, VCHome(Extend)?
-        except they behave differently when word-wrap is enabled:
-        They go first to the start / end of the display line, like (Home|LineEnd)Display
-        The difference is that, the cursor is already at the point, it goes on to the start
-        or end of the document line, as appropriate for (Home|LineEnd|VCHome)(Extend)?.
+        Like Home but when word-wrap is enabled goes first to start of display line
+        HomeDisplay, then to start of document line Home.
     */
     void HomeWrap();
+
+    /**
+        Like HomeExtend but when word-wrap is enabled extends first to start of display line
+        HomeDisplayExtend, then to start of document line HomeExtend.
+    */
     void HomeWrapExtend();
+
+    /**
+        Like LineEnd but when word-wrap is enabled goes first to end of display line
+        LineEndDisplay, then to start of document line LineEnd.
+    */
     void LineEndWrap();
+
+    /**
+        Like LineEndExtend but when word-wrap is enabled extends first to end of display line
+        LineEndDisplayExtend, then to start of document line LineEndExtend.
+    */
     void LineEndWrapExtend();
+
+    /**
+        Like VCHome but when word-wrap is enabled goes first to start of display line
+        VCHomeDisplay, then behaves like VCHome.
+    */
     void VCHomeWrap();
+
+    /**
+        Like VCHomeExtend but when word-wrap is enabled extends first to start of display line
+        VCHomeDisplayExtend, then behaves like VCHomeExtend.
+    */
     void VCHomeWrapExtend();
 
     /**
@@ -4851,12 +4959,12 @@ public:
     /**
         Highlight the characters at two positions.
     */
-    void BraceHighlight(int pos1, int pos2);
+    void BraceHighlight(int posA, int posB);
 
     /**
         Use specified indicator to highlight matching braces instead of changing their style.
     */
-    void BraceHighlightIndicator(bool useBraceHighlightIndicator, int indicator);
+    void BraceHighlightIndicator(bool useSetting, int indicator);
 
     /**
         Highlight the character at a position indicating there is no matching brace.
@@ -4866,12 +4974,13 @@ public:
     /**
         Use specified indicator to highlight non matching brace instead of changing its style.
     */
-    void BraceBadLightIndicator(bool useBraceBadLightIndicator, int indicator);
+    void BraceBadLightIndicator(bool useSetting, int indicator);
 
     /**
         Find the position of a matching brace or INVALID_POSITION if no match.
+        The maxReStyle must be 0 for now. It may be defined in a future release.
     */
-    int BraceMatch(int pos);
+    int BraceMatch(int pos, int maxReStyle=0);
 
     /**
         Are the end of line characters visible?
@@ -4896,7 +5005,7 @@ public:
     /**
         Set which document modification events are sent to the container.
     */
-    void SetModEventMask(int mask);
+    void SetModEventMask(int eventMask);
 
     /**
         Retrieve the column number which text should be kept within.
@@ -4915,10 +5024,10 @@ public:
     int GetEdgeMode() const;
 
     /**
-        The edge may be displayed by a line (EDGE_LINE) or by highlighting text that
+        The edge may be displayed by a line (EDGE_LINE/EDGE_MULTILINE) or by highlighting text that
         goes beyond it (EDGE_BACKGROUND) or not displayed at all (EDGE_NONE).
     */
-    void SetEdgeMode(int mode);
+    void SetEdgeMode(int edgeMode);
 
     /**
         Retrieve the colour used in edge indication.
@@ -4931,6 +5040,16 @@ public:
     void SetEdgeColour(const wxColour& edgeColour);
 
     /**
+        Add a new vertical edge to the view.
+    */
+    void MultiEdgeAddLine(int column, const wxColour& edgeColour);
+
+    /**
+        Clear all vertical edges.
+    */
+    void MultiEdgeClearAll();
+
+    /**
         Sets the current caret position to be the search anchor.
     */
     void SearchAnchor();
@@ -4939,13 +5058,13 @@ public:
         Find some text starting at the search anchor.
         Does not ensure the selection is visible.
     */
-    int SearchNext(int flags, const wxString& text);
+    int SearchNext(int searchFlags, const wxString& text);
 
     /**
         Find some text starting at the search anchor and moving backwards.
         Does not ensure the selection is visible.
     */
-    int SearchPrev(int flags, const wxString& text);
+    int SearchPrev(int searchFlags, const wxString& text);
 
     /**
         Retrieves the number of lines completely visible.
@@ -4954,9 +5073,9 @@ public:
 
     /**
         Set whether a pop up menu is displayed automatically when the user presses
-        the wrong mouse button.
+        the wrong mouse button on certain areas.
     */
-    void UsePopUp(bool allowPopUp);
+    void UsePopUp(int popUpMode);
 
     /**
         Is the selection rectangular? The alternative is the more common stream selection.
@@ -4967,7 +5086,7 @@ public:
         Set the zoom level. This number of points is added to the size of all fonts.
         It may be positive to magnify or negative to reduce.
     */
-    void SetZoom(int zoom);
+    void SetZoom(int zoomInPoints);
 
     /**
         Retrieve the zoom level.
@@ -5008,7 +5127,7 @@ public:
     /**
         Change error status - 0 = OK.
     */
-    void SetStatus(int statusCode);
+    void SetStatus(int status);
 
     /**
         Get error status.
@@ -5026,6 +5145,16 @@ public:
     bool GetMouseDownCaptures() const;
 
     /**
+        Set whether the mouse wheel can be active outside the window.
+    */
+    void SetMouseWheelCaptures(bool captures);
+
+    /**
+        Get whether mouse wheel can be active outside the window.
+    */
+    bool GetMouseWheelCaptures() const;
+
+    /**
         Sets the cursor to one of the SC_CURSOR* values.
     */
     void SetSTCCursor(int cursorType);
@@ -5087,7 +5216,7 @@ public:
     /**
         Get and Set the xOffset (ie, horizontal scroll position).
     */
-    void SetXOffset(int newOffset);
+    void SetXOffset(int xOffset);
     int GetXOffset() const;
 
     /**
@@ -5110,7 +5239,7 @@ public:
     /**
         Set printing to line wrapped (SC_WRAP_WORD) or not line wrapped (SC_WRAP_NONE).
     */
-    void SetPrintWrapMode(int mode);
+    void SetPrintWrapMode(int wrapMode);
 
     /**
         Is printing line wrapped?
@@ -5158,11 +5287,23 @@ public:
     bool GetHotspotSingleLine() const;
 
     /**
-        Move caret between paragraphs (delimited by empty lines).
+        Move caret down one paragraph (delimited by empty lines).
     */
     void ParaDown();
+
+    /**
+        Extend selection down one paragraph (delimited by empty lines).
+    */
     void ParaDownExtend();
+
+    /**
+        Move caret up one paragraph (delimited by empty lines).
+    */
     void ParaUp();
+
+    /**
+        Extend selection up one paragraph (delimited by empty lines).
+    */
     void ParaUpExtend();
 
     /**
@@ -5197,7 +5338,7 @@ public:
         Set the selection mode to stream (SC_SEL_STREAM) or rectangular (SC_SEL_RECTANGLE/SC_SEL_THIN) or
         by lines (SC_SEL_LINES).
     */
-    void SetSelectionMode(int mode);
+    void SetSelectionMode(int selectionMode);
 
     /**
         Get the mode of the current selection.
@@ -5447,32 +5588,32 @@ public:
     /**
         Turn a indicator on over a range.
     */
-    void IndicatorFillRange(int position, int fillLength);
+    void IndicatorFillRange(int start, int lengthFill);
 
     /**
         Turn a indicator off over a range.
     */
-    void IndicatorClearRange(int position, int clearLength);
+    void IndicatorClearRange(int start, int lengthClear);
 
     /**
-        Are any indicators present at position?
+        Are any indicators present at pos?
     */
-    int IndicatorAllOnFor(int position);
+    int IndicatorAllOnFor(int pos);
 
     /**
-        What value does a particular indicator have at at a position?
+        What value does a particular indicator have at a position?
     */
-    int IndicatorValueAt(int indicator, int position);
+    int IndicatorValueAt(int indicator, int pos);
 
     /**
         Where does a particular indicator start?
     */
-    int IndicatorStart(int indicator, int position);
+    int IndicatorStart(int indicator, int pos);
 
     /**
         Where does a particular indicator end?
     */
-    int IndicatorEnd(int indicator, int position);
+    int IndicatorEnd(int indicator, int pos);
 
     /**
         Set number of entries in position cache
@@ -5498,7 +5639,7 @@ public:
     /**
         Return a read-only pointer to a range of characters in the document.
         May move the gap so that the range is contiguous, but will only move up
-        to rangeLength bytes.
+        to lengthRange bytes.
     */
     const char* GetRangePointer(int position, int rangeLength) const;
 
@@ -5737,7 +5878,7 @@ public:
     /**
         Set whether additional carets are visible
     */
-    void SetAdditionalCaretsVisible(bool additionalCaretsBlink);
+    void SetAdditionalCaretsVisible(bool additionalCaretsVisible);
 
     /**
         Whether additional carets are visible
@@ -5778,19 +5919,51 @@ public:
         Which selection is the main selection
     */
     int GetMainSelection() const;
-    void SetSelectionNCaret(int selection, int pos);
+
+    /**
+        Set the caret position of the nth selection.
+    */
+    void SetSelectionNCaret(int selection, int caret);
+
+    /**
+        Return the caret position of the nth selection.
+    */
     int GetSelectionNCaret(int selection) const;
-    void SetSelectionNAnchor(int selection, int posAnchor);
+
+    /**
+        Set the anchor position of the nth selection.
+    */
+    void SetSelectionNAnchor(int selection, int anchor);
+
+    /**
+        Return the anchor position of the nth selection.
+    */
     int GetSelectionNAnchor(int selection) const;
+
+    /**
+        Set the virtual space of the caret of the nth selection.
+    */
     void SetSelectionNCaretVirtualSpace(int selection, int space);
+
+    /**
+        Return the virtual space of the caret of the nth selection.
+    */
     int GetSelectionNCaretVirtualSpace(int selection) const;
+
+    /**
+        Set the virtual space of the anchor of the nth selection.
+    */
     void SetSelectionNAnchorVirtualSpace(int selection, int space);
+
+    /**
+        Return the virtual space of the anchor of the nth selection.
+    */
     int GetSelectionNAnchorVirtualSpace(int selection) const;
 
     /**
         Sets the position that starts the selection - this becomes the anchor.
     */
-    void SetSelectionNStart(int selection, int pos);
+    void SetSelectionNStart(int selection, int anchor);
 
     /**
         Returns the position at the start of the selection.
@@ -5800,21 +5973,61 @@ public:
     /**
         Sets the position that ends the selection - this becomes the currentPosition.
     */
-    void SetSelectionNEnd(int selection, int pos);
+    void SetSelectionNEnd(int selection, int caret);
 
     /**
         Returns the position at the end of the selection.
     */
     int GetSelectionNEnd(int selection) const;
-    void SetRectangularSelectionCaret(int pos);
+
+    /**
+        Set the caret position of the rectangular selection.
+    */
+    void SetRectangularSelectionCaret(int caret);
+
+    /**
+        Return the caret position of the rectangular selection.
+    */
     int GetRectangularSelectionCaret() const;
-    void SetRectangularSelectionAnchor(int posAnchor);
+
+    /**
+        Set the anchor position of the rectangular selection.
+    */
+    void SetRectangularSelectionAnchor(int anchor);
+
+    /**
+        Return the anchor position of the rectangular selection.
+    */
     int GetRectangularSelectionAnchor() const;
+
+    /**
+        Set the virtual space of the caret of the rectangular selection.
+    */
     void SetRectangularSelectionCaretVirtualSpace(int space);
+
+    /**
+        Return the virtual space of the caret of the rectangular selection.
+    */
     int GetRectangularSelectionCaretVirtualSpace() const;
+
+    /**
+        Set the virtual space of the anchor of the rectangular selection.
+    */
     void SetRectangularSelectionAnchorVirtualSpace(int space);
+
+    /**
+        Return the virtual space of the anchor of the rectangular selection.
+    */
     int GetRectangularSelectionAnchorVirtualSpace() const;
+
+    /**
+        Set options for virtual space behaviour.
+    */
     void SetVirtualSpaceOptions(int virtualSpaceOptions);
+
+    /**
+        Return options for virtual space behaviour.
+    */
     int GetVirtualSpaceOptions() const;
 
     /**
@@ -6058,7 +6271,7 @@ public:
     /**
         Set up the key words used by the lexer.
     */
-    void SetKeyWords(int keywordSet, const wxString& keyWords);
+    void SetKeyWords(int keyWordSet, const wxString& keyWords);
 
     /**
         Set the lexing language of the document based on string name.
@@ -6085,7 +6298,7 @@ public:
         Retrieve a 'property' value previously set with SetProperty,
         interpreted as an int AFTER any '$()' variable replacement.
     */
-    int GetPropertyInt(const wxString& key) const;
+    int GetPropertyInt(const wxString &key, int defaultValue=0) const;
 
     /**
         Retrieve the number of bits the current lexer needs for styling.
diff --git a/src/stc/stc.cpp b/src/stc/stc.cpp
index ab2ede4..ebd25e0 100644
--- a/src/stc/stc.cpp
+++ b/src/stc/stc.cpp
@@ -137,7 +137,7 @@ wxDEFINE_EVENT( wxEVT_STC_HOTSPOT_RELEASE_CLICK, wxStyledTextEvent );
 wxDEFINE_EVENT( wxEVT_STC_CLIPBOARD_COPY, wxStyledTextEvent );
 wxDEFINE_EVENT( wxEVT_STC_CLIPBOARD_PASTE, wxStyledTextEvent );
 wxDEFINE_EVENT( wxEVT_STC_AUTOCOMP_COMPLETED, wxStyledTextEvent );
-
+wxDEFINE_EVENT( wxEVT_STC_MARGIN_RIGHT_CLICK, wxStyledTextEvent );
 
 
 wxBEGIN_EVENT_TABLE(wxStyledTextCtrl, wxControl)
@@ -146,6 +146,7 @@ wxBEGIN_EVENT_TABLE(wxStyledTextCtrl, wxControl)
     EVT_SCROLL                  (wxStyledTextCtrl::OnScroll)
     EVT_SIZE                    (wxStyledTextCtrl::OnSize)
     EVT_LEFT_DOWN               (wxStyledTextCtrl::OnMouseLeftDown)
+    EVT_RIGHT_DOWN              (wxStyledTextCtrl::OnMouseRightDown)
     // Let Scintilla see the double click as a second click
     EVT_LEFT_DCLICK             (wxStyledTextCtrl::OnMouseLeftDown)
     EVT_MOTION                  (wxStyledTextCtrl::OnMouseMove)
@@ -299,9 +300,9 @@ void wxStyledTextCtrl::ClearAll()
 }
 
 // Delete a range of text in the document.
-void wxStyledTextCtrl::DeleteRange(int pos, int deleteLength)
+void wxStyledTextCtrl::DeleteRange(int start, int lengthDelete)
 {
-    SendMsg(SCI_DELETERANGE, pos, deleteLength);
+    SendMsg(SCI_DELETERANGE, start, lengthDelete);
 }
 
 // Set all style bytes to 0, remove all folding information.
@@ -374,7 +375,7 @@ wxMemoryBuffer wxStyledTextCtrl::GetStyledText(int startPos, int endPos) {
         }
         int len = endPos - startPos;
         if (!len) return buf;
-        TextRange tr;
+        Sci_TextRange tr;
         tr.lpstrText = (char*)buf.GetWriteBuf(len*2+1);
         tr.chrg.cpMin = startPos;
         tr.chrg.cpMax = endPos;
@@ -390,15 +391,15 @@ bool wxStyledTextCtrl::CanRedo() const
 }
 
 // Retrieve the line number at which a particular marker is located.
-int wxStyledTextCtrl::MarkerLineFromHandle(int handle)
+int wxStyledTextCtrl::MarkerLineFromHandle(int markerHandle)
 {
-    return SendMsg(SCI_MARKERLINEFROMHANDLE, handle, 0);
+    return SendMsg(SCI_MARKERLINEFROMHANDLE, markerHandle, 0);
 }
 
 // Delete a marker.
-void wxStyledTextCtrl::MarkerDeleteHandle(int handle)
+void wxStyledTextCtrl::MarkerDeleteHandle(int markerHandle)
 {
-    SendMsg(SCI_MARKERDELETEHANDLE, handle, 0);
+    SendMsg(SCI_MARKERDELETEHANDLE, markerHandle, 0);
 }
 
 // Is undo history being collected?
@@ -420,6 +421,19 @@ void wxStyledTextCtrl::SetViewWhiteSpace(int viewWS)
     SendMsg(SCI_SETVIEWWS, viewWS, 0);
 }
 
+// Retrieve the current tab draw mode.
+// Returns one of SCTD_* constants.
+int wxStyledTextCtrl::GetTabDrawMode() const
+{
+    return SendMsg(SCI_GETTABDRAWMODE, 0, 0);
+}
+
+// Set how tabs are drawn when visible.
+void wxStyledTextCtrl::SetTabDrawMode(int tabDrawMode)
+{
+    SendMsg(SCI_SETTABDRAWMODE, tabDrawMode, 0);
+}
+
 // Find the position from a point within the window.
 int wxStyledTextCtrl::PositionFromPoint(wxPoint pt) const {
         return SendMsg(SCI_POSITIONFROMPOINT, pt.x, pt.y);
@@ -439,16 +453,16 @@ void wxStyledTextCtrl::GotoLine(int line)
 }
 
 // Set caret to a position and ensure it is visible.
-void wxStyledTextCtrl::GotoPos(int pos)
+void wxStyledTextCtrl::GotoPos(int caret)
 {
-    SendMsg(SCI_GOTOPOS, pos, 0);
+    SendMsg(SCI_GOTOPOS, caret, 0);
 }
 
 // Set the selection anchor to a position. The anchor is the opposite
 // end of the selection from the caret.
-void wxStyledTextCtrl::SetAnchor(int posAnchor)
+void wxStyledTextCtrl::SetAnchor(int anchor)
 {
-    SendMsg(SCI_SETANCHOR, posAnchor, 0);
+    SendMsg(SCI_SETANCHOR, anchor, 0);
 }
 
 // Retrieve the text of the line containing the caret.
@@ -495,11 +509,13 @@ void wxStyledTextCtrl::SetEOLMode(int eolMode)
     SendMsg(SCI_SETEOLMODE, eolMode, 0);
 }
 
-// Set the current styling position to pos and the styling mask to mask.
-// The styling mask can be used to protect some bits in each styling byte from modification.
-void wxStyledTextCtrl::StartStyling(int pos, int mask)
-{
-    SendMsg(SCI_STARTSTYLING, pos, mask);
+// Set the current styling position to start.
+// The unused parameter is no longer used and should be set to 0.
+void wxStyledTextCtrl::StartStyling(int start, int unused) {
+        wxASSERT_MSG(unused==0, 
+                     "The second argument passed to StartStyling should be 0");
+        
+        SendMsg(SCI_STARTSTYLING, start, unused);
 }
 
 // Change style from current styling position for length characters to a style
@@ -668,9 +684,9 @@ void wxStyledTextCtrl::MarkerDefineBitmap(int markerNumber, const wxBitmap& bmp)
 }
 
 // Add a set of markers to a line.
-void wxStyledTextCtrl::MarkerAddSet(int line, int set)
+void wxStyledTextCtrl::MarkerAddSet(int line, int markerSet)
 {
-    SendMsg(SCI_MARKERADDSET, line, set);
+    SendMsg(SCI_MARKERADDSET, line, markerSet);
 }
 
 // Set the alpha used for a marker that is drawn in the text area, not the margin.
@@ -739,6 +755,31 @@ int wxStyledTextCtrl::GetMarginCursor(int margin) const
     return SendMsg(SCI_GETMARGINCURSORN, margin, 0);
 }
 
+// Set the background colour of a margin. Only visible for SC_MARGIN_COLOUR.
+void wxStyledTextCtrl::SetMarginBackground(int margin, const wxColour& back)
+{
+    SendMsg(SCI_SETMARGINBACKN, margin, wxColourAsLong(back));
+}
+
+// Retrieve the background colour of a margin
+wxColour wxStyledTextCtrl::GetMarginBackground(int margin) const
+{
+    long c = SendMsg(SCI_GETMARGINBACKN, margin, 0);
+    return wxColourFromLong(c);
+}
+
+// Allocate a non-standard number of margins.
+void wxStyledTextCtrl::SetMarginCount(int margins)
+{
+    SendMsg(SCI_SETMARGINS, margins, 0);
+}
+
+// How many margins are there?.
+int wxStyledTextCtrl::GetMarginCount() const
+{
+    return SendMsg(SCI_GETMARGINS, 0, 0);
+}
+
 // Clear all the styles and make equivalent to the global default style.
 void wxStyledTextCtrl::StyleClearAll()
 {
@@ -782,9 +823,9 @@ void wxStyledTextCtrl::StyleSetFaceName(int style, const wxString& fontName)
 }
 
 // Set a style to have its end of line filled or not.
-void wxStyledTextCtrl::StyleSetEOLFilled(int style, bool filled)
+void wxStyledTextCtrl::StyleSetEOLFilled(int style, bool eolFilled)
 {
-    SendMsg(SCI_STYLESETEOLFILLED, style, filled);
+    SendMsg(SCI_STYLESETEOLFILLED, style, eolFilled);
 }
 
 // Reset the default style to its state at startup
@@ -887,15 +928,15 @@ bool wxStyledTextCtrl::StyleGetHotSpot(int style) const
 }
 
 // Set a style to be mixed case, or to force upper or lower case.
-void wxStyledTextCtrl::StyleSetCase(int style, int caseForce)
+void wxStyledTextCtrl::StyleSetCase(int style, int caseVisible)
 {
-    SendMsg(SCI_STYLESETCASE, style, caseForce);
+    SendMsg(SCI_STYLESETCASE, style, caseVisible);
 }
 
 // Set the size of characters of a style. Size is in points multiplied by 100.
-void wxStyledTextCtrl::StyleSetSizeFractional(int style, int caseForce)
+void wxStyledTextCtrl::StyleSetSizeFractional(int style, int sizeHundredthPoints)
 {
-    SendMsg(SCI_STYLESETSIZEFRACTIONAL, style, caseForce);
+    SendMsg(SCI_STYLESETSIZEFRACTIONAL, style, sizeHundredthPoints);
 }
 
 // Get the size of characters of a style in points multiplied by 100
@@ -964,12 +1005,12 @@ void wxStyledTextCtrl::SetCaretForeground(const wxColour& fore)
     SendMsg(SCI_SETCARETFORE, wxColourAsLong(fore), 0);
 }
 
-// When key+modifier combination km is pressed perform msg.
+// When key+modifier combination keyDefinition is pressed perform sciCommand.
 void wxStyledTextCtrl::CmdKeyAssign(int key, int modifiers, int cmd) {
          SendMsg(SCI_ASSIGNCMDKEY, MAKELONG(key, modifiers), cmd);
 }
 
-// When key+modifier combination km is pressed do nothing.
+// When key+modifier combination keyDefinition is pressed do nothing.
 void wxStyledTextCtrl::CmdKeyClear(int key, int modifiers) {
          SendMsg(SCI_CLEARCMDKEY, MAKELONG(key, modifiers));
 }
@@ -1038,77 +1079,77 @@ void wxStyledTextCtrl::EndUndoAction()
 }
 
 // Set an indicator to plain, squiggle or TT.
-void wxStyledTextCtrl::IndicatorSetStyle(int indic, int style)
+void wxStyledTextCtrl::IndicatorSetStyle(int indicator, int indicatorStyle)
 {
-    SendMsg(SCI_INDICSETSTYLE, indic, style);
+    SendMsg(SCI_INDICSETSTYLE, indicator, indicatorStyle);
 }
 
 // Retrieve the style of an indicator.
-int wxStyledTextCtrl::IndicatorGetStyle(int indic) const
+int wxStyledTextCtrl::IndicatorGetStyle(int indicator) const
 {
-    return SendMsg(SCI_INDICGETSTYLE, indic, 0);
+    return SendMsg(SCI_INDICGETSTYLE, indicator, 0);
 }
 
 // Set the foreground colour of an indicator.
-void wxStyledTextCtrl::IndicatorSetForeground(int indic, const wxColour& fore)
+void wxStyledTextCtrl::IndicatorSetForeground(int indicator, const wxColour& fore)
 {
-    SendMsg(SCI_INDICSETFORE, indic, wxColourAsLong(fore));
+    SendMsg(SCI_INDICSETFORE, indicator, wxColourAsLong(fore));
 }
 
 // Retrieve the foreground colour of an indicator.
-wxColour wxStyledTextCtrl::IndicatorGetForeground(int indic) const
+wxColour wxStyledTextCtrl::IndicatorGetForeground(int indicator) const
 {
-    long c = SendMsg(SCI_INDICGETFORE, indic, 0);
+    long c = SendMsg(SCI_INDICGETFORE, indicator, 0);
     return wxColourFromLong(c);
 }
 
 // Set an indicator to draw under text or over(default).
-void wxStyledTextCtrl::IndicatorSetUnder(int indic, bool under)
+void wxStyledTextCtrl::IndicatorSetUnder(int indicator, bool under)
 {
-    SendMsg(SCI_INDICSETUNDER, indic, under);
+    SendMsg(SCI_INDICSETUNDER, indicator, under);
 }
 
 // Retrieve whether indicator drawn under or over text.
-bool wxStyledTextCtrl::IndicatorGetUnder(int indic) const
+bool wxStyledTextCtrl::IndicatorGetUnder(int indicator) const
 {
-    return SendMsg(SCI_INDICGETUNDER, indic, 0) != 0;
+    return SendMsg(SCI_INDICGETUNDER, indicator, 0) != 0;
 }
 
 // Set a hover indicator to plain, squiggle or TT.
-void wxStyledTextCtrl::IndicatorSetHoverStyle(int indic, int style)
+void wxStyledTextCtrl::IndicatorSetHoverStyle(int indicator, int indicatorStyle)
 {
-    SendMsg(SCI_INDICSETHOVERSTYLE, indic, style);
+    SendMsg(SCI_INDICSETHOVERSTYLE, indicator, indicatorStyle);
 }
 
 // Retrieve the hover style of an indicator.
-int wxStyledTextCtrl::IndicatorGetHoverStyle(int indic) const
+int wxStyledTextCtrl::IndicatorGetHoverStyle(int indicator) const
 {
-    return SendMsg(SCI_INDICGETHOVERSTYLE, indic, 0);
+    return SendMsg(SCI_INDICGETHOVERSTYLE, indicator, 0);
 }
 
 // Set the foreground hover colour of an indicator.
-void wxStyledTextCtrl::IndicatorSetHoverForeground(int indic, const wxColour& fore)
+void wxStyledTextCtrl::IndicatorSetHoverForeground(int indicator, const wxColour& fore)
 {
-    SendMsg(SCI_INDICSETHOVERFORE, indic, wxColourAsLong(fore));
+    SendMsg(SCI_INDICSETHOVERFORE, indicator, wxColourAsLong(fore));
 }
 
 // Retrieve the foreground hover colour of an indicator.
-wxColour wxStyledTextCtrl::IndicatorGetHoverForeground(int indic) const
+wxColour wxStyledTextCtrl::IndicatorGetHoverForeground(int indicator) const
 {
-    long c = SendMsg(SCI_INDICGETHOVERFORE, indic, 0);
+    long c = SendMsg(SCI_INDICGETHOVERFORE, indicator, 0);
     return wxColourFromLong(c);
 }
 
 // Set the attributes of an indicator.
-void wxStyledTextCtrl::IndicatorSetFlags(int indic, int flags)
+void wxStyledTextCtrl::IndicatorSetFlags(int indicator, int flags)
 {
-    SendMsg(SCI_INDICSETFLAGS, indic, flags);
+    SendMsg(SCI_INDICSETFLAGS, indicator, flags);
 }
 
 // Retrieve the attributes of an indicator.
-int wxStyledTextCtrl::IndicatorGetFlags(int indic) const
+int wxStyledTextCtrl::IndicatorGetFlags(int indicator) const
 {
-    return SendMsg(SCI_INDICGETFLAGS, indic, 0);
+    return SendMsg(SCI_INDICGETFLAGS, indicator, 0);
 }
 
 // Set the foreground colour of all whitespace and whether to use this setting.
@@ -1200,11 +1241,11 @@ void wxStyledTextCtrl::StyleSetChangeable(int style, bool changeable)
 }
 
 // Display a auto-completion list.
-// The lenEntered parameter indicates how many characters before
+// The lengthEntered parameter indicates how many characters before
 // the caret should be used to provide context.
-void wxStyledTextCtrl::AutoCompShow(int lenEntered, const wxString& itemList)
+void wxStyledTextCtrl::AutoCompShow(int lengthEntered, const wxString& itemList)
 {
-    SendMsg(SCI_AUTOCSHOW, lenEntered, (sptr_t)(const char*)wx2stc(itemList));
+    SendMsg(SCI_AUTOCSHOW, lengthEntered, (sptr_t)(const char*)wx2stc(itemList));
 }
 
 // Remove the auto-completion list from the screen.
@@ -1251,9 +1292,9 @@ int wxStyledTextCtrl::AutoCompGetSeparator() const
 }
 
 // Select the item in the auto-completion list that starts with a string.
-void wxStyledTextCtrl::AutoCompSelect(const wxString& text)
+void wxStyledTextCtrl::AutoCompSelect(const wxString& select)
 {
-    SendMsg(SCI_AUTOCSELECT, 0, (sptr_t)(const char*)wx2stc(text));
+    SendMsg(SCI_AUTOCSELECT, 0, (sptr_t)(const char*)wx2stc(select));
 }
 
 // Should the auto-completion list be cancelled if the user backspaces to a
@@ -1420,9 +1461,9 @@ bool wxStyledTextCtrl::GetUseTabs() const
 }
 
 // Change the indentation of a line to a number of columns.
-void wxStyledTextCtrl::SetLineIndentation(int line, int indentSize)
+void wxStyledTextCtrl::SetLineIndentation(int line, int indentation)
 {
-    SendMsg(SCI_SETLINEINDENTATION, line, indentSize);
+    SendMsg(SCI_SETLINEINDENTATION, line, indentation);
 }
 
 // Retrieve the number of columns that a line is indented.
@@ -1444,15 +1485,15 @@ int wxStyledTextCtrl::GetColumn(int pos) const
 }
 
 // Count characters between two positions.
-int wxStyledTextCtrl::CountCharacters(int startPos, int endPos)
+int wxStyledTextCtrl::CountCharacters(int start, int end)
 {
-    return SendMsg(SCI_COUNTCHARACTERS, startPos, endPos);
+    return SendMsg(SCI_COUNTCHARACTERS, start, end);
 }
 
 // Show or hide the horizontal scroll bar.
-void wxStyledTextCtrl::SetUseHorizontalScrollBar(bool show)
+void wxStyledTextCtrl::SetUseHorizontalScrollBar(bool visible)
 {
-    SendMsg(SCI_SETHSCROLLBAR, show, 0);
+    SendMsg(SCI_SETHSCROLLBAR, visible, 0);
 }
 
 // Is the horizontal scroll bar visible?
@@ -1512,15 +1553,15 @@ bool wxStyledTextCtrl::GetReadOnly() const
 }
 
 // Sets the position of the caret.
-void wxStyledTextCtrl::SetCurrentPos(int pos)
+void wxStyledTextCtrl::SetCurrentPos(int caret)
 {
-    SendMsg(SCI_SETCURRENTPOS, pos, 0);
+    SendMsg(SCI_SETCURRENTPOS, caret, 0);
 }
 
 // Sets the position that starts the selection - this becomes the anchor.
-void wxStyledTextCtrl::SetSelectionStart(int pos)
+void wxStyledTextCtrl::SetSelectionStart(int anchor)
 {
-    SendMsg(SCI_SETSELECTIONSTART, pos, 0);
+    SendMsg(SCI_SETSELECTIONSTART, anchor, 0);
 }
 
 // Returns the position at the start of the selection.
@@ -1529,10 +1570,10 @@ int wxStyledTextCtrl::GetSelectionStart() const
     return SendMsg(SCI_GETSELECTIONSTART, 0, 0);
 }
 
-// Sets the position that ends the selection - this becomes the currentPosition.
-void wxStyledTextCtrl::SetSelectionEnd(int pos)
+// Sets the position that ends the selection - this becomes the caret.
+void wxStyledTextCtrl::SetSelectionEnd(int caret)
 {
-    SendMsg(SCI_SETSELECTIONEND, pos, 0);
+    SendMsg(SCI_SETSELECTIONEND, caret, 0);
 }
 
 // Returns the position at the end of the selection.
@@ -1542,9 +1583,9 @@ int wxStyledTextCtrl::GetSelectionEnd() const
 }
 
 // Set caret to a position, while removing any existing selection.
-void wxStyledTextCtrl::SetEmptySelection(int pos)
+void wxStyledTextCtrl::SetEmptySelection(int caret)
 {
-    SendMsg(SCI_SETEMPTYSELECTION, pos, 0);
+    SendMsg(SCI_SETEMPTYSELECTION, caret, 0);
 }
 
 // Sets the print magnification added to the point size of each style for printing.
@@ -1575,7 +1616,7 @@ int wxStyledTextCtrl::GetPrintColourMode() const
 int wxStyledTextCtrl::FindText(int minPos, int maxPos,
                const wxString& text,
                int flags) {
-            TextToFind  ft;
+            Sci_TextToFind  ft;
             ft.chrg.cpMin = minPos;
             ft.chrg.cpMax = maxPos;
             const wxWX2MBbuf buf = wx2stc(text);
@@ -1592,7 +1633,7 @@ int wxStyledTextCtrl::FindText(int minPos, int maxPos,
                 wxDC*  target,
                 wxRect renderRect,
                 wxRect pageRect) {
-             RangeToFormat fr;
+             Sci_RangeToFormat fr;
 
              if (endPos < startPos) {
                  int temp = startPos;
@@ -1694,7 +1735,7 @@ wxString wxStyledTextCtrl::GetTextRange(int startPos, int endPos) {
          if (!len) return wxEmptyString;
          wxMemoryBuffer mbuf(len+1);
          char* buf = (char*)mbuf.GetWriteBuf(len);
-         TextRange tr;
+         Sci_TextRange tr;
          tr.lpstrText = buf;
          tr.chrg.cpMin = startPos;
          tr.chrg.cpMax = endPos;
@@ -1705,9 +1746,9 @@ wxString wxStyledTextCtrl::GetTextRange(int startPos, int endPos) {
 }
 
 // Draw the selection in normal style or with selection highlighted.
-void wxStyledTextCtrl::HideSelection(bool normal)
+void wxStyledTextCtrl::HideSelection(bool hide)
 {
-    SendMsg(SCI_HIDESELECTION, normal, 0);
+    SendMsg(SCI_HIDESELECTION, hide, 0);
 }
 
 // Retrieve the line containing a position.
@@ -1837,9 +1878,9 @@ void* wxStyledTextCtrl::GetDirectPointer() const {
 }
 
 // Set to overtype (true) or insert mode.
-void wxStyledTextCtrl::SetOvertype(bool overtype)
+void wxStyledTextCtrl::SetOvertype(bool overType)
 {
-    SendMsg(SCI_SETOVERTYPE, overtype, 0);
+    SendMsg(SCI_SETOVERTYPE, overType, 0);
 }
 
 // Returns true if overtype mode is active otherwise false is returned.
@@ -1862,9 +1903,9 @@ int wxStyledTextCtrl::GetCaretWidth() const
 
 // Sets the position that starts the target which is used for updating the
 // document without affecting the scroll position.
-void wxStyledTextCtrl::SetTargetStart(int pos)
+void wxStyledTextCtrl::SetTargetStart(int start)
 {
-    SendMsg(SCI_SETTARGETSTART, pos, 0);
+    SendMsg(SCI_SETTARGETSTART, start, 0);
 }
 
 // Get the position that starts the target.
@@ -1875,9 +1916,9 @@ int wxStyledTextCtrl::GetTargetStart() const
 
 // Sets the position that ends the target which is used for updating the
 // document without affecting the scroll position.
-void wxStyledTextCtrl::SetTargetEnd(int pos)
+void wxStyledTextCtrl::SetTargetEnd(int end)
 {
-    SendMsg(SCI_SETTARGETEND, pos, 0);
+    SendMsg(SCI_SETTARGETEND, end, 0);
 }
 
 // Get the position that ends the target.
@@ -1947,9 +1988,9 @@ void wxStyledTextCtrl::TargetWholeDocument()
 }
 
 // Set the search flags used by SearchInTarget.
-void wxStyledTextCtrl::SetSearchFlags(int flags)
+void wxStyledTextCtrl::SetSearchFlags(int searchFlags)
 {
-    SendMsg(SCI_SETSEARCHFLAGS, flags, 0);
+    SendMsg(SCI_SETSEARCHFLAGS, searchFlags, 0);
 }
 
 // Get the search flags used by SearchInTarget.
@@ -1989,9 +2030,9 @@ void wxStyledTextCtrl::CallTipSetPosAtStart(int posStart)
 }
 
 // Highlight a segment of the definition.
-void wxStyledTextCtrl::CallTipSetHighlight(int start, int end)
+void wxStyledTextCtrl::CallTipSetHighlight(int highlightStart, int highlightEnd)
 {
-    SendMsg(SCI_CALLTIPSETHLT, start, end);
+    SendMsg(SCI_CALLTIPSETHLT, highlightStart, highlightEnd);
 }
 
 // Set the background colour for the call tip.
@@ -2025,21 +2066,21 @@ void wxStyledTextCtrl::CallTipSetPosition(bool above)
 }
 
 // Find the display line of a document line taking hidden lines into account.
-int wxStyledTextCtrl::VisibleFromDocLine(int line)
+int wxStyledTextCtrl::VisibleFromDocLine(int docLine)
 {
-    return SendMsg(SCI_VISIBLEFROMDOCLINE, line, 0);
+    return SendMsg(SCI_VISIBLEFROMDOCLINE, docLine, 0);
 }
 
 // Find the document line of a display line taking hidden lines into account.
-int wxStyledTextCtrl::DocLineFromVisible(int lineDisplay)
+int wxStyledTextCtrl::DocLineFromVisible(int displayLine)
 {
-    return SendMsg(SCI_DOCLINEFROMVISIBLE, lineDisplay, 0);
+    return SendMsg(SCI_DOCLINEFROMVISIBLE, displayLine, 0);
 }
 
 // The number of display lines needed to wrap a document line
-int wxStyledTextCtrl::WrapCount(int line)
+int wxStyledTextCtrl::WrapCount(int docLine)
 {
-    return SendMsg(SCI_WRAPCOUNT, line, 0);
+    return SendMsg(SCI_WRAPCOUNT, docLine, 0);
 }
 
 // Set the fold level of a line.
@@ -2110,6 +2151,18 @@ void wxStyledTextCtrl::ToggleFold(int line)
     SendMsg(SCI_TOGGLEFOLD, line, 0);
 }
 
+// Switch a header line between expanded and contracted and show some text after the line.
+void wxStyledTextCtrl::ToggleFoldShowText(int line, const wxString& text)
+{
+    SendMsg(SCI_TOGGLEFOLDSHOWTEXT, line, (sptr_t)(const char*)wx2stc(text));
+}
+
+// Set the style of fold display text
+void wxStyledTextCtrl::FoldDisplayTextSetStyle(int style)
+{
+    SendMsg(SCI_FOLDDISPLAYTEXTSETSTYLE, style, 0);
+}
+
 // Expand or contract a fold header.
 void wxStyledTextCtrl::FoldLine(int line, int action)
 {
@@ -2232,9 +2285,9 @@ int wxStyledTextCtrl::GetIdleStyling() const
 }
 
 // Sets whether text is word wrapped.
-void wxStyledTextCtrl::SetWrapMode(int mode)
+void wxStyledTextCtrl::SetWrapMode(int wrapMode)
 {
-    SendMsg(SCI_SETWRAPMODE, mode, 0);
+    SendMsg(SCI_SETWRAPMODE, wrapMode, 0);
 }
 
 // Retrieve whether text is word wrapped.
@@ -2280,9 +2333,9 @@ int wxStyledTextCtrl::GetWrapStartIndent() const
 }
 
 // Sets how wrapped sublines are placed. Default is fixed.
-void wxStyledTextCtrl::SetWrapIndentMode(int mode)
+void wxStyledTextCtrl::SetWrapIndentMode(int wrapIndentMode)
 {
-    SendMsg(SCI_SETWRAPINDENTMODE, mode, 0);
+    SendMsg(SCI_SETWRAPINDENTMODE, wrapIndentMode, 0);
 }
 
 // Retrieve how wrapped sublines are placed. Default is fixed.
@@ -2292,9 +2345,9 @@ int wxStyledTextCtrl::GetWrapIndentMode() const
 }
 
 // Sets the degree of caching of layout information.
-void wxStyledTextCtrl::SetLayoutCache(int mode)
+void wxStyledTextCtrl::SetLayoutCache(int cacheMode)
 {
-    SendMsg(SCI_SETLAYOUTCACHE, mode, 0);
+    SendMsg(SCI_SETLAYOUTCACHE, cacheMode, 0);
 }
 
 // Retrieve the degree of caching of layout information.
@@ -2357,9 +2410,9 @@ int wxStyledTextCtrl::TextHeight(int line)
 }
 
 // Show or hide the vertical scroll bar.
-void wxStyledTextCtrl::SetUseVerticalScrollBar(bool show)
+void wxStyledTextCtrl::SetUseVerticalScrollBar(bool visible)
 {
-    SendMsg(SCI_SETVSCROLLBAR, show, 0);
+    SendMsg(SCI_SETVSCROLLBAR, visible, 0);
 }
 
 // Is the vertical scroll bar visible?
@@ -2403,9 +2456,9 @@ void wxStyledTextCtrl::SetPhasesDraw(int phases)
 }
 
 // Scroll so that a display line is at the top of the display.
-void wxStyledTextCtrl::SetFirstVisibleLine(int lineDisplay)
+void wxStyledTextCtrl::SetFirstVisibleLine(int displayLine)
 {
-    SendMsg(SCI_SETFIRSTVISIBLELINE, lineDisplay, 0);
+    SendMsg(SCI_SETFIRSTVISIBLELINE, displayLine, 0);
 }
 
 // Change the effect of pasting when there are multiple selections.
@@ -2448,11 +2501,13 @@ void wxStyledTextCtrl::LinesSplit(int pixelWidth)
     SendMsg(SCI_LINESSPLIT, pixelWidth, 0);
 }
 
-// Set the colours used as a chequerboard pattern in the fold margin
+// Set one of the colours used as a chequerboard pattern in the fold margin
 void wxStyledTextCtrl::SetFoldMarginColour(bool useSetting, const wxColour& back)
 {
     SendMsg(SCI_SETFOLDMARGINCOLOUR, useSetting, wxColourAsLong(back));
 }
+
+// Set the other colour used as a chequerboard pattern in the fold margin
 void wxStyledTextCtrl::SetFoldMarginHiColour(bool useSetting, const wxColour& fore)
 {
     SendMsg(SCI_SETFOLDMARGINHICOLOUR, useSetting, wxColourAsLong(fore));
@@ -2769,31 +2824,43 @@ void wxStyledTextCtrl::LineEndDisplayExtend()
     SendMsg(SCI_LINEENDDISPLAYEXTEND, 0, 0);
 }
 
-// These are like their namesakes Home(Extend)?, LineEnd(Extend)?, VCHome(Extend)?
-// except they behave differently when word-wrap is enabled:
-// They go first to the start / end of the display line, like (Home|LineEnd)Display
-// The difference is that, the cursor is already at the point, it goes on to the start
-// or end of the document line, as appropriate for (Home|LineEnd|VCHome)(Extend)?.
+// Like Home but when word-wrap is enabled goes first to start of display line
+// HomeDisplay, then to start of document line Home.
 void wxStyledTextCtrl::HomeWrap()
 {
     SendMsg(SCI_HOMEWRAP, 0, 0);
 }
+
+// Like HomeExtend but when word-wrap is enabled extends first to start of display line
+// HomeDisplayExtend, then to start of document line HomeExtend.
 void wxStyledTextCtrl::HomeWrapExtend()
 {
     SendMsg(SCI_HOMEWRAPEXTEND, 0, 0);
 }
+
+// Like LineEnd but when word-wrap is enabled goes first to end of display line
+// LineEndDisplay, then to start of document line LineEnd.
 void wxStyledTextCtrl::LineEndWrap()
 {
     SendMsg(SCI_LINEENDWRAP, 0, 0);
 }
+
+// Like LineEndExtend but when word-wrap is enabled extends first to end of display line
+// LineEndDisplayExtend, then to start of document line LineEndExtend.
 void wxStyledTextCtrl::LineEndWrapExtend()
 {
     SendMsg(SCI_LINEENDWRAPEXTEND, 0, 0);
 }
+
+// Like VCHome but when word-wrap is enabled goes first to start of display line
+// VCHomeDisplay, then behaves like VCHome.
 void wxStyledTextCtrl::VCHomeWrap()
 {
     SendMsg(SCI_VCHOMEWRAP, 0, 0);
 }
+
+// Like VCHomeExtend but when word-wrap is enabled extends first to start of display line
+// VCHomeDisplayExtend, then behaves like VCHomeExtend.
 void wxStyledTextCtrl::VCHomeWrapExtend()
 {
     SendMsg(SCI_VCHOMEWRAPEXTEND, 0, 0);
@@ -2818,15 +2885,15 @@ int wxStyledTextCtrl::LineLength(int line) const
 }
 
 // Highlight the characters at two positions.
-void wxStyledTextCtrl::BraceHighlight(int pos1, int pos2)
+void wxStyledTextCtrl::BraceHighlight(int posA, int posB)
 {
-    SendMsg(SCI_BRACEHIGHLIGHT, pos1, pos2);
+    SendMsg(SCI_BRACEHIGHLIGHT, posA, posB);
 }
 
 // Use specified indicator to highlight matching braces instead of changing their style.
-void wxStyledTextCtrl::BraceHighlightIndicator(bool useBraceHighlightIndicator, int indicator)
+void wxStyledTextCtrl::BraceHighlightIndicator(bool useSetting, int indicator)
 {
-    SendMsg(SCI_BRACEHIGHLIGHTINDICATOR, useBraceHighlightIndicator, indicator);
+    SendMsg(SCI_BRACEHIGHLIGHTINDICATOR, useSetting, indicator);
 }
 
 // Highlight the character at a position indicating there is no matching brace.
@@ -2836,15 +2903,15 @@ void wxStyledTextCtrl::BraceBadLight(int pos)
 }
 
 // Use specified indicator to highlight non matching brace instead of changing its style.
-void wxStyledTextCtrl::BraceBadLightIndicator(bool useBraceBadLightIndicator, int indicator)
+void wxStyledTextCtrl::BraceBadLightIndicator(bool useSetting, int indicator)
 {
-    SendMsg(SCI_BRACEBADLIGHTINDICATOR, useBraceBadLightIndicator, indicator);
+    SendMsg(SCI_BRACEBADLIGHTINDICATOR, useSetting, indicator);
 }
 
 // Find the position of a matching brace or INVALID_POSITION if no match.
-int wxStyledTextCtrl::BraceMatch(int pos)
-{
-    return SendMsg(SCI_BRACEMATCH, pos, 0);
+// The maxReStyle must be 0 for now. It may be defined in a future release.
+int wxStyledTextCtrl::BraceMatch(int pos, int maxReStyle){
+        return SendMsg(SCI_BRACEMATCH, pos, maxReStyle);
 }
 
 // Are the end of line characters visible?
@@ -2870,9 +2937,9 @@ void wxStyledTextCtrl::SetDocPointer(void* docPointer) {
 }
 
 // Set which document modification events are sent to the container.
-void wxStyledTextCtrl::SetModEventMask(int mask)
+void wxStyledTextCtrl::SetModEventMask(int eventMask)
 {
-    SendMsg(SCI_SETMODEVENTMASK, mask, 0);
+    SendMsg(SCI_SETMODEVENTMASK, eventMask, 0);
 }
 
 // Retrieve the column number which text should be kept within.
@@ -2894,11 +2961,11 @@ int wxStyledTextCtrl::GetEdgeMode() const
     return SendMsg(SCI_GETEDGEMODE, 0, 0);
 }
 
-// The edge may be displayed by a line (EDGE_LINE) or by highlighting text that
+// The edge may be displayed by a line (EDGE_LINE/EDGE_MULTILINE) or by highlighting text that
 // goes beyond it (EDGE_BACKGROUND) or not displayed at all (EDGE_NONE).
-void wxStyledTextCtrl::SetEdgeMode(int mode)
+void wxStyledTextCtrl::SetEdgeMode(int edgeMode)
 {
-    SendMsg(SCI_SETEDGEMODE, mode, 0);
+    SendMsg(SCI_SETEDGEMODE, edgeMode, 0);
 }
 
 // Retrieve the colour used in edge indication.
@@ -2914,6 +2981,18 @@ void wxStyledTextCtrl::SetEdgeColour(const wxColour& edgeColour)
     SendMsg(SCI_SETEDGECOLOUR, wxColourAsLong(edgeColour), 0);
 }
 
+// Add a new vertical edge to the view.
+void wxStyledTextCtrl::MultiEdgeAddLine(int column, const wxColour& edgeColour)
+{
+    SendMsg(SCI_MULTIEDGEADDLINE, column, wxColourAsLong(edgeColour));
+}
+
+// Clear all vertical edges.
+void wxStyledTextCtrl::MultiEdgeClearAll()
+{
+    SendMsg(SCI_MULTIEDGECLEARALL, 0, 0);
+}
+
 // Sets the current caret position to be the search anchor.
 void wxStyledTextCtrl::SearchAnchor()
 {
@@ -2922,16 +3001,16 @@ void wxStyledTextCtrl::SearchAnchor()
 
 // Find some text starting at the search anchor.
 // Does not ensure the selection is visible.
-int wxStyledTextCtrl::SearchNext(int flags, const wxString& text)
+int wxStyledTextCtrl::SearchNext(int searchFlags, const wxString& text)
 {
-    return SendMsg(SCI_SEARCHNEXT, flags, (sptr_t)(const char*)wx2stc(text));
+    return SendMsg(SCI_SEARCHNEXT, searchFlags, (sptr_t)(const char*)wx2stc(text));
 }
 
 // Find some text starting at the search anchor and moving backwards.
 // Does not ensure the selection is visible.
-int wxStyledTextCtrl::SearchPrev(int flags, const wxString& text)
+int wxStyledTextCtrl::SearchPrev(int searchFlags, const wxString& text)
 {
-    return SendMsg(SCI_SEARCHPREV, flags, (sptr_t)(const char*)wx2stc(text));
+    return SendMsg(SCI_SEARCHPREV, searchFlags, (sptr_t)(const char*)wx2stc(text));
 }
 
 // Retrieves the number of lines completely visible.
@@ -2941,10 +3020,10 @@ int wxStyledTextCtrl::LinesOnScreen() const
 }
 
 // Set whether a pop up menu is displayed automatically when the user presses
-// the wrong mouse button.
-void wxStyledTextCtrl::UsePopUp(bool allowPopUp)
+// the wrong mouse button on certain areas.
+void wxStyledTextCtrl::UsePopUp(int popUpMode)
 {
-    SendMsg(SCI_USEPOPUP, allowPopUp, 0);
+    SendMsg(SCI_USEPOPUP, popUpMode, 0);
 }
 
 // Is the selection rectangular? The alternative is the more common stream selection.
@@ -2955,9 +3034,9 @@ bool wxStyledTextCtrl::SelectionIsRectangle() const
 
 // Set the zoom level. This number of points is added to the size of all fonts.
 // It may be positive to magnify or negative to reduce.
-void wxStyledTextCtrl::SetZoom(int zoom)
+void wxStyledTextCtrl::SetZoom(int zoomInPoints)
 {
-    SendMsg(SCI_SETZOOM, zoom, 0);
+    SendMsg(SCI_SETZOOM, zoomInPoints, 0);
 }
 
 // Retrieve the zoom level.
@@ -3001,9 +3080,9 @@ bool wxStyledTextCtrl::GetSTCFocus() const
 }
 
 // Change error status - 0 = OK.
-void wxStyledTextCtrl::SetStatus(int statusCode)
+void wxStyledTextCtrl::SetStatus(int status)
 {
-    SendMsg(SCI_SETSTATUS, statusCode, 0);
+    SendMsg(SCI_SETSTATUS, status, 0);
 }
 
 // Get error status.
@@ -3024,6 +3103,18 @@ bool wxStyledTextCtrl::GetMouseDownCaptures() const
     return SendMsg(SCI_GETMOUSEDOWNCAPTURES, 0, 0) != 0;
 }
 
+// Set whether the mouse wheel can be active outside the window.
+void wxStyledTextCtrl::SetMouseWheelCaptures(bool captures)
+{
+    SendMsg(SCI_SETMOUSEWHEELCAPTURES, captures, 0);
+}
+
+// Get whether mouse wheel can be active outside the window.
+bool wxStyledTextCtrl::GetMouseWheelCaptures() const
+{
+    return SendMsg(SCI_GETMOUSEWHEELCAPTURES, 0, 0) != 0;
+}
+
 // Sets the cursor to one of the SC_CURSOR* values.
 void wxStyledTextCtrl::SetSTCCursor(int cursorType)
 {
@@ -3095,9 +3186,9 @@ void wxStyledTextCtrl::DelLineRight()
 }
 
 // Get and Set the xOffset (ie, horizontal scroll position).
-void wxStyledTextCtrl::SetXOffset(int newOffset)
+void wxStyledTextCtrl::SetXOffset(int xOffset)
 {
-    SendMsg(SCI_SETXOFFSET, newOffset, 0);
+    SendMsg(SCI_SETXOFFSET, xOffset, 0);
 }
 int wxStyledTextCtrl::GetXOffset() const
 {
@@ -3125,9 +3216,9 @@ void wxStyledTextCtrl::SetYCaretPolicy(int caretPolicy, int caretSlop)
 }
 
 // Set printing to line wrapped (SC_WRAP_WORD) or not line wrapped (SC_WRAP_NONE).
-void wxStyledTextCtrl::SetPrintWrapMode(int mode)
+void wxStyledTextCtrl::SetPrintWrapMode(int wrapMode)
 {
-    SendMsg(SCI_SETPRINTWRAPMODE, mode, 0);
+    SendMsg(SCI_SETPRINTWRAPMODE, wrapMode, 0);
 }
 
 // Is printing line wrapped?
@@ -3186,19 +3277,25 @@ bool wxStyledTextCtrl::GetHotspotSingleLine() const
     return SendMsg(SCI_GETHOTSPOTSINGLELINE, 0, 0) != 0;
 }
 
-// Move caret between paragraphs (delimited by empty lines).
+// Move caret down one paragraph (delimited by empty lines).
 void wxStyledTextCtrl::ParaDown()
 {
     SendMsg(SCI_PARADOWN, 0, 0);
 }
+
+// Extend selection down one paragraph (delimited by empty lines).
 void wxStyledTextCtrl::ParaDownExtend()
 {
     SendMsg(SCI_PARADOWNEXTEND, 0, 0);
 }
+
+// Move caret up one paragraph (delimited by empty lines).
 void wxStyledTextCtrl::ParaUp()
 {
     SendMsg(SCI_PARAUP, 0, 0);
 }
+
+// Extend selection up one paragraph (delimited by empty lines).
 void wxStyledTextCtrl::ParaUpExtend()
 {
     SendMsg(SCI_PARAUPEXTEND, 0, 0);
@@ -3239,9 +3336,9 @@ void wxStyledTextCtrl::CopyText(int length, const wxString& text)
 
 // Set the selection mode to stream (SC_SEL_STREAM) or rectangular (SC_SEL_RECTANGLE/SC_SEL_THIN) or
 // by lines (SC_SEL_LINES).
-void wxStyledTextCtrl::SetSelectionMode(int mode)
+void wxStyledTextCtrl::SetSelectionMode(int selectionMode)
 {
-    SendMsg(SCI_SETSELECTIONMODE, mode, 0);
+    SendMsg(SCI_SETSELECTIONMODE, selectionMode, 0);
 }
 
 // Get the mode of the current selection.
@@ -3554,39 +3651,39 @@ int wxStyledTextCtrl::GetIndicatorValue() const
 }
 
 // Turn a indicator on over a range.
-void wxStyledTextCtrl::IndicatorFillRange(int position, int fillLength)
+void wxStyledTextCtrl::IndicatorFillRange(int start, int lengthFill)
 {
-    SendMsg(SCI_INDICATORFILLRANGE, position, fillLength);
+    SendMsg(SCI_INDICATORFILLRANGE, start, lengthFill);
 }
 
 // Turn a indicator off over a range.
-void wxStyledTextCtrl::IndicatorClearRange(int position, int clearLength)
+void wxStyledTextCtrl::IndicatorClearRange(int start, int lengthClear)
 {
-    SendMsg(SCI_INDICATORCLEARRANGE, position, clearLength);
+    SendMsg(SCI_INDICATORCLEARRANGE, start, lengthClear);
 }
 
-// Are any indicators present at position?
-int wxStyledTextCtrl::IndicatorAllOnFor(int position)
+// Are any indicators present at pos?
+int wxStyledTextCtrl::IndicatorAllOnFor(int pos)
 {
-    return SendMsg(SCI_INDICATORALLONFOR, position, 0);
+    return SendMsg(SCI_INDICATORALLONFOR, pos, 0);
 }
 
-// What value does a particular indicator have at at a position?
-int wxStyledTextCtrl::IndicatorValueAt(int indicator, int position)
+// What value does a particular indicator have at a position?
+int wxStyledTextCtrl::IndicatorValueAt(int indicator, int pos)
 {
-    return SendMsg(SCI_INDICATORVALUEAT, indicator, position);
+    return SendMsg(SCI_INDICATORVALUEAT, indicator, pos);
 }
 
 // Where does a particular indicator start?
-int wxStyledTextCtrl::IndicatorStart(int indicator, int position)
+int wxStyledTextCtrl::IndicatorStart(int indicator, int pos)
 {
-    return SendMsg(SCI_INDICATORSTART, indicator, position);
+    return SendMsg(SCI_INDICATORSTART, indicator, pos);
 }
 
 // Where does a particular indicator end?
-int wxStyledTextCtrl::IndicatorEnd(int indicator, int position)
+int wxStyledTextCtrl::IndicatorEnd(int indicator, int pos)
 {
-    return SendMsg(SCI_INDICATOREND, indicator, position);
+    return SendMsg(SCI_INDICATOREND, indicator, pos);
 }
 
 // Set number of entries in position cache
@@ -3615,7 +3712,7 @@ const char* wxStyledTextCtrl::GetCharacterPointer() const {
 
 // Return a read-only pointer to a range of characters in the document.
 // May move the gap so that the range is contiguous, but will only move up
-// to rangeLength bytes.
+// to lengthRange bytes.
 const char* wxStyledTextCtrl::GetRangePointer(int position, int rangeLength) const {
     return (const char*)SendMsg(SCI_GETRANGEPOINTER, position, rangeLength);
 }
@@ -3927,9 +4024,9 @@ bool wxStyledTextCtrl::GetAdditionalCaretsBlink() const
 }
 
 // Set whether additional carets are visible
-void wxStyledTextCtrl::SetAdditionalCaretsVisible(bool additionalCaretsBlink)
+void wxStyledTextCtrl::SetAdditionalCaretsVisible(bool additionalCaretsVisible)
 {
-    SendMsg(SCI_SETADDITIONALCARETSVISIBLE, additionalCaretsBlink, 0);
+    SendMsg(SCI_SETADDITIONALCARETSVISIBLE, additionalCaretsVisible, 0);
 }
 
 // Whether additional carets are visible
@@ -3979,43 +4076,59 @@ int wxStyledTextCtrl::GetMainSelection() const
 {
     return SendMsg(SCI_GETMAINSELECTION, 0, 0);
 }
-void wxStyledTextCtrl::SetSelectionNCaret(int selection, int pos)
+
+// Set the caret position of the nth selection.
+void wxStyledTextCtrl::SetSelectionNCaret(int selection, int caret)
 {
-    SendMsg(SCI_SETSELECTIONNCARET, selection, pos);
+    SendMsg(SCI_SETSELECTIONNCARET, selection, caret);
 }
+
+// Return the caret position of the nth selection.
 int wxStyledTextCtrl::GetSelectionNCaret(int selection) const
 {
     return SendMsg(SCI_GETSELECTIONNCARET, selection, 0);
 }
-void wxStyledTextCtrl::SetSelectionNAnchor(int selection, int posAnchor)
+
+// Set the anchor position of the nth selection.
+void wxStyledTextCtrl::SetSelectionNAnchor(int selection, int anchor)
 {
-    SendMsg(SCI_SETSELECTIONNANCHOR, selection, posAnchor);
+    SendMsg(SCI_SETSELECTIONNANCHOR, selection, anchor);
 }
+
+// Return the anchor position of the nth selection.
 int wxStyledTextCtrl::GetSelectionNAnchor(int selection) const
 {
     return SendMsg(SCI_GETSELECTIONNANCHOR, selection, 0);
 }
+
+// Set the virtual space of the caret of the nth selection.
 void wxStyledTextCtrl::SetSelectionNCaretVirtualSpace(int selection, int space)
 {
     SendMsg(SCI_SETSELECTIONNCARETVIRTUALSPACE, selection, space);
 }
+
+// Return the virtual space of the caret of the nth selection.
 int wxStyledTextCtrl::GetSelectionNCaretVirtualSpace(int selection) const
 {
     return SendMsg(SCI_GETSELECTIONNCARETVIRTUALSPACE, selection, 0);
 }
+
+// Set the virtual space of the anchor of the nth selection.
 void wxStyledTextCtrl::SetSelectionNAnchorVirtualSpace(int selection, int space)
 {
     SendMsg(SCI_SETSELECTIONNANCHORVIRTUALSPACE, selection, space);
 }
+
+// Return the virtual space of the anchor of the nth selection.
 int wxStyledTextCtrl::GetSelectionNAnchorVirtualSpace(int selection) const
 {
     return SendMsg(SCI_GETSELECTIONNANCHORVIRTUALSPACE, selection, 0);
 }
 
 // Sets the position that starts the selection - this becomes the anchor.
-void wxStyledTextCtrl::SetSelectionNStart(int selection, int pos)
+void wxStyledTextCtrl::SetSelectionNStart(int selection, int anchor)
 {
-    SendMsg(SCI_SETSELECTIONNSTART, selection, pos);
+    SendMsg(SCI_SETSELECTIONNSTART, selection, anchor);
 }
 
 // Returns the position at the start of the selection.
@@ -4025,9 +4138,9 @@ int wxStyledTextCtrl::GetSelectionNStart(int selection) const
 }
 
 // Sets the position that ends the selection - this becomes the currentPosition.
-void wxStyledTextCtrl::SetSelectionNEnd(int selection, int pos)
+void wxStyledTextCtrl::SetSelectionNEnd(int selection, int caret)
 {
-    SendMsg(SCI_SETSELECTIONNEND, selection, pos);
+    SendMsg(SCI_SETSELECTIONNEND, selection, caret);
 }
 
 // Returns the position at the end of the selection.
@@ -4035,42 +4148,62 @@ int wxStyledTextCtrl::GetSelectionNEnd(int selection) const
 {
     return SendMsg(SCI_GETSELECTIONNEND, selection, 0);
 }
-void wxStyledTextCtrl::SetRectangularSelectionCaret(int pos)
+
+// Set the caret position of the rectangular selection.
+void wxStyledTextCtrl::SetRectangularSelectionCaret(int caret)
 {
-    SendMsg(SCI_SETRECTANGULARSELECTIONCARET, pos, 0);
+    SendMsg(SCI_SETRECTANGULARSELECTIONCARET, caret, 0);
 }
+
+// Return the caret position of the rectangular selection.
 int wxStyledTextCtrl::GetRectangularSelectionCaret() const
 {
     return SendMsg(SCI_GETRECTANGULARSELECTIONCARET, 0, 0);
 }
-void wxStyledTextCtrl::SetRectangularSelectionAnchor(int posAnchor)
+
+// Set the anchor position of the rectangular selection.
+void wxStyledTextCtrl::SetRectangularSelectionAnchor(int anchor)
 {
-    SendMsg(SCI_SETRECTANGULARSELECTIONANCHOR, posAnchor, 0);
+    SendMsg(SCI_SETRECTANGULARSELECTIONANCHOR, anchor, 0);
 }
+
+// Return the anchor position of the rectangular selection.
 int wxStyledTextCtrl::GetRectangularSelectionAnchor() const
 {
     return SendMsg(SCI_GETRECTANGULARSELECTIONANCHOR, 0, 0);
 }
+
+// Set the virtual space of the caret of the rectangular selection.
 void wxStyledTextCtrl::SetRectangularSelectionCaretVirtualSpace(int space)
 {
     SendMsg(SCI_SETRECTANGULARSELECTIONCARETVIRTUALSPACE, space, 0);
 }
+
+// Return the virtual space of the caret of the rectangular selection.
 int wxStyledTextCtrl::GetRectangularSelectionCaretVirtualSpace() const
 {
     return SendMsg(SCI_GETRECTANGULARSELECTIONCARETVIRTUALSPACE, 0, 0);
 }
+
+// Set the virtual space of the anchor of the rectangular selection.
 void wxStyledTextCtrl::SetRectangularSelectionAnchorVirtualSpace(int space)
 {
     SendMsg(SCI_SETRECTANGULARSELECTIONANCHORVIRTUALSPACE, space, 0);
 }
+
+// Return the virtual space of the anchor of the rectangular selection.
 int wxStyledTextCtrl::GetRectangularSelectionAnchorVirtualSpace() const
 {
     return SendMsg(SCI_GETRECTANGULARSELECTIONANCHORVIRTUALSPACE, 0, 0);
 }
+
+// Set options for virtual space behaviour.
 void wxStyledTextCtrl::SetVirtualSpaceOptions(int virtualSpaceOptions)
 {
     SendMsg(SCI_SETVIRTUALSPACEOPTIONS, virtualSpaceOptions, 0);
 }
+
+// Return options for virtual space behaviour.
 int wxStyledTextCtrl::GetVirtualSpaceOptions() const
 {
     return SendMsg(SCI_GETVIRTUALSPACEOPTIONS, 0, 0);
@@ -4366,9 +4499,9 @@ void wxStyledTextCtrl::SetProperty(const wxString& key, const wxString& value)
 }
 
 // Set up the key words used by the lexer.
-void wxStyledTextCtrl::SetKeyWords(int keywordSet, const wxString& keyWords)
+void wxStyledTextCtrl::SetKeyWords(int keyWordSet, const wxString& keyWords)
 {
-    SendMsg(SCI_SETKEYWORDS, keywordSet, (sptr_t)(const char*)wx2stc(keyWords));
+    SendMsg(SCI_SETKEYWORDS, keyWordSet, (sptr_t)(const char*)wx2stc(keyWords));
 }
 
 // Set the lexing language of the document based on string name.
@@ -4412,9 +4545,8 @@ wxString wxStyledTextCtrl::GetPropertyExpanded(const wxString& key) {
 
 // Retrieve a 'property' value previously set with SetProperty,
 // interpreted as an int AFTER any '$()' variable replacement.
-int wxStyledTextCtrl::GetPropertyInt(const wxString& key) const
-{
-    return SendMsg(SCI_GETPROPERTYINT, (sptr_t)(const char*)wx2stc(key), 0);
+int wxStyledTextCtrl::GetPropertyInt(const wxString &key, int defaultValue) const {
+        return SendMsg(SCI_GETPROPERTYINT, (uptr_t)(const char*)wx2stc(key), defaultValue);
 }
 
 // Retrieve the number of bits the current lexer needs for styling.
@@ -5035,7 +5167,7 @@ wxCharBuffer wxStyledTextCtrl::GetTextRangeRaw(int startPos, int endPos)
     }
 
     wxCharBuffer buf(len);
-    TextRange tr;
+    Sci_TextRange tr;
     tr.lpstrText = buf.data();
     tr.chrg.cpMin = startPos;
     tr.chrg.cpMax = endPos;
@@ -5064,9 +5196,10 @@ void wxStyledTextCtrl::AppendTextRaw(const char* text, int length)
     SendMsg(SCI_APPENDTEXT, length, (sptr_t)text);
 }
 
-
-
-
+void wxStyledTextCtrl::UsePopUp(bool allowPopUp)
+{
+    SendMsg(SCI_USEPOPUP, allowPopUp ? SC_POPUP_ALL : SC_POPUP_NEVER, 0);
+}
 
 //----------------------------------------------------------------------
 // Event handlers
@@ -5111,6 +5244,13 @@ void wxStyledTextCtrl::OnMouseLeftDown(wxMouseEvent& evt) {
                       evt.ShiftDown(), evt.ControlDown(), evt.AltDown());
 }
 
+void wxStyledTextCtrl::OnMouseRightDown(wxMouseEvent& evt) {
+    SetFocus();
+    wxPoint pt = evt.GetPosition();
+    m_swx->DoRightButtonDown(Point(pt.x, pt.y), m_stopWatch.Time(),
+                      evt.ShiftDown(), evt.ControlDown(), evt.AltDown());
+}
+
 void wxStyledTextCtrl::OnMouseMove(wxMouseEvent& evt) {
     wxPoint pt = evt.GetPosition();
     m_swx->DoLeftButtonMove(Point(pt.x, pt.y));
@@ -5151,6 +5291,22 @@ void wxStyledTextCtrl::OnContextMenu(wxContextMenuEvent& evt) {
 
 void wxStyledTextCtrl::OnMouseWheel(wxMouseEvent& evt)
 {
+    // if the mouse wheel is not captured, test if the mouse
+    // pointer is over the editor window and if not, don't
+    // handle the message but pass it on.
+    if ( !GetMouseWheelCaptures() ) {
+        if ( !GetRect().Contains(evt.GetPosition()) ) {
+            wxWindow* parent = GetParent();
+            if (parent != NULL) {
+                wxMouseEvent newevt(evt);
+                newevt.SetPosition(
+                    parent->ScreenToClient(ClientToScreen(evt.GetPosition())));
+                parent->ProcessWindowEvent(newevt);
+            }
+            return;
+        }
+    }
+    
     m_swx->DoMouseWheel(evt.GetWheelAxis(),
                         evt.GetWheelRotation(),
                         evt.GetWheelDelta(),
@@ -5441,6 +5597,11 @@ void wxStyledTextCtrl::NotifyParent(SCNotification* _scn) {
         evt.SetListCompletionMethod(scn.listCompletionMethod);
         break;
 
+    case SCN_MARGINRIGHTCLICK:
+        evt.SetEventType(wxEVT_STC_MARGIN_RIGHT_CLICK);
+        evt.SetMargin(scn.margin);
+        break;
+
     default:
         return;
     }
@@ -5527,7 +5688,7 @@ wxStyledTextEvent::wxStyledTextEvent(const wxStyledTextEvent& event):
 
 /*static*/ wxVersionInfo wxStyledTextCtrl::GetLibraryVersionInfo()
 {
-    return wxVersionInfo("Scintilla", 3, 6, 6, "Scintilla 3.6.6");
+    return wxVersionInfo("Scintilla", 3, 7, 2, "Scintilla 3.7.2");
 }
 
 #endif // wxUSE_STC

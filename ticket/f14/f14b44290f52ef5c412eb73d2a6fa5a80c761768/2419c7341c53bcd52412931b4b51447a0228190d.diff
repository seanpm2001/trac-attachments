Index: src/common/object.cpp
===================================================================
--- src/common/object.cpp	(revision 61771)
+++ src/common/object.cpp	(working copy)
@@ -55,10 +55,10 @@
             (wxObjectConstructorFn) 0   ,
             NULL,NULL,0 , 0 ,
             0 , wxVariantOfPtrToObjectConverterwxObject , wxVariantToObjectConverterwxObject , wxObjectToVariantConverterwxObject);
- template<> void wxStringReadValue(const wxString & , wxObject * & ){assert(0) ;}
- template<> void wxStringWriteValue(wxString & , wxObject* const & ){assert(0) ;}
- template<> void wxStringReadValue(const wxString & , wxObject & ){assert(0) ;}
- template<> void wxStringWriteValue(wxString & , wxObject const & ){assert(0) ;}
+ template<> void wxStringReadValue(const wxString & , wxObject * & ){ wxASSERT(0); }
+ template<> void wxStringWriteValue(wxString & , wxObject* const & ){ wxASSERT(0); }
+ template<> void wxStringReadValue(const wxString & , wxObject & ){ wxASSERT(0); }
+ template<> void wxStringWriteValue(wxString & , wxObject const & ){ wxASSERT(0); }
  wxClassTypeInfo s_typeInfo(wxT_OBJECT_PTR , &wxObject::ms_classInfo , NULL , NULL , typeid(wxObject*).name() ) ;
  wxClassTypeInfo s_typeInfowxObject(wxT_OBJECT , &wxObject::ms_classInfo , NULL , NULL , typeid(wxObject).name() ) ;
 #else
Index: src/generic/regiong.cpp
===================================================================
--- src/generic/regiong.cpp	(revision 61771)
+++ src/generic/regiong.cpp	(working copy)
@@ -685,7 +685,7 @@
     pExtents->x2 = pBoxEnd->x2;
     pExtents->y2 = pBoxEnd->y2;
 
-    assert(pExtents->y1 < pExtents->y2);
+    wxASSERT(pExtents->y1 < pExtents->y2);
     while (pBox <= pBoxEnd)
     {
         if (pBox->x1 < pExtents->x1)
@@ -698,7 +698,7 @@
         }
         pBox++;
     }
-    assert(pExtents->x1 < pExtents->x2);
+    wxASSERT(pExtents->x1 < pExtents->x2);
 }
 
 bool REGION::
@@ -789,7 +789,7 @@
          */
         if (x1 < x2)
         {
-            assert(y1<y2);
+            wxASSERT(y1<y2);
 
             MEMCHECK(pReg, pNextRect, pReg->rects);
             pNextRect->x1 = x1;
@@ -798,7 +798,7 @@
             pNextRect->y2 = y2;
             pReg->numRects += 1;
             pNextRect++;
-            assert(pReg->numRects <= pReg->size);
+            wxASSERT(pReg->numRects <= pReg->size);
         }
 
         /*
@@ -1379,11 +1379,11 @@
 
     pNextRect = &pReg->rects[pReg->numRects];
 
-    assert(y1 < y2);
+    wxASSERT(y1 < y2);
 
     while (r != rEnd)
     {
-        assert(r->x1 < r->x2);
+        wxASSERT(r->x1 < r->x2);
         MEMCHECK(pReg, pNextRect, pReg->rects);
         pNextRect->x1 = r->x1;
         pNextRect->y1 = y1;
@@ -1392,7 +1392,7 @@
         pReg->numRects += 1;
         pNextRect++;
 
-        assert(pReg->numRects<=pReg->size);
+        wxASSERT(pReg->numRects<=pReg->size);
         r++;
     }
     return 0;        /* lint */
@@ -1439,7 +1439,7 @@
         if (pNextRect[-1].x2 < r->x2)  \
         {  \
             pNextRect[-1].x2 = r->x2;  \
-            assert(pNextRect[-1].x1<pNextRect[-1].x2); \
+            wxASSERT(pNextRect[-1].x1<pNextRect[-1].x2); \
         }  \
     }  \
     else  \
@@ -1452,10 +1452,10 @@
         pReg->numRects += 1;  \
         pNextRect += 1;  \
     }  \
-    assert(pReg->numRects<=pReg->size);\
+    wxASSERT(pReg->numRects<=pReg->size);\
     r++;
 
-    assert (y1<y2);
+    wxASSERT (y1<y2);
     while ((r1 != r1End) && (r2 != r2End))
     {
         if (r1->x1 < r2->x1)
@@ -1580,11 +1580,11 @@
 
     pNextRect = &pReg->rects[pReg->numRects];
 
-    assert(y1<y2);
+    wxASSERT(y1<y2);
 
     while (r != rEnd)
     {
-        assert(r->x1<r->x2);
+        wxASSERT(r->x1<r->x2);
         MEMCHECK(pReg, pNextRect, pReg->rects);
         pNextRect->x1 = r->x1;
         pNextRect->y1 = y1;
@@ -1593,7 +1593,7 @@
         pReg->numRects += 1;
         pNextRect++;
 
-        assert(pReg->numRects <= pReg->size);
+        wxASSERT(pReg->numRects <= pReg->size);
 
         r++;
     }
@@ -1630,7 +1630,7 @@
 
     x1 = r1->x1;
 
-    assert(y1<y2);
+    wxASSERT(y1<y2);
     pNextRect = &pReg->rects[pReg->numRects];
 
     while ((r1 != r1End) && (r2 != r2End))
@@ -1673,7 +1673,7 @@
              * Left part of subtrahend covers part of minuend: add uncovered
              * part of minuend to region and skip to next subtrahend.
              */
-            assert(x1<r2->x1);
+            wxASSERT(x1<r2->x1);
             MEMCHECK(pReg, pNextRect, pReg->rects);
             pNextRect->x1 = x1;
             pNextRect->y1 = y1;
@@ -1682,7 +1682,7 @@
             pReg->numRects += 1;
             pNextRect++;
 
-            assert(pReg->numRects<=pReg->size);
+            wxASSERT(pReg->numRects<=pReg->size);
 
             x1 = r2->x2;
             if (x1 >= r1->x2)
@@ -1716,7 +1716,7 @@
                 pNextRect->y2 = y2;
                 pReg->numRects += 1;
                 pNextRect++;
-                assert(pReg->numRects<=pReg->size);
+                wxASSERT(pReg->numRects<=pReg->size);
             }
             r1++;
             if (r1 != r1End)
@@ -1729,7 +1729,7 @@
      */
     while (r1 != r1End)
     {
-        assert(x1<r1->x2);
+        wxASSERT(x1<r1->x2);
         MEMCHECK(pReg, pNextRect, pReg->rects);
         pNextRect->x1 = x1;
         pNextRect->y1 = y1;
@@ -1738,7 +1738,7 @@
         pReg->numRects += 1;
         pNextRect++;
 
-        assert(pReg->numRects<=pReg->size);
+        wxASSERT(pReg->numRects<=pReg->size);
 
         r1++;
         if (r1 != r1End)
Index: src/osx/carbon/font.cpp
===================================================================
--- src/osx/carbon/font.cpp	(revision 61771)
+++ src/osx/carbon/font.cpp	(working copy)
@@ -877,11 +877,11 @@
     CTFontDescriptorRef descriptor = NULL;
     CFMutableDictionaryRef attributes;
 
-    assert(iFamilyName != NULL);
+    wxASSERT(iFamilyName != NULL);
     // Create a mutable dictionary to hold our attributes.
     attributes = CFDictionaryCreateMutable(kCFAllocatorDefault, 0,
                                            &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
-    check(attributes != NULL);
+    wxASSERT(attributes != NULL);
 
     if (attributes != NULL) {
         // Add a family name to our attributes.
@@ -895,13 +895,13 @@
             // Create the traits dictionary.
             symTraits = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type,
                                        &iTraits);
-            check(symTraits != NULL);
+            wxASSERT(symTraits != NULL);
 
             if (symTraits != NULL) {
                 // Create a dictionary to hold our traits values.
                 traits = CFDictionaryCreateMutable(kCFAllocatorDefault, 0,
                                                    &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
-                check(traits != NULL);
+                wxASSERT(traits != NULL);
 
                 if (traits != NULL) {
                     // Add the symbolic traits value to the traits dictionary.
@@ -916,7 +916,7 @@
         }
         // Create the font descriptor with our attributes
         descriptor = CTFontDescriptorCreateWithAttributes(attributes);
-        check(descriptor != NULL);
+        wxASSERT(descriptor != NULL);
 
         CFRelease(attributes);
     }
Index: src/regex/regcustom.h
===================================================================
--- src/regex/regcustom.h	(revision 61771)
+++ src/regex/regcustom.h	(working copy)
@@ -41,6 +41,17 @@
 #include "wx/wxcrtbase.h"
 
 /*
+ * Make sure NDEBUG is defined for non-debug builds or else
+ * the lower case "assert"s that are used in the regex library
+ * may trap, even for release builds.
+ */
+#if !(wxDEBUG_LEVEL || defined(__WXDEBUG__))
+#ifndef NDEBUG
+#define NDEBUG
+#endif
+#endif
+
+/*
  * Do not insert extras between the "begin" and "end" lines -- this
  * chunk is automatically extracted to be fitted into regex.h.
  */
Index: src/tiff/libtiff/tif_config.h
===================================================================
--- src/tiff/libtiff/tif_config.h	(revision 61771)
+++ src/tiff/libtiff/tif_config.h	(working copy)
@@ -35,14 +35,14 @@
 #if __BIG_ENDIAN__
     /* Set the native cpu bit order */
     #define HOST_FILLORDER FILLORDER_MSB2LSB
-    
+
     /* Define to 1 if your processor stores words with the most significant byte
     first (like Motorola and SPARC, unlike Intel and VAX). */
     #define WORDS_BIGENDIAN 1
 #else
     /* Set the native cpu bit order */
     #define HOST_FILLORDER FILLORDER_LSB2MSB
-    
+
     /* Define to 1 if your processor stores words with the most significant byte
         first (like Motorola and SPARC, unlike Intel and VAX). */
     /* #undef WORDS_BIGENDIAN */
@@ -128,3 +128,18 @@
 #endif /* _WIN32_WCE */
 
 #endif /* __APPLE__/!__APPLE__ */
+
+/*
+   Make sure NDEBUG is defined for non-debug builds or else
+   the lower case "assert"s that are used in the tiff library
+   may trap, even for release builds.
+   Unfortunately, we can't #define assert to wxASSERT
+   because tiffiop.h will in any case either include <assert.h>
+   or redefine assert to an empty macro.
+ */
+#if !(wxDEBUG_LEVEL || defined(__WXDEBUG__))
+#ifndef NDEBUG
+#define NDEBUG
+#endif
+#endif
+

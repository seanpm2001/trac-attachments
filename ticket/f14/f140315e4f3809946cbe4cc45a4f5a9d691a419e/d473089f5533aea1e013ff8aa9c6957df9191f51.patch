diff --git a/include/wx/event.h b/include/wx/event.h
index c70f159..a609c6c 100644
--- a/include/wx/event.h
+++ b/include/wx/event.h
@@ -291,11 +291,11 @@ struct HandlerImpl<T, A, true>
     static bool IsEvtHandler()
         { return true; }
     static T *ConvertFromEvtHandler(wxEvtHandler *p)
-        { return static_cast<T *>(p); }
+        { return reinterpret_cast<T *>(p); }
     static wxEvtHandler *ConvertToEvtHandler(T *p)
-        { return p; }
+        { return reinterpret_cast<wxEvtHandler *>(p); }
     static wxEventFunction ConvertToEvtMethod(void (T::*f)(A&))
-        { return static_cast<wxEventFunction>(
+        { return reinterpret_cast<wxEventFunction>(
                     reinterpret_cast<void (T::*)(wxEvent&)>(f)); }
 };
 
diff --git a/include/wx/meta/convertible.h b/include/wx/meta/convertible.h
index 4599937..a9bd2d8 100644
--- a/include/wx/meta/convertible.h
+++ b/include/wx/meta/convertible.h
@@ -9,28 +9,52 @@
 
 #ifndef _WX_META_CONVERTIBLE_H_
 #define _WX_META_CONVERTIBLE_H_
+// Extra template classes for wxConvertibleTo
+template<class T, class U>
+struct is_same
+{
+    enum
+    {
+        value = 0
+    };
+};
 
-//
-// Introduce an extra class to make this header compilable with g++3.2
-//
-template <class D, class B>
-struct wxConvertibleTo_SizeHelper
+template<class T>
+struct is_same<T, T>
 {
-    static char Match(B* pb);
-    static int  Match(...);
+    enum
+    {
+        value = 1
+    };
+};
+
+template <typename B, typename D>
+struct is_base_of_helper
+{
+    operator B*() const;
+    operator D*();
+};
+
+template <typename B, typename D>
+struct is_base_of
+{
+    typedef char(&yes)[1];
+    typedef char(&no)[2];
+
+    template <typename T>
+    static yes check(D*, T);
+    static no check(B*, int);
+
+    static const bool value = sizeof(check(is_base_of_helper<B, D>(), int())) == sizeof(yes) || is_same<B, D>::value;
 };
 
-// Helper to decide if an object of type D is convertible to type B (the test
-// succeeds in particular when D derives from B)
+// Helper to decide if an object of type D is convertible to (derived from) type B
 template <class D, class B>
 struct wxConvertibleTo
 {
     enum
     {
-        value =
-            sizeof(wxConvertibleTo_SizeHelper<D,B>::Match(static_cast<D*>(NULL)))
-            ==
-            sizeof(char)
+        value = is_base_of<B, D>::value
     };
 };
 

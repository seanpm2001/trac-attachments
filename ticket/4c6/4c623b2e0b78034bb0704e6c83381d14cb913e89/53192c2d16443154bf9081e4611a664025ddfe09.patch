Index: include/wx/generic/listctrl.h
===================================================================
--- include/wx/generic/listctrl.h	(revision 73196)
+++ include/wx/generic/listctrl.h	(working copy)
@@ -229,9 +229,6 @@
     // return the icon for the given item and column.
     virtual int OnGetItemColumnImage(long item, long column) const;
 
-    // return the attribute for the item (may return NULL if none)
-    virtual wxListItemAttr *OnGetItemAttr(long item) const;
-
     // it calls our OnGetXXX() functions
     friend class WXDLLIMPEXP_FWD_CORE wxListMainWindow;
 
Index: include/wx/listbase.h
===================================================================
--- include/wx/listbase.h	(revision 73196)
+++ include/wx/listbase.h	(working copy)
@@ -446,6 +446,8 @@
     virtual int GetColumnWidth(int col) const = 0;
     virtual bool SetColumnWidth(int col, int width) = 0;
 
+    // return the attribute for the item (may return NULL if none)
+    virtual wxListItemAttr *OnGetItemAttr(long item) const;
 
     // Other miscellaneous accessors.
     // ------------------------------
@@ -458,12 +460,19 @@
     // Only implemented in the generic version currently.
     virtual void EnableBellOnNoMatch(bool WXUNUSED(on) = true) { }
 
+    void EnableAlternateRowColours(bool enable = true);
+    void SetAlternateRowColour(const wxColour& colour);
+
 protected:
     // Real implementations methods to which our public forwards.
     virtual long DoInsertColumn(long col, const wxListItem& info) = 0;
 
     // Overridden methods of the base class.
     virtual wxSize DoGetBestClientSize() const;
+
+private:
+    // user defined color to draw row lines, may be invalid
+    wxListItemAttr m_alternateRowColour;
 };
 
 // ----------------------------------------------------------------------------
Index: include/wx/msw/listctrl.h
===================================================================
--- include/wx/msw/listctrl.h	(revision 73196)
+++ include/wx/msw/listctrl.h	(working copy)
@@ -439,9 +439,6 @@
     // return the icon for the given item and column.
     virtual int OnGetItemColumnImage(long item, long column) const;
 
-    // return the attribute for the item (may return NULL if none)
-    virtual wxListItemAttr *OnGetItemAttr(long item) const;
-
     // return the attribute for the given item and column (may return NULL if none)
     virtual wxListItemAttr *OnGetItemColumnAttr(long item, long WXUNUSED(column)) const
     {
Index: include/wx/osx/listctrl.h
===================================================================
--- include/wx/osx/listctrl.h	(revision 73196)
+++ include/wx/osx/listctrl.h	(working copy)
@@ -291,9 +291,6 @@
     // return the icon for the given item and column.
     virtual int OnGetItemColumnImage(long item, long column) const;
 
-    // return the attribute for the item (may return NULL if none)
-    virtual wxListItemAttr *OnGetItemAttr(long item) const;
-
 /* Why should we need this function? Leave for now.
  * We might need it because item data may have changed,
  * but the display needs refreshing (in string callback mode)
Index: interface/wx/listctrl.h
===================================================================
--- interface/wx/listctrl.h	(revision 73196)
+++ interface/wx/listctrl.h	(working copy)
@@ -408,6 +408,16 @@
                           wxClassInfo* textControlClass = wxCLASSINFO(wxTextCtrl));
 
     /**
+        Enable alternating row background colours. An appropriate colour is chosen automatically.
+        This requires the @c wxLC_VIRTUAL style flag.
+
+        @param enable If @true, enable alternating row background colours. If @false, disable this feature.
+        @since 2.9.5
+        @see SetAlternateRowColour()
+     */
+    void EnableAlternateRowColours(bool enable = true);
+
+    /**
         Enable or disable a beep if there is no match for the currently
         entered text when searching for the item from keyboard.
 
@@ -751,6 +761,20 @@
     wxRect GetViewRect() const;
 
     /**
+        Set the alternative row background colour to a specific colour.
+        To have an appropriate colour chosen automatically call EnableAlternateRowColours() instead.
+        This requires the @c wxLC_VIRTUAL style flag.
+        
+        The method EnableAlternateRowColours() is preferred over this method because this method
+        may not be implemented in a future OS X native implementation.
+
+        @param colour Alternating row background colour.
+        @since 2.9.5
+        @see EnableAlternateRowColours()
+     */
+    void SetAlternateRowColour(const wxColour& colour);
+
+    /**
         Determines which item (if any) is at the specified point, giving details
         in @a flags. Returns index of the item or @c wxNOT_FOUND if no item is at
         the specified point.
Index: samples/listctrl/listtest.cpp
===================================================================
--- samples/listctrl/listtest.cpp	(revision 73196)
+++ samples/listctrl/listtest.cpp	(working copy)
@@ -137,6 +137,7 @@
     EVT_MENU(LIST_SORT, MyFrame::OnSort)
     EVT_MENU(LIST_SET_FG_COL, MyFrame::OnSetFgColour)
     EVT_MENU(LIST_SET_BG_COL, MyFrame::OnSetBgColour)
+    EVT_MENU(LIST_ROW_LINES, MyFrame::OnSetRowLines)
     EVT_MENU(LIST_TOGGLE_MULTI_SEL, MyFrame::OnToggleMultiSel)
     EVT_MENU(LIST_SHOW_COL_INFO, MyFrame::OnShowColInfo)
     EVT_MENU(LIST_SHOW_SEL_INFO, MyFrame::OnShowSelInfo)
@@ -264,6 +265,7 @@
     wxMenu *menuCol = new wxMenu;
     menuCol->Append(LIST_SET_FG_COL, wxT("&Foreground colour..."));
     menuCol->Append(LIST_SET_BG_COL, wxT("&Background colour..."));
+    menuCol->AppendCheckItem(LIST_ROW_LINES, wxT("Alternating colours"));
 
     wxMenuBar *menubar = new wxMenuBar;
     menubar->Append(menuFile, wxT("&File"));
@@ -337,7 +339,7 @@
 void MyFrame::OnAbout(wxCommandEvent& WXUNUSED(event))
 {
     wxMessageDialog dialog(this, wxT("List test sample\nJulian Smart (c) 1997"),
-            wxT("About list test"), wxOK|wxCANCEL);
+            wxT("About list test"));
 
     dialog.ShowModal();
 }
@@ -848,6 +850,23 @@
     m_listCtrl->Refresh();
 }
 
+void MyFrame::OnSetRowLines(wxCommandEvent& event)
+{
+    if (event.IsChecked())
+    {
+        if (!m_listCtrl->HasFlag(wxLC_VIRTUAL))
+        {
+            wxMessageBox(_("Switch to virtual view to see alternating colours, and to avoid the wxASSERT coming now"));
+        }
+        m_listCtrl->EnableAlternateRowColours(true); // enable alternating row colours
+    }
+    else
+    {
+        m_listCtrl->EnableAlternateRowColours(false); // disable alternating row colours
+    }
+    m_listCtrl->Refresh();
+}
+
 void MyFrame::OnAdd(wxCommandEvent& WXUNUSED(event))
 {
     m_listCtrl->InsertItem(m_listCtrl->GetItemCount(), wxT("Appended item"));
@@ -1328,7 +1347,7 @@
         return &s_attrHighlight;
     }
 
-    return item % 2 ? NULL : (wxListItemAttr *)&m_attr;
+    return wxListCtrl::OnGetItemAttr(item);
 }
 
 void MyListCtrl::InsertItemInReportView(int i)
Index: samples/listctrl/listtest.h
===================================================================
--- samples/listctrl/listtest.h	(revision 73196)
+++ samples/listctrl/listtest.h	(working copy)
@@ -37,8 +37,7 @@
                const wxPoint& pos,
                const wxSize& size,
                long style)
-        : wxListCtrl(parent, id, pos, size, style),
-          m_attr(*wxBLUE, *wxLIGHT_GREY, wxNullFont)
+        : wxListCtrl(parent, id, pos, size, style)
         {
             m_updated = -1;
 
@@ -88,8 +87,6 @@
     virtual int OnGetItemColumnImage(long item, long column) const;
     virtual wxListItemAttr *OnGetItemAttr(long item) const;
 
-    wxListItemAttr m_attr;
-
     long m_updated;
 
 
@@ -135,6 +132,7 @@
     void OnSort(wxCommandEvent& event);
     void OnSetFgColour(wxCommandEvent& event);
     void OnSetBgColour(wxCommandEvent& event);
+    void OnSetRowLines(wxCommandEvent& event);
     void OnToggleMultiSel(wxCommandEvent& event);
     void OnShowColInfo(wxCommandEvent& event);
     void OnShowSelInfo(wxCommandEvent& event);
@@ -218,6 +216,7 @@
     LIST_FIND,
     LIST_SET_FG_COL,
     LIST_SET_BG_COL,
+    LIST_ROW_LINES,
     LIST_TOGGLE_MULTI_SEL,
     LIST_TOGGLE_HEADER,
     LIST_TOGGLE_BELL,
Index: src/common/listctrlcmn.cpp
===================================================================
--- src/common/listctrlcmn.cpp	(revision 73196)
+++ src/common/listctrlcmn.cpp	(working copy)
@@ -216,4 +216,40 @@
     return wxSize(totalWidth, 10*dc.GetCharHeight());
 }
 
+void wxListCtrlBase::SetAlternateRowColour(const wxColour& colour)
+{
+    wxASSERT(HasFlag(wxLC_VIRTUAL));
+    m_alternateRowColour.SetBackgroundColour(colour);
+}
+
+void wxListCtrlBase::EnableAlternateRowColours(bool enable)
+{
+    if (enable)
+    {
+        wxASSERT(HasFlag(wxLC_VIRTUAL));
+
+        // This code is copied from wxDataViewMainWindow::OnPaint()
+
+        // Determine the alternate rows colour automatically from the
+        // background colour.
+        const wxColour bgColour = GetBackgroundColour();
+
+        // Depending on the background, alternate row color
+        // will be 3% more dark or 50% brighter.
+        int alpha = (bgColour.GetRGB() > 0x808080) ? 97 : 150;
+        SetAlternateRowColour(bgColour.ChangeLightness(alpha));
+    }
+    else
+    {
+        SetAlternateRowColour(wxColour()); // invalid colour
+    }
+}
+
+wxListItemAttr *wxListCtrlBase::OnGetItemAttr(long item) const
+{
+    return (m_alternateRowColour.GetBackgroundColour().IsOk() && (item % 2))
+        ? wxConstCast(&m_alternateRowColour, wxListItemAttr)
+        : NULL; // no attributes by default
+}
+
 #endif // wxUSE_LISTCTRL
Index: src/generic/listctrl.cpp
===================================================================
--- src/generic/listctrl.cpp	(revision 73196)
+++ src/generic/listctrl.cpp	(working copy)
@@ -5397,16 +5397,6 @@
    return -1;
 }
 
-wxListItemAttr *
-wxGenericListCtrl::OnGetItemAttr(long WXUNUSED_UNLESS_DEBUG(item)) const
-{
-    wxASSERT_MSG( item >= 0 && item < GetItemCount(),
-                  wxT("invalid item index in OnGetItemAttr()") );
-
-    // no attributes by default
-    return NULL;
-}
-
 void wxGenericListCtrl::SetItemCount(long count)
 {
     wxASSERT_MSG( IsVirtual(), wxT("this is for virtual controls only") );
Index: src/msw/listctrl.cpp
===================================================================
--- src/msw/listctrl.cpp	(revision 73196)
+++ src/msw/listctrl.cpp	(working copy)
@@ -3089,15 +3089,6 @@
     return -1;
 }
 
-wxListItemAttr *wxListCtrl::OnGetItemAttr(long WXUNUSED_UNLESS_DEBUG(item)) const
-{
-    wxASSERT_MSG( item >= 0 && item < GetItemCount(),
-                  wxT("invalid item index in OnGetItemAttr()") );
-
-    // no attributes by default
-    return NULL;
-}
-
 wxListItemAttr *wxListCtrl::DoGetItemColumnAttr(long item, long column) const
 {
     if ( IsVirtual() )
Index: src/os2/listctrl.cpp
===================================================================
--- src/os2/listctrl.cpp	(revision 73196)
+++ src/os2/listctrl.cpp	(working copy)
@@ -2588,19 +2588,6 @@
     return -1;
 } // end of wxListCtrl::OnGetItemColumnImage
 
-wxListItemAttr* wxListCtrl::OnGetItemAttr (
-  long                              WXUNUSED_UNLESS_DEBUG(lItem)
-) const
-{
-    wxASSERT_MSG( lItem >= 0 && lItem < GetItemCount(),
-                  wxT("invalid item index in OnGetItemAttr()") );
-
-    //
-    // No attributes by default
-    //
-    return NULL;
-} // end of wxListCtrl::OnGetItemAttr
-
 void wxListCtrl::SetItemCount (
   long                              lCount
 )
Index: src/osx/carbon/listctrl_mac.cpp
===================================================================
--- src/osx/carbon/listctrl_mac.cpp	(revision 73196)
+++ src/osx/carbon/listctrl_mac.cpp	(working copy)
@@ -2308,15 +2308,6 @@
     return -1;
 }
 
-wxListItemAttr *wxListCtrl::OnGetItemAttr(long WXUNUSED_UNLESS_DEBUG(item)) const
-{
-    wxASSERT_MSG( item >= 0 && item < GetItemCount(),
-                  wxT("invalid item index in OnGetItemAttr()") );
-
-    // no attributes by default
-    return NULL;
-}
-
 void wxListCtrl::SetItemCount(long count)
 {
     wxASSERT_MSG( IsVirtual(), wxT("this is for virtual controls only") );

Index: include/wx/listbase.h
===================================================================
--- include/wx/listbase.h	(revision 72394)
+++ include/wx/listbase.h	(working copy)
@@ -59,6 +59,9 @@
 // for compatibility only
 #define wxLC_USER_TEXT       wxLC_VIRTUAL
 
+// Extra style
+#define wxLC_EX_ROW_LINES    0x00100000
+
 // Omitted because
 //  (a) too much detail
 //  (b) not enough style flags
@@ -446,6 +449,8 @@
     virtual int GetColumnWidth(int col) const = 0;
     virtual bool SetColumnWidth(int col, int width) = 0;
 
+    // return the attribute for the item (may return NULL if none)
+    virtual wxListItemAttr *OnGetItemAttr(long item) const;
 
     // Other miscellaneous accessors.
     // ------------------------------
@@ -454,12 +459,19 @@
     bool InReportView() const { return HasFlag(wxLC_REPORT); }
     bool IsVirtual() const { return HasFlag(wxLC_VIRTUAL); }
 
+    wxColour GetAlternateRowColour() const { return m_alternateRowColour.GetBackgroundColour(); }
+    void SetAlternateRowColour(const wxColour& colour);
+
 protected:
     // Real implementations methods to which our public forwards.
     virtual long DoInsertColumn(long col, const wxListItem& info) = 0;
 
     // Overridden methods of the base class.
     virtual wxSize DoGetBestClientSize() const;
+
+private:
+    // user defined color to draw row lines, may be invalid
+    wxListItemAttr m_alternateRowColour;
 };
 
 // ----------------------------------------------------------------------------
Index: interface/wx/listctrl.h
===================================================================
--- interface/wx/listctrl.h	(revision 72394)
+++ interface/wx/listctrl.h	(working copy)
@@ -30,6 +30,8 @@
 #define wxLC_MASK_ALIGN      (wxLC_ALIGN_TOP | wxLC_ALIGN_LEFT)
 #define wxLC_MASK_SORT       (wxLC_SORT_ASCENDING | wxLC_SORT_DESCENDING)
 
+// Extra style
+#define wxLC_EX_ROW_LINES    0x00100000
 
 /// Mask flags to tell app/GUI what fields of wxListItem are valid
 #define wxLIST_MASK_STATE           0x0001
@@ -739,6 +741,23 @@
     wxRect GetViewRect() const;
 
     /**
+        Get the alternative row background colour (which may be invalid).
+
+        @since 2.9.5
+        @see SetAlternateRowColour()
+     */
+    wxColour GetAlternateRowColour() const;
+
+    /**
+        Set the alternative row background colour (which may be invalid).
+        This requires the @c wxLC_VIRTUAL style flag and the @c wxLC_EX_ROW_LINES extra style flag.
+
+        @since 2.9.5
+        @see GetAlternateRowColour()
+     */
+    void SetAlternateRowColour(const wxColour& colour);
+
+    /**
         Determines which item (if any) is at the specified point, giving details
         in @a flags. Returns index of the item or @c wxNOT_FOUND if no item is at
         the specified point.
Index: samples/listctrl/listtest.cpp
===================================================================
--- samples/listctrl/listtest.cpp	(revision 72394)
+++ samples/listctrl/listtest.cpp	(working copy)
@@ -137,6 +137,7 @@
     EVT_MENU(LIST_SORT, MyFrame::OnSort)
     EVT_MENU(LIST_SET_FG_COL, MyFrame::OnSetFgColour)
     EVT_MENU(LIST_SET_BG_COL, MyFrame::OnSetBgColour)
+    EVT_MENU(LIST_ROW_LINES, MyFrame::OnSetRowLines)
     EVT_MENU(LIST_TOGGLE_MULTI_SEL, MyFrame::OnToggleMultiSel)
     EVT_MENU(LIST_SHOW_COL_INFO, MyFrame::OnShowColInfo)
     EVT_MENU(LIST_SHOW_SEL_INFO, MyFrame::OnShowSelInfo)
@@ -262,6 +263,7 @@
     wxMenu *menuCol = new wxMenu;
     menuCol->Append(LIST_SET_FG_COL, wxT("&Foreground colour..."));
     menuCol->Append(LIST_SET_BG_COL, wxT("&Background colour..."));
+    menuCol->AppendCheckItem(LIST_ROW_LINES, "Alternating colours");
 
     wxMenuBar *menubar = new wxMenuBar;
     menubar->Append(menuFile, wxT("&File"));
@@ -335,7 +337,7 @@
 void MyFrame::OnAbout(wxCommandEvent& WXUNUSED(event))
 {
     wxMessageDialog dialog(this, wxT("List test sample\nJulian Smart (c) 1997"),
-            wxT("About list test"), wxOK|wxCANCEL);
+            wxT("About list test"));
 
     dialog.ShowModal();
 }
@@ -428,7 +430,7 @@
 // changing listctrl modes
 // ----------------------------------------------------------------------------
 
-void MyFrame::RecreateList(long flags, bool withText)
+void MyFrame::RecreateList(long flags, bool withText, long exStyle)
 {
     // we could avoid recreating it if we don't set/clear the wxLC_VIRTUAL
     // style, but it is more trouble to do it than not
@@ -437,12 +439,22 @@
             (m_listCtrl->GetWindowStyleFlag() & wxLC_VIRTUAL)) )
 #endif
     {
-        delete m_listCtrl;
+        wxColour foreColour;
+        wxColour backColour;
 
+        if (m_listCtrl)
+        {
+            foreColour = m_listCtrl->GetForegroundColour();
+            backColour = m_listCtrl->GetBackgroundColour();
+            delete m_listCtrl;
+        }
         m_listCtrl = new MyListCtrl(m_panel, LIST_CTRL,
                                     wxDefaultPosition, wxDefaultSize,
                                     flags |
                                     wxBORDER_THEME | wxLC_EDIT_LABELS);
+        if (foreColour.IsOk()) m_listCtrl->SetForegroundColour(foreColour);
+        if (backColour.IsOk()) m_listCtrl->SetBackgroundColour(backColour);
+        m_listCtrl->SetExtraStyle(exStyle);
 
         switch ( flags & wxLC_MASK_TYPE )
         {
@@ -619,6 +631,22 @@
     RecreateList(wxLC_REPORT | wxLC_VIRTUAL);
 }
 
+void MyFrame::OnSetRowLines(wxCommandEvent& event)
+{
+    bool on = event.IsChecked();
+    long exStyle = m_listCtrl->GetExtraStyle();
+
+    if (on)
+    {
+        exStyle |= wxLC_EX_ROW_LINES;
+    }
+    else
+    {
+        exStyle &= ~wxLC_EX_ROW_LINES;
+    }
+    RecreateList(wxLC_REPORT | wxLC_VIRTUAL, true, exStyle);
+}
+
 void MyFrame::OnSetItemsCount(wxCommandEvent& WXUNUSED(event))
 {
     int numItems = wxGetNumberFromUser
@@ -827,14 +855,22 @@
 
 void MyFrame::OnSetFgColour(wxCommandEvent& WXUNUSED(event))
 {
-    m_listCtrl->SetForegroundColour(wxGetColourFromUser(this));
-    m_listCtrl->Refresh();
+    wxColour colour = wxGetColourFromUser(this, m_listCtrl->GetForegroundColour());
+    if (colour.IsOk())
+    {
+        m_listCtrl->SetForegroundColour(colour);
+        m_listCtrl->Refresh();
+    }
 }
 
 void MyFrame::OnSetBgColour(wxCommandEvent& WXUNUSED(event))
 {
-    m_listCtrl->SetBackgroundColour(wxGetColourFromUser(this));
-    m_listCtrl->Refresh();
+    wxColour colour = wxGetColourFromUser(this, m_listCtrl->GetBackgroundColour());
+    if (colour.IsOk())
+    {
+        m_listCtrl->SetBackgroundColour(colour);
+        m_listCtrl->Refresh();
+    }
 }
 
 void MyFrame::OnAdd(wxCommandEvent& WXUNUSED(event))
@@ -1329,7 +1365,7 @@
         return &s_attrHighlight;
     }
 
-    return item % 2 ? NULL : (wxListItemAttr *)&m_attr;
+    return wxListCtrl::OnGetItemAttr(item);
 }
 
 void MyListCtrl::InsertItemInReportView(int i)
Index: samples/listctrl/listtest.h
===================================================================
--- samples/listctrl/listtest.h	(revision 72394)
+++ samples/listctrl/listtest.h	(working copy)
@@ -37,8 +37,7 @@
                const wxPoint& pos,
                const wxSize& size,
                long style)
-        : wxListCtrl(parent, id, pos, size, style),
-          m_attr(*wxBLUE, *wxLIGHT_GREY, wxNullFont)
+        : wxListCtrl(parent, id, pos, size, style)
         {
             m_updated = -1;
 
@@ -88,8 +87,6 @@
     virtual int OnGetItemColumnImage(long item, long column) const;
     virtual wxListItemAttr *OnGetItemAttr(long item) const;
 
-    wxListItemAttr m_attr;
-
     long m_updated;
 
 
@@ -135,6 +132,7 @@
     void OnSort(wxCommandEvent& event);
     void OnSetFgColour(wxCommandEvent& event);
     void OnSetBgColour(wxCommandEvent& event);
+    void OnSetRowLines(wxCommandEvent& event);
     void OnToggleMultiSel(wxCommandEvent& event);
     void OnShowColInfo(wxCommandEvent& event);
     void OnShowSelInfo(wxCommandEvent& event);
@@ -165,7 +163,7 @@
 
 private:
     // recreate the list control with the new flags
-    void RecreateList(long flags, bool withText = true);
+    void RecreateList(long flags, bool withText = true, long exStyle = 0);
 
     // fill the control with items depending on the view
     void InitWithListItems();
@@ -217,6 +215,7 @@
     LIST_FIND,
     LIST_SET_FG_COL,
     LIST_SET_BG_COL,
+    LIST_ROW_LINES,
     LIST_TOGGLE_MULTI_SEL,
     LIST_TOGGLE_HEADER,
     LIST_TOGGLE_FIRST,
Index: src/common/listctrlcmn.cpp
===================================================================
--- src/common/listctrlcmn.cpp	(revision 72394)
+++ src/common/listctrlcmn.cpp	(working copy)
@@ -216,4 +216,33 @@
     return wxSize(totalWidth, 10*dc.GetCharHeight());
 }
 
+void wxListCtrlBase::SetAlternateRowColour(const wxColour& colour)
+{
+    wxASSERT(HasFlag(wxLC_VIRTUAL) && HasExtraStyle(wxLC_EX_ROW_LINES));
+    m_alternateRowColour.SetBackgroundColour(colour);
+}
+
+wxListItemAttr* wxListCtrlBase::OnGetItemAttr(long row) const
+{
+    if (HasExtraStyle(wxLC_EX_ROW_LINES))
+    {
+        wxListItemAttr* attr = wxConstCast(&m_alternateRowColour, wxListItemAttr);
+
+        if (!attr->GetBackgroundColour().IsOk())
+        {
+            // Determine the alternate rows colour automatically from the
+            // background colour.
+            const wxColour bgColour = GetBackgroundColour();
+
+            // Depending on the background, alternate row color
+            // will be 3% more dark or 50% brighter.
+            int alpha = (bgColour.GetRGB() > 0x808080) ? 97 : 150;
+            attr->SetBackgroundColour(bgColour.ChangeLightness(alpha));
+        }
+        return (row % 2) ? attr : NULL; 
+    }
+    // no attributes by default
+    return NULL;
+}
+
 #endif // wxUSE_LISTCTRL
Index: src/generic/listctrl.cpp
===================================================================
--- src/generic/listctrl.cpp	(revision 72394)
+++ src/generic/listctrl.cpp	(working copy)
@@ -5242,13 +5242,12 @@
 }
 
 wxListItemAttr *
-wxGenericListCtrl::OnGetItemAttr(long WXUNUSED_UNLESS_DEBUG(item)) const
+wxGenericListCtrl::OnGetItemAttr(long item) const
 {
     wxASSERT_MSG( item >= 0 && item < GetItemCount(),
                   wxT("invalid item index in OnGetItemAttr()") );
 
-    // no attributes by default
-    return NULL;
+    return wxListCtrlBase::OnGetItemAttr(item);
 }
 
 void wxGenericListCtrl::SetItemCount(long count)
Index: src/msw/listctrl.cpp
===================================================================
--- src/msw/listctrl.cpp	(revision 72394)
+++ src/msw/listctrl.cpp	(working copy)
@@ -3078,13 +3078,12 @@
     return -1;
 }
 
-wxListItemAttr *wxListCtrl::OnGetItemAttr(long WXUNUSED_UNLESS_DEBUG(item)) const
+wxListItemAttr *wxListCtrl::OnGetItemAttr(long item) const
 {
     wxASSERT_MSG( item >= 0 && item < GetItemCount(),
                   wxT("invalid item index in OnGetItemAttr()") );
 
-    // no attributes by default
-    return NULL;
+    return wxListCtrlBase::OnGetItemAttr(item);
 }
 
 wxListItemAttr *wxListCtrl::DoGetItemColumnAttr(long item, long column) const
Index: src/os2/listctrl.cpp
===================================================================
--- src/os2/listctrl.cpp	(revision 72394)
+++ src/os2/listctrl.cpp	(working copy)
@@ -2589,16 +2589,13 @@
 } // end of wxListCtrl::OnGetItemColumnImage
 
 wxListItemAttr* wxListCtrl::OnGetItemAttr (
-  long                              WXUNUSED_UNLESS_DEBUG(lItem)
+  long                              lItem
 ) const
 {
     wxASSERT_MSG( lItem >= 0 && lItem < GetItemCount(),
                   wxT("invalid item index in OnGetItemAttr()") );
 
-    //
-    // No attributes by default
-    //
-    return NULL;
+    return wxListCtrlBase::OnGetItemAttr(lItem);
 } // end of wxListCtrl::OnGetItemAttr
 
 void wxListCtrl::SetItemCount (
Index: src/osx/carbon/listctrl_mac.cpp
===================================================================
--- src/osx/carbon/listctrl_mac.cpp	(revision 72394)
+++ src/osx/carbon/listctrl_mac.cpp	(working copy)
@@ -2308,13 +2308,12 @@
     return -1;
 }
 
-wxListItemAttr *wxListCtrl::OnGetItemAttr(long WXUNUSED_UNLESS_DEBUG(item)) const
+wxListItemAttr *wxListCtrl::OnGetItemAttr(long item) const
 {
     wxASSERT_MSG( item >= 0 && item < GetItemCount(),
                   wxT("invalid item index in OnGetItemAttr()") );
 
-    // no attributes by default
-    return NULL;
+    return wxListCtrlBase::OnGetItemAttr(item);
 }
 
 void wxListCtrl::SetItemCount(long count)

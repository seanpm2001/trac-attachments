Index: include/wx/listbase.h
===================================================================
--- include/wx/listbase.h	(revision 72394)
+++ include/wx/listbase.h	(working copy)
@@ -446,6 +446,8 @@
     virtual int GetColumnWidth(int col) const = 0;
     virtual bool SetColumnWidth(int col, int width) = 0;
 
+    // return the attribute for the item (may return NULL if none)
+    virtual wxListItemAttr *OnGetItemAttr(long item) const;
 
     // Other miscellaneous accessors.
     // ------------------------------
@@ -454,12 +456,20 @@
     bool InReportView() const { return HasFlag(wxLC_REPORT); }
     bool IsVirtual() const { return HasFlag(wxLC_VIRTUAL); }
 
+    wxColour GetAlternateRowColour() const { return m_alternateRowColour.GetBackgroundColour(); }
+    void SetAlternateRowColour(const wxColour& colour);
+    void SetAlternateRowColour();
+
 protected:
     // Real implementations methods to which our public forwards.
     virtual long DoInsertColumn(long col, const wxListItem& info) = 0;
 
     // Overridden methods of the base class.
     virtual wxSize DoGetBestClientSize() const;
+
+private:
+    // user defined color to draw row lines, may be invalid
+    wxListItemAttr m_alternateRowColour;
 };
 
 // ----------------------------------------------------------------------------
Index: interface/wx/listctrl.h
===================================================================
--- interface/wx/listctrl.h	(revision 72394)
+++ interface/wx/listctrl.h	(working copy)
@@ -739,6 +739,23 @@
     wxRect GetViewRect() const;
 
     /**
+        Get the alternative row background colour (which may be invalid).
+
+        @since 2.9.5
+        @see SetAlternateRowColour()
+     */
+    wxColour GetAlternateRowColour() const;
+
+    /**
+        Set the alternative row background colour (which may be invalid).
+        This requires the @c wxLC_VIRTUAL style flag.
+
+        @since 2.9.5
+        @see GetAlternateRowColour()
+     */
+    void SetAlternateRowColour(const wxColour& colour);
+
+    /**
         Determines which item (if any) is at the specified point, giving details
         in @a flags. Returns index of the item or @c wxNOT_FOUND if no item is at
         the specified point.
Index: samples/listctrl/listtest.cpp
===================================================================
--- samples/listctrl/listtest.cpp	(revision 72394)
+++ samples/listctrl/listtest.cpp	(working copy)
@@ -137,6 +137,7 @@
     EVT_MENU(LIST_SORT, MyFrame::OnSort)
     EVT_MENU(LIST_SET_FG_COL, MyFrame::OnSetFgColour)
     EVT_MENU(LIST_SET_BG_COL, MyFrame::OnSetBgColour)
+    EVT_MENU(LIST_ROW_LINES, MyFrame::OnSetRowLines)
     EVT_MENU(LIST_TOGGLE_MULTI_SEL, MyFrame::OnToggleMultiSel)
     EVT_MENU(LIST_SHOW_COL_INFO, MyFrame::OnShowColInfo)
     EVT_MENU(LIST_SHOW_SEL_INFO, MyFrame::OnShowSelInfo)
@@ -262,6 +263,7 @@
     wxMenu *menuCol = new wxMenu;
     menuCol->Append(LIST_SET_FG_COL, wxT("&Foreground colour..."));
     menuCol->Append(LIST_SET_BG_COL, wxT("&Background colour..."));
+    menuCol->AppendCheckItem(LIST_ROW_LINES, "Alternating colours");
 
     wxMenuBar *menubar = new wxMenuBar;
     menubar->Append(menuFile, wxT("&File"));
@@ -335,7 +337,7 @@
 void MyFrame::OnAbout(wxCommandEvent& WXUNUSED(event))
 {
     wxMessageDialog dialog(this, wxT("List test sample\nJulian Smart (c) 1997"),
-            wxT("About list test"), wxOK|wxCANCEL);
+            wxT("About list test"));
 
     dialog.ShowModal();
 }
@@ -437,6 +439,11 @@
             (m_listCtrl->GetWindowStyleFlag() & wxLC_VIRTUAL)) )
 #endif
     {
+        wxColour alternateRowColour;
+        if (m_listCtrl)
+        {
+            alternateRowColour = m_listCtrl->GetAlternateRowColour();
+        }
         delete m_listCtrl;
 
         m_listCtrl = new MyListCtrl(m_panel, LIST_CTRL,
@@ -468,6 +475,10 @@
             default:
                 wxFAIL_MSG( wxT("unknown listctrl mode") );
         }
+        if (alternateRowColour.IsOk())
+        {
+            m_listCtrl->SetAlternateRowColour(alternateRowColour);
+        }
     }
 
     DoSize();
@@ -837,6 +848,24 @@
     m_listCtrl->Refresh();
 }
 
+void MyFrame::OnSetRowLines(wxCommandEvent& event)
+{
+    if (event.IsChecked())
+    {
+        if (!m_listCtrl->HasFlag(wxLC_VIRTUAL))
+        {
+            wxMessageBox(_("Switch to virtual view to see alternating colours, and to avoid the wxASSERT coming now"));
+        }
+
+        m_listCtrl->SetAlternateRowColour(); // enable alternating row colours
+    }
+    else
+    {
+        m_listCtrl->SetAlternateRowColour(wxColour());  // disable alternating row colours
+    }
+    m_listCtrl->Refresh();
+}
+
 void MyFrame::OnAdd(wxCommandEvent& WXUNUSED(event))
 {
     m_listCtrl->InsertItem(m_listCtrl->GetItemCount(), wxT("Appended item"));
@@ -1329,7 +1358,7 @@
         return &s_attrHighlight;
     }
 
-    return item % 2 ? NULL : (wxListItemAttr *)&m_attr;
+    return wxListCtrl::OnGetItemAttr(item);
 }
 
 void MyListCtrl::InsertItemInReportView(int i)
Index: samples/listctrl/listtest.h
===================================================================
--- samples/listctrl/listtest.h	(revision 72394)
+++ samples/listctrl/listtest.h	(working copy)
@@ -37,8 +37,7 @@
                const wxPoint& pos,
                const wxSize& size,
                long style)
-        : wxListCtrl(parent, id, pos, size, style),
-          m_attr(*wxBLUE, *wxLIGHT_GREY, wxNullFont)
+        : wxListCtrl(parent, id, pos, size, style)
         {
             m_updated = -1;
 
@@ -88,8 +87,6 @@
     virtual int OnGetItemColumnImage(long item, long column) const;
     virtual wxListItemAttr *OnGetItemAttr(long item) const;
 
-    wxListItemAttr m_attr;
-
     long m_updated;
 
 
@@ -135,6 +132,7 @@
     void OnSort(wxCommandEvent& event);
     void OnSetFgColour(wxCommandEvent& event);
     void OnSetBgColour(wxCommandEvent& event);
+    void OnSetRowLines(wxCommandEvent& event);
     void OnToggleMultiSel(wxCommandEvent& event);
     void OnShowColInfo(wxCommandEvent& event);
     void OnShowSelInfo(wxCommandEvent& event);
@@ -217,6 +215,7 @@
     LIST_FIND,
     LIST_SET_FG_COL,
     LIST_SET_BG_COL,
+    LIST_ROW_LINES,
     LIST_TOGGLE_MULTI_SEL,
     LIST_TOGGLE_HEADER,
     LIST_TOGGLE_FIRST,
Index: src/common/listctrlcmn.cpp
===================================================================
--- src/common/listctrlcmn.cpp	(revision 72394)
+++ src/common/listctrlcmn.cpp	(working copy)
@@ -216,4 +216,30 @@
     return wxSize(totalWidth, 10*dc.GetCharHeight());
 }
 
+void wxListCtrlBase::SetAlternateRowColour(const wxColour& colour)
+{
+    wxASSERT(HasFlag(wxLC_VIRTUAL));
+    m_alternateRowColour.SetBackgroundColour(colour);
+}
+
+void wxListCtrlBase::SetAlternateRowColour()
+{
+    wxASSERT(HasFlag(wxLC_VIRTUAL));
+    // Determine the alternate rows colour automatically from the
+    // background colour.
+    const wxColour bgColour = GetBackgroundColour();
+
+    // Depending on the background, alternate row color
+    // will be 3% more dark or 50% brighter.
+    int alpha = (bgColour.GetRGB() > 0x808080) ? 97 : 150;
+    m_alternateRowColour.SetBackgroundColour(bgColour.ChangeLightness(alpha));
+}
+
+wxListItemAttr *wxListCtrlBase::OnGetItemAttr(long item) const
+{
+    return (m_alternateRowColour.GetBackgroundColour().IsOk() && (item % 2))
+        ? wxConstCast(&m_alternateRowColour, wxListItemAttr)
+        : NULL; // no attributes by default
+}
+
 #endif // wxUSE_LISTCTRL
Index: src/generic/listctrl.cpp
===================================================================
--- src/generic/listctrl.cpp	(revision 72394)
+++ src/generic/listctrl.cpp	(working copy)
@@ -5242,13 +5242,12 @@
 }
 
 wxListItemAttr *
-wxGenericListCtrl::OnGetItemAttr(long WXUNUSED_UNLESS_DEBUG(item)) const
+wxGenericListCtrl::OnGetItemAttr(long item) const
 {
     wxASSERT_MSG( item >= 0 && item < GetItemCount(),
                   wxT("invalid item index in OnGetItemAttr()") );
 
-    // no attributes by default
-    return NULL;
+    return wxListCtrlBase::OnGetItemAttr(item);
 }
 
 void wxGenericListCtrl::SetItemCount(long count)
Index: src/msw/listctrl.cpp
===================================================================
--- src/msw/listctrl.cpp	(revision 72394)
+++ src/msw/listctrl.cpp	(working copy)
@@ -3078,13 +3078,12 @@
     return -1;
 }
 
-wxListItemAttr *wxListCtrl::OnGetItemAttr(long WXUNUSED_UNLESS_DEBUG(item)) const
+wxListItemAttr *wxListCtrl::OnGetItemAttr(long item) const
 {
     wxASSERT_MSG( item >= 0 && item < GetItemCount(),
                   wxT("invalid item index in OnGetItemAttr()") );
 
-    // no attributes by default
-    return NULL;
+    return wxListCtrlBase::OnGetItemAttr(item);
 }
 
 wxListItemAttr *wxListCtrl::DoGetItemColumnAttr(long item, long column) const
Index: src/os2/listctrl.cpp
===================================================================
--- src/os2/listctrl.cpp	(revision 72394)
+++ src/os2/listctrl.cpp	(working copy)
@@ -2589,16 +2589,13 @@
 } // end of wxListCtrl::OnGetItemColumnImage
 
 wxListItemAttr* wxListCtrl::OnGetItemAttr (
-  long                              WXUNUSED_UNLESS_DEBUG(lItem)
+  long                              lItem
 ) const
 {
     wxASSERT_MSG( lItem >= 0 && lItem < GetItemCount(),
                   wxT("invalid item index in OnGetItemAttr()") );
 
-    //
-    // No attributes by default
-    //
-    return NULL;
+    return wxListCtrlBase::OnGetItemAttr(lItem);
 } // end of wxListCtrl::OnGetItemAttr
 
 void wxListCtrl::SetItemCount (
Index: src/osx/carbon/listctrl_mac.cpp
===================================================================
--- src/osx/carbon/listctrl_mac.cpp	(revision 72394)
+++ src/osx/carbon/listctrl_mac.cpp	(working copy)
@@ -2308,13 +2308,12 @@
     return -1;
 }
 
-wxListItemAttr *wxListCtrl::OnGetItemAttr(long WXUNUSED_UNLESS_DEBUG(item)) const
+wxListItemAttr *wxListCtrl::OnGetItemAttr(long item) const
 {
     wxASSERT_MSG( item >= 0 && item < GetItemCount(),
                   wxT("invalid item index in OnGetItemAttr()") );
 
-    // no attributes by default
-    return NULL;
+    return wxListCtrlBase::OnGetItemAttr(item);
 }
 
 void wxListCtrl::SetItemCount(long count)

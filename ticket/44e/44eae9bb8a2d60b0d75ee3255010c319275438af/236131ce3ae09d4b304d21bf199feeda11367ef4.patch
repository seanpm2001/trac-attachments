Index: include/wx/aui/auibar.h
===================================================================
--- include/wx/aui/auibar.h	(revision 75795)
+++ include/wx/aui/auibar.h	(working copy)
@@ -15,7 +15,9 @@
 
 #if wxUSE_AUI
 
+#include "wx/bitmap.h"
 #include "wx/control.h"
+#include "wx/menu.h"
 #include "wx/sizer.h"
 #include "wx/pen.h"
 
@@ -125,12 +127,22 @@
         m_state = 0;  // normal, enabled
         m_proportion = 0;
         m_active = true;
-        m_dropDown = true;
+        m_dropDown = false;
         m_sticky = true;
         m_userData = 0;
         m_alignment = wxALIGN_CENTER;
+#if wxUSE_MENUS
+        m_dropdownMenu = NULL;
+#endif        
     }
 
+    ~wxAuiToolBarItem()
+    {
+#if wxUSE_MENUS
+        wxDELETE(m_dropdownMenu);
+#endif
+    }
+
     wxAuiToolBarItem(const wxAuiToolBarItem& c)
     {
         Assign(c);
@@ -163,6 +175,11 @@
         m_sticky = c.m_sticky;
         m_userData = c.m_userData;
         m_alignment = c.m_alignment;
+#if wxUSE_MENUS
+        //dropdown menu is not a property and belongs to the item for which it was defined
+        m_dropdownMenu = NULL;
+#endif        
+
     }
 
 
@@ -172,7 +189,11 @@
     void SetId(int newId) { m_toolId = newId; }
     int GetId() const { return m_toolId; }
 
-    void SetKind(int newKind) { m_kind = newKind; }
+    void SetKind(int newKind)
+    {
+        m_kind = newKind;
+        m_dropDown = (newKind == wxITEM_DROPDOWN);
+    }
     int GetKind() const { return m_kind; }
 
     void SetState(int newState) { m_state = newState; }
@@ -213,13 +234,21 @@
 
     void SetHasDropDown(bool b)
     {
-        wxCHECK_RET( !b || m_kind == wxITEM_NORMAL,
-                     wxS("Only normal tools can have drop downs") );
-
+        b ? m_kind = wxITEM_DROPDOWN : m_kind = wxITEM_NORMAL;
         m_dropDown = b;
     }
+    bool HasDropDown() const { return (m_kind == wxITEM_DROPDOWN); }
 
-    bool HasDropDown() const { return m_dropDown; }
+#if wxUSE_MENUS
+    void SetDropdownMenu(wxMenu *menu)
+    {
+        wxDELETE(m_dropdownMenu);
+        m_dropdownMenu = menu;
+        if (menu)
+            SetKind(wxITEM_DROPDOWN);
+    }
+    wxMenu *GetDropdownMenu() const { return m_dropdownMenu; }
+#endif
 
     void SetSticky(bool b) { m_sticky = b; }
     bool IsSticky() const { return m_sticky; }
@@ -232,9 +261,9 @@
 
 private:
 
-    wxWindow* m_window;          // item's associated window
-    wxString m_label;            // label displayed on the item
-    wxBitmap m_bitmap;           // item's bitmap
+    wxWindow* m_window;         // item's associated window
+    wxString m_label;           // label displayed on the item
+    wxBitmap m_bitmap;          // item's bitmap
     wxBitmap m_disabledBitmap;  // item's disabled bitmap
     wxBitmap m_hoverBitmap;     // item's hover bitmap
     wxString m_shortHelp;       // short help (for tooltip)
@@ -242,15 +271,18 @@
     wxSizerItem* m_sizerItem;   // sizer item
     wxSize m_minSize;           // item's minimum size
     int m_spacerPixels;         // size of a spacer
-    int m_toolId;                // item's id
-    int m_kind;                  // item's kind
-    int m_state;                 // state
-    int m_proportion;            // proportion
-    bool m_active;               // true if the item is currently active
-    bool m_dropDown;             // true if the item has a dropdown button
-    bool m_sticky;               // overrides button states if true (always active)
+    int m_toolId;               // item's id
+    int m_kind;                 // item's kind
+    int m_state;                // state
+    int m_proportion;           // proportion
+    bool m_active;              // true if the item is currently active
+    bool m_dropDown;            // true if the item has a dropdown button
+    bool m_sticky;              // overrides button states if true (always active)
     long m_userData;            // user-specified data
-    int m_alignment;             // sizer alignment flag, defaults to wxCENTER, may be wxEXPAND or any other
+    int m_alignment;            // sizer alignment flag, defaults to wxCENTER, may be wxEXPAND or any other
+#if wxUSE_MENUS
+    wxMenu *m_dropdownMenu;     // drop down menu
+#endif
 };
 
 #ifndef SWIG
@@ -343,6 +375,12 @@
     virtual int ShowDropDown(
                          wxWindow* wnd,
                          const wxAuiToolBarItemArray& items) = 0;
+#if wxUSE_MENUS
+    virtual int ShowDropDown(
+                         wxWindow* wnd,
+                         wxMenu *menu,
+                         const wxPoint& point = wxDefaultPosition) = 0;
+#endif
 };
 
 
@@ -427,6 +465,9 @@
 
     virtual int ShowDropDown(wxWindow* wnd,
                              const wxAuiToolBarItemArray& items);
+    virtual int ShowDropDown(wxWindow* wnd,
+                             wxMenu *menu,
+                             const wxPoint& point = wxDefaultPosition);
 
 protected:
 
@@ -567,6 +608,10 @@
     void SetToolDropDown(int toolId, bool dropdown);
     bool GetToolDropDown(int toolId) const;
 
+#if wxUSE_MENUS
+    bool SetDropdownMenu(int toolid, wxMenu *menu);
+#endif
+
     void SetToolBorderPadding(int padding);
     int  GetToolBorderPadding() const;
 
Index: include/wx/xrc/xh_auitoolb.h
===================================================================
--- include/wx/xrc/xh_auitoolb.h	(revision 75795)
+++ include/wx/xrc/xh_auitoolb.h	(working copy)
@@ -31,18 +31,6 @@
     wxAuiToolBar *m_toolbar;
     wxSize m_toolSize;
 
-    class MenuHandler : public wxEvtHandler
-    {
-    public:
-        void OnDropDown(wxAuiToolBarEvent& event);
-        unsigned RegisterMenu(wxAuiToolBar *toobar, int id, wxMenu *menu);
-
-    private:
-        wxVector<wxMenu*> m_menus;
-    };
-
-    MenuHandler m_menuHandler;
-
     wxDECLARE_DYNAMIC_CLASS(wxAuiToolBarXmlHandler);
 };
 
Index: interface/wx/aui/auibar.h
===================================================================
--- interface/wx/aui/auibar.h	(revision 75795)
+++ interface/wx/aui/auibar.h	(working copy)
@@ -197,6 +197,11 @@
     wxAuiToolBarItem();
 
     /**
+       Default Constructor. Destroys the drop down menu if defined.
+    */
+    ~wxAuiToolBarItem()
+    
+    /**
       Assigns the properties of the wxAuiToolBarItem "c" to this.
     */
     wxAuiToolBarItem(const wxAuiToolBarItem& c);
@@ -231,6 +236,15 @@
 
     /**
       Sets the wxAuiToolBarItem kind.
+      Are supported all values of type wxItemKind but internally an additional enum is defined:
+      <pre>
+      enum
+      {
+          wxITEM_CONTROL = wxITEM_MAX,
+          wxITEM_LABEL,
+          wxITEM_SPACER
+      };
+      </pre>
     */
     void SetKind(int new_kind);
 
@@ -348,19 +362,26 @@
     bool IsActive() const;
 
     /**
-        Set whether this tool has a drop down button.
-
-        This is only valid for wxITEM_NORMAL tools.
+        Sets the kind of the item to wxITEM_DROPDOWN.
     */
     void SetHasDropDown(bool b);
     /**
-        Returns whether the toolbar item has an associated drop down button.
+        Returns whether the toolbar is of kind wxITEM_DROPDOWN and thus has an associated drop down button.
     */
     bool HasDropDown() const;
 
     /**
+        Sets the dropdown menu.
+        The tool itself will delete the menu when it's no longer needed.
 
+        If you define a EVT_AUITOOLBAR_TOOL_DROPDOWN() handler in your program, you must
+        call wxEvent::Skip() from it or the menu won't be displayed.
     */
+    bool SetDropdownMenu(wxMenu* menu);
+
+    /**
+
+    */
     void SetSticky(bool b);
     /**
 
@@ -474,6 +495,10 @@
     virtual int ShowDropDown(
                          wxWindow* wnd,
                          const wxAuiToolBarItemArray& items) = 0;
+    virtual int ShowDropDown(
+                         wxWindow* wnd,
+                         wxMenu *menu,
+                         const wxPoint& point = wxDefaultPosition) = 0;
 };
 
 
@@ -564,6 +589,13 @@
 
     virtual int ShowDropDown(wxWindow* wnd,
                              const wxAuiToolBarItemArray& items);
+    /**
+      Brings up the menu at the given position related to the given window.
+      If no position is given it is calculated with the X mouse position and the bottom of the window as Y position.
+    */                             
+    virtual int ShowDropDown(wxWindow* wnd,
+                             wxMenu *menu,
+                             const wxPoint& point = wxDefaultPosition);
 };
 
 
@@ -742,6 +774,15 @@
     */
     bool GetToolDropDown(int tool_id) const;
 
+    /**
+        Sets the dropdown menu for the tool given by its @e id. The tool itself
+        will delete the menu when it's no longer needed.
+
+        If you define a EVT_AUITOOLBAR_TOOL_DROPDOWN() handler in your program, you must
+        call wxEvent::Skip() from it or the menu won't be displayed.
+    */
+    bool SetDropdownMenu(int id, wxMenu* menu);
+
     void SetToolBorderPadding(int padding);
     int  GetToolBorderPadding() const;
 
Index: samples/aui/auidemo.cpp
===================================================================
--- samples/aui/auidemo.cpp	(revision 75795)
+++ samples/aui/auidemo.cpp	(working copy)
@@ -1500,7 +1500,7 @@
         pt = ScreenToClient(pt);
 
 
-        PopupMenu(&menuPopup, pt);
+        tb->GetArtProvider()->ShowDropDown(this, &menuPopup, pt);
 
 
         // make sure the button is "un-stuck"
Index: src/aui/auibar.cpp
===================================================================
--- src/aui/auibar.cpp	(revision 75795)
+++ src/aui/auibar.cpp	(working copy)
@@ -754,17 +754,29 @@
         }
     }
 
+    return ShowDropDown(wnd, &menuPopup);
+}
+
+int wxAuiDefaultToolBarArt::ShowDropDown(wxWindow* wnd, wxMenu *menu, const wxPoint& point)
+{
+    if (!wnd || !menu)
+        return wxID_ANY;
+
     // find out where to put the popup menu of window items
-    wxPoint pt = ::wxGetMousePosition();
-    pt = wnd->ScreenToClient(pt);
+    wxPoint pt = point;
+    if (pt == wxDefaultPosition)
+    {
+        pt = ::wxGetMousePosition();
+        pt = wnd->ScreenToClient(pt);
 
-    // find out the screen coordinate at the bottom of the tab ctrl
-    wxRect cli_rect = wnd->GetClientRect();
-    pt.y = cli_rect.y + cli_rect.height;
+        // find out the screen coordinate at the bottom of the tab ctrl
+        wxRect cli_rect = wnd->GetClientRect();
+        pt.y = cli_rect.y + cli_rect.height;
+    }
 
     ToolbarCommandCapture* cc = new ToolbarCommandCapture;
     wnd->PushEventHandler(cc);
-    wnd->PopupMenu(&menuPopup, pt);
+    wnd->PopupMenu(menu, pt);
     int command = cc->GetCommandId();
     wnd->PopEventHandler(true);
 
@@ -772,8 +784,6 @@
 }
 
 
-
-
 static wxOrientation GetOrientation(long style)
 {
     switch (style & wxAUI_ORIENTATION_MASK)
@@ -963,7 +973,7 @@
     item.m_toolId = tool_id;
     item.m_state = 0;
     item.m_proportion = 0;
-    item.m_kind = kind;
+    item.SetKind(kind);
     item.m_sizerItem = NULL;
     item.m_minSize = wxDefaultSize;
     item.m_userData = 0;
@@ -1285,6 +1295,20 @@
     return item->HasDropDown();
 }
 
+#if wxUSE_MENUS
+bool wxAuiToolBar::SetDropdownMenu(int tool_id, wxMenu* menu)
+{
+    wxAuiToolBarItem* item = FindTool(tool_id);
+    if (!item)
+        return false;
+
+    item->SetDropdownMenu(menu);
+
+    return true;
+}
+#endif
+
+
 void wxAuiToolBar::SetToolSticky(int tool_id, bool sticky)
 {
     // ignore separators
@@ -1891,7 +1915,7 @@
     for (i = 0, count = m_items.GetCount(); i < count; ++i)
     {
         wxAuiToolBarItem& item = m_items.Item(i);
-        wxSizerItem* m_sizerItem = NULL;
+        wxSizerItem* sizerItem = NULL;
 
         switch (item.m_kind)
         {
@@ -1898,7 +1922,7 @@
             case wxITEM_LABEL:
             {
                 wxSize size = m_art->GetLabelSize(dc, this, item);
-                m_sizerItem = sizer->Add(size.x + (m_toolBorderPadding*2),
+                sizerItem = sizer->Add(size.x + (m_toolBorderPadding*2),
                                         size.y + (m_toolBorderPadding*2),
                                         item.m_proportion,
                                         item.m_alignment);
@@ -1912,10 +1936,11 @@
 
             case wxITEM_CHECK:
             case wxITEM_NORMAL:
+            case wxITEM_DROPDOWN:
             case wxITEM_RADIO:
             {
                 wxSize size = m_art->GetToolSize(dc, this, item);
-                m_sizerItem = sizer->Add(size.x + (m_toolBorderPadding*2),
+                sizerItem = sizer->Add(size.x + (m_toolBorderPadding*2),
                                         size.y + (m_toolBorderPadding*2),
                                         0,
                                         item.m_alignment);
@@ -1931,9 +1956,9 @@
             case wxITEM_SEPARATOR:
             {
                 if (horizontal)
-                    m_sizerItem = sizer->Add(separatorSize, 1, 0, wxEXPAND);
+                    sizerItem = sizer->Add(separatorSize, 1, 0, wxEXPAND);
                 else
-                    m_sizerItem = sizer->Add(1, separatorSize, 0, wxEXPAND);
+                    sizerItem = sizer->Add(1, separatorSize, 0, wxEXPAND);
 
                 // add tool packing
                 if (i+1 < count)
@@ -1946,19 +1971,19 @@
 
             case wxITEM_SPACER:
                 if (item.m_proportion > 0)
-                    m_sizerItem = sizer->AddStretchSpacer(item.m_proportion);
+                    sizerItem = sizer->AddStretchSpacer(item.m_proportion);
                 else
-                    m_sizerItem = sizer->Add(item.m_spacerPixels, 1);
+                    sizerItem = sizer->Add(item.m_spacerPixels, 1);
                 break;
 
             case wxITEM_CONTROL:
             {
-                //m_sizerItem = sizer->Add(item.m_window, item.m_proportion, wxEXPAND);
-                wxSizerItem* ctrl_m_sizerItem;
+                //sizerItem = sizer->Add(item.m_window, item.m_proportion, wxEXPAND);
+                wxSizerItem* ctrl_sizerItem;
 
                 wxBoxSizer* vert_sizer = new wxBoxSizer(wxVERTICAL);
                 vert_sizer->AddStretchSpacer(1);
-                ctrl_m_sizerItem = vert_sizer->Add(item.m_window, 0, wxEXPAND);
+                ctrl_sizerItem = vert_sizer->Add(item.m_window, 0, wxEXPAND);
                 vert_sizer->AddStretchSpacer(1);
                 if ( (m_windowStyle & wxAUI_TB_TEXT) &&
                      m_toolTextOrientation == wxAUI_TBTOOL_TEXT_BOTTOM &&
@@ -1969,7 +1994,7 @@
                 }
 
 
-                m_sizerItem = sizer->Add(vert_sizer, item.m_proportion, wxEXPAND);
+                sizerItem = sizer->Add(vert_sizer, item.m_proportion, wxEXPAND);
 
                 wxSize min_size = item.m_minSize;
 
@@ -1983,8 +2008,8 @@
 
                 if (min_size.IsFullySpecified())
                 {
-                    m_sizerItem->SetMinSize(min_size);
-                    ctrl_m_sizerItem->SetMinSize(min_size);
+                    sizerItem->SetMinSize(min_size);
+                    ctrl_sizerItem->SetMinSize(min_size);
                 }
 
                 // add tool packing
@@ -1995,7 +2020,7 @@
             }
         }
 
-        item.m_sizerItem = m_sizerItem;
+        item.m_sizerItem = sizerItem;
     }
 
     // add "right" padding
@@ -2427,12 +2452,12 @@
 
         switch ( item.m_kind )
         {
+            case wxITEM_DROPDOWN:
+                m_art->DrawDropDownButton(dc, this, item, item_rect);
+                break;
+
             case wxITEM_NORMAL:
-                // draw a regular or dropdown button
-                if (!item.m_dropDown)
-                    m_art->DrawButton(dc, this, item, item_rect);
-                else
-                    m_art->DrawDropDownButton(dc, this, item, item_rect);
+                 m_art->DrawButton(dc, this, item, item_rect);
                 break;
 
             case wxITEM_CHECK:
@@ -2576,7 +2601,8 @@
 
         int mouse_x = evt.GetX();
         wxRect rect = m_actionItem->m_sizerItem->GetRect();
-        const bool dropDownHit = m_actionItem->m_dropDown &&
+        wxAuiToolBarItem* dropdownItem = m_actionItem->HasDropDown() ? m_actionItem : NULL;
+        const bool dropDownHit = dropdownItem &&
                                  mouse_x >= (rect.x+rect.width-BUTTON_DROPDOWN_WIDTH-1) &&
                                  mouse_x < (rect.x+rect.width);
         e.SetDropDownClicked(dropDownHit);
@@ -2595,8 +2621,23 @@
         }
 
         if(!GetEventHandler()->ProcessEvent(e) || e.GetSkipped())
-            CaptureMouse();
+        {
+            wxMenu *menu = dropdownItem ? dropdownItem->GetDropdownMenu() : NULL;
+            if (dropDownHit && menu)
+            {
+                wxPoint pt = ClientToScreen(rect.GetBottomLeft());
+                pt = GetParent()->ScreenToClient(pt);
 
+                dropdownItem->SetSticky(true);
+                GetArtProvider()->ShowDropDown(GetParent(), menu, pt);
+                dropdownItem->SetSticky(false);
+                Refresh(false);
+                Update();
+            }
+            else
+                CaptureMouse();
+        }
+
         // Ensure hovered item is really ok, as mouse may have moved during
         //  event processing
         wxPoint cursor_pos_after_evt = ScreenToClient(wxGetMousePosition());
@@ -2781,7 +2822,8 @@
 
     if (m_actionItem && hitItem == m_actionItem)
     {
-        if (hitItem->m_kind == wxITEM_NORMAL)
+        if (hitItem->m_kind == wxITEM_NORMAL ||
+            hitItem->m_kind == wxITEM_DROPDOWN)
         {
             wxAuiToolBarEvent e(wxEVT_AUITOOLBAR_MIDDLE_CLICK, m_actionItem->m_toolId);
             e.SetEventObject(this);
Index: src/xrc/xh_auitoolb.cpp
===================================================================
--- src/xrc/xh_auitoolb.cpp	(revision 75795)
+++ src/xrc/xh_auitoolb.cpp	(working copy)
@@ -127,10 +127,7 @@
 
 #if wxUSE_MENUS
         if (menu)
-        {
-            tool->SetHasDropDown(true);
-            tool->SetUserData(m_menuHandler.RegisterMenu(m_toolbar, GetID(), menu));
-        }
+            tool->SetDropdownMenu(menu);
 #endif
 
         return m_toolbar; // must return non-NULL
@@ -225,43 +222,4 @@
             (m_isInside && IsOfClass(node, wxS("separator"))));
 }
 
-void wxAuiToolBarXmlHandler::MenuHandler::OnDropDown(wxAuiToolBarEvent& event)
-{
-    if (event.IsDropDownClicked())
-    {
-        wxAuiToolBar *toobar = wxDynamicCast(event.GetEventObject(), wxAuiToolBar);
-        if (toobar != NULL)
-        {
-            wxAuiToolBarItem *item = toobar->FindTool(event.GetId());
-            if (item != NULL)
-            {
-                wxMenu * const menu = m_menus[item->GetUserData()];
-                if (menu != NULL)
-                {
-                    wxRect rect = item->GetSizerItem()->GetRect();
-                    toobar->PopupMenu(menu, rect.GetRight() - 10, rect.GetBottom());
-                }
-            }
-        }
-    }
-    else
-    {
-        event.Skip();
-    }
-}
-
-unsigned
-wxAuiToolBarXmlHandler::MenuHandler::RegisterMenu(wxAuiToolBar *toolbar,
-                                                  int id,
-                                                  wxMenu *menu)
- {
-    m_menus.push_back(menu);
-    toolbar->Bind(wxEVT_COMMAND_AUITOOLBAR_TOOL_DROPDOWN,
-                  &wxAuiToolBarXmlHandler::MenuHandler::OnDropDown,
-                  this,
-                  id);
-
-    return m_menus.size() - 1;
-}
-
 #endif // wxUSE_XRC && wxUSE_AUI

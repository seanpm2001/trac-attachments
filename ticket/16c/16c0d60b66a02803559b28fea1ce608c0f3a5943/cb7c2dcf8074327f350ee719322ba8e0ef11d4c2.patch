Index: src/generic/statusbr.cpp
===================================================================
--- src/generic/statusbr.cpp	(revision 70624)
+++ src/generic/statusbr.cpp	(working copy)
@@ -275,7 +275,7 @@
     GetFieldRect(i, rect);
 
     if (rect.GetWidth() <= 0)
-        return;     // happens when the status bar is shrinked in a very small area!
+        return;     // happens when the status bar is shrunk in a very small area!
 
     int style = m_panes[i].GetStyle();
     if (style != wxSB_FLAT)
Index: src/generic/treectlg.cpp
===================================================================
--- src/generic/treectlg.cpp	(revision 70624)
+++ src/generic/treectlg.cpp	(working copy)
@@ -2879,7 +2879,7 @@
                 yOrigin = abs(yOrigin);
                 GetClientSize(&width, &height);
 
-                // Move end points to the begining/end of the view?
+                // Move end points to the beginning/end of the view?
                 if (y_mid < yOrigin)
                     y_mid = yOrigin;
                 if (oldY > yOrigin + height)
Index: src/generic/wizard.cpp
===================================================================
--- src/generic/wizard.cpp	(revision 70624)
+++ src/generic/wizard.cpp	(working copy)
@@ -396,7 +396,7 @@
     // to activate the 'next' button first (create the next button before the back button).
     // The reason is: The user will repeatedly enter information in the wizard pages and then wants to
     // press 'next'. If a user uses mostly the keyboard, he would have to skip the 'back' button
-    // everytime. This is annoying. There is a second reason: RETURN acts as TAB. If the 'next'
+    // every time. This is annoying. There is a second reason: RETURN acts as TAB. If the 'next'
     // button comes first in the TAB order, the user can enter information very fast using the RETURN
     // key to TAB to the next entry field and page. This would not be possible, if the 'back' button
     // was created before the 'next' button.
@@ -782,7 +782,7 @@
     wxCHECK_RET( m_page, wxT("should have a valid current page") );
 
     // ask the current page first: notice that we do it before calling
-    // GetNext/Prev() because the data transfered from the controls of the page
+    // GetNext/Prev() because the data transferred from the controls of the page
     // may change the value returned by these methods
     if ( !m_page->Validate() || !m_page->TransferDataFromWindow() )
     {
Index: src/generic/odcombo.cpp
===================================================================
--- src/generic/odcombo.cpp	(revision 70624)
+++ src/generic/odcombo.cpp	(working copy)
@@ -375,7 +375,7 @@
 
     // The m_combo->SetValue() call above sets m_value to the index of this
     // string. But if there are more identical string, the index is of the
-    // first occurence, which may be wrong, so set the index explicitly here,
+    // first occurrence, which may be wrong, so set the index explicitly here,
     // _after_ the SetValue() call.
     m_value = value;
 
Index: src/generic/grid.cpp
===================================================================
--- src/generic/grid.cpp	(revision 70624)
+++ src/generic/grid.cpp	(working copy)
@@ -419,7 +419,7 @@
     wxASSERT_MSG( (!((num_rows > 0) && (num_cols <= 0)) ||
                   !((num_rows <= 0) && (num_cols > 0)) ||
                   !((num_rows == 0) && (num_cols == 0))),
-                  wxT("wxGridCellAttr::SetSize only takes two postive values or negative/zero values"));
+                  wxT("wxGridCellAttr::SetSize only takes two positive values or negative/zero values"));
 
     m_sizeRows = num_rows;
     m_sizeCols = num_cols;
Index: src/generic/regiong.cpp
===================================================================
--- src/generic/regiong.cpp	(revision 70624)
+++ src/generic/regiong.cpp	(working copy)
@@ -1645,7 +1645,7 @@
         else if (r2->x1 <= x1)
         {
             /*
-             * Subtrahend preceeds minuend: nuke left edge of minuend.
+             * Subtrahend precedes minuend: nuke left edge of minuend.
              */
             x1 = r2->x2;
             if (x1 >= r1->x2)

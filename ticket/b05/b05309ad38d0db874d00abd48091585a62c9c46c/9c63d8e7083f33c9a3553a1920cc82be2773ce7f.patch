diff -bu1 -r wxWindows/demos/bombs/bombs.cpp wxWin/demos/bombs/bombs.cpp
--- wxWindows/demos/bombs/bombs.cpp	2003-09-18 16:33:20.000000000 +0200
+++ wxWin/demos/bombs/bombs.cpp	2003-12-17 19:00:12.000000000 +0100
@@ -4,3 +4,3 @@
 // Author:      P. Foggia 1996
-// Modified by:
+// Modified by: Wlodzimierz Skiba (ABX) 2003
 // Created:     1996
@@ -12,3 +12,3 @@
 #ifdef __GNUG__
-#pragma implementation
+  #pragma implementation
 #endif
@@ -17,2 +17,6 @@
 
+#ifdef __BORLANDC__
+  #pragma hdrstop
+#endif
+
 #ifndef  WX_PRECOMP
@@ -23,7 +27,9 @@
 
-#include <time.h>
 #include <stdlib.h>
+#ifndef __WXWINCE__
+  #include <time.h>
+#endif
 
 #if defined(__WXGTK__) || defined(__WXX11__) || defined(__WXMOTIF__) || defined(__WXMAC__) || defined(__WXMGL__)
-#include "bombs.xpm"
+  #include "bombs.xpm"
 #endif
@@ -32,2 +38,6 @@
 
+#ifdef __WXWINCE__
+  STDAPI_(__int64) CeGetRandomSeed (void);
+#endif
+
 // Called to initialize the program
@@ -35,3 +45,7 @@
 {
+#ifdef __WXWINCE__
+  srand((unsigned)CeGetRandomSeed());
+#else
   srand((unsigned)time(NULL));
+#endif
 
@@ -58,2 +72,3 @@
     EVT_MENU(IDM_RESTART, BombsFrameClass::OnRestart)
+	EVT_CHAR(BombsCanvasClass::OnChar)
     EVT_CLOSE(BombsFrameClass::OnCloseWindow)
@@ -153,2 +168,3 @@
     EVT_MOUSE_EVENTS(BombsCanvasClass::OnEvent)
+	EVT_CHAR(BombsCanvasClass::OnChar)
 END_EVENT_TABLE()
@@ -229,2 +245,4 @@
     field_height=20;
+    field_focus_x = -1;
+    field_focus_y = -1;
 
diff -bu1 -r wxWindows/demos/bombs/bombs.h wxWin/demos/bombs/bombs.h
--- wxWindows/demos/bombs/bombs.h	2003-09-18 16:33:20.000000000 +0200
+++ wxWin/demos/bombs/bombs.h	2003-12-16 21:54:08.000000000 +0100
@@ -4,3 +4,3 @@
 // Author:      P. Foggia 1996
-// Modified by:
+// Modified by: Wlodzimierz Skiba (ABX) 2003
 // Created:     1996
@@ -88,2 +88,3 @@
    int field_width, field_height;
+   int field_focus_x, field_focus_y;
    int x_cell, y_cell;
@@ -99,2 +100,3 @@
  void OnEvent(wxMouseEvent& event);
+ void OnChar(wxKeyEvent& event);
  void UpdateFieldSize();
@@ -116,3 +118,7 @@
 
+#ifdef __WXWINCE__
+#define BOMBS_FONT wxFont(12, wxSWISS, wxNORMAL, wxNORMAL)
+#else
 #define BOMBS_FONT wxFont(14, wxROMAN, wxNORMAL, wxNORMAL)
+#endif
 
diff -bu1 -r wxWindows/demos/bombs/bombs1.cpp wxWin/demos/bombs/bombs1.cpp
--- wxWindows/demos/bombs/bombs1.cpp	2003-09-18 16:33:20.000000000 +0200
+++ wxWin/demos/bombs/bombs1.cpp	2003-12-17 12:32:06.000000000 +0100
@@ -4,3 +4,3 @@
 // Author:      P. Foggia 1996
-// Modified by:
+// Modified by: Wlodzimierz Skiba (ABX) 2003
 // Created:     1996
@@ -17,3 +17,3 @@
 #ifdef __GNUG__
-#pragma implementation
+  #pragma implementation
 #endif
@@ -22,2 +22,6 @@
 
+#ifdef __BORLANDC__
+  #pragma hdrstop
+#endif
+
 #ifndef  WX_PRECOMP
@@ -28,2 +32,4 @@
 
+#define CLIP_VALUE(value,min_value,max_value) value = min( max( value, min_value), max_value)
+
 /*--------  BombCanvasClass::DrawField(dc, xc1, yc1, xc2, yc2)  -------*/
@@ -34,19 +40,22 @@
 void BombsCanvasClass::DrawField(wxDC *dc, int xc1, int yc1, int xc2, int yc2)
-{ int x,y,xmax,ymax;
-  wxChar buf[2];
+{
+  int x,y,xmax,ymax;
+  wxString buf;
   long chw, chh;
 
-  wxColour *wxBlack = wxTheColourDatabase->FindColour(_T("BLACK"));
-  wxColour *wxWhite = wxTheColourDatabase->FindColour(_T("WHITE"));
-  wxColour *wxRed = wxTheColourDatabase->FindColour(_T("RED"));
-  wxColour *wxBlue = wxTheColourDatabase->FindColour(_T("BLUE"));
-  wxColour *wxGrey = wxTheColourDatabase->FindColour(_T("LIGHT GREY"));
-  wxColour *wxGreen = wxTheColourDatabase->FindColour(_T("GREEN"));
-
-  wxPen *blackPen = wxThePenList->FindOrCreatePen(*wxBlack, 1, wxSOLID);
-  wxPen *redPen = wxThePenList->FindOrCreatePen(*wxRed, 1, wxSOLID);
-  wxPen *bluePen = wxThePenList->FindOrCreatePen(*wxBlue, 1, wxSOLID);
-  wxBrush *whiteBrush = wxTheBrushList->FindOrCreateBrush(*wxWhite, wxSOLID);
-  wxBrush *greyBrush = wxTheBrushList->FindOrCreateBrush(*wxGrey, wxSOLID);
-  wxBrush *redBrush = wxTheBrushList->FindOrCreateBrush(*wxRed, wxSOLID);
+  wxColour wxBlack = wxTheColourDatabase->Find(_T("BLACK"));
+  wxColour wxWhite = wxTheColourDatabase->Find(_T("WHITE"));
+  wxColour wxRed = wxTheColourDatabase->Find(_T("RED"));
+  wxColour wxBlue = wxTheColourDatabase->Find(_T("BLUE"));
+  wxColour wxGrey = wxTheColourDatabase->Find(_T("LIGHT GREY"));
+  wxColour wxFocused = wxTheColourDatabase->Find(_T("GREY"));
+  wxColour wxGreen = wxTheColourDatabase->Find(_T("GREEN"));
+
+  wxPen *blackPen = wxThePenList->FindOrCreatePen(wxBlack, 1, wxSOLID);
+  wxPen *redPen = wxThePenList->FindOrCreatePen(wxRed, 1, wxSOLID);
+  wxPen *bluePen = wxThePenList->FindOrCreatePen(wxBlue, 1, wxSOLID);
+  wxBrush *whiteBrush = wxTheBrushList->FindOrCreateBrush(wxWhite, wxSOLID);
+  wxBrush *greyBrush = wxTheBrushList->FindOrCreateBrush(wxGrey, wxSOLID);
+  wxBrush *focusedBrush = wxTheBrushList->FindOrCreateBrush(wxFocused, wxSOLID);
+  wxBrush *redBrush = wxTheBrushList->FindOrCreateBrush(wxRed, wxSOLID);
 
@@ -66,3 +75,2 @@
 
-  buf[1]=_T('\0');
   for(x=xc1; x<=xc2; x++)
@@ -71,2 +79,5 @@
           { dc->SetPen(* blackPen);
+	        if ((x==field_focus_x)&&(y==field_focus_y))
+			  dc->SetBrush(* focusedBrush);
+			else
             dc->SetBrush(* greyBrush);
@@ -74,8 +85,8 @@
                                x_cell*X_UNIT+1, y_cell*Y_UNIT+1);
-            *buf=_T('M');
+            buf=_T("M");
             if (!wxGetApp().Game.IsHidden(x,y) && wxGetApp().Game.IsBomb(x,y))
-              dc->SetTextForeground(*wxBlue);
+              dc->SetTextForeground(wxBlue);
             else
-              dc->SetTextForeground(*wxRed);
-            dc->SetTextBackground(*wxGrey);
+              dc->SetTextForeground(wxRed);
+            dc->SetTextBackground(wxGrey);
             dc->GetTextExtent(buf, &chw, &chh);
@@ -95,2 +106,5 @@
           { dc->SetPen(*blackPen);
+	        if ((x==field_focus_x)&&(y==field_focus_y))
+			  dc->SetBrush(* focusedBrush);
+			else
             dc->SetBrush(*greyBrush);
@@ -104,5 +118,5 @@
                                x_cell*X_UNIT+1, y_cell*Y_UNIT+1);
-            *buf=_T('B');
-            dc->SetTextForeground(* wxBlack);
-            dc->SetTextBackground(* wxRed);
+            buf=_T("B");
+            dc->SetTextForeground(wxBlack);
+            dc->SetTextBackground(wxRed);
             dc->GetTextExtent(buf, &chw, &chh);
@@ -122,2 +136,5 @@
           { dc->SetPen(* blackPen);
+	        if ((x==field_focus_x)&&(y==field_focus_y))
+			  dc->SetBrush(* focusedBrush);
+			else
             dc->SetBrush(* whiteBrush);
@@ -125,10 +142,19 @@
                                x_cell*X_UNIT+1, y_cell*Y_UNIT+1);
-            *buf = (wxGetApp().Game.Get(x,y) & BG_MASK) + _T('0');
-            dc->GetTextExtent(buf, &chw, &chh);
-            switch(*buf)
-              { case _T('0'): dc->SetTextForeground(* wxGreen); break;
-                case _T('1'): dc->SetTextForeground(* wxBlue); break;
-                default:  dc->SetTextForeground(* wxBlack); break;
+			int digit_value = wxGetApp().Game.Get(x,y) & BG_MASK;
+            switch(digit_value)
+              { case 0:
+			      buf = _T("0");
+			      dc->SetTextForeground(wxGreen);
+				  break;
+                case 1: 
+			      buf = _T("1");
+			      dc->SetTextForeground(wxBlue);
+				  break;
+                default:
+			      buf.Printf(_T("%d"),digit_value);
+				  dc->SetTextForeground(wxBlack);
+				  break;
               }
-            dc->SetTextBackground(* wxWhite);
+            dc->GetTextExtent(buf, &chw, &chh);
+            dc->SetTextBackground(wxWhite);
             dc->DrawText( buf,
@@ -210,6 +236,17 @@
   if (x<field_width && y<field_height)
-    { if ( (event.RightDown() || (event.LeftDown() && event.ShiftDown()))
+	{
+		if ( (event.RightDown() || (event.LeftDown() && event.ShiftDown()))
            && (wxGetApp().Game.IsHidden(x,y)
                || wxGetApp().Game.GetRemainingCells()==0))
-        { wxGetApp().Game.Mark(x,y);
+        { 
+            // store previous and current field
+            int prev_focus_x = field_focus_x;
+            int prev_focus_y = field_focus_y;
+			field_focus_x = x;
+            field_focus_y = y;
+			// adjust range
+            CLIP_VALUE( prev_focus_x, 0, field_width - 1 );
+            CLIP_VALUE( prev_focus_y, 0, field_height - 1 );
+            RefreshField(prev_focus_x, prev_focus_y, prev_focus_x, prev_focus_y);
+		    wxGetApp().Game.Mark(x,y);
           RefreshField(x, y, x, y);
@@ -219,3 +256,13 @@
                && !wxGetApp().Game.IsMarked(x,y))
-        { Uncover(x,y);
+        { 
+            // store previous and current field
+            int prev_focus_x = field_focus_x;
+            int prev_focus_y = field_focus_y;
+			field_focus_x = x;
+            field_focus_y = y;
+			// adjust range
+            CLIP_VALUE( prev_focus_x, 0, field_width - 1 );
+            CLIP_VALUE( prev_focus_y, 0, field_height - 1 );
+            RefreshField(prev_focus_x, prev_focus_y, prev_focus_x, prev_focus_y);
+            Uncover(x,y);
          return;
@@ -225 +272,57 @@
 
+void BombsCanvasClass::OnChar(wxKeyEvent& event)
+{
+    int keyCode = event.GetKeyCode();
+	int prev_focus_x = field_focus_x;
+	int prev_focus_y = field_focus_y;
+    switch(keyCode)
+    {
+
+    case WXK_RIGHT:
+		field_focus_x++;
+	    CLIP_VALUE( field_focus_y, 0, field_height - 1 );
+		if( field_focus_x >= field_width ) field_focus_x = 0;
+        break;
+
+    case WXK_LEFT:
+		field_focus_x--;
+	    CLIP_VALUE( field_focus_y, 0, field_height - 1 );
+		if( field_focus_x < 0 ) field_focus_x = field_width - 1;
+        break;
+
+    case WXK_DOWN:
+	    CLIP_VALUE( field_focus_x, 0, field_width - 1 );
+		field_focus_y++;
+		if( field_focus_y >= field_height ) field_focus_y = 0;
+        break;
+
+    case WXK_UP:
+	    CLIP_VALUE( field_focus_x, 0, field_width - 1 );
+		field_focus_y--;
+		if( field_focus_y < 0 ) field_focus_y = field_height - 1;
+        break;
+
+    case WXK_RETURN:
+	    CLIP_VALUE( prev_focus_x, 0, field_width - 1 );
+	    CLIP_VALUE( prev_focus_y, 0, field_height - 1 );
+		if((prev_focus_x == field_focus_x) &&
+		   (prev_focus_y == field_focus_y) &&
+		   (wxGetApp().Game.IsHidden( field_focus_x, field_focus_y)))
+		{
+			wxGetApp().Game.Mark( field_focus_x, field_focus_y);
+			if(!wxGetApp().Game.IsMarked(field_focus_x, field_focus_y))
+			    Uncover( field_focus_x, field_focus_y);
+            RefreshField(field_focus_x, field_focus_y, field_focus_x, field_focus_y);
+		}
+		break;
+	default:
+        event.Skip();
+
+	}
+	if((prev_focus_x != field_focus_x) || (prev_focus_y != field_focus_y))
+	{
+		// refresh previous field and focused field
+		RefreshField(prev_focus_x, prev_focus_y, prev_focus_x, prev_focus_y);
+		RefreshField(field_focus_x, field_focus_y, field_focus_x, field_focus_y);
+	}
+}
diff -bu1 -r wxWindows/demos/bombs/game.cpp wxWin/demos/bombs/game.cpp
--- wxWindows/demos/bombs/game.cpp	2000-01-08 16:27:36.000000000 +0100
+++ wxWin/demos/bombs/game.cpp	2003-12-16 21:53:54.000000000 +0100
@@ -4,3 +4,3 @@
 // Author:      P. Foggia 1996
-// Modified by:
+// Modified by: Wlodzimierz Skiba (ABX) 2003
 // Created:     1996
@@ -12,3 +12,3 @@
 #ifdef __GNUG__
-#pragma implementation
+  #pragma implementation
 #endif
@@ -17,2 +17,6 @@
 
+#ifdef __BORLANDC__
+  #pragma hdrstop
+#endif
+
 #ifndef  WX_PRECOMP
diff -bu1 -r wxWindows/demos/bombs/game.h wxWin/demos/bombs/game.h
--- wxWindows/demos/bombs/game.h	2000-01-08 16:27:36.000000000 +0100
+++ wxWin/demos/bombs/game.h	2003-12-16 21:55:08.000000000 +0100
@@ -1 +1,12 @@
+///////////////////////////////////////////////////////////////////////////////
+// Name:        game.h
+// Purpose:     Bombs game
+// Author:      P. Foggia 1996
+// Modified by: Wlodzimierz Skiba (ABX) 2003
+// Created:     1996
+// RCS-ID:      $Id: bombs.h,v 1.6 2003/09/18 13:33:20 JS Exp $
+// Copyright:   (c) 1996 P. Foggia
+// Licence:     wxWindows licence
+///////////////////////////////////////////////////////////////////////////////
+
 //---------------------------------------------------------------

 	  	 

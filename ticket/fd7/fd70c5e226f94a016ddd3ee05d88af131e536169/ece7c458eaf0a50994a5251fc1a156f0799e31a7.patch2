diff -ru2 -xCVS -x.#* -x*.orig -x*.rej -x*~ --new-file Copy of wxWindows\docs\latex\wx\category.tex wxWindows\docs\latex\wx\category.tex
--- Copy of wxWindows\docs\latex\wx\category.tex    Sun Sep 01 11:49:31 2002
+++ wxWindows\docs\latex\wx\category.tex    Mon Aug 26 15:52:33 2002
@@ -367,15 +367,12 @@
 \overview{Overview}{ipcoverview}

-wxWindows provides a simple interprocess communications facilities
-based on DDE.
+wxWindows provides simple interprocess communications facilities
+based on Windows DDE, but available on most platforms using TCP.

 \twocolwidtha{6cm}
 \begin{twocollist}\itemsep=0pt
-\twocolitem{\helpref{wxDDEClient}{wxddeclient}}{Represents a client}
-\twocolitem{\helpref{wxDDEConnection}{wxddeconnection}}{Represents the connection between a client and a server}
-\twocolitem{\helpref{wxDDEServer}{wxddeserver}}{Represents a server}
-\twocolitem{\helpref{wxTCPClient}{wxtcpclient}}{Represents a client}
-\twocolitem{\helpref{wxTCPConnection}{wxtcpconnection}}{Represents the connection between a client and a server}
-\twocolitem{\helpref{wxTCPServer}{wxtcpserver}}{Represents a server}
+\twocolitem{\helpref{wxClient}{wxddeclient}}{Represents a client}
+\twocolitem{\helpref{wxConnection}{wxddeconnection}}{Represents the connection between a client and a server}
+\twocolitem{\helpref{wxServer}{wxddeserver}}{Represents a server}
 %\twocolitem{\helpref{wxSocketHandler}{wxsockethandler}}{Represents a socket handler}
 \end{twocollist}
@@ -624,3 +621,2 @@
 \twocolitem{\helpref{wxSingleInstanceChecker}{wxsingleinstancechecker}}{Check that only single program instance is running}
 \end{twocollist}
-
diff -ru2 -xCVS -x.#* -x*.orig -x*.rej -x*~ --new-file Copy of wxWindows\docs\latex\wx\classes.tex wxWindows\docs\latex\wx\classes.tex
--- Copy of wxWindows\docs\latex\wx\classes.tex Sun Sep 01 11:49:31 2002
+++ wxWindows\docs\latex\wx\classes.tex Mon Aug 26 16:56:46 2002
@@ -30,4 +30,5 @@
 \input choice.tex
 \input clasinfo.tex
+\input ipcclint.tex
 \input clientdc.tex
 \input clientdat.tex
@@ -43,4 +44,5 @@
 \input conditn.tex
 \input config.tex
+\input ipcconn.tex
 \input cshelp.tex
 \input control.tex
@@ -63,7 +65,4 @@
 \input db.tex
 \input dc.tex
-\input ddeclint.tex
-\input ddeconn.tex
-\input ddeservr.tex
 \input debugcxt.tex
 \input dialog.tex
@@ -249,4 +248,5 @@
 \input scrlwevt.tex
 \input semaphor.tex
+\input ipcservr.tex
 \input hprovsmp.tex
 \input sngchdlg.tex
@@ -286,7 +286,4 @@
 \input tabevent.tex
 \input taskbar.tex
-\input tcpclint.tex
-\input tcpconn.tex
-\input tcpservr.tex
 \input tempfile.tex
 \input text.tex
@@ -326,3 +323,2 @@
 \input zipstrm.tex
 \input strmzlib.tex
-
diff -ru2 -xCVS -x.#* -x*.orig -x*.rej -x*~ --new-file Copy of wxWindows\docs\latex\wx\tipc.tex wxWindows\docs\latex\wx\tipc.tex
--- Copy of wxWindows\docs\latex\wx\tipc.tex    Sun Sep 01 11:49:32 2002
+++ wxWindows\docs\latex\wx\tipc.tex    Fri Aug 23 22:27:11 2002
@@ -1,66 +1,74 @@
 \section{Interprocess communication overview}\label{ipcoverview}

-Classes: \helpref{wxDDEServer}{wxddeserver}, \helpref{wxDDEConnection}{wxddeconnection},
-\helpref{wxDDEClient}{wxddeclient},
-\helpref{wxTCPServer}{wxtcpserver}, \helpref{wxTCPConnection}{wxtcpconnection},
-\helpref{wxTCPClient}{wxtcpclient}
-
-wxWindows has a number of different classes to help with interprocess communication
-and network programming. This section only discusses one family of classes - the DDE-like
-protocol - but here's a list of other useful classes:
+Classes: \helpref{wxServer}{wxddeserver},
+\helpref{wxConnection}{wxddeconnection},
+\helpref{wxClient}{wxddeclient}
+%\helpref{wxTCPServer}{wxtcpserver}, \helpref{wxTCPConnection}{wxtcpconnection},
+%\helpref{wxTCPClient}{wxtcpclient}
+
+wxWindows has a number of different classes to help with
+interprocess communication and network programming. This section
+only discusses one family of classes -- the DDE-like protocol --
+but here's a list of other useful classes:

 \begin{itemize}\itemsep=0pt
-\item \helpref{wxSocketEvent}{wxsocketevent},
-\helpref{wxSocketBase}{wxsocketbase},
-\helpref{wxSocketClient}{wxsocketclient},
+\item \helpref{wxSocketEvent}{wxsocketevent},
+\helpref{wxSocketBase}{wxsocketbase},
+\helpref{wxSocketClient}{wxsocketclient},
 \helpref{wxSocketServer}{wxsocketserver}: classes for the low-level TCP/IP API.
-\item \helpref{wxProtocol}{wxprotocol}, \helpref{wxURL}{wxurl}, \helpref{wxFTP}{wxftp}, wxHTTP: classes
+\item \helpref{wxProtocol}{wxprotocol}, \helpref{wxURL}{wxurl}, \helpref{wxFTP}{wxftp}, \helpref{wxHTTP}{wxhttp}: classes
 for programming popular Internet protocols.
 \end{itemize}

-Further information on these classes will be available in due course.
+wxWindows' DDE-like protocol is a high-level protocol based on
+Windows DDE. There are two implementations of this DDE-like
+protocol: one using real DDE running on Windows only, and another
+using TCP/IP (sockets) that runs on most platforms. Since the API
+and virtually all of the behaviour is the same apart from the
+names of the classes, you should find it easy to switch between
+the two implementations.
+
+Notice that by including {\tt <wx/ipc.h>} you may define
+convenient synonyms for the IPC classes: {\tt wxServer} for either
+{\tt wxDDEServer} or {\tt wxTCPServer} depending on whether
+DDE-based or socket-based implementation is used and the same
+thing for {\tt wxClient} and {\tt wxConnection}.
+
+By default, DDE implementation is used under Windows. DDE works
+only within one computer. If you want to use IPC between
+different workstations you should define {\tt
+wxUSE\_DDE\_FOR\_IPC} as $0$ before including this header -- this
+will force using TCP/IP implementation even under Windows.
+
+
+The following description refers to wx... but remember that the
+equivalent wxTCP... and wxDDE... classes can be used in much the
+same way.

-Notice that by including {\tt <wx/ipc.h>} you may define convnient synonyms for
-the IPC classes: {\tt wxServer} for either {\tt wxDDEServer} or
-{\tt wxTCPServer} depending on whether DDE-based or socket-based implementation
-is used and the same thing for {\tt wxClient} and {\tt wxConnection}. By
-default, DDE implementation is used under Windows. If you want to use IPC
-between the different workstations you should define {\tt wxUSE\_DDE\_FOR\_IPC}
-as $0$ before including this header -- this will force using TCP/IP
-implementation even under Windows.
-
-
-wxWindows has a high-level protocol based on Windows DDE.
-There are two implementations of this DDE-like protocol:
-one using real DDE running on Windows only, and another using TCP/IP (sockets) that runs
-on most platforms. Since the API is the same apart from the names of the classes, you
-should find it easy to switch between the two implementations.
-
-The following description refers to 'DDE' but remember that the equivalent wxTCP... classes
-can be used in much the same way.
-
-Three classes are central to the DDE API:
+Three classes are central to the DDE-like API:

 \begin{enumerate}\itemsep=0pt
-\item wxDDEClient. This represents the client application, and is used
+\item wxClient. This represents the client application, and is used
 only within a client program.
-\item wxDDEServer. This represents the server application, and is used
+\item wxServer. This represents the server application, and is used
 only within a server program.
-\item wxDDEConnection. This represents the connection from the current
-client or server to the other application (server or client), and can be used
-in both server and client programs. Most DDE
-transactions operate on this object.
+\item wxConnection. This represents the connection from the
+client to the server - both the client and the server use an
+instance of this class, one per connection. Most DDE transactions
+operate on this object.
 \end{enumerate}

-Messages between applications are usually identified by three variables:
-connection object, topic name and item name.  A data string is a fourth
-element of some messages. To create a connection (a conversation in
-Windows parlance), the client application sends the message
-MakeConnection to the client object, with a string service name to
-identify the server and a topic name to identify the topic for the
-duration of the connection. Under Unix, the service name may be either an
-integer port identifier in which case an Internet domain socket will be used
-for the communications or a valid file name (which shouldn't exist and will be
-deleted afterwards) in which case a Unix domain socket is created.
+Messages between applications are usually identified by three
+variables: connection object, topic name and item name.  A data
+string is a fourth element of some messages. To create a
+connection (a conversation in Windows parlance), the client
+application uses wxClient::MakeConnection to send a message to the
+server object, with a string service name to identify the server
+and a topic name to identify the topic for the duration of the
+connection. Under Unix, the service name may be either an integer
+port identifier in which case an Internet domain socket will be
+used for the communications or a valid file name (which shouldn't
+exist and will be deleted afterwards) in which case a Unix domain
+socket is created.

 {\bf SECURITY NOTE:} Using Internet domain sockets if extremely insecure for
@@ -68,21 +76,25 @@
 whenever possible!

-The server then responds and either vetoes the connection or allows it.
-If allowed, a connection object is created which persists until the
-connection is closed.  The connection object is then used for subsequent
-messages between client and server.
+The server then responds and either vetoes the connection or
+allows it. If allowed, both the server and client objects create
+wxConnection objects which persist until the connection is
+closed. The connection object is then used for sending and
+receiving subsequent messages between client and server -
+overriding virtual functions in your class derived from
+wxConnection allows you to handle the DDE messages.

 To create a working server, the programmer must:

 \begin{enumerate}\itemsep=0pt
-\item Derive a class from wxDDEServer.
-\item Override the handler OnAcceptConnection for accepting or rejecting a connection,
-on the basis of the topic argument. This member must create and return a connection
-object if the connection is accepted.
-\item Create an instance of your server object, and call Create to
+\item Derive a class from wxConnection, providing handlers for various messages sent to the server
+side of a wxConnection (e.g. OnExecute, OnRequest, OnPoke). Only
+the handlers actually required by the application need to be
+overridden.
+\item Derive a class from wxServer, overriding OnAcceptConnection
+to accept or reject a connection on the basis of the topic
+argument. This member must create and return an instance of the
+derived connection class if the connection is accepted.
+\item Create an instance of your server object and call Create to
 activate it, giving it a service name.
-\item Derive a class from wxDDEConnection.
-\item Provide handlers for various messages that are sent to the server
-side of a wxDDEConnection.
 \end{enumerate}

@@ -90,22 +102,26 @@

 \begin{enumerate}\itemsep=0pt
-\item Derive a class from wxDDEClient.
-\item Override the handler OnMakeConnection to create and return
-an appropriate connection object.
+\item Derive a class from wxConnection, providing handlers for various
+messages sent to the client side of a wxConnection (e.g.
+OnAdvise). Only the handlers actually required by the application
+need to be overridden.
+\item Derive a class from wxClient, overriding OnMakeConnection to
+create and return an instance of the derived connection class.
 \item Create an instance of your client object.
-\item Derive a class from wxDDEConnection.
-\item Provide handlers for various messages that are sent to the client
-side of a wxDDEConnection.
-\item When appropriate, create a new connection by sending a MakeConnection
-message to the client object, with arguments host name (processed in Unix only),
-service name, and topic name for this connection. The client object will call OnMakeConnection
-to create a connection object of the desired type.
-\item Use the wxDDEConnection member functions to send messages to the server.
+\item When appropriate, create a new connection using
+\helpref{wxClient::MakeConnection}{wxddeclientmakeconnection},
+with arguments host name (processed in Unix only, use `localhost'
+for local computer), service name, and topic name for this
+connection. The client object will call
+\helpref{OnMakeConnection}{wxddeclientonmakeconnection} to create
+a connection object of the derived class if the connection is
+successful.
+\item Use the wxConnection member functions to send messages to the server.
 \end{enumerate}

 \subsection{Data transfer}

-These are the ways that data can be transferred from one application to
-another.
+These are the ways that data can be transferred from one
+application to another. These are methods of wxConnection.

 \begin{itemize}\itemsep=0pt
@@ -141,22 +157,23 @@
 \subsection{More DDE details}

-A wxDDEClient object represents the client part of a client-server DDE
-(Dynamic Data Exchange) conversation (available in both
+A wxClient object initiates the client part of a client-server
+DDE-like (Dynamic Data Exchange) conversation (available in both
 Windows and Unix).

 To create a client which can communicate with a suitable server,
-you need to derive a class from wxDDEConnection and another from wxDDEClient.
-The custom wxDDEConnection class will intercept communications in
-a `conversation' with a server, and the custom wxDDEServer is required
-so that a user-overridden \helpref{wxDDEClient::OnMakeConnection}{wxddeclientonmakeconnection} member can return
-a wxDDEConnection of the required class, when a connection is made.
+you need to derive a class from wxConnection and another from
+wxClient. The custom wxConnection class will receive
+communications in a `conversation' with a server.  and the custom
+wxServer is required so that a user-overridden
+\helpref{wxDDEClient::OnMakeConnection}{wxddeclientonmakeconnection}
+member can return a wxDDEConnection of the required class, when a
+connection is made.

 For example:

 \begin{verbatim}
-class MyConnection: public wxDDEConnection
-{
+class MyConnection: public wxConnection {
  public:
-  MyConnection(void)::wxDDEConnection(ipc_buffer, 3999) {}
+  MyConnection(void)::wxConnection() {}
   ~MyConnection(void) { }
   bool OnAdvise(const wxString& topic, const wxString& item, char *data, int size, wxIPCFormat format)
@@ -164,6 +181,5 @@
 };

-class MyClient: public wxDDEClient
-{
+class MyClient: public wxClient {
  public:
   MyClient(void) {}
@@ -173,13 +189,18 @@
 \end{verbatim}

-Here, {\bf MyConnection} will respond to \helpref{OnAdvise}{wxddeconnectiononadvise} messages sent
-by the server.
-
-When the client application starts, it must create an instance of the derived wxDDEClient. In the following, command line
-arguments are used to pass the host name (the name of the machine the server is running
-on) and the server name (identifying the server process). Calling \helpref{wxDDEClient::MakeConnection}{wxddeclientmakeconnection}\rtfsp
-implicitly creates an instance of {\bf MyConnection} if the request for a
-connection is accepted, and the client then requests an {\it Advise} loop
-from the server, where the server calls the client when data has changed.
+Here, {\bf MyConnection} will respond to
+\helpref{OnAdvise}{wxddeconnectiononadvise} messages sent by the
+server by displaying a message box.
+
+When the client application starts, it must create an instance of
+the derived wxClient. In the following, command line arguments
+are used to pass the host name (the name of the machine the
+server is running on) and the server name (identifying the server
+process). Calling
+\helpref{wxDDEClient::MakeConnection}{wxddeclientmakeconnection}\rtfsp
+implicitly creates an instance of {\bf MyConnection} if the
+request for a connection is accepted, and the client then
+requests an {\it Advise} loop from the server (an Advise loop is
+where the server calls the client when data has changed).

 \begin{verbatim}
@@ -202,3 +223,2 @@
 Note that it is no longer necessary to call wxDDEInitialize or wxDDECleanUp, since
 wxWindows will do this itself if necessary.
-
diff -ru2 -xCVS -x.#* -x*.orig -x*.rej -x*~ --new-file Copy of wxWindows\include\wx\ipcbase.h wxWindows\include\wx\ipcbase.h
--- Copy of wxWindows\include\wx\ipcbase.h  Sun Aug 25 16:35:41 2002
+++ wxWindows\include\wx\ipcbase.h  Mon Aug 26 16:05:58 2002
@@ -51,6 +51,11 @@

 public:
-  inline wxConnectionBase(void) {}
-  inline ~wxConnectionBase(void) {}
+  wxConnectionBase(wxChar *buffer, int size); // use external buffer
+  wxConnectionBase(); // use internal, adaptive buffer
+  wxConnectionBase(wxConnectionBase& copy);
+  ~wxConnectionBase(void);
+
+  void SetConnected( bool c ) { m_connected = c; }
+  bool GetConnected() { return m_connected; }

   // Calls that CLIENT can make
@@ -107,5 +112,17 @@
   // Default behaviour is to delete connection and return TRUE
   virtual bool OnDisconnect(void) = 0;
+
+  // return a buffer at least this size, reallocating buffer if needed
+  // returns NULL if using an inadequate user buffer - it can't be resized
+  wxChar *      GetBufferAtLeast( size_t bytes );
+
+protected:
+  bool          m_connected;
+private:
+  wxChar *      m_buffer;
+  size_t        m_buffersize;
+  bool          m_deletebufferwhendone;
 };
+

 class WXDLLEXPORT wxServerBase: public wxObject
diff -ru2 -xCVS -x.#* -x*.orig -x*.rej -x*~ --new-file Copy of wxWindows\include\wx\msw\dde.h wxWindows\include\wx\msw\dde.h
--- Copy of wxWindows\include\wx\msw\dde.h  Sun Aug 25 16:35:55 2002
+++ wxWindows\include\wx\msw\dde.h  Fri Aug 23 14:28:53 2002
@@ -50,6 +50,6 @@
   DECLARE_DYNAMIC_CLASS(wxDDEConnection)
 public:
-  wxDDEConnection(char *buffer, int size);
-  wxDDEConnection(void);
+  wxDDEConnection(char *buffer, int size); // use external buffer
+  wxDDEConnection(); // use internal buffer
   ~wxDDEConnection(void);

@@ -71,7 +71,5 @@

  public:
-  char*         m_bufPtr;
   wxString      m_topicName;
-  int           m_bufSize;
   wxDDEServer*  m_server;
   wxDDEClient*  m_client;
diff -ru2 -xCVS -x.#* -x*.orig -x*.rej -x*~ --new-file Copy of wxWindows\include\wx\sckipc.h wxWindows\include\wx\sckipc.h
--- Copy of wxWindows\include\wx\sckipc.h   Sun Aug 25 16:35:41 2002
+++ wxWindows\include\wx\sckipc.h   Fri Aug 23 14:27:15 2002
@@ -62,5 +62,5 @@

 public:
-  wxTCPConnection(char *buffer, int size);
+  wxTCPConnection(wxChar *buffer, int size);
   wxTCPConnection();
   virtual ~wxTCPConnection();
diff -ru2 -xCVS -x.#* -x*.orig -x*.rej -x*~ --new-file Copy of wxWindows\samples\ipc\client.cpp wxWindows\samples\ipc\client.cpp
--- Copy of wxWindows\samples\ipc\client.cpp    Sun Sep 01 11:51:08 2002
+++ wxWindows\samples\ipc\client.cpp    Mon Aug 26 15:14:50 2002
@@ -31,5 +31,4 @@
 // Settings common to both executables: determines whether
 // we're using TCP/IP or real DDE.
-
 #include "ddesetup.h"

@@ -57,5 +56,4 @@
 // ----------------------------------------------------------------------------

-char ipc_buffer[4000];
 wxListBox *the_list = NULL;

@@ -120,14 +118,9 @@
 int MyApp::OnExit()
 {
-    if (the_connection)
-    {
-        the_connection->Disconnect();
-        delete the_connection;
-        the_connection = NULL;
-    }
-
     // will delete the connection too
     // Update: Seems it didn't delete the_connection, because there's a leak.
     // Deletion is now explicitly done a few lines up.
+    // another Update: in fact it's because OnDisconnect should delete it, but
+    // it wasn't
     delete my_client;

@@ -204,9 +197,4 @@
 }

-MyConnection::MyConnection()
-            : wxConnection(ipc_buffer, WXSIZEOF(ipc_buffer))
-{
-}
-
 bool MyConnection::OnAdvise(const wxString& topic, const wxString& item, char *data, int size, wxIPCFormat format)
 {
@@ -222,9 +210,12 @@
 bool MyConnection::OnDisconnect()
 {
+    // when connection is terminated, quit whole program
     wxWindow *win = wxTheApp->GetTopWindow();
     if ( win )
         win->Destroy();

-    return TRUE;
+    // delete self
+    the_connection = NULL;
+    return wxConnection::OnDisconnect();
 }

diff -ru2 -xCVS -x.#* -x*.orig -x*.rej -x*~ --new-file Copy of wxWindows\samples\ipc\client.h wxWindows\samples\ipc\client.h
--- Copy of wxWindows\samples\ipc\client.h  Sun Sep 01 11:51:08 2002
+++ wxWindows\samples\ipc\client.h  Mon Aug 26 13:29:18 2002
@@ -38,6 +38,4 @@
 {
 public:
-    MyConnection();
-
     bool OnAdvise(const wxString& topic, const wxString& item, char *data, int size, wxIPCFormat format);
     bool OnDisconnect();
diff -ru2 -xCVS -x.#* -x*.orig -x*.rej -x*~ --new-file Copy of wxWindows\samples\ipc\makefile.b32 wxWindows\samples\ipc\makefile.b32
--- Copy of wxWindows\samples\ipc\makefile.b32  Sun Sep 01 11:51:08 2002
+++ wxWindows\samples\ipc\makefile.b32  Fri Aug 23 23:19:25 2002
@@ -8,4 +8,8 @@
 # Makefile : Builds sample for 32-bit BC++

+!ifndef FINAL
+FINAL=0
+!endif
+
 all:
     make -f server.b32 FINAL=$(FINAL) WXUSINGDLL=$(WXUSINGDLL) all
diff -ru2 -xCVS -x.#* -x*.orig -x*.rej -x*~ --new-file Copy of wxWindows\samples\ipc\server.cpp wxWindows\samples\ipc\server.cpp
--- Copy of wxWindows\samples\ipc\server.cpp    Sun Sep 01 11:51:08 2002
+++ wxWindows\samples\ipc\server.cpp    Mon Aug 26 15:14:40 2002
@@ -58,5 +58,4 @@
 // ----------------------------------------------------------------------------

-char ipc_buffer[4000];
 MyConnection *the_connection = NULL;

@@ -135,4 +134,7 @@
     {
         wxString value = listBox->GetStringSelection();
+
+        /* Because the_connection only holds one connection, in this sample only
+           one connection can receive advise messages */
         if (the_connection)
         {
@@ -162,4 +164,12 @@
 }

+IPCDialogBox::~IPCDialogBox( )
+{
+    // wxWindows exit code destroys dialog before destroying the connection in
+    // OnExit, so make sure connection won't try to delete the dialog later.
+    if (m_connection)
+        m_connection->dialog = NULL;
+}
+
 void IPCDialogBox::OnQuit(wxCommandEvent& event)
 {
@@ -175,5 +185,5 @@
 {
     if ( topic == IPC_TOPIC )
-        return new MyConnection(ipc_buffer, WXSIZEOF(ipc_buffer));
+        return new MyConnection();

     // unknown topic
@@ -185,6 +195,6 @@
 // ----------------------------------------------------------------------------

-MyConnection::MyConnection(char *buf, int size)
-            : wxConnection(buf, size)
+MyConnection::MyConnection()
+            : wxConnection()
 {
     dialog = new IPCDialogBox(wxTheApp->GetTopWindow(), "Connection",
@@ -198,5 +208,9 @@
     if (the_connection)
     {
-        dialog->Destroy();
+        if (dialog)
+        {
+            dialog->m_connection = NULL;
+            dialog->Destroy();
+        }
         the_connection = NULL;
     }
diff -ru2 -xCVS -x.#* -x*.orig -x*.rej -x*~ --new-file Copy of wxWindows\samples\ipc\server.h wxWindows\samples\ipc\server.h
--- Copy of wxWindows\samples\ipc\server.h  Sun Sep 01 11:51:08 2002
+++ wxWindows\samples\ipc\server.h  Mon Aug 26 15:05:54 2002
@@ -43,5 +43,5 @@
 {
 public:
-    MyConnection(char *buf, int size);
+    MyConnection();
     ~MyConnection();

@@ -51,5 +51,4 @@
     bool OnStartAdvise(const wxString& topic, const wxString& item);

-private:
     IPCDialogBox *dialog;
 };
@@ -69,8 +68,8 @@
                  const wxSize& size,
                  MyConnection *the_connection);
+    ~IPCDialogBox( );

     void OnQuit(wxCommandEvent& event);

-private:
     MyConnection *m_connection;

diff -ru2 -xCVS -x.#* -x*.orig -x*.rej -x*~ --new-file Copy of wxWindows\src\common\ipcbase.cpp wxWindows\src\common\ipcbase.cpp
--- Copy of wxWindows\src\common\ipcbase.cpp    Sun Aug 25 16:35:08 2002
+++ wxWindows\src\common\ipcbase.cpp    Mon Aug 26 09:30:07 2002
@@ -32,2 +32,52 @@


+wxConnectionBase::wxConnectionBase(wxChar *buffer, int size)
+  : m_buffer(buffer), m_buffersize(size),
+    m_deletebufferwhendone(false), m_connected(true)
+{
+  if ( buffer == (wxChar *)NULL )
+  { // behave like next constructor
+    m_buffersize = 0;
+    m_deletebufferwhendone = true;
+  }
+}
+
+wxConnectionBase::wxConnectionBase()
+  : m_buffersize(0), m_buffer(NULL), m_deletebufferwhendone(true),
+    m_connected(true)
+{
+}
+
+wxConnectionBase::wxConnectionBase(wxConnectionBase& copy)
+  : m_buffer(copy.m_buffer), m_buffersize(copy.m_buffersize),
+    m_deletebufferwhendone(false), m_connected(copy.m_connected)
+{
+  // copy constructor would require ref-counted pointer to buffer
+  wxFAIL_MSG( _T("Copy constructor of wxConnectionBase not implemented") );
+}
+
+
+wxConnectionBase::~wxConnectionBase(void)
+{
+  if ( m_deletebufferwhendone && m_buffer )
+   delete m_buffer;
+}
+
+wxChar *wxConnectionBase::GetBufferAtLeast( size_t bytes )
+{
+  if ( m_buffersize >= bytes )
+    return m_buffer;
+  else
+  {  // need to resize buffer
+    if ( m_deletebufferwhendone )
+    { // we're in charge of buffer, increase it
+      if ( !m_buffer )
+        delete m_buffer;
+      m_buffer = new wxChar[bytes];
+      m_buffersize = bytes;
+      return m_buffer;
+    } // user-supplied buffer, fail
+    else
+      return NULL;
+  }
+}
diff -ru2 -xCVS -x.#* -x*.orig -x*.rej -x*~ --new-file Copy of wxWindows\src\common\sckipc.cpp wxWindows\src\common\sckipc.cpp
--- Copy of wxWindows\src\common\sckipc.cpp Sun Aug 25 16:35:08 2002
+++ wxWindows\src\common\sckipc.cpp Mon Aug 26 09:54:56 2002
@@ -347,10 +347,16 @@
 }

-wxTCPConnection::wxTCPConnection(char * WXUNUSED(buffer), int WXUNUSED(size))
+wxTCPConnection::wxTCPConnection(wxChar *buffer, int size)
+       : wxConnectionBase(buffer, size)
 {
+  m_sock     = NULL;
+  m_sockstrm = NULL;
+  m_codeci   = NULL;
+  m_codeco   = NULL;
 }

 wxTCPConnection::~wxTCPConnection ()
 {
+  Disconnect();
   wxDELETE(m_codeci);
   wxDELETE(m_codeco);
@@ -372,8 +378,11 @@
 bool wxTCPConnection::Disconnect ()
 {
+  if ( !GetConnected() )
+      return TRUE;
   // Send the the disconnect message to the peer.
   m_codeco->Write8(IPC_DISCONNECT);
   m_sock->Notify(FALSE);
   m_sock->Close();
+  SetConnected(false);

   return TRUE;
@@ -416,8 +425,9 @@
   {
     size_t s;
-    char *data = NULL;

     s = m_codeci->Read32();
-    data = new char[s];
+    wxChar *data = GetBufferAtLeast( s );
+    wxASSERT_MSG(data != NULL,
+                 _T("Buffer too small in wxTCPConnection::Request") );
     m_sockstrm->Read(data, s);

@@ -553,10 +563,11 @@
     format = (wxIPCFormat)codeci->Read8();
     size = codeci->Read32();
-    data = new char[size];
+    data = connection->GetBufferAtLeast( size );
+    wxASSERT_MSG(data != NULL,
+                 _T("Buffer too small in wxTCPEventHandler::Client_OnRequest") );
     sockstrm->Read(data, size);

     connection->OnExecute (topic_name, data, size, format);

-    delete [] data;
     break;
   }
@@ -570,10 +581,11 @@
     format = (wxIPCFormat)codeci->Read8();
     size = codeci->Read32();
-    data = new char[size];
+    data = connection->GetBufferAtLeast( size );
+    wxASSERT_MSG(data != NULL,
+                 _T("Buffer too small in wxTCPEventHandler::Client_OnRequest") );
     sockstrm->Read(data, size);

     connection->OnAdvise (topic_name, item, data, size, format);

-    delete [] data;
     break;
   }
@@ -611,11 +623,11 @@
     format = (wxIPCFormat)codeci->Read8();
     size = codeci->Read32();
-    data = new wxChar[size];
+    data = connection->GetBufferAtLeast( size );
+    wxASSERT_MSG(data != NULL,
+                 _T("Buffer too small in wxTCPEventHandler::Client_OnRequest") );
     sockstrm->Read(data, size);

     connection->OnPoke (topic_name, item, data, size, format);

-    delete [] data;
-
     break;
   }
@@ -649,4 +661,5 @@
     sock->Notify(FALSE);
     sock->Close();
+    connection->SetConnected(false);
     connection->OnDisconnect();
     break;
diff -ru2 -xCVS -x.#* -x*.orig -x*.rej -x*~ --new-file Copy of wxWindows\src\msw\dde.cpp wxWindows\src\msw\dde.cpp
--- Copy of wxWindows\src\msw\dde.cpp   Sun Aug 25 16:34:33 2002
+++ wxWindows\src\msw\dde.cpp   Mon Aug 26 14:01:56 2002
@@ -130,6 +130,4 @@
 static wxList wxDDEServerObjects;

-char *DDEDefaultIPCBuffer = NULL;
-int DDEDefaultIPCBufferSize = 0;
 static bool DDEInitialized = FALSE;

@@ -195,6 +193,4 @@
         DDEIdInst = 0;
     }
-
-    delete [] DDEDefaultIPCBuffer;
 }

@@ -311,4 +307,5 @@
         wxDDEConnection *connection = (wxDDEConnection *)node->Data();
         wxNode *next = node->Next();
+        connection->SetConnected(false);
         connection->OnDisconnect(); // May delete the node implicitly
         node = next;
@@ -460,18 +457,6 @@

 wxDDEConnection::wxDDEConnection(char *buffer, int size)
+     : wxConnectionBase(buffer, size)
 {
-    if (buffer == NULL)
-    {
-        if (DDEDefaultIPCBuffer == NULL)
-            DDEDefaultIPCBuffer = new char[DDEDefaultIPCBufferSize];
-        m_bufPtr = DDEDefaultIPCBuffer;
-        m_bufSize = DDEDefaultIPCBufferSize;
-    }
-    else
-    {
-        m_bufPtr = buffer;
-        m_bufSize = size;
-    }
-
     m_client = NULL;
     m_server = NULL;
@@ -482,4 +467,5 @@

 wxDDEConnection::wxDDEConnection()
+     : wxConnectionBase()
 {
     m_hConv = 0;
@@ -487,13 +473,9 @@
     m_server = NULL;
     m_client = NULL;
-    if (DDEDefaultIPCBuffer == NULL)
-        DDEDefaultIPCBuffer = new char[DDEDefaultIPCBufferSize];
-
-    m_bufPtr = DDEDefaultIPCBuffer;
-    m_bufSize = DDEDefaultIPCBufferSize;
 }

 wxDDEConnection::~wxDDEConnection()
 {
+    Disconnect();
     if (m_server)
         m_server->GetConnections().DeleteObject(this);
@@ -505,4 +487,7 @@
 bool wxDDEConnection::Disconnect()
 {
+    if ( !GetConnected() )
+        return true;
+
     DDEDeleteConnection(GetHConv());

@@ -513,4 +498,6 @@
     }

+    SetConnected( false );  // so we don't try and disconnect again
+
     return ok;
 }
@@ -543,4 +530,5 @@
 {
     DWORD result;
+
     HSZ atom = DDEGetAtom(item);

@@ -558,5 +546,10 @@
     }

-    DWORD len = DdeGetData(returned_data, (LPBYTE)m_bufPtr, m_bufSize, 0);
+    DWORD len = DdeGetData(returned_data, NULL, 0, 0);
+
+    wxChar *data = GetBufferAtLeast( len );
+    wxASSERT_MSG(data != NULL,
+                 _T("Buffer too small in wxDDEConnection::Request") );
+    DdeGetData(returned_data, (LPBYTE)data, len, 0);

     DdeFreeDataHandle(returned_data);
@@ -565,5 +558,5 @@
         *size = (int)len;

-    return m_bufPtr;
+    return data;
 }

@@ -642,5 +635,5 @@
     HSZ item_atom = DDEGetAtom(item);
     HSZ topic_atom = DDEGetAtom(m_topicName);
-    m_sendingData = data;
+    m_sendingData = data;  // mrf: potential for scope problems here?
     m_dataSize = size;
     m_dataType = format;
@@ -715,8 +708,12 @@
             {
                 wxDDEConnection *connection = DDEFindConnection(hConv);
-                if (connection && connection->OnDisconnect())
+                if (connection)
                 {
-                    DDEDeleteConnection(hConv);  // Delete mapping: hConv => connection
-                    return (DDERETURN)(DWORD)TRUE;
+                    connection->SetConnected( false );
+                    if (connection->OnDisconnect())
+                    {
+                        DDEDeleteConnection(hConv);  // Delete mapping: hConv => connection
+                        return (DDERETURN)(DWORD)TRUE;
+                    }
                 }
                 break;
@@ -729,11 +726,16 @@
                 if (connection)
                 {
-                    DWORD len = DdeGetData(hData,
-                                           (LPBYTE)connection->m_bufPtr,
-                                           connection->m_bufSize,
-                                           0);
+                    DWORD len = DdeGetData(hData, NULL, 0, 0);
+
+                    wxChar *data = connection->GetBufferAtLeast( len );
+                    wxASSERT_MSG(data != NULL,
+                                 _T("Buffer too small in _DDECallback (XTYP_EXECUTE)") );
+
+                    DdeGetData(hData, (LPBYTE)data, len, 0);
+
                     DdeFreeDataHandle(hData);
+
                     if ( connection->OnExecute(connection->m_topicName,
-                                               connection->m_bufPtr,
+                                               data,
                                                (int)len,
                                                (wxIPCFormat) wFmt) )
@@ -785,13 +787,17 @@
                     wxString item_name = DDEStringFromAtom(hsz2);

-                    DWORD len = DdeGetData(hData,
-                                           (LPBYTE)connection->m_bufPtr,
-                                           connection->m_bufSize,
-                                           0);
+                    DWORD len = DdeGetData(hData, NULL, 0, 0);
+
+                    wxChar *data = connection->GetBufferAtLeast( len );
+                    wxASSERT_MSG(data != NULL,
+                                 _T("Buffer too small in _DDECallback (XTYP_EXECUTE)") );
+
+                    DdeGetData(hData, (LPBYTE)data, len, 0);
+
                     DdeFreeDataHandle(hData);

                     connection->OnPoke(connection->m_topicName,
                                        item_name,
-                                       (wxChar*)connection->m_bufPtr,
+                                       data,
                                        (int)len,
                                        (wxIPCFormat) wFmt);
@@ -868,12 +874,16 @@
                     wxString item_name = DDEStringFromAtom(hsz2);

-                    DWORD len = DdeGetData(hData,
-                                           (LPBYTE)connection->m_bufPtr,
-                                           connection->m_bufSize,
-                                           0);
+                    DWORD len = DdeGetData(hData, NULL, 0, 0);
+
+                    wxChar *data = connection->GetBufferAtLeast( len );
+                    wxASSERT_MSG(data != NULL,
+                                 _T("Buffer too small in _DDECallback (XTYP_ADVDATA)") );
+
+                    DdeGetData(hData, (LPBYTE)data, len, 0);
+
                     DdeFreeDataHandle(hData);
                     if ( connection->OnAdvise(connection->m_topicName,
                                               item_name,
-                                              connection->m_bufPtr,
+                                              data,
                                               (int)len,
                                               (wxIPCFormat) wFmt) )
diff -ru2 -xCVS -x.#* -x*.orig -x*.rej -x*~ --new-file Copy of wxWindows\docs\latex\wx\ddeclint.tex wxWindows\docs\latex\wx\ddeclint.tex
--- Copy of wxWindows\docs\latex\wx\ddeclint.tex    Tue Aug 27 22:21:52 2002
+++ wxWindows\docs\latex\wx\ddeclint.tex    Thu Jan 01 13:00:00 1970
@@ -1,72 +0,0 @@
-\section{\class{wxDDEClient}}\label{wxddeclient}
-
-A wxDDEClient object represents the client part of a client-server DDE
-(Dynamic Data Exchange) conversation.
-
-To create a client which can communicate with a suitable server,
-you need to derive a class from wxDDEConnection and another from wxDDEClient.
-The custom wxDDEConnection class will intercept communications in
-a `conversation' with a server, and the custom wxDDEServer is required
-so that a user-overridden \helpref{wxDDEClient::OnMakeConnection}{wxddeclientonmakeconnection} member can return
-a wxDDEConnection of the required class, when a connection is made.
-
-This DDE-based implementation is
-available on Windows only, but a platform-independent, socket-based version
-of this API is available using \helpref{wxTCPClient}{wxtcpclient}.
-
-\wxheading{Derived from}
-
-wxClientBase\\
-\helpref{wxObject}{wxobject}
-
-\wxheading{Include files}
-
-<wx/dde.h>
-
-\wxheading{See also}
-
-\helpref{wxDDEServer}{wxddeserver}, \helpref{wxDDEConnection}{wxddeconnection},
-\helpref{Interprocess communications overview}{ipcoverview}
-
-\latexignore{\rtfignore{\wxheading{Members}}}
-
-\membersection{wxDDEClient::wxDDEClient}
-
-\func{}{wxDDEClient}{\void}
-
-Constructs a client object.
-
-\membersection{wxDDEClient::MakeConnection}\label{wxddeclientmakeconnection}
-
-\func{wxConnectionBase *}{MakeConnection}{\param{const wxString\& }{host}, \param{const wxString\& }{service}, \param{const wxString\& }{topic}}
-
-Tries to make a connection with a server specified by the host
-(machine name under UNIX, ignored under Windows), service name (must
-contain an integer port number under UNIX), and topic string. If the
-server allows a connection, a wxDDEConnection object will be returned.
-The type of wxDDEConnection returned can be altered by overriding
-the \helpref{wxDDEClient::OnMakeConnection}{wxddeclientonmakeconnection} member to return your own
-derived connection object.
-
-\membersection{wxDDEClient::OnMakeConnection}\label{wxddeclientonmakeconnection}
-
-\func{wxConnectionBase *}{OnMakeConnection}{\void}
-
-The type of \helpref{wxDDEConnection}{wxddeconnection} returned from a \helpref{wxDDEClient::MakeConnection}{wxddeclientmakeconnection} call can
-be altered by deriving the {\bf OnMakeConnection} member to return your
-own derived connection object. By default, a wxDDEConnection
-object is returned.
-
-The advantage of deriving your own connection class is that it will
-enable you to intercept messages initiated by the server, such
-as \helpref{wxDDEConnection::OnAdvise}{wxddeconnectiononadvise}. You may also want to
-store application-specific data in instances of the new class.
-
-\membersection{wxDDEClient::ValidHost}
-
-\func{bool}{ValidHost}{\param{const wxString\& }{host}}
-
-Returns TRUE if this is a valid host name, FALSE otherwise. This always
-returns TRUE under MS Windows.
-
-
diff -ru2 -xCVS -x.#* -x*.orig -x*.rej -x*~ --new-file Copy of wxWindows\docs\latex\wx\ddeconn.tex wxWindows\docs\latex\wx\ddeconn.tex
--- Copy of wxWindows\docs\latex\wx\ddeconn.tex Tue Aug 27 22:21:52 2002
+++ wxWindows\docs\latex\wx\ddeconn.tex Thu Jan 01 13:00:00 1970
@@ -1,202 +0,0 @@
-\section{\class{wxDDEConnection}}\label{wxddeconnection}
-
-A wxDDEConnection object represents the connection between a client and a
-server. It can be created by making a connection using a\rtfsp
-\helpref{wxDDEClient}{wxddeclient} object, or by the acceptance of a connection by a\rtfsp
-\helpref{wxDDEServer}{wxddeserver} object. The bulk of a DDE (Dynamic Data Exchange)
-conversation is controlled by
-calling members in a {\bf wxDDEConnection} object or by overriding its
-members.
-
-An application should normally derive a new connection class from
-wxDDEConnection, in order to override the communication event handlers
-to do something interesting.
-
-This DDE-based implementation is available on Windows only,
-but a platform-independent, socket-based version
-of this API is available using \helpref{wxTCPConnection}{wxtcpconnection}.
-
-\wxheading{Derived from}
-
-wxConnectionBase\\
-\helpref{wxObject}{wxobject}
-
-\wxheading{Include files}
-
-<wx/dde.h>
-
-\wxheading{Types}
-
-\index{wxIPCFormat}wxIPCFormat is defined as follows:
-
-\begin{verbatim}
-enum wxIPCFormat
-{
-  wxIPC_INVALID =          0,
-  wxIPC_TEXT =             1,  /* CF_TEXT */
-  wxIPC_BITMAP =           2,  /* CF_BITMAP */
-  wxIPC_METAFILE =         3,  /* CF_METAFILEPICT */
-  wxIPC_SYLK =             4,
-  wxIPC_DIF =              5,
-  wxIPC_TIFF =             6,
-  wxIPC_OEMTEXT =          7,  /* CF_OEMTEXT */
-  wxIPC_DIB =              8,  /* CF_DIB */
-  wxIPC_PALETTE =          9,
-  wxIPC_PENDATA =          10,
-  wxIPC_RIFF =             11,
-  wxIPC_WAVE =             12,
-  wxIPC_UNICODETEXT =      13,
-  wxIPC_ENHMETAFILE =      14,
-  wxIPC_FILENAME =         15, /* CF_HDROP */
-  wxIPC_LOCALE =           16,
-  wxIPC_PRIVATE =          20
-};
-\end{verbatim}
-
-\wxheading{See also}
-
-\helpref{wxDDEClient}{wxddeclient}, \helpref{wxDDEServer}{wxddeserver}, \helpref{Interprocess communications overview}{ipcoverview}
-
-\latexignore{\rtfignore{\wxheading{Members}}}
-
-\membersection{wxDDEConnection::wxDDEConnection}
-
-\func{}{wxDDEConnection}{\void}
-
-\func{}{wxDDEConnection}{\param{char* }{buffer}, \param{int}{ size}}
-
-Constructs a connection object. If no user-defined connection object is
-to be derived from wxDDEConnection, then the constructor should not be
-called directly, since the default connection object will be provided on
-requesting (or accepting) a connection. However, if the user defines his
-or her own derived connection object, the \helpref{wxDDEServer::OnAcceptConnection}{wxddeserveronacceptconnection}\rtfsp
-and/or \helpref{wxDDEClient::OnMakeConnection}{wxddeclientonmakeconnection} members should be replaced by
-functions which construct the new connection object. If the arguments of
-the wxDDEConnection constructor are void, then a default buffer is
-associated with the connection. Otherwise, the programmer must provide a
-a buffer and size of the buffer for the connection object to use in
-transactions.
-
-\membersection{wxDDEConnection::Advise}
-
-\func{bool}{Advise}{\param{const wxString\& }{item}, \param{char* }{data}, \param{int}{ size = -1}, \param{wxIPCFormat}{ format = wxCF\_TEXT}}
-
-Called by the server application to advise the client of a change in
-the data associated with the given item. Causes the client
-connection's \helpref{wxDDEConnection::OnAdvise}{wxddeconnectiononadvise}
-member to be called. Returns TRUE if successful.
-
-\membersection{wxDDEConnection::Execute}
-
-\func{bool}{Execute}{\param{char* }{data}, \param{int}{ size = -1}, \param{wxIPCFormat}{ format = wxCF\_TEXT}}
-
-Called by the client application to execute a command on the server. Can
-also be used to transfer arbitrary data to the server (similar
-to \helpref{wxDDEConnection::Poke}{wxddeconnectionpoke} in that respect). Causes the
-server connection's \helpref{wxDDEConnection::OnExecute}{wxddeconnectiononexecute} member to be
-called. Returns TRUE if successful.
-
-\membersection{wxDDEConnection::Disconnect}
-
-\func{bool}{Disconnect}{\void}
-
-Called by the client or server application to disconnect from the other
-program; it causes the \helpref{wxDDEConnection::OnDisconnect}{wxddeconnectionondisconnect} message
-to be sent to the corresponding connection object in the other
-program. The default behaviour of {\bf OnDisconnect} is to delete the
-connection, but the calling application must explicitly delete its
-side of the connection having called {\bf Disconnect}. Returns TRUE if
-successful.
-
-\membersection{wxDDEConnection::OnAdvise}\label{wxddeconnectiononadvise}
-
-\func{virtual bool}{OnAdvise}{\param{const wxString\& }{topic}, \param{const wxString\& }{item}, \param{char* }{data}, \param{int}{ size}, \param{wxIPCFormat}{ format}}
-
-Message sent to the client application when the server notifies it of a
-change in the data associated with the given item.
-
-\membersection{wxDDEConnection::OnDisconnect}\label{wxddeconnectionondisconnect}
-
-\func{virtual bool}{OnDisconnect}{\void}
-
-Message sent to the client or server application when the other
-application notifies it to delete the connection. Default behaviour is
-to delete the connection object.
-
-\membersection{wxDDEConnection::OnExecute}\label{wxddeconnectiononexecute}
-
-\func{virtual bool}{OnExecute}{\param{const wxString\& }{topic}, \param{char* }{data}, \param{int}{ size}, \param{wxIPCFormat}{ format}}
-
-Message sent to the server application when the client notifies it to
-execute the given data. Note that there is no item associated with
-this message.
-
-\membersection{wxDDEConnection::OnPoke}\label{wxddeconnectiononpoke}
-
-\func{virtual bool}{OnPoke}{\param{const wxString\& }{topic}, \param{const wxString\& }{item}, \param{char* }{data}, \param{int}{ size}, \param{wxIPCFormat}{ format}}
-
-Message sent to the server application when the client notifies it to
-accept the given data.
-
-\membersection{wxDDEConnection::OnRequest}\label{wxddeconnectiononrequest}
-
-\func{virtual char*}{OnRequest}{\param{const wxString\& }{topic}, \param{const wxString\& }{item}, \param{int *}{size}, \param{wxIPCFormat}{ format}}
-
-Message sent to the server application when the client
-calls \helpref{wxDDEConnection::Request}{wxddeconnectionrequest}. The server
-should respond by returning a character string from {\bf OnRequest},
-or NULL to indicate no data.
-
-\membersection{wxDDEConnection::OnStartAdvise}\label{wxddeconnectiononstartadvise}
-
-\func{virtual bool}{OnStartAdvise}{\param{const wxString\& }{topic}, \param{const wxString\& }{item}}
-
-Message sent to the server application by the client, when the client
-wishes to start an `advise loop' for the given topic and item. The
-server can refuse to participate by returning FALSE.
-
-\membersection{wxDDEConnection::OnStopAdvise}\label{wxddeconnectiononstopadvise}
-
-\func{virtual bool}{OnStopAdvise}{\param{const wxString\& }{topic}, \param{const wxString\& }{item}}
-
-Message sent to the server application by the client, when the client
-wishes to stop an `advise loop' for the given topic and item. The
-server can refuse to stop the advise loop by returning FALSE, although
-this doesn't have much meaning in practice.
-
-\membersection{wxDDEConnection::Poke}\label{wxddeconnectionpoke}
-
-\func{bool}{Poke}{\param{const wxString\& }{item}, \param{char* }{data}, \param{int}{ size = -1}, \param{wxIPCFormat}{ format = wxCF\_TEXT}}
-
-Called by the client application to poke data into the server. Can be
-used to transfer arbitrary data to the server. Causes the server
-connection's \helpref{wxDDEConnection::OnPoke}{wxddeconnectiononpoke} member
-to be called. Returns TRUE if successful.
-
-\membersection{wxDDEConnection::Request}\label{wxddeconnectionrequest}
-
-\func{char*}{Request}{\param{const wxString\& }{item}, \param{int *}{size}, \param{wxIPCFormat}{ format = wxIPC\_TEXT}}
-
-Called by the client application to request data from the server. Causes
-the server connection's \helpref{wxDDEConnection::OnRequest}{wxddeconnectiononrequest} member to be called. Returns a
-character string (actually a pointer to the connection's buffer) if
-successful, NULL otherwise.
-
-\membersection{wxDDEConnection::StartAdvise}\label{wxddeconnectionstartadvise}
-
-\func{bool}{StartAdvise}{\param{const wxString\& }{item}}
-
-Called by the client application to ask if an advise loop can be started
-with the server. Causes the server connection's \helpref{wxDDEConnection::OnStartAdvise}{wxddeconnectiononstartadvise}\rtfsp
-member to be called. Returns TRUE if the server okays it, FALSE
-otherwise.
-
-\membersection{wxDDEConnection::StopAdvise}\label{wxddeconnectionstopadvise}
-
-\func{bool}{StopAdvise}{\param{const wxString\& }{item}}
-
-Called by the client application to ask if an advise loop can be
-stopped. Causes the server connection's \helpref{wxDDEConnection::OnStopAdvise}{wxddeconnectiononstopadvise} member
-to be called. Returns TRUE if the server okays it, FALSE otherwise.
-
-
diff -ru2 -xCVS -x.#* -x*.orig -x*.rej -x*~ --new-file Copy of wxWindows\docs\latex\wx\ddeservr.tex wxWindows\docs\latex\wx\ddeservr.tex
--- Copy of wxWindows\docs\latex\wx\ddeservr.tex    Tue Aug 27 22:21:53 2002
+++ wxWindows\docs\latex\wx\ddeservr.tex    Thu Jan 01 13:00:00 1970
@@ -1,52 +0,0 @@
-\section{\class{wxDDEServer}}\label{wxddeserver}
-
-A wxDDEServer object represents the server part of a client-server DDE
-(Dynamic Data Exchange) conversation.
-
-This DDE-based implementation is
-available on Windows only, but a platform-independent, socket-based version
-of this API is available using \helpref{wxTCPServer}{wxtcpserver}.
-
-\wxheading{Derived from}
-
-wxServerBase
-
-\wxheading{Include files}
-
-<wx/dde.h>
-
-\wxheading{See also}
-
-\helpref{wxDDEClient}{wxddeclient}, \helpref{wxDDEConnection}{wxddeconnection}, \helpref{IPC overview}{ipcoverview}
-
-\latexignore{\rtfignore{\wxheading{Members}}}
-
-\membersection{wxDDEServer::wxDDEServer}
-
-\func{}{wxDDEServer}{\void}
-
-Constructs a server object.
-
-\membersection{wxDDEServer::Create}
-
-\func{bool}{Create}{\param{const wxString\& }{service}}
-
-Registers the server using the given service name. Under UNIX, the
-string must contain an integer id which is used as an Internet port
-number. FALSE is returned if the call failed (for example, the port
-number is already in use).
-
-\membersection{wxDDEServer::OnAcceptConnection}\label{wxddeserveronacceptconnection}
-
-\func{virtual wxConnectionBase *}{OnAcceptConnection}{\param{const wxString\& }{topic}}
-
-When a client calls {\bf MakeConnection}, the server receives the
-message and this member is called. The application should derive a
-member to intercept this message and return a connection object of
-either the standard wxDDEConnection type, or of a user-derived type. If the
-topic is ``STDIO'', the application may wish to refuse the connection.
-Under UNIX, when a server is created the OnAcceptConnection message is
-always sent for standard input and output, but in the context of DDE
-messages it doesn't make a lot of sense.
-
-
diff -ru2 -xCVS -x.#* -x*.orig -x*.rej -x*~ --new-file Copy of wxWindows\docs\latex\wx\ipcclint.tex wxWindows\docs\latex\wx\ipcclint.tex
--- Copy of wxWindows\docs\latex\wx\ipcclint.tex    Thu Jan 01 13:00:00 1970
+++ wxWindows\docs\latex\wx\ipcclint.tex    Fri Aug 23 22:23:47 2002
@@ -0,0 +1,89 @@
+\section{\class{wxClient}}\label{wxddeclient}
+
+A wxClient object represents the client part of a client-server
+DDE-like (Dynamic Data Exchange) conversation. The actual
+DDE-based implementation using wxDDEClient is available on Windows
+only, but a platform-independent, socket-based version of this
+API is available using wxTCPClient, which has the same API.
+
+To create a client which can communicate with a suitable server,
+you need to derive a class from wxConnection and another from
+wxClient. The custom wxConnection class will intercept
+communications in a `conversation' with a server, and the custom
+wxClient is required so that a user-overridden
+\helpref{wxClient::OnMakeConnection}{wxddeclientonmakeconnection}
+member can return a wxConnection of the required class, when a
+connection is made. Look at the IPC sample and the
+\helpref{Interprocess communications overview}{ipcoverview} for
+an example of how to do this.
+
+
+\wxheading{Derived from}
+
+wxClientBase\\
+\helpref{wxObject}{wxobject}
+
+\wxheading{Include files}
+
+<wx/ipc.h>
+
+\wxheading{See also}
+
+\helpref{wxServer}{wxddeserver},
+\helpref{wxConnection}{wxddeconnection}, \helpref{Interprocess
+communications overview}{ipcoverview}
+
+\latexignore{\rtfignore{\wxheading{Members}}}
+
+\membersection{wxClient::wxClient}
+
+\func{}{wxClient}{\void}
+
+Constructs a client object.
+
+\membersection{wxClient::MakeConnection}\label{wxddeclientmakeconnection}
+
+\func{wxConnectionBase *}{MakeConnection}{\param{const wxString\& }{host}, \param{const wxString\& }{service}, \param{const wxString\& }{topic}}
+
+Tries to make a connection with a server by host (machine name
+under UNIX - use `localhost' for same machine; ignored when using
+native DDE in Windows), service name and topic string. If the
+server allows a connection, a wxConnection object will be
+returned. The type of wxConnection returned can be altered by
+overriding the
+\helpref{wxClient::OnMakeConnection}{wxddeclientonmakeconnection}
+member to return your own derived connection object.
+
+Under Unix, the service name may be either an integer port
+identifier in which case an Internet domain socket will be used
+for the communications, or a valid file name (which shouldn't
+exist and will be deleted afterwards) in which case a Unix domain
+socket is created.
+
+{\bf SECURITY NOTE:} Using Internet domain sockets if extremely
+insecure for IPC as there is absolutely no access control for
+them, use Unix domain sockets whenever possible!
+
+\membersection{wxClient::OnMakeConnection}\label{wxddeclientonmakeconnection}
+
+\func{wxConnectionBase *}{OnMakeConnection}{\void}
+
+Called by
+\helpref{wxClient::MakeConnection}{wxddeclientmakeconnection}, by
+default this simply returns a new wxConnection object. Override
+this method to return a wxConnection descendant customised for the
+application.
+
+The advantage of deriving your own connection class is that it
+will enable you to intercept messages initiated by the server,
+such as
+\helpref{wxConnection::OnAdvise}{wxddeconnectiononadvise}. You
+may also want to store application-specific data in instances of
+the new class.
+
+\membersection{wxClient::ValidHost}
+
+\func{bool}{ValidHost}{\param{const wxString\& }{host}}
+
+Returns TRUE if this is a valid host name, FALSE otherwise. This always
+returns TRUE under MS Windows.
diff -ru2 -xCVS -x.#* -x*.orig -x*.rej -x*~ --new-file Copy of wxWindows\docs\latex\wx\ipcconn.tex wxWindows\docs\latex\wx\ipcconn.tex
--- Copy of wxWindows\docs\latex\wx\ipcconn.tex Thu Jan 01 13:00:00 1970
+++ wxWindows\docs\latex\wx\ipcconn.tex Mon Aug 26 15:17:52 2002
@@ -0,0 +1,228 @@
+\section{\class{wxConnection}}\label{wxddeconnection}
+
+A wxConnection object represents the connection between a client
+and a server. It is created by making a connection using a\rtfsp
+\helpref{wxClient}{wxddeclient} object, or by the acceptance of a
+connection by a\rtfsp \helpref{wxServer}{wxddeserver} object. The
+bulk of a DDE-like (Dynamic Data Exchange) conversation is
+controlled by calling members in a {\bf wxConnection} object or
+by overriding its members. The actual DDE-based implementation
+using wxDDEConnection is available on Windows only, but a
+platform-independent, socket-based version of this API is
+available using wxTCPConnection, which has the same API.
+
+An application should normally derive a new connection class from
+wxConnection, in order to override the communication event
+handlers to do something interesting.
+
+\wxheading{Derived from}
+
+wxConnectionBase\\
+\helpref{wxObject}{wxobject}
+
+\wxheading{Include files}
+
+<wx/ipc.h>
+
+\wxheading{Types}
+
+\index{wxIPCFormat}wxIPCFormat is defined as follows:
+
+\begin{verbatim}
+enum wxIPCFormat
+{
+  wxIPC_INVALID =          0,
+  wxIPC_TEXT =             1,  /* CF_TEXT */
+  wxIPC_BITMAP =           2,  /* CF_BITMAP */
+  wxIPC_METAFILE =         3,  /* CF_METAFILEPICT */
+  wxIPC_SYLK =             4,
+  wxIPC_DIF =              5,
+  wxIPC_TIFF =             6,
+  wxIPC_OEMTEXT =          7,  /* CF_OEMTEXT */
+  wxIPC_DIB =              8,  /* CF_DIB */
+  wxIPC_PALETTE =          9,
+  wxIPC_PENDATA =          10,
+  wxIPC_RIFF =             11,
+  wxIPC_WAVE =             12,
+  wxIPC_UNICODETEXT =      13,
+  wxIPC_ENHMETAFILE =      14,
+  wxIPC_FILENAME =         15, /* CF_HDROP */
+  wxIPC_LOCALE =           16,
+  wxIPC_PRIVATE =          20
+};
+\end{verbatim}
+
+\wxheading{See also}
+
+\helpref{wxClient}{wxddeclient}, \helpref{wxServer}{wxddeserver},
+\helpref{Interprocess communications overview}{ipcoverview}
+
+\latexignore{\rtfignore{\wxheading{Members}}}
+
+\membersection{wxConnection::wxConnection}
+
+\func{}{wxConnection}{\void}
+
+\func{}{wxConnection}{\param{char* }{buffer}, \param{int}{ size}}
+
+Constructs a connection object. If no user-defined connection
+object is to be derived from wxConnection, then the constructor
+should not be called directly, since the default connection
+object will be provided on requesting (or accepting) a
+connection. However, if the user defines his or her own derived
+connection object, the
+\helpref{wxServer::OnAcceptConnection}{wxddeserveronacceptconnection}\rtfsp
+and/or
+\helpref{wxClient::OnMakeConnection}{wxddeclientonmakeconnection}
+members should be replaced by functions which construct the new
+connection object.
+
+If the arguments of the wxConnection constructor are void then
+the wxConnection object manages its own connection buffer,
+allocating memory as needed. A programmer-supplied buffer cannot
+be increased if necessary, and the program will assert if it is
+not large enough. The programmer-supplied buffer is included
+mainly for backwards compatibility.
+
+\membersection{wxConnection::Advise}\label{wxddeconnectionadvise}
+
+\func{bool}{Advise}{\param{const wxString\& }{item}, \param{char* }{data}, \param{int}{ size = -1}, \param{wxIPCFormat}{ format = wxCF\_TEXT}}
+
+Called by the server application to advise the client of a change
+in the data associated with the given item. Causes the client
+connection's
+\helpref{wxConnection::OnAdvise}{wxddeconnectiononadvise} member
+to be called. Returns TRUE if successful.
+
+\membersection{wxConnection::Execute}\label{wxddeconnectionexecute}
+
+\func{bool}{Execute}{\param{char* }{data}, \param{int}{ size = -1}, \param{wxIPCFormat}{ format = wxCF\_TEXT}}
+
+Called by the client application to execute a command on the
+server. Can also be used to transfer arbitrary data to the server
+(similar to \helpref{wxConnection::Poke}{wxddeconnectionpoke} in
+that respect). Causes the server connection's
+\helpref{wxConnection::OnExecute}{wxddeconnectiononexecute}
+member to be called. Returns TRUE if successful.
+
+\membersection{wxConnection::Disconnect}
+
+\func{bool}{Disconnect}{\void}
+
+Called by the client or server application to disconnect from the
+other program; it causes the
+\helpref{wxConnection::OnDisconnect}{wxddeconnectionondisconnect}
+message to be sent to the corresponding connection object in the
+other program. Returns TRUE if successful or already disconnected.
+The application that calls {\bf Disconnect} must explicitly delete
+its side of the connection.
+
+\membersection{wxConnection::OnAdvise}\label{wxddeconnectiononadvise}
+
+\func{virtual bool}{OnAdvise}{\param{const wxString\& }{topic}, \param{const wxString\& }{item}, \param{char* }{data}, \param{int}{ size}, \param{wxIPCFormat}{ format}}
+
+Message sent to the client application when the server notifies
+it of a change in the data associated with the given item, using
+\helpref{Advise}{wxddeconnectionadvise}.
+
+\membersection{wxConnection::OnDisconnect}\label{wxddeconnectionondisconnect}
+
+\func{virtual bool}{OnDisconnect}{\void}
+
+Message sent to the client or server application when the other
+application notifies it to end the connection. The default
+behaviour is to delete the connection object and return true, so
+applications should generally override {\bf OnDisconnect}
+(finally calling the inherited method as well) so that they know
+the connection object is no longer available.
+
+\membersection{wxConnection::OnExecute}\label{wxddeconnectiononexecute}
+
+\func{virtual bool}{OnExecute}{\param{const wxString\& }{topic}, \param{char* }{data}, \param{int}{ size}, \param{wxIPCFormat}{ format}}
+
+Message sent to the server application when the client notifies
+it to execute the given data, using
+\helpref{Execute}{wxddeconnectionexecute}. Note that there is no
+item associated with this message.
+
+\membersection{wxConnection::OnPoke}\label{wxddeconnectiononpoke}
+
+\func{virtual bool}{OnPoke}{\param{const wxString\& }{topic}, \param{const wxString\& }{item}, \param{char* }{data}, \param{int}{ size}, \param{wxIPCFormat}{ format}}
+
+Message sent to the server application when the client notifies it to
+accept the given data.
+
+\membersection{wxConnection::OnRequest}\label{wxddeconnectiononrequest}
+
+\func{virtual char*}{OnRequest}{\param{const wxString\& }{topic}, \param{const wxString\& }{item}, \param{int *}{size}, \param{wxIPCFormat}{ format}}
+
+Message sent to the server application when the client calls
+\helpref{wxConnection::Request}{wxddeconnectionrequest}. The
+server's \helpref{OnRequest}{wxddeconnectiononrequest} method
+should respond by returning a character string, or NULL to
+indicate no data, and setting *size. The character string must of
+course persist after the call returns.
+
+\membersection{wxConnection::OnStartAdvise}\label{wxddeconnectiononstartadvise}
+
+\func{virtual bool}{OnStartAdvise}{\param{const wxString\& }{topic}, \param{const wxString\& }{item}}
+
+Message sent to the server application by the client, when the client
+wishes to start an `advise loop' for the given topic and item. The
+server can refuse to participate by returning FALSE.
+
+\membersection{wxConnection::OnStopAdvise}\label{wxddeconnectiononstopadvise}
+
+\func{virtual bool}{OnStopAdvise}{\param{const wxString\& }{topic}, \param{const wxString\& }{item}}
+
+Message sent to the server application by the client, when the client
+wishes to stop an `advise loop' for the given topic and item. The
+server can refuse to stop the advise loop by returning FALSE, although
+this doesn't have much meaning in practice.
+
+\membersection{wxConnection::Poke}\label{wxddeconnectionpoke}
+
+\func{bool}{Poke}{\param{const wxString\& }{item}, \param{char* }{data}, \param{int}{ size = -1}, \param{wxIPCFormat}{ format = wxCF\_TEXT}}
+
+Called by the client application to poke data into the server.
+Can be used to transfer arbitrary data to the server. Causes the
+server connection's
+\helpref{wxConnection::OnPoke}{wxddeconnectiononpoke} member to
+be called. If size is -1 the size is computed from the string
+length of data.
+
+Returns TRUE if successful.
+
+\membersection{wxConnection::Request}\label{wxddeconnectionrequest}
+
+\func{char*}{Request}{\param{const wxString\& }{item}, \param{int *}{size}, \param{wxIPCFormat}{ format = wxIPC\_TEXT}}
+
+Called by the client application to request data from the server.
+Causes the server connection's
+\helpref{wxConnection::OnRequest}{wxddeconnectiononrequest}
+member to be called. Size may be NULL or a pointer to a variable
+to receive the size of the requested item.
+
+Returns a character string (actually a pointer to the
+connection's buffer) if successful, NULL otherwise. This buffer
+does not need to be deleted.
+
+\membersection{wxConnection::StartAdvise}\label{wxddeconnectionstartadvise}
+
+\func{bool}{StartAdvise}{\param{const wxString\& }{item}}
+
+Called by the client application to ask if an advise loop can be
+started with the server. Causes the server connection's
+\helpref{wxConnection::OnStartAdvise}{wxddeconnectiononstartadvise}\rtfsp
+member to be called. Returns TRUE if the server okays it, FALSE
+otherwise.
+
+\membersection{wxConnection::StopAdvise}\label{wxddeconnectionstopadvise}
+
+\func{bool}{StopAdvise}{\param{const wxString\& }{item}}
+
+Called by the client application to ask if an advise loop can be
+stopped. Causes the server connection's
+\helpref{wxConnection::OnStopAdvise}{wxddeconnectiononstopadvise}
+member to be called. Returns TRUE if the server okays it, FALSE
+otherwise.
diff -ru2 -xCVS -x.#* -x*.orig -x*.rej -x*~ --new-file Copy of wxWindows\docs\latex\wx\ipcservr.tex wxWindows\docs\latex\wx\ipcservr.tex
--- Copy of wxWindows\docs\latex\wx\ipcservr.tex    Thu Jan 01 13:00:00 1970
+++ wxWindows\docs\latex\wx\ipcservr.tex    Fri Aug 23 22:27:50 2002
@@ -0,0 +1,68 @@
+\section{\class{wxServer}}\label{wxddeserver}
+
+A wxServer object represents the server part of a client-server
+DDE-like (Dynamic Data Exchange) conversation. The actual
+DDE-based implementation using wxDDEServer is available on Windows
+only, but a platform-independent, socket-based version of this
+API is available using wxTCPServer, which has the same API.
+
+To create a server which can communicate with a suitable client,
+you need to derive a class from wxConnection and another from
+wxServer. The custom wxConnection class will intercept
+communications in a `conversation' with a client, and the custom
+wxServer is required so that a user-overridden
+\helpref{wxServer::OnAcceptConnection}{wxddeserveronacceptconnection}
+member can return a wxConnection of the required class, when a
+connection is made. Look at the IPC sample and the
+\helpref{Interprocess communications overview}{ipcoverview} for
+an example of how to do this.
+
+\wxheading{Derived from}
+
+wxServerBase
+
+\wxheading{Include files}
+
+<wx/ipc.h>
+
+\wxheading{See also}
+
+\helpref{wxClient}{wxddeclient},
+\helpref{wxConnection}{wxddeconnection}, \helpref{IPC
+overview}{ipcoverview}
+
+\latexignore{\rtfignore{\wxheading{Members}}}
+
+\membersection{wxServer::wxServer}
+
+\func{}{wxServer}{\void}
+
+Constructs a server object.
+
+\membersection{wxServer::Create}
+
+\func{bool}{Create}{\param{const wxString\& }{service}}
+
+Registers the server using the given service name. Under Unix,
+the service name may be either an integer port identifier in
+which case an Internet domain socket will be used for the
+communications, or a valid file name (which shouldn't exist and
+will be deleted afterwards) in which case a Unix domain socket is
+created. FALSE is returned if the call failed (for example, the
+port number is already in use).
+
+\membersection{wxServer::OnAcceptConnection}\label{wxddeserveronacceptconnection}
+
+\func{virtual wxConnectionBase *}{OnAcceptConnection}{\param{const wxString\& }{topic}}
+
+When a client calls {\bf MakeConnection}, the server receives the
+message and this member is called. The application should derive a
+member to intercept this message and return a connection object of
+either the standard wxConnection type, or (more likely) of a
+user-derived type.
+
+If the topic is ``STDIO'', the application may wish to refuse the
+connection. Under UNIX, when a server is created the
+OnAcceptConnection message is always sent for standard input and
+output, but in the context of DDE messages it doesn't make a lot
+of sense.
diff -ru2 -xCVS -x.#* -x*.orig -x*.rej -x*~ --new-file Copy of wxWindows\docs\latex\wx\tcpclint.tex wxWindows\docs\latex\wx\tcpclint.tex
--- Copy of wxWindows\docs\latex\wx\tcpclint.tex    Tue Aug 27 22:21:53 2002
+++ wxWindows\docs\latex\wx\tcpclint.tex    Thu Jan 01 13:00:00 1970
@@ -1,68 +0,0 @@
-\section{\class{wxTCPClient}}\label{wxtcpclient}
-
-A wxTCPClient object represents the client part of a client-server conversation.
-It emulates a DDE-style protocol, but uses TCP/IP which is available on most platforms.
-
-A DDE-based implementation for Windows is available using \helpref{wxDDEClient}{wxddeclient}.
-
-To create a client which can communicate with a suitable server,
-you need to derive a class from wxTCPConnection and another from wxTCPClient.
-The custom wxTCPConnection class will intercept communications in
-a `conversation' with a server, and the custom wxTCPServer is required
-so that a user-overridden \helpref{wxTCPClient::OnMakeConnection}{wxtcpclientonmakeconnection} member can return
-a wxTCPConnection of the required class, when a connection is made.
-
-\wxheading{Derived from}
-
-wxClientBase\\
-\helpref{wxObject}{wxobject}
-
-\wxheading{Include files}
-
-<wx/sckipc.h>
-
-\wxheading{See also}
-
-\helpref{wxTCPServer}{wxtcpserver}, \helpref{wxTCPConnection}{wxtcpconnection},
-\helpref{Interprocess communications overview}{ipcoverview}
-
-\latexignore{\rtfignore{\wxheading{Members}}}
-
-\membersection{wxTCPClient::wxTCPClient}
-
-\func{}{wxTCPClient}{\void}
-
-Constructs a client object.
-
-\membersection{wxTCPClient::MakeConnection}\label{wxtcpclientmakeconnection}
-
-\func{wxConnectionBase *}{MakeConnection}{\param{const wxString\& }{host}, \param{const wxString\& }{service}, \param{const wxString\& }{topic}}
-
-Tries to make a connection with a server specified by the host
-(a machine name under Unix), service name (must
-contain an integer port number under Unix), and a topic string. If the
-server allows a connection, a wxTCPConnection object will be returned.
-The type of wxTCPConnection returned can be altered by overriding
-the \helpref{wxTCPClient::OnMakeConnection}{wxtcpclientonmakeconnection} member to return your own
-derived connection object.
-
-\membersection{wxTCPClient::OnMakeConnection}\label{wxtcpclientonmakeconnection}
-
-\func{wxConnectionBase *}{OnMakeConnection}{\void}
-
-The type of \helpref{wxTCPConnection}{wxtcpconnection} returned from a \helpref{wxTCPClient::MakeConnection}{wxtcpclientmakeconnection} call can
-be altered by deriving the {\bf OnMakeConnection} member to return your
-own derived connection object. By default, a wxTCPConnection
-object is returned.
-
-The advantage of deriving your own connection class is that it will
-enable you to intercept messages initiated by the server, such
-as \helpref{wxTCPConnection::OnAdvise}{wxtcpconnectiononadvise}. You may also want to
-store application-specific data in instances of the new class.
-
-\membersection{wxTCPClient::ValidHost}
-
-\func{bool}{ValidHost}{\param{const wxString\& }{host}}
-
-Returns TRUE if this is a valid host name, FALSE otherwise.
-
diff -ru2 -xCVS -x.#* -x*.orig -x*.rej -x*~ --new-file Copy of wxWindows\docs\latex\wx\tcpconn.tex wxWindows\docs\latex\wx\tcpconn.tex
--- Copy of wxWindows\docs\latex\wx\tcpconn.tex Tue Aug 27 22:21:53 2002
+++ wxWindows\docs\latex\wx\tcpconn.tex Thu Jan 01 13:00:00 1970
@@ -1,200 +0,0 @@
-\section{\class{wxTCPConnection}}\label{wxtcpconnection}
-
-A wxTCPClient object represents the connection between a client and a server.
-It emulates a DDE-style protocol, but uses TCP/IP which is available on most platforms.
-
-A DDE-based implementation for Windows is available using \helpref{wxDDEConnection}{wxddeconnection}.
-
-A wxTCPConnection object can be created by making a connection using a\rtfsp
-\helpref{wxTCPClient}{wxtcpclient} object, or by the acceptance of a connection by a\rtfsp
-\helpref{wxTCPServer}{wxtcpserver} object. The bulk of a conversation is controlled by
-calling members in a {\bf wxTCPConnection} object or by overriding its
-members.
-
-An application should normally derive a new connection class from
-wxTCPConnection, in order to override the communication event handlers
-to do something interesting.
-
-\wxheading{Derived from}
-
-wxConnectionBase\\
-\helpref{wxObject}{wxobject}
-
-\wxheading{Include files}
-
-<wx/sckipc.h>
-
-\wxheading{Types}
-
-\index{wxIPCFormat}wxIPCFormat is defined as follows:
-
-\begin{verbatim}
-enum wxIPCFormat
-{
-  wxIPC_INVALID =          0,
-  wxIPC_TEXT =             1,  /* CF_TEXT */
-  wxIPC_BITMAP =           2,  /* CF_BITMAP */
-  wxIPC_METAFILE =         3,  /* CF_METAFILEPICT */
-  wxIPC_SYLK =             4,
-  wxIPC_DIF =              5,
-  wxIPC_TIFF =             6,
-  wxIPC_OEMTEXT =          7,  /* CF_OEMTEXT */
-  wxIPC_DIB =              8,  /* CF_DIB */
-  wxIPC_PALETTE =          9,
-  wxIPC_PENDATA =          10,
-  wxIPC_RIFF =             11,
-  wxIPC_WAVE =             12,
-  wxIPC_UNICODETEXT =      13,
-  wxIPC_ENHMETAFILE =      14,
-  wxIPC_FILENAME =         15, /* CF_HDROP */
-  wxIPC_LOCALE =           16,
-  wxIPC_PRIVATE =          20
-};
-\end{verbatim}
-
-\wxheading{See also}
-
-\helpref{wxTCPClient}{wxtcpclient}, \helpref{wxTCPServer}{wxtcpserver}, \helpref{Interprocess communications overview}{ipcoverview}
-
-\latexignore{\rtfignore{\wxheading{Members}}}
-
-\membersection{wxTCPConnection::wxTCPConnection}
-
-\func{}{wxTCPConnection}{\void}
-
-\func{}{wxTCPConnection}{\param{char* }{buffer}, \param{int}{ size}}
-
-Constructs a connection object. If no user-defined connection object is
-to be derived from wxTCPConnection, then the constructor should not be
-called directly, since the default connection object will be provided on
-requesting (or accepting) a connection. However, if the user defines his
-or her own derived connection object, the \helpref{wxTCPServer::OnAcceptConnection}{wxtcpserveronacceptconnection}\rtfsp
-and/or \helpref{wxTCPClient::OnMakeConnection}{wxtcpclientonmakeconnection} members should be replaced by
-functions which construct the new connection object. If the arguments of
-the wxTCPConnection constructor are void, then a default buffer is
-associated with the connection. Otherwise, the programmer must provide a
-a buffer and size of the buffer for the connection object to use in
-transactions.
-
-\membersection{wxTCPConnection::Advise}
-
-\func{bool}{Advise}{\param{const wxString\& }{item}, \param{char* }{data}, \param{int}{ size = -1}, \param{wxIPCFormat}{ format = wxCF\_TEXT}}
-
-Called by the server application to advise the client of a change in
-the data associated with the given item. Causes the client
-connection's \helpref{wxTCPConnection::OnAdvise}{wxtcpconnectiononadvise}
-member to be called. Returns TRUE if successful.
-
-\membersection{wxTCPConnection::Execute}
-
-\func{bool}{Execute}{\param{char* }{data}, \param{int}{ size = -1}, \param{wxIPCFormat}{ format = wxCF\_TEXT}}
-
-Called by the client application to execute a command on the server. Can
-also be used to transfer arbitrary data to the server (similar
-to \helpref{wxTCPConnection::Poke}{wxtcpconnectionpoke} in that respect). Causes the
-server connection's \helpref{wxTCPConnection::OnExecute}{wxtcpconnectiononexecute} member to be
-called. Returns TRUE if successful.
-
-\membersection{wxTCPConnection::Disconnect}
-
-\func{bool}{Disconnect}{\void}
-
-Called by the client or server application to disconnect from the other
-program; it causes the \helpref{wxTCPConnection::OnDisconnect}{wxtcpconnectionondisconnect} message
-to be sent to the corresponding connection object in the other
-program. The default behaviour of {\bf OnDisconnect} is to delete the
-connection, but the calling application must explicitly delete its
-side of the connection having called {\bf Disconnect}. Returns TRUE if
-successful.
-
-\membersection{wxTCPConnection::OnAdvise}\label{wxtcpconnectiononadvise}
-
-\func{virtual bool}{OnAdvise}{\param{const wxString\& }{topic}, \param{const wxString\& }{item}, \param{char* }{data}, \param{int}{ size}, \param{wxIPCFormat}{ format}}
-
-Message sent to the client application when the server notifies it of a
-change in the data associated with the given item.
-
-\membersection{wxTCPConnection::OnDisconnect}\label{wxtcpconnectionondisconnect}
-
-\func{virtual bool}{OnDisconnect}{\void}
-
-Message sent to the client or server application when the other
-application notifies it to delete the connection. Default behaviour is
-to delete the connection object.
-
-\membersection{wxTCPConnection::OnExecute}\label{wxtcpconnectiononexecute}
-
-\func{virtual bool}{OnExecute}{\param{const wxString\& }{topic}, \param{char* }{data}, \param{int}{ size}, \param{wxIPCFormat}{ format}}
-
-Message sent to the server application when the client notifies it to
-execute the given data. Note that there is no item associated with
-this message.
-
-\membersection{wxTCPConnection::OnPoke}\label{wxtcpconnectiononpoke}
-
-\func{virtual bool}{OnPoke}{\param{const wxString\& }{topic}, \param{const wxString\& }{item}, \param{char* }{data}, \param{int}{ size}, \param{wxIPCFormat}{ format}}
-
-Message sent to the server application when the client notifies it to
-accept the given data.
-
-\membersection{wxTCPConnection::OnRequest}\label{wxtcpconnectiononrequest}
-
-\func{virtual char*}{OnRequest}{\param{const wxString\& }{topic}, \param{const wxString\& }{item}, \param{int *}{size}, \param{wxIPCFormat}{ format}}
-
-Message sent to the server application when the client
-calls \helpref{wxTCPConnection::Request}{wxtcpconnectionrequest}. The server
-should respond by returning a character string from {\bf OnRequest},
-or NULL to indicate no data.
-
-\membersection{wxTCPConnection::OnStartAdvise}\label{wxtcpconnectiononstartadvise}
-
-\func{virtual bool}{OnStartAdvise}{\param{const wxString\& }{topic}, \param{const wxString\& }{item}}
-
-Message sent to the server application by the client, when the client
-wishes to start an `advise loop' for the given topic and item. The
-server can refuse to participate by returning FALSE.
-
-\membersection{wxTCPConnection::OnStopAdvise}\label{wxtcpconnectiononstopadvise}
-
-\func{virtual bool}{OnStopAdvise}{\param{const wxString\& }{topic}, \param{const wxString\& }{item}}
-
-Message sent to the server application by the client, when the client
-wishes to stop an `advise loop' for the given topic and item. The
-server can refuse to stop the advise loop by returning FALSE, although
-this doesn't have much meaning in practice.
-
-\membersection{wxTCPConnection::Poke}\label{wxtcpconnectionpoke}
-
-\func{bool}{Poke}{\param{const wxString\& }{item}, \param{char* }{data}, \param{int}{ size = -1}, \param{wxIPCFormat}{ format = wxCF\_TEXT}}
-
-Called by the client application to poke data into the server. Can be
-used to transfer arbitrary data to the server. Causes the server
-connection's \helpref{wxTCPConnection::OnPoke}{wxtcpconnectiononpoke} member
-to be called. Returns TRUE if successful.
-
-\membersection{wxTCPConnection::Request}\label{wxtcpconnectionrequest}
-
-\func{char*}{Request}{\param{const wxString\& }{item}, \param{int *}{size}, \param{wxIPCFormat}{ format = wxIPC\_TEXT}}
-
-Called by the client application to request data from the server. Causes
-the server connection's \helpref{wxTCPConnection::OnRequest}{wxtcpconnectiononrequest} member to be called. Returns a
-character string (actually a pointer to the connection's buffer) if
-successful, NULL otherwise.
-
-\membersection{wxTCPConnection::StartAdvise}\label{wxtcpconnectionstartadvise}
-
-\func{bool}{StartAdvise}{\param{const wxString\& }{item}}
-
-Called by the client application to ask if an advise loop can be started
-with the server. Causes the server connection's \helpref{wxTCPConnection::OnStartAdvise}{wxtcpconnectiononstartadvise}\rtfsp
-member to be called. Returns TRUE if the server okays it, FALSE
-otherwise.
-
-\membersection{wxTCPConnection::StopAdvise}\label{wxtcpconnectionstopadvise}
-
-\func{bool}{StopAdvise}{\param{const wxString\& }{item}}
-
-Called by the client application to ask if an advise loop can be
-stopped. Causes the server connection's \helpref{wxTCPConnection::OnStopAdvise}{wxtcpconnectiononstopadvise} member
-to be called. Returns TRUE if the server okays it, FALSE otherwise.
-
diff -ru2 -xCVS -x.#* -x*.orig -x*.rej -x*~ --new-file Copy of wxWindows\docs\latex\wx\tcpservr.tex wxWindows\docs\latex\wx\tcpservr.tex
--- Copy of wxWindows\docs\latex\wx\tcpservr.tex    Tue Aug 27 22:21:53 2002
+++ wxWindows\docs\latex\wx\tcpservr.tex    Thu Jan 01 13:00:00 1970
@@ -1,49 +0,0 @@
-\section{\class{wxTCPServer}}\label{wxtcpserver}
-
-A wxTCPServer object represents the server part of a client-server conversation.
-It emulates a DDE-style protocol, but uses TCP/IP which is available on most platforms.
-
-A DDE-based implementation for Windows is available using \helpref{wxDDEServer}{wxddeserver}.
-
-\wxheading{Derived from}
-
-wxServerBase\\
-\helpref{wxObject}{wxobject}
-
-\wxheading{Include files}
-
-<wx/sckipc.h>
-
-\wxheading{See also}
-
-\helpref{wxTCPClient}{wxtcpclient}, \helpref{wxTCPConnection}{wxtcpconnection}, \helpref{IPC overview}{ipcoverview}
-
-\latexignore{\rtfignore{\wxheading{Members}}}
-
-\membersection{wxTCPServer::wxTCPServer}
-
-\func{}{wxTCPServer}{\void}
-
-Constructs a server object.
-
-\membersection{wxTCPServer::Create}
-
-\func{bool}{Create}{\param{const wxString\& }{service}}
-
-Registers the server using the given service name. Under Unix, the
-string must contain an integer id which is used as an Internet port
-number. FALSE is returned if the call failed (for example, the port
-number is already in use).
-
-\membersection{wxTCPServer::OnAcceptConnection}\label{wxtcpserveronacceptconnection}
-
-\func{virtual wxConnectionBase *}{OnAcceptConnection}{\param{const wxString\& }{topic}}
-
-When a client calls {\bf MakeConnection}, the server receives the
-message and this member is called. The application should derive a
-member to intercept this message and return a connection object of
-either the standard wxTCPConnection type, or of a user-derived type. If the
-topic is ``STDIO'', the application may wish to refuse the connection.
-Under Unix, when a server is created the OnAcceptConnection message is
-always sent for standard input and output.
-

 	  	 

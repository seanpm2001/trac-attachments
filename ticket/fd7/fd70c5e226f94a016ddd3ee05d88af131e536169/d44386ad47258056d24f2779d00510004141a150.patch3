diff -ru2 -xCVS -x.#* -x*.orig -x*.rej -x*~ c:\wx2dev\wxWindows/docs/latex/wx/category.tex wxWindows/docs/latex/wx/category.tex
--- c:\wx2dev\wxWindows/docs/latex/wx/category.tex	Tue May 28 08:55:36 2002
+++ wxWindows/docs/latex/wx/category.tex	Sun Sep 01 11:44:12 2002
@@ -212,5 +212,5 @@
 \twocolitem{\helpref{wxEraseEvent}{wxeraseevent}}{An erase background event}
 \twocolitem{\helpref{wxEvent}{wxevent}}{The event base class}
-\twocolitem{\helpref{wxFindDialogEvent}{wxfinddialogevent}}{Event sent by 
+\twocolitem{\helpref{wxFindDialogEvent}{wxfinddialogevent}}{Event sent by
 \helpref{wxFindReplaceDialog}{wxfindreplacedialog}}
 \twocolitem{\helpref{wxFocusEvent}{wxfocusevent}}{A window focus event}
@@ -367,15 +367,12 @@
 \overview{Overview}{ipcoverview}
 
-wxWindows provides a simple interprocess communications facilities
-based on DDE.
+wxWindows provides simple interprocess communications facilities
+based on Windows DDE, but available on most platforms using TCP.
 
 \twocolwidtha{6cm}
 \begin{twocollist}\itemsep=0pt
-\twocolitem{\helpref{wxDDEClient}{wxddeclient}}{Represents a client}
-\twocolitem{\helpref{wxDDEConnection}{wxddeconnection}}{Represents the connection between a client and a server}
-\twocolitem{\helpref{wxDDEServer}{wxddeserver}}{Represents a server}
-\twocolitem{\helpref{wxTCPClient}{wxtcpclient}}{Represents a client}
-\twocolitem{\helpref{wxTCPConnection}{wxtcpconnection}}{Represents the connection between a client and a server}
-\twocolitem{\helpref{wxTCPServer}{wxtcpserver}}{Represents a server}
+\twocolitem{\helpref{wxClient}{wxddeclient}}{Represents a client}
+\twocolitem{\helpref{wxConnection}{wxddeconnection}}{Represents the connection between a client and a server}
+\twocolitem{\helpref{wxServer}{wxddeserver}}{Represents a server}
 %\twocolitem{\helpref{wxSocketHandler}{wxsockethandler}}{Represents a socket handler}
 \end{twocollist}
@@ -624,3 +621,2 @@
 \twocolitem{\helpref{wxSingleInstanceChecker}{wxsingleinstancechecker}}{Check that only single program instance is running}
 \end{twocollist}
-
diff -ru2 -xCVS -x.#* -x*.orig -x*.rej -x*~ c:\wx2dev\wxWindows/docs/latex/wx/classes.tex wxWindows/docs/latex/wx/classes.tex
--- c:\wx2dev\wxWindows/docs/latex/wx/classes.tex	Thu Aug 08 09:52:00 2002
+++ wxWindows/docs/latex/wx/classes.tex	Sun Sep 01 11:44:12 2002
@@ -30,4 +30,5 @@
 \input choice.tex
 \input clasinfo.tex
+\input ipcclint.tex
 \input clientdc.tex
 \input clientdat.tex
@@ -43,4 +44,5 @@
 \input conditn.tex
 \input config.tex
+\input ipcconn.tex
 \input cshelp.tex
 \input control.tex
@@ -63,7 +65,4 @@
 \input db.tex
 \input dc.tex
-\input ddeclint.tex
-\input ddeconn.tex
-\input ddeservr.tex
 \input debugcxt.tex
 \input dialog.tex
@@ -249,4 +248,5 @@
 \input scrlwevt.tex
 \input semaphor.tex
+\input ipcservr.tex
 \input hprovsmp.tex
 \input sngchdlg.tex
@@ -286,7 +286,4 @@
 \input tabevent.tex
 \input taskbar.tex
-\input tcpclint.tex
-\input tcpconn.tex
-\input tcpservr.tex
 \input tempfile.tex
 \input text.tex
@@ -326,3 +323,2 @@
 \input zipstrm.tex
 \input strmzlib.tex
-
diff -ru2 -xCVS -x.#* -x*.orig -x*.rej -x*~ c:\wx2dev\wxWindows/docs/latex/wx/tipc.tex wxWindows/docs/latex/wx/tipc.tex
--- c:\wx2dev\wxWindows/docs/latex/wx/tipc.tex	Tue Apr 16 15:04:56 2002
+++ wxWindows/docs/latex/wx/tipc.tex	Sun Sep 01 11:44:12 2002
@@ -1,66 +1,74 @@
 \section{Interprocess communication overview}\label{ipcoverview}
 
-Classes: \helpref{wxDDEServer}{wxddeserver}, \helpref{wxDDEConnection}{wxddeconnection}, 
-\helpref{wxDDEClient}{wxddeclient}, 
-\helpref{wxTCPServer}{wxtcpserver}, \helpref{wxTCPConnection}{wxtcpconnection}, 
-\helpref{wxTCPClient}{wxtcpclient}
-
-wxWindows has a number of different classes to help with interprocess communication
-and network programming. This section only discusses one family of classes - the DDE-like
-protocol - but here's a list of other useful classes:
+Classes: \helpref{wxServer}{wxddeserver},
+\helpref{wxConnection}{wxddeconnection},
+\helpref{wxClient}{wxddeclient}
+%\helpref{wxTCPServer}{wxtcpserver}, \helpref{wxTCPConnection}{wxtcpconnection},
+%\helpref{wxTCPClient}{wxtcpclient}
+
+wxWindows has a number of different classes to help with
+interprocess communication and network programming. This section
+only discusses one family of classes -- the DDE-like protocol --
+but here's a list of other useful classes:
 
 \begin{itemize}\itemsep=0pt
-\item \helpref{wxSocketEvent}{wxsocketevent}, 
-\helpref{wxSocketBase}{wxsocketbase}, 
-\helpref{wxSocketClient}{wxsocketclient}, 
+\item \helpref{wxSocketEvent}{wxsocketevent},
+\helpref{wxSocketBase}{wxsocketbase},
+\helpref{wxSocketClient}{wxsocketclient},
 \helpref{wxSocketServer}{wxsocketserver}: classes for the low-level TCP/IP API.
-\item \helpref{wxProtocol}{wxprotocol}, \helpref{wxURL}{wxurl}, \helpref{wxFTP}{wxftp}, wxHTTP: classes
+\item \helpref{wxProtocol}{wxprotocol}, \helpref{wxURL}{wxurl}, \helpref{wxFTP}{wxftp}, \helpref{wxHTTP}{wxhttp}: classes
 for programming popular Internet protocols.
 \end{itemize}
 
-Further information on these classes will be available in due course.
+wxWindows' DDE-like protocol is a high-level protocol based on
+Windows DDE. There are two implementations of this DDE-like
+protocol: one using real DDE running on Windows only, and another
+using TCP/IP (sockets) that runs on most platforms. Since the API
+and virtually all of the behaviour is the same apart from the
+names of the classes, you should find it easy to switch between
+the two implementations.
+
+Notice that by including {\tt <wx/ipc.h>} you may define
+convenient synonyms for the IPC classes: {\tt wxServer} for either
+{\tt wxDDEServer} or {\tt wxTCPServer} depending on whether
+DDE-based or socket-based implementation is used and the same
+thing for {\tt wxClient} and {\tt wxConnection}.
+
+By default, DDE implementation is used under Windows. DDE works
+only within one computer. If you want to use IPC between
+different workstations you should define {\tt
+wxUSE\_DDE\_FOR\_IPC} as $0$ before including this header -- this
+will force using TCP/IP implementation even under Windows.
+
+
+The following description refers to wx... but remember that the
+equivalent wxTCP... and wxDDE... classes can be used in much the
+same way.
 
-Notice that by including {\tt <wx/ipc.h>} you may define convnient synonyms for
-the IPC classes: {\tt wxServer} for either {\tt wxDDEServer} or 
-{\tt wxTCPServer} depending on whether DDE-based or socket-based implementation
-is used and the same thing for {\tt wxClient} and {\tt wxConnection}. By
-default, DDE implementation is used under Windows. If you want to use IPC
-between the different workstations you should define {\tt wxUSE\_DDE\_FOR\_IPC}
-as $0$ before including this header -- this will force using TCP/IP
-implementation even under Windows.
-
-
-wxWindows has a high-level protocol based on Windows DDE.
-There are two implementations of this DDE-like protocol:
-one using real DDE running on Windows only, and another using TCP/IP (sockets) that runs
-on most platforms. Since the API is the same apart from the names of the classes, you
-should find it easy to switch between the two implementations.
-
-The following description refers to 'DDE' but remember that the equivalent wxTCP... classes
-can be used in much the same way.
-
-Three classes are central to the DDE API:
+Three classes are central to the DDE-like API:
 
 \begin{enumerate}\itemsep=0pt
-\item wxDDEClient. This represents the client application, and is used
+\item wxClient. This represents the client application, and is used
 only within a client program.
-\item wxDDEServer. This represents the server application, and is used
+\item wxServer. This represents the server application, and is used
 only within a server program.
-\item wxDDEConnection. This represents the connection from the current
-client or server to the other application (server or client), and can be used
-in both server and client programs. Most DDE
-transactions operate on this object.
+\item wxConnection. This represents the connection from the
+client to the server - both the client and the server use an
+instance of this class, one per connection. Most DDE transactions
+operate on this object.
 \end{enumerate}
 
-Messages between applications are usually identified by three variables:
-connection object, topic name and item name.  A data string is a fourth
-element of some messages. To create a connection (a conversation in
-Windows parlance), the client application sends the message
-MakeConnection to the client object, with a string service name to
-identify the server and a topic name to identify the topic for the
-duration of the connection. Under Unix, the service name may be either an
-integer port identifier in which case an Internet domain socket will be used
-for the communications or a valid file name (which shouldn't exist and will be
-deleted afterwards) in which case a Unix domain socket is created.
+Messages between applications are usually identified by three
+variables: connection object, topic name and item name.  A data
+string is a fourth element of some messages. To create a
+connection (a conversation in Windows parlance), the client
+application uses wxClient::MakeConnection to send a message to the
+server object, with a string service name to identify the server
+and a topic name to identify the topic for the duration of the
+connection. Under Unix, the service name may be either an integer
+port identifier in which case an Internet domain socket will be
+used for the communications or a valid file name (which shouldn't
+exist and will be deleted afterwards) in which case a Unix domain
+socket is created.
 
 {\bf SECURITY NOTE:} Using Internet domain sockets if extremely insecure for
@@ -68,21 +76,25 @@
 whenever possible!
 
-The server then responds and either vetoes the connection or allows it.
-If allowed, a connection object is created which persists until the
-connection is closed.  The connection object is then used for subsequent
-messages between client and server.
+The server then responds and either vetoes the connection or
+allows it. If allowed, both the server and client objects create
+wxConnection objects which persist until the connection is
+closed. The connection object is then used for sending and
+receiving subsequent messages between client and server -
+overriding virtual functions in your class derived from
+wxConnection allows you to handle the DDE messages.
 
 To create a working server, the programmer must:
 
 \begin{enumerate}\itemsep=0pt
-\item Derive a class from wxDDEServer.
-\item Override the handler OnAcceptConnection for accepting or rejecting a connection,
-on the basis of the topic argument. This member must create and return a connection
-object if the connection is accepted.
-\item Create an instance of your server object, and call Create to
+\item Derive a class from wxConnection, providing handlers for various messages sent to the server
+side of a wxConnection (e.g. OnExecute, OnRequest, OnPoke). Only
+the handlers actually required by the application need to be
+overridden.
+\item Derive a class from wxServer, overriding OnAcceptConnection
+to accept or reject a connection on the basis of the topic
+argument. This member must create and return an instance of the
+derived connection class if the connection is accepted.
+\item Create an instance of your server object and call Create to
 activate it, giving it a service name.
-\item Derive a class from wxDDEConnection.
-\item Provide handlers for various messages that are sent to the server
-side of a wxDDEConnection.
 \end{enumerate}
 
@@ -90,22 +102,26 @@
 
 \begin{enumerate}\itemsep=0pt
-\item Derive a class from wxDDEClient.
-\item Override the handler OnMakeConnection to create and return
-an appropriate connection object.
+\item Derive a class from wxConnection, providing handlers for various
+messages sent to the client side of a wxConnection (e.g.
+OnAdvise). Only the handlers actually required by the application
+need to be overridden.
+\item Derive a class from wxClient, overriding OnMakeConnection to
+create and return an instance of the derived connection class.
 \item Create an instance of your client object.
-\item Derive a class from wxDDEConnection.
-\item Provide handlers for various messages that are sent to the client
-side of a wxDDEConnection.
-\item When appropriate, create a new connection by sending a MakeConnection
-message to the client object, with arguments host name (processed in Unix only),
-service name, and topic name for this connection. The client object will call OnMakeConnection
-to create a connection object of the desired type.
-\item Use the wxDDEConnection member functions to send messages to the server.
+\item When appropriate, create a new connection using
+\helpref{wxClient::MakeConnection}{wxddeclientmakeconnection},
+with arguments host name (processed in Unix only, use `localhost'
+for local computer), service name, and topic name for this
+connection. The client object will call
+\helpref{OnMakeConnection}{wxddeclientonmakeconnection} to create
+a connection object of the derived class if the connection is
+successful.
+\item Use the wxConnection member functions to send messages to the server.
 \end{enumerate}
 
 \subsection{Data transfer}
 
-These are the ways that data can be transferred from one application to
-another.
+These are the ways that data can be transferred from one
+application to another. These are methods of wxConnection.
 
 \begin{itemize}\itemsep=0pt
@@ -141,22 +157,23 @@
 \subsection{More DDE details}
 
-A wxDDEClient object represents the client part of a client-server DDE
-(Dynamic Data Exchange) conversation (available in both
+A wxClient object initiates the client part of a client-server
+DDE-like (Dynamic Data Exchange) conversation (available in both
 Windows and Unix).
 
 To create a client which can communicate with a suitable server,
-you need to derive a class from wxDDEConnection and another from wxDDEClient.
-The custom wxDDEConnection class will intercept communications in
-a `conversation' with a server, and the custom wxDDEServer is required
-so that a user-overridden \helpref{wxDDEClient::OnMakeConnection}{wxddeclientonmakeconnection} member can return
-a wxDDEConnection of the required class, when a connection is made.
+you need to derive a class from wxConnection and another from
+wxClient. The custom wxConnection class will receive
+communications in a `conversation' with a server.  and the custom
+wxServer is required so that a user-overridden
+\helpref{wxDDEClient::OnMakeConnection}{wxddeclientonmakeconnection}
+member can return a wxDDEConnection of the required class, when a
+connection is made.
 
 For example:
 
 \begin{verbatim}
-class MyConnection: public wxDDEConnection
-{
+class MyConnection: public wxConnection {
  public:
-  MyConnection(void)::wxDDEConnection(ipc_buffer, 3999) {}
+  MyConnection(void)::wxConnection() {}
   ~MyConnection(void) { }
   bool OnAdvise(const wxString& topic, const wxString& item, char *data, int size, wxIPCFormat format)
@@ -164,6 +181,5 @@
 };
 
-class MyClient: public wxDDEClient
-{
+class MyClient: public wxClient {
  public:
   MyClient(void) {}
@@ -173,13 +189,18 @@
 \end{verbatim}
 
-Here, {\bf MyConnection} will respond to \helpref{OnAdvise}{wxddeconnectiononadvise} messages sent
-by the server.
-
-When the client application starts, it must create an instance of the derived wxDDEClient. In the following, command line
-arguments are used to pass the host name (the name of the machine the server is running
-on) and the server name (identifying the server process). Calling \helpref{wxDDEClient::MakeConnection}{wxddeclientmakeconnection}\rtfsp
-implicitly creates an instance of {\bf MyConnection} if the request for a
-connection is accepted, and the client then requests an {\it Advise} loop
-from the server, where the server calls the client when data has changed.
+Here, {\bf MyConnection} will respond to
+\helpref{OnAdvise}{wxddeconnectiononadvise} messages sent by the
+server by displaying a message box.
+
+When the client application starts, it must create an instance of
+the derived wxClient. In the following, command line arguments
+are used to pass the host name (the name of the machine the
+server is running on) and the server name (identifying the server
+process). Calling
+\helpref{wxDDEClient::MakeConnection}{wxddeclientmakeconnection}\rtfsp
+implicitly creates an instance of {\bf MyConnection} if the
+request for a connection is accepted, and the client then
+requests an {\it Advise} loop from the server (an Advise loop is
+where the server calls the client when data has changed).
 
 \begin{verbatim}
@@ -202,3 +223,2 @@
 Note that it is no longer necessary to call wxDDEInitialize or wxDDECleanUp, since
 wxWindows will do this itself if necessary.
-
diff -ru2 -xCVS -x.#* -x*.orig -x*.rej -x*~ c:\wx2dev\wxWindows/include/wx/ipcbase.h wxWindows/include/wx/ipcbase.h
--- c:\wx2dev\wxWindows/include/wx/ipcbase.h	Sat Aug 31 12:01:06 2002
+++ wxWindows/include/wx/ipcbase.h	Sun Sep 01 11:44:12 2002
@@ -7,5 +7,5 @@
 // RCS-ID:      $Id: ipcbase.h,v 1.13 2002/08/31 11:29:10 GD Exp $
 // Copyright:   (c) Julian Smart and Markus Holzem
-// Licence:   	wxWindows license
+// Licence:     wxWindows license
 /////////////////////////////////////////////////////////////////////////////
 
@@ -51,6 +51,11 @@
 
 public:
-  inline wxConnectionBase(void) {}
-  inline ~wxConnectionBase(void) {}
+  wxConnectionBase(wxChar *buffer, int size); // use external buffer
+  wxConnectionBase(); // use internal, adaptive buffer
+  wxConnectionBase(wxConnectionBase& copy);
+  ~wxConnectionBase(void);
+
+  void SetConnected( bool c ) { m_connected = c; }
+  bool GetConnected() { return m_connected; }
 
   // Calls that CLIENT can make
@@ -107,5 +112,17 @@
   // Default behaviour is to delete connection and return TRUE
   virtual bool OnDisconnect(void) = 0;
+
+  // return a buffer at least this size, reallocating buffer if needed
+  // returns NULL if using an inadequate user buffer - it can't be resized
+  wxChar *      GetBufferAtLeast( size_t bytes );
+
+protected:
+  bool          m_connected;
+private:
+  wxChar *      m_buffer;
+  size_t        m_buffersize;
+  bool          m_deletebufferwhendone;
 };
+
 
 class WXDLLEXPORT wxServerBase: public wxObject
diff -ru2 -xCVS -x.#* -x*.orig -x*.rej -x*~ c:\wx2dev\wxWindows/include/wx/sckipc.h wxWindows/include/wx/sckipc.h
--- c:\wx2dev\wxWindows/include/wx/sckipc.h	Sat Aug 31 12:01:06 2002
+++ wxWindows/include/wx/sckipc.h	Sun Sep 01 11:44:12 2002
@@ -62,5 +62,5 @@
 
 public:
-  wxTCPConnection(char *buffer, int size);
+  wxTCPConnection(wxChar *buffer, int size);
   wxTCPConnection();
   virtual ~wxTCPConnection();
diff -ru2 -xCVS -x.#* -x*.orig -x*.rej -x*~ c:\wx2dev\wxWindows/samples/ipc/client.cpp wxWindows/samples/ipc/client.cpp
--- c:\wx2dev\wxWindows/samples/ipc/client.cpp	Tue Apr 16 15:05:14 2002
+++ wxWindows/samples/ipc/client.cpp	Sun Sep 01 11:44:14 2002
@@ -31,5 +31,4 @@
 // Settings common to both executables: determines whether
 // we're using TCP/IP or real DDE.
-
 #include "ddesetup.h"
 
@@ -57,5 +56,4 @@
 // ----------------------------------------------------------------------------
 
-char ipc_buffer[4000];
 wxListBox *the_list = NULL;
 
@@ -120,14 +118,9 @@
 int MyApp::OnExit()
 {
-    if (the_connection)
-    {
-        the_connection->Disconnect();
-        delete the_connection;
-        the_connection = NULL;
-    }
-
     // will delete the connection too
     // Update: Seems it didn't delete the_connection, because there's a leak.
     // Deletion is now explicitly done a few lines up.
+    // another Update: in fact it's because OnDisconnect should delete it, but
+    // it wasn't
     delete my_client;
 
@@ -204,9 +197,4 @@
 }
 
-MyConnection::MyConnection()
-            : wxConnection(ipc_buffer, WXSIZEOF(ipc_buffer))
-{
-}
-
 bool MyConnection::OnAdvise(const wxString& topic, const wxString& item, char *data, int size, wxIPCFormat format)
 {
@@ -222,9 +210,12 @@
 bool MyConnection::OnDisconnect()
 {
+    // when connection is terminated, quit whole program
     wxWindow *win = wxTheApp->GetTopWindow();
     if ( win )
         win->Destroy();
 
-    return TRUE;
+    // delete self
+    the_connection = NULL;
+    return wxConnection::OnDisconnect();
 }
 
diff -ru2 -xCVS -x.#* -x*.orig -x*.rej -x*~ c:\wx2dev\wxWindows/samples/ipc/client.h wxWindows/samples/ipc/client.h
--- c:\wx2dev\wxWindows/samples/ipc/client.h	Wed Mar 20 07:15:00 2002
+++ wxWindows/samples/ipc/client.h	Sun Sep 01 11:44:14 2002
@@ -38,6 +38,4 @@
 {
 public:
-    MyConnection();
-
     bool OnAdvise(const wxString& topic, const wxString& item, char *data, int size, wxIPCFormat format);
     bool OnDisconnect();
diff -ru2 -xCVS -x.#* -x*.orig -x*.rej -x*~ c:\wx2dev\wxWindows/samples/ipc/server.cpp wxWindows/samples/ipc/server.cpp
--- c:\wx2dev\wxWindows/samples/ipc/server.cpp	Sun May 12 11:37:08 2002
+++ wxWindows/samples/ipc/server.cpp	Sun Sep 01 11:44:14 2002
@@ -58,5 +58,4 @@
 // ----------------------------------------------------------------------------
 
-char ipc_buffer[4000];
 MyConnection *the_connection = NULL;
 
@@ -135,4 +134,7 @@
     {
         wxString value = listBox->GetStringSelection();
+
+        /* Because the_connection only holds one connection, in this sample only
+           one connection can receive advise messages */
         if (the_connection)
         {
@@ -162,4 +164,12 @@
 }
 
+IPCDialogBox::~IPCDialogBox( )
+{
+    // wxWindows exit code destroys dialog before destroying the connection in
+    // OnExit, so make sure connection won't try to delete the dialog later.
+    if (m_connection)
+        m_connection->dialog = NULL;
+}
+
 void IPCDialogBox::OnQuit(wxCommandEvent& event)
 {
@@ -175,5 +185,5 @@
 {
     if ( topic == IPC_TOPIC )
-        return new MyConnection(ipc_buffer, WXSIZEOF(ipc_buffer));
+        return new MyConnection();
 
     // unknown topic
@@ -185,6 +195,6 @@
 // ----------------------------------------------------------------------------
 
-MyConnection::MyConnection(char *buf, int size)
-            : wxConnection(buf, size)
+MyConnection::MyConnection()
+            : wxConnection()
 {
     dialog = new IPCDialogBox(wxTheApp->GetTopWindow(), "Connection",
@@ -198,5 +208,9 @@
     if (the_connection)
     {
-        dialog->Destroy();
+        if (dialog)
+        {
+            dialog->m_connection = NULL;
+            dialog->Destroy();
+        }
         the_connection = NULL;
     }
diff -ru2 -xCVS -x.#* -x*.orig -x*.rej -x*~ c:\wx2dev\wxWindows/samples/ipc/server.h wxWindows/samples/ipc/server.h
--- c:\wx2dev\wxWindows/samples/ipc/server.h	Sat Jul 15 18:50:14 2000
+++ wxWindows/samples/ipc/server.h	Sun Sep 01 11:44:14 2002
@@ -43,5 +43,5 @@
 {
 public:
-    MyConnection(char *buf, int size);
+    MyConnection();
     ~MyConnection();
 
@@ -51,5 +51,4 @@
     bool OnStartAdvise(const wxString& topic, const wxString& item);
 
-private:
     IPCDialogBox *dialog;
 };
@@ -69,8 +68,8 @@
                  const wxSize& size,
                  MyConnection *the_connection);
+    ~IPCDialogBox( );
 
     void OnQuit(wxCommandEvent& event);
 
-private:
     MyConnection *m_connection;
 
diff -ru2 -xCVS -x.#* -x*.orig -x*.rej -x*~ c:\wx2dev\wxWindows/src/msw/dde.cpp wxWindows/src/msw/dde.cpp
--- c:\wx2dev\wxWindows/src/msw/dde.cpp	Fri Aug 30 20:38:06 2002
+++ wxWindows/src/msw/dde.cpp	Sun Sep 01 11:44:14 2002
@@ -134,6 +134,4 @@
 static wxList wxDDEServerObjects;
 
-char *DDEDefaultIPCBuffer = NULL;
-int DDEDefaultIPCBufferSize = 0;
 static bool DDEInitialized = FALSE;
 
@@ -199,6 +197,4 @@
         DDEIdInst = 0;
     }
-
-    delete [] DDEDefaultIPCBuffer;
 }
 
@@ -315,4 +311,5 @@
         wxDDEConnection *connection = (wxDDEConnection *)node->Data();
         wxNode *next = node->Next();
+        connection->SetConnected(false);
         connection->OnDisconnect(); // May delete the node implicitly
         node = next;
@@ -464,18 +461,6 @@
 
 wxDDEConnection::wxDDEConnection(char *buffer, int size)
+     : wxConnectionBase(buffer, size)
 {
-    if (buffer == NULL)
-    {
-        if (DDEDefaultIPCBuffer == NULL)
-            DDEDefaultIPCBuffer = new char[DDEDefaultIPCBufferSize];
-        m_bufPtr = DDEDefaultIPCBuffer;
-        m_bufSize = DDEDefaultIPCBufferSize;
-    }
-    else
-    {
-        m_bufPtr = buffer;
-        m_bufSize = size;
-    }
-
     m_client = NULL;
     m_server = NULL;
@@ -486,4 +471,5 @@
 
 wxDDEConnection::wxDDEConnection()
+     : wxConnectionBase()
 {
     m_hConv = 0;
@@ -491,13 +477,9 @@
     m_server = NULL;
     m_client = NULL;
-    if (DDEDefaultIPCBuffer == NULL)
-        DDEDefaultIPCBuffer = new char[DDEDefaultIPCBufferSize];
-
-    m_bufPtr = DDEDefaultIPCBuffer;
-    m_bufSize = DDEDefaultIPCBufferSize;
 }
 
 wxDDEConnection::~wxDDEConnection()
 {
+    Disconnect();
     if (m_server)
         m_server->GetConnections().DeleteObject(this);
@@ -509,4 +491,7 @@
 bool wxDDEConnection::Disconnect()
 {
+    if ( !GetConnected() )
+        return true;
+
     DDEDeleteConnection(GetHConv());
 
@@ -517,4 +502,6 @@
     }
 
+    SetConnected( false );  // so we don't try and disconnect again
+
     return ok;
 }
@@ -547,4 +534,5 @@
 {
     DWORD result;
+
     HSZ atom = DDEGetAtom(item);
 
@@ -562,5 +550,10 @@
     }
 
-    DWORD len = DdeGetData(returned_data, (LPBYTE)m_bufPtr, m_bufSize, 0);
+    DWORD len = DdeGetData(returned_data, NULL, 0, 0);
+
+    wxChar *data = GetBufferAtLeast( len );
+    wxASSERT_MSG(data != NULL,
+                 _T("Buffer too small in wxDDEConnection::Request") );
+    DdeGetData(returned_data, (LPBYTE)data, len, 0);
 
     DdeFreeDataHandle(returned_data);
@@ -569,5 +562,5 @@
         *size = (int)len;
 
-    return m_bufPtr;
+    return data;
 }
 
@@ -646,5 +639,5 @@
     HSZ item_atom = DDEGetAtom(item);
     HSZ topic_atom = DDEGetAtom(m_topicName);
-    m_sendingData = data;
+    m_sendingData = data;  // mrf: potential for scope problems here?
     m_dataSize = size;
     m_dataType = format;
@@ -719,8 +712,12 @@
             {
                 wxDDEConnection *connection = DDEFindConnection(hConv);
-                if (connection && connection->OnDisconnect())
+                if (connection)
                 {
-                    DDEDeleteConnection(hConv);  // Delete mapping: hConv => connection
-                    return (DDERETURN)(DWORD)TRUE;
+                    connection->SetConnected( false );
+                    if (connection->OnDisconnect())
+                    {
+                        DDEDeleteConnection(hConv);  // Delete mapping: hConv => connection
+                        return (DDERETURN)(DWORD)TRUE;
+                    }
                 }
                 break;
@@ -733,11 +730,16 @@
                 if (connection)
                 {
-                    DWORD len = DdeGetData(hData,
-                                           (LPBYTE)connection->m_bufPtr,
-                                           connection->m_bufSize,
-                                           0);
+                    DWORD len = DdeGetData(hData, NULL, 0, 0);
+
+                    wxChar *data = connection->GetBufferAtLeast( len );
+                    wxASSERT_MSG(data != NULL,
+                                 _T("Buffer too small in _DDECallback (XTYP_EXECUTE)") );
+
+                    DdeGetData(hData, (LPBYTE)data, len, 0);
+
                     DdeFreeDataHandle(hData);
+
                     if ( connection->OnExecute(connection->m_topicName,
-                                               connection->m_bufPtr,
+                                               data,
                                                (int)len,
                                                (wxIPCFormat) wFmt) )
@@ -789,13 +791,17 @@
                     wxString item_name = DDEStringFromAtom(hsz2);
 
-                    DWORD len = DdeGetData(hData,
-                                           (LPBYTE)connection->m_bufPtr,
-                                           connection->m_bufSize,
-                                           0);
+                    DWORD len = DdeGetData(hData, NULL, 0, 0);
+
+                    wxChar *data = connection->GetBufferAtLeast( len );
+                    wxASSERT_MSG(data != NULL,
+                                 _T("Buffer too small in _DDECallback (XTYP_EXECUTE)") );
+
+                    DdeGetData(hData, (LPBYTE)data, len, 0);
+
                     DdeFreeDataHandle(hData);
 
                     connection->OnPoke(connection->m_topicName,
                                        item_name,
-                                       (wxChar*)connection->m_bufPtr,
+                                       data,
                                        (int)len,
                                        (wxIPCFormat) wFmt);
@@ -872,12 +878,16 @@
                     wxString item_name = DDEStringFromAtom(hsz2);
 
-                    DWORD len = DdeGetData(hData,
-                                           (LPBYTE)connection->m_bufPtr,
-                                           connection->m_bufSize,
-                                           0);
+                    DWORD len = DdeGetData(hData, NULL, 0, 0);
+
+                    wxChar *data = connection->GetBufferAtLeast( len );
+                    wxASSERT_MSG(data != NULL,
+                                 _T("Buffer too small in _DDECallback (XTYP_ADVDATA)") );
+
+                    DdeGetData(hData, (LPBYTE)data, len, 0);
+
                     DdeFreeDataHandle(hData);
                     if ( connection->OnAdvise(connection->m_topicName,
                                               item_name,
-                                              connection->m_bufPtr,
+                                              data,
                                               (int)len,
                                               (wxIPCFormat) wFmt) )

 	  	 

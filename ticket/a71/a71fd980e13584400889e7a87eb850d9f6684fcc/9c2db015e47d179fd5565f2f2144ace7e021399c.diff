Index: textctrl.h
===================================================================
RCS file: /home/wxcvs/wxWindows/include/wx/textctrl.h,v
retrieving revision 1.13
diff -r1.13 textctrl.h
51a52,85
> // wxTextAttr: a structure containing the visual attributes of a text
> // ----------------------------------------------------------------------------
> 
> class WXDLLEXPORT wxTextAttr
> {
> public:
>     // ctors
>     wxTextAttr() { }
>     wxTextAttr(const wxColour& colText,
>                    const wxColour& colBack,
>                    const wxFont& font)
>         : m_colText(colText), m_colBack(colBack), m_font(font) { }
> 
>     // setters
>     void SetTextColour(const wxColour& colText) { m_colText = colText; }
>     void SetBackgroundColour(const wxColour& colBack) { m_colBack = colBack; }
>     void SetFont(const wxFont& font) { m_font = font; }
> 
>     // accessors
>     bool HasTextColour() const { return m_colText.Ok(); }
>     bool HasBackgroundColour() const { return m_colBack.Ok(); }
>     bool HasFont() const { return m_font.Ok(); }
> 
>     const wxColour& GetTextColour() const { return m_colText; }
>     const wxColour& GetBackgroundColour() const { return m_colBack; }
>     const wxFont& GetFont() const { return m_font; }
> 
> private:
>     wxColour m_colText,
>              m_colBack;
>     wxFont   m_font;
> };
> 
> // ----------------------------------------------------------------------------
137a172,175
>     virtual bool SetStyle( long start, long end, const wxTextAttr &style );
>     virtual bool SetDefaultStyle( const wxTextAttr &style );
>     virtual wxTextAttr GetDefaultStyle();
> 
162c200,201
<     wxString m_filename;
---
>     wxString    m_filename;
>     wxTextAttr  m_defaultStyle;
Index: textctrl.h
===================================================================
RCS file: /home/wxcvs/wxWindows/include/wx/gtk/textctrl.h,v
retrieving revision 1.32
diff -r1.32 textctrl.h
136a137,138
>     bool SetStyle( long start, long end, const wxTextAttr &style );
> 
143c145
< 
---
> 	
Index: textcmn.cpp
===================================================================
RCS file: /home/wxcvs/wxWindows/src/common/textcmn.cpp,v
retrieving revision 1.8
diff -r1.8 textcmn.cpp
71a72,91
> /* apply styling to text range */
> bool wxTextCtrlBase::SetStyle( long start, long end, const wxTextAttr &style )
> {
>     /* to be implemented in derived TextCtrl classes */
>     return FALSE;
> }
> 
> /* change default text attributes */
> bool wxTextCtrlBase::SetDefaultStyle( const wxTextAttr &style )
> {
>     m_defaultStyle= style;
>     return TRUE;
> }
> 
> /* get default text attributes */
> wxTextAttr wxTextCtrlBase::GetDefaultStyle()
> {
>     return m_defaultStyle;
> }
> 
Index: textctrl.cpp
===================================================================
RCS file: /home/wxcvs/wxWindows/src/gtk/textctrl.cpp,v
retrieving revision 1.113
diff -r1.113 textctrl.cpp
317c317
< 
---
>     
398a399,403
>     wxTextAttr tmp= wxTextAttr( parent->GetForegroundColour(),
>                        wxSystemSettings::GetSystemColour(wxSYS_COLOUR_WINDOW),
>                        parent->GetFont() );
>     SetDefaultStyle( tmp );
> 
486,487c491,506
<         /* this moves the cursor pos to behind the inserted text */
<         gint len = GTK_EDITABLE(m_text)->current_pos;
---
>         bool hasSpecialAttributes = m_defaultStyle.HasFont() ||
>                                     m_defaultStyle.HasTextColour() ||
>                                     m_defaultStyle.HasBackgroundColour();
>         if ( hasSpecialAttributes )
>         {
>             /* use default style here too */
>             gtk_text_insert( GTK_TEXT(m_text),
>                               m_defaultStyle.GetFont().GetInternalFont(),
>                               m_defaultStyle.GetTextColour().GetColor(),
>                               m_defaultStyle.GetBackgroundColour().GetColor(),
>                               text.mbc_str(), text.length());
>         }
>         else
>         {
>             /* this moves the cursor pos to behind the inserted text */
>             gint len = GTK_EDITABLE(m_text)->current_pos;
490,491c509,510
<         wxWX2MBbuf buf = text.mbc_str();
<         gtk_editable_insert_text( GTK_EDITABLE(m_text), buf, strlen(buf), &len );
---
>             wxWX2MBbuf buf = text.mbc_str();
>             gtk_editable_insert_text( GTK_EDITABLE(m_text), buf, strlen(buf), &len );
493c512
<         gtk_editable_insert_text( GTK_EDITABLE(m_text), text, text.Length(), &len );
---
>             gtk_editable_insert_text( GTK_EDITABLE(m_text), text, text.Length(), &len );
495c514,515
< 
---
>         }
>         
526,528c546,549
<         bool hasSpecialAttributes = m_font.Ok() ||
<                                     m_foregroundColour.Ok() ||
<                                     m_backgroundColour.Ok();
---
>         gint len = gtk_text_get_length( GTK_TEXT(m_text) );
>         bool hasSpecialAttributes = m_defaultStyle.HasFont() ||
>                                     m_defaultStyle.HasTextColour() ||
>                                     m_defaultStyle.HasBackgroundColour();
531,534c552,557
<              gtk_text_insert( GTK_TEXT(m_text),
<                               m_font.GetInternalFont(),
<                               m_foregroundColour.GetColor(),
<                               m_backgroundColour.GetColor(),
---
>             /* was append supposed not to work as append at all if text styling was used?!? */
>             gtk_text_set_point( GTK_TEXT(m_text), len );
>             gtk_text_insert( GTK_TEXT(m_text),
>                               m_defaultStyle.GetFont().GetInternalFont(),
>                               m_defaultStyle.GetTextColour().GetColor(),
>                               m_defaultStyle.GetBackgroundColour().GetColor(),
541d563
<             gint len = gtk_text_get_length( GTK_TEXT(m_text) );
558a581,625
> bool wxTextCtrl::SetStyle( long start, long end, const wxTextAttr &style )
> {
>     /* VERY dirty way to do that - removes the required text and re-adds it with styling */
>     if (m_windowStyle & wxTE_MULTILINE)
>     {
>         if ( !style.HasTextColour() || !style.HasBackgroundColour () ||
>              !style.HasFont() )
>         {
>             /* style does not have all the needed properties */
>             return FALSE;
>         }
>         gint l;
>         wxString tmp;
>         gint old_pos;
>     
>         l= gtk_text_get_length( GTK_TEXT(m_text) );
>         if (end>l || start<0)
>         {
>             /* parameters seem to be out of range */
>             return FALSE;
>         }
>         old_pos= gtk_editable_get_position( GTK_EDITABLE(m_text) );
>         char *text = gtk_editable_get_chars( GTK_EDITABLE(m_text), start, end );
>         tmp = wxString(text,*wxConvCurrent);
>         g_free( text );
> 
>         gtk_editable_delete_text( GTK_EDITABLE(m_text), start, end );
>         gtk_editable_set_position( GTK_EDITABLE(m_text), start );
>         gtk_text_insert( GTK_TEXT(m_text),
>                          style.GetFont().GetInternalFont(),
>                          style.GetTextColour().GetColor(),
>                          style.GetBackgroundColour().GetColor(),
>                          tmp.mbc_str(), tmp.length());
>         /* does not seem to help under GTK+ 1.2 !!! 
>         gtk_editable_set_position( GTK_EDITABLE(m_text), old_pos ); */
>         SetInsertionPoint( old_pos );
>         return TRUE;
>     }
>     else
>     {
>         /* cannot do this for GTK+'s Entry widget */
>         return FALSE;
>     }
> }
> 
1018a1086,1088
>     // change the active font too, so newly added text is similar to rest of text
>     m_defaultStyle.SetFont( font );
> 	
1052c1122
< bool wxTextCtrl::SetForegroundColour( const wxColour &WXUNUSED(colour) )
---
> bool wxTextCtrl::SetForegroundColour( const wxColour &colour )
1055a1126,1128
>     // change active foreground color too
>     m_defaultStyle.SetTextColour( colour );
> 
1064a1138,1140
> 
>     // change active background color too
>     m_defaultStyle.SetBackgroundColour( colour );
Index: controls.i
===================================================================
RCS file: /home/wxcvs/wxWindows/wxPython/src/controls.i,v
retrieving revision 1.6
diff -r1.6 controls.i
352a353,374
> class wxTextAttr
> {
> public:
>     // ctors
>     wxTextAttr(const wxColour& colText,
>                    const wxColour& colBack,
>                    const wxFont& font);
>     // setters
>     void SetTextColour(const wxColour& colText);
>     void SetBackgroundColour(const wxColour& colBack);
>     void SetFont(const wxFont& font);
> 
>     // accessors
>     bool HasTextColour();
>     bool HasBackgroundColour();
>     bool HasFont();
> 
>     const wxColour& GetTextColour();
>     const wxColour& GetBackgroundColour();
>     const wxFont& GetFont();
> };
> 
399a422,425
> 
>     bool SetDefaultStyle( const wxTextAttr &style );
>     wxTextAttr GetDefaultStyle();
>     bool SetStyle( long start, long end, const wxTextAttr &style );

 	  	 

Index: include/wx/datetime.h
===================================================================
--- include/wx/datetime.h	(revision 72577)
+++ include/wx/datetime.h	(working copy)
@@ -1062,6 +1062,8 @@
         // return the difference between two dates
     inline wxTimeSpan Subtract(const wxDateTime& dt) const;
     inline wxTimeSpan operator-(const wxDateTime& dt2) const;
+   
+    wxDateSpan DiffAsDateSpan(const wxDateTime& dt) const;
 
     // conversion to/from text
     // ------------------------------------------------------------------------
Index: interface/wx/datetime.h
===================================================================
--- interface/wx/datetime.h	(revision 72577)
+++ interface/wx/datetime.h	(working copy)
@@ -846,7 +846,15 @@
         them as a wxTimeSpan.
     */
     wxTimeSpan Subtract(const wxDateTime& dt) const;
+    /**
+       Returns the difference between @ dt and this as a wxDateSpan. 
+       Note that this span has all components (year, month, week, day) set, so 
+       arithmetics using a span one month or longer will not work as expected.
 
+       @since 2.9.5
+    */
+    wxDateSpan DiffAsDateSpan(const wxDateTime& dt) const;
+
     /**
         Adds the given date span to this object.
     */
Index: src/common/datetime.cpp
===================================================================
--- src/common/datetime.cpp	(revision 72577)
+++ src/common/datetime.cpp	(working copy)
@@ -1602,6 +1602,36 @@
     return *this;
 }
 
+wxDateSpan wxDateTime::DiffAsDateSpan(const wxDateTime& dt) const
+{
+    wxASSERT_MSG( IsValid() && dt.IsValid(), wxT("invalid wxDateTime"));
+
+    // Year diff
+    int y = GetYear() - dt.GetYear();
+    // It's only a year apart if dt(month/day) > this(month/day)
+    if (y > 0 && (GetMonth() < dt.GetMonth() || GetDay() < dt.GetDay()))
+        --y;
+
+    // Month diff
+    int m = (GetYear() * MONTHS_IN_YEAR + GetMonth()) - 
+            (dt.GetYear() * MONTHS_IN_YEAR + dt.GetMonth());
+    // It's only a month apart if dt(day) > this(day)
+    if (m > 0 && GetDay() < dt.GetDay())
+        --m;
+
+    // Get total day diff, using wxTimeSpan
+    int d = GetDateOnly().Subtract(dt.GetDateOnly()).GetDays();
+
+    // Set weeks 
+    int w = d / DAYS_PER_WEEK;
+
+    // Remove weeks from d, since wxDateSpan only keep days as the ones
+    // not in full weeks
+    d -= w * DAYS_PER_WEEK;
+
+    return wxDateSpan(y, m, w, d);
+}
+
 // ----------------------------------------------------------------------------
 // Weekday and monthday stuff
 // ----------------------------------------------------------------------------
Index: tests/datetime/datetimetest.cpp
===================================================================
--- tests/datetime/datetimetest.cpp	(revision 72577)
+++ tests/datetime/datetimetest.cpp	(working copy)
@@ -231,6 +231,7 @@
         CPPUNIT_TEST( TestTimeArithmetics );
         CPPUNIT_TEST( TestDSTBug );
         CPPUNIT_TEST( TestDateOnly );
+        CPPUNIT_TEST( TestDateSpanDiff );
     CPPUNIT_TEST_SUITE_END();
 
     void TestLeapYears();
@@ -249,6 +250,7 @@
     void TestTimeArithmetics();
     void TestDSTBug();
     void TestDateOnly();
+    void TestDateSpanDiff();
 
     DECLARE_NO_COPY_CLASS(DateTimeTestCase)
 };
@@ -1303,4 +1305,15 @@
     CPPUNIT_ASSERT_EQUAL( wxDateTime::Today(), wxDateTime::Now().GetDateOnly() );
 }
 
+void DateTimeTestCase::TestDateSpanDiff()
+{
+    wxDateTime dt1(11, wxDateTime::Jan, 1996);
+    wxDateTime dt2(5, wxDateTime::Jun, 1998);
+    wxDateSpan diff = dt2.DiffAsDateSpan(dt1);  
+
+    CPPUNIT_ASSERT_EQUAL(1, diff.GetYears());
+    CPPUNIT_ASSERT_EQUAL(28, diff.GetMonths());
+    CPPUNIT_ASSERT_EQUAL(125, diff.GetWeeks());
+    CPPUNIT_ASSERT_EQUAL(0, diff.GetDays());
+}
 #endif // wxUSE_DATETIME

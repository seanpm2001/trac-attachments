Index: include/wx/datetime.h
===================================================================
--- include/wx/datetime.h	(revision 72583)
+++ include/wx/datetime.h	(working copy)
@@ -1062,6 +1062,8 @@
         // return the difference between two dates
     inline wxTimeSpan Subtract(const wxDateTime& dt) const;
     inline wxTimeSpan operator-(const wxDateTime& dt2) const;
+   
+    wxDateSpan DiffAsDateSpan(const wxDateTime& dt) const;
 
     // conversion to/from text
     // ------------------------------------------------------------------------
Index: interface/wx/datetime.h
===================================================================
--- interface/wx/datetime.h	(revision 72583)
+++ interface/wx/datetime.h	(working copy)
@@ -846,7 +846,13 @@
         them as a wxTimeSpan.
     */
     wxTimeSpan Subtract(const wxDateTime& dt) const;
+    /**
+       Returns the difference between @ dt and this as a wxDateSpan. 
 
+       @since 2.9.5
+    */
+    wxDateSpan DiffAsDateSpan(const wxDateTime& dt) const;
+
     /**
         Adds the given date span to this object.
     */
Index: src/common/datetime.cpp
===================================================================
--- src/common/datetime.cpp	(revision 72583)
+++ src/common/datetime.cpp	(working copy)
@@ -1602,6 +1602,47 @@
     return *this;
 }
 
+wxDateSpan wxDateTime::DiffAsDateSpan(const wxDateTime& dt) const
+{
+    wxASSERT_MSG( IsValid() && dt.IsValid(), wxT("invalid wxDateTime"));
+    
+    // If dt is larger than this, calculations below needs to be inverted
+    int inv = 1;
+    if (dt > *this)
+        inv = -1;
+
+    int y = GetYear() - dt.GetYear();
+    
+    // If month diff is negative, dt is the year before, so decrease year
+    //   and set month diff to its inverse
+    // january - december is not -11, but 1
+    int m = GetMonth() - dt.GetMonth();
+    if (m * inv < 0)
+    {
+        m += inv * MONTHS_IN_YEAR;
+        y -= inv;
+    }
+
+    // Same calc for days as for months above
+    // Use number of days in month from the month which end date we're crossing
+    int d = GetDay() - dt.GetDay();
+    if (d * inv < 0)
+    {
+        d += inv * wxDateTime::GetNumberOfDays(
+            inv > 0 ? dt.GetMonth() : GetMonth(), 
+            inv > 0 ? dt.GetYear() : GetMonth());
+        m -= inv;
+    }
+
+    int w =  d / DAYS_PER_WEEK;
+
+    // Remove weeks from d, since wxDateSpan only keep days as the ones
+    // not in complete weeks
+    d -= w * DAYS_PER_WEEK;
+
+    return wxDateSpan(y, m, w, d);
+}
+
 // ----------------------------------------------------------------------------
 // Weekday and monthday stuff
 // ----------------------------------------------------------------------------
Index: tests/datetime/datetimetest.cpp
===================================================================
--- tests/datetime/datetimetest.cpp	(revision 72583)
+++ tests/datetime/datetimetest.cpp	(working copy)
@@ -1212,6 +1212,7 @@
         CPPUNIT_ASSERT_EQUAL( dt, dt1 - span );
         CPPUNIT_ASSERT_EQUAL( dt, dt2 + span );
         CPPUNIT_ASSERT_EQUAL( dt1, dt2 + 2*span );
+        CPPUNIT_ASSERT_EQUAL( span, dt1.DiffAsDateSpan(dt) );
     }
 }
 
Index: tests/testdate.h
===================================================================
--- tests/testdate.h	(revision 72583)
+++ tests/testdate.h	(working copy)
@@ -20,6 +20,17 @@
     return ostr;
 }
 
+// need this to be able to use CPPUNIT_ASSERT_EQUAL with wxDateSpan objects
+inline std::ostream& operator<<(std::ostream& ostr, const wxDateSpan& span)
+{
+    ostr << span.GetYears() << ", "
+         << span.GetMonths() << ", " 
+         << span.GetWeeks() << ", " 
+         << span.GetDays();
+
+    return ostr;
+}
+
 WX_CPPUNIT_ALLOW_EQUALS_TO_INT(wxDateTime::wxDateTime_t)
 
 #endif // _WX_TESTS_TESTDATE_H_

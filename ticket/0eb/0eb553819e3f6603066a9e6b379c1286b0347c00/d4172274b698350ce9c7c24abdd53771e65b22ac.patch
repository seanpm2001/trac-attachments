Index: include/wx/app.h
===================================================================
--- include/wx/app.h	(revision 61932)
+++ include/wx/app.h	(working copy)
@@ -385,7 +385,7 @@
     // the arguments are the location of the failed assert (func may be empty
     // if the compiler doesn't support C99 __FUNCTION__), the text of the
     // assert itself and the user-specified message
-    virtual void OnAssertFailure(const wxChar *file,
+    virtual int OnAssertFailure(const wxChar *file,
                                  int line,
                                  const wxChar *func,
                                  const wxChar *cond,
@@ -393,7 +393,7 @@
 
     // old version of the function without func parameter, for compatibility
     // only, override OnAssertFailure() in the new code
-    virtual void OnAssert(const wxChar *file,
+    virtual int OnAssert(const wxChar *file,
                           int line,
                           const wxChar *cond,
                           const wxChar *msg);
Index: include/wx/apptrait.h
===================================================================
--- include/wx/apptrait.h	(revision 61932)
+++ include/wx/apptrait.h	(working copy)
@@ -93,8 +93,9 @@
     // base class version has an implementation (in spite of being pure
     // virtual) in base/appbase.cpp which can be called as last resort.
     //
-    // return true to suppress subsequent asserts, false to continue as before
-    virtual bool ShowAssertDialog(const wxString& msg) = 0;
+    // return wxYES,wxNO,wxCANCEL. If wxCANCEL suppress subsequent asserts,
+    // else continue as before
+    virtual int ShowAssertDialog(const wxString& msg) = 0;
 
     // return true if fprintf(stderr) goes somewhere, false otherwise
     virtual bool HasStderr() = 0;
@@ -216,7 +217,7 @@
 #endif // wxUSE_FONTMAP
     virtual wxRendererNative *CreateRenderer();
 
-    virtual bool ShowAssertDialog(const wxString& msg);
+    virtual int ShowAssertDialog(const wxString& msg);
     virtual bool HasStderr();
 
     // the GetToolkitVersion for console application is always the same
@@ -252,7 +253,7 @@
 #endif // wxUSE_FONTMAP
     virtual wxRendererNative *CreateRenderer();
 
-    virtual bool ShowAssertDialog(const wxString& msg);
+    virtual int ShowAssertDialog(const wxString& msg);
     virtual bool HasStderr();
 
     virtual bool IsUsingUniversalWidgets() const
Index: include/wx/debug.h
===================================================================
--- include/wx/debug.h	(revision 61932)
+++ include/wx/debug.h	(working copy)
@@ -75,7 +75,7 @@
     Type for the function called in case of assert failure, see
     wxSetAssertHandler().
  */
-typedef void (*wxAssertHandler_t)(const wxString& file,
+typedef int (*wxAssertHandler_t)(const wxString& file,
                                   int line,
                                   const wxString& func,
                                   const wxString& cond,
@@ -177,18 +177,18 @@
 //
 // also notice that these functions can't be inline as wxString is not defined
 // yet (and can't be as wxString code itself may use assertions)
-extern void WXDLLIMPEXP_BASE wxOnAssert(const char *file,
+extern int WXDLLIMPEXP_BASE wxOnAssert(const char *file,
                                         int line,
                                         const char *func,
                                         const char *cond);
 
-extern void WXDLLIMPEXP_BASE wxOnAssert(const char *file,
+extern int WXDLLIMPEXP_BASE wxOnAssert(const char *file,
                                         int line,
                                         const char *func,
                                         const char *cond,
                                         const char *msg);
 
-extern void WXDLLIMPEXP_BASE wxOnAssert(const char *file,
+extern int WXDLLIMPEXP_BASE wxOnAssert(const char *file,
                                         int line,
                                         const char *func,
                                         const char *cond,
@@ -198,7 +198,7 @@
 // this version is for compatibility with wx 2.8 Unicode build only, we don't
 // use it ourselves any more except in ANSI-only build in which case it is all
 // we need
-extern void WXDLLIMPEXP_BASE wxOnAssert(const wxChar *file,
+extern int WXDLLIMPEXP_BASE wxOnAssert(const wxChar *file,
                                         int line,
                                         const char *func,
                                         const wxChar *cond,
@@ -207,24 +207,24 @@
 // these overloads work when msg passed to debug macro is a string and we
 // also have to provide wxCStrData overload to resolve ambiguity which would
 // otherwise arise from wxASSERT( s.c_str() )
-extern void WXDLLIMPEXP_BASE wxOnAssert(const wxString& file,
+extern int WXDLLIMPEXP_BASE wxOnAssert(const wxString& file,
                                         int line,
                                         const wxString& func,
                                         const wxString& cond,
                                         const wxString& msg);
 
-extern void WXDLLIMPEXP_BASE wxOnAssert(const wxString& file,
+extern int WXDLLIMPEXP_BASE wxOnAssert(const wxString& file,
                                         int line,
                                         const wxString& func,
                                         const wxString& cond);
 
-extern void WXDLLIMPEXP_BASE wxOnAssert(const char *file,
+extern int WXDLLIMPEXP_BASE wxOnAssert(const char *file,
                                         int line,
                                         const char *func,
                                         const char *cond,
                                         const wxCStrData& msg);
 
-extern void WXDLLIMPEXP_BASE wxOnAssert(const char *file,
+extern int WXDLLIMPEXP_BASE wxOnAssert(const char *file,
                                         int line,
                                         const char *func,
                                         const char *cond,
@@ -252,7 +252,12 @@
 #if wxDEBUG_LEVEL
     // call this function to break into the debugger unconditionally (assuming
     // the program is running under debugger, of course)
-    extern void WXDLLIMPEXP_BASE wxTrap();
+    // break into the debugger
+    #ifdef __VISUALC__
+      #define wxTrap() __debugbreak()
+    #else
+      extern void WXDLLIMPEXP_BASE wxTrap();
+    #endif // Win VisualC
 
     // assert checks if the condition is true and calls the assert handler with
     // the provided message if it isn't
@@ -261,11 +266,15 @@
     //     statements containing it are compiled in the same way whether it is
     //     defined as empty or not; also notice that we can't use ";" instead
     //     of "{}" as some compilers warn about "possible unwanted ;" then
-    #define wxASSERT_MSG(cond, msg)                                           \
-        if ( !wxTheAssertHandler || (cond) )                                  \
-        {}                                                                    \
-        else                                                                  \
-            wxOnAssert(__FILE__, __LINE__, __WXFUNCTION__, #cond, msg)
+    #define wxASSERT_MSG(cond, msg)                                         \
+        do {                                                                \
+          if ( !wxTheAssertHandler || (cond) )                              \
+          {}                                                                \
+          else{                                                             \
+            if (wxYES == wxOnAssert(__FILE__, __LINE__, __WXFUNCTION__, #cond, msg))\
+              wxTrap();                                                \
+          }                                                                 \
+        }while(wxFalse)
 
     // a version without any additional message, don't use unless condition
     // itself is fully self-explanatory
@@ -273,11 +282,16 @@
 
     // wxFAIL is a special form of assert: it always triggers (and so is
     // usually used in normally unreachable code)
-    #define wxFAIL_COND_MSG(cond, msg) \
-        if ( !wxTheAssertHandler )                                            \
-        {}                                                                    \
-        else                                                                  \
-            wxOnAssert(__FILE__, __LINE__,  __WXFUNCTION__, cond, msg)
+    #define wxFAIL_COND_MSG(cond, msg)                                        \
+        do{                                                                   \
+          if ( !wxTheAssertHandler )                                          \
+          {}                                                                  \
+          else{                                                               \
+              if (wxYES == wxOnAssert(__FILE__, __LINE__,  __WXFUNCTION__, cond, msg))\
+                wxTrap();                                                \
+          }                                                                   \
+        }while(wxFalse)
+
     #define wxFAIL_MSG(msg) wxFAIL_COND_MSG("Assert failure", msg)
     #define wxFAIL wxFAIL_MSG((const char*)NULL)
 #else // !wxDEBUG_LEVEL
Index: src/common/appbase.cpp
===================================================================
--- src/common/appbase.cpp	(revision 61932)
+++ src/common/appbase.cpp	(working copy)
@@ -87,12 +87,12 @@
 
 #if wxDEBUG_LEVEL
     // really just show the assert dialog
-    static bool DoShowAssertDialog(const wxString& msg);
+    static int DoShowAssertDialog(const wxString& msg);
 
     // prepare for showing the assert dialog, use the given traits or
     // DoShowAssertDialog() as last fallback to really show it
     static
-    void ShowAssertDialog(const wxString& file,
+    int ShowAssertDialog(const wxString& file,
                           int line,
                           const wxString& func,
                           const wxString& cond,
@@ -748,14 +748,14 @@
     return true;
 }
 
-void wxAppConsoleBase::OnAssertFailure(const wxChar *file,
+int wxAppConsoleBase::OnAssertFailure(const wxChar *file,
                                        int line,
                                        const wxChar *func,
                                        const wxChar *cond,
                                        const wxChar *msg)
 {
 #if wxDEBUG_LEVEL
-    ShowAssertDialog(file, line, func, cond, msg, GetTraits());
+    return ShowAssertDialog(file, line, func, cond, msg, GetTraits());
 #else
     // this function is still present even in debug level 0 build for ABI
     // compatibility reasons but is never called there and so can simply do
@@ -765,15 +765,16 @@
     wxUnusedVar(func);
     wxUnusedVar(cond);
     wxUnusedVar(msg);
+    return wxYES;
 #endif // wxDEBUG_LEVEL/!wxDEBUG_LEVEL
 }
 
-void wxAppConsoleBase::OnAssert(const wxChar *file,
+int wxAppConsoleBase::OnAssert(const wxChar *file,
                                 int line,
                                 const wxChar *cond,
                                 const wxChar *msg)
 {
-    OnAssertFailure(file, line, NULL, cond, msg);
+    return OnAssertFailure(file, line, NULL, cond, msg);
 }
 
 // ============================================================================
@@ -813,7 +814,7 @@
     return NULL;
 }
 
-bool wxConsoleAppTraitsBase::ShowAssertDialog(const wxString& msg)
+int wxConsoleAppTraitsBase::ShowAssertDialog(const wxString& msg)
 {
     return wxAppTraitsBase::ShowAssertDialog(msg);
 }
@@ -865,7 +866,7 @@
 }
 #endif // wxUSE_THREADS
 
-bool wxAppTraitsBase::ShowAssertDialog(const wxString& msgOriginal)
+int wxAppTraitsBase::ShowAssertDialog(const wxString& msgOriginal)
 {
 #if wxDEBUG_LEVEL
     wxString msg = msgOriginal;
@@ -887,7 +888,7 @@
 #else // !wxDEBUG_LEVEL
     wxUnusedVar(msgOriginal);
 
-    return false;
+    return wxNO;
 #endif // wxDEBUG_LEVEL/!wxDEBUG_LEVEL
 }
 
@@ -992,10 +993,12 @@
 {
     return x == y;
 }
-
+ 
 #if wxDEBUG_LEVEL
 
 // break into the debugger
+#ifndef __VISUALC__
+
 void wxTrap()
 {
 #if defined(__WXMSW__) && !defined(__WXMICROWIN__)
@@ -1009,8 +1012,10 @@
 #endif // Win/Unix
 }
 
+#endif
+
 // default assert handler
-static void
+static int
 wxDefaultAssertHandler(const wxString& file,
                        int line,
                        const wxString& func,
@@ -1024,22 +1029,20 @@
     if ( guard.IsInside() )
     {
         // can't use assert here to avoid infinite loops, so just trap
-        wxTrap();
-
-        return;
+        return wxYES;
     }
 
     if ( !wxTheApp )
     {
         // by default, show the assert dialog box -- we can't customize this
         // behaviour
-        ShowAssertDialog(file, line, func, cond, msg);
+        return ShowAssertDialog(file, line, func, cond, msg);
     }
     else
     {
         // let the app process it as it wants
         // FIXME-UTF8: use wc_str(), not c_str(), when ANSI build is removed
-        wxTheApp->OnAssertFailure(file.c_str(), line, func.c_str(),
+        return wxTheApp->OnAssertFailure(file.c_str(), line, func.c_str(),
                                   cond.c_str(), msg.c_str());
     }
 }
@@ -1050,25 +1053,24 @@
 {
     wxTheAssertHandler = wxDefaultAssertHandler;
 }
-
-void wxOnAssert(const wxString& file,
+int wxOnAssert(const wxString& file,
                 int line,
                 const wxString& func,
                 const wxString& cond,
                 const wxString& msg)
 {
-    wxTheAssertHandler(file, line, func, cond, msg);
+    return wxTheAssertHandler(file, line, func, cond, msg);
 }
 
-void wxOnAssert(const wxString& file,
+int wxOnAssert(const wxString& file,
                 int line,
                 const wxString& func,
                 const wxString& cond)
 {
-    wxTheAssertHandler(file, line, func, cond, wxString());
+    return wxTheAssertHandler(file, line, func, cond, wxString());
 }
 
-void wxOnAssert(const wxChar *file,
+int wxOnAssert(const wxChar *file,
                 int line,
                 const char *func,
                 const wxChar *cond,
@@ -1078,54 +1080,56 @@
     // so it could be called directly from the user code and this might happen
     // even when wxTheAssertHandler is NULL
 #if wxUSE_UNICODE
-    if ( wxTheAssertHandler )
+    if ( !wxTheAssertHandler )
+        return wxYES;
+    else
 #endif // wxUSE_UNICODE
-        wxTheAssertHandler(file, line, func, cond, msg);
+        return wxTheAssertHandler(file, line, func, cond, msg);
 }
 
-void wxOnAssert(const char *file,
+int wxOnAssert(const char *file,
                 int line,
                 const char *func,
                 const char *cond,
                 const wxString& msg)
 {
-    wxTheAssertHandler(file, line, func, cond, msg);
+    return wxTheAssertHandler(file, line, func, cond, msg);
 }
 
-void wxOnAssert(const char *file,
+int wxOnAssert(const char *file,
                 int line,
                 const char *func,
                 const char *cond,
                 const wxCStrData& msg)
 {
-    wxTheAssertHandler(file, line, func, cond, msg);
+   return wxTheAssertHandler(file, line, func, cond, msg);
 }
 
 #if wxUSE_UNICODE
-void wxOnAssert(const char *file,
+int wxOnAssert(const char *file,
                 int line,
                 const char *func,
                 const char *cond)
 {
-    wxTheAssertHandler(file, line, func, cond, wxString());
+    return wxTheAssertHandler(file, line, func, cond, wxString());
 }
 
-void wxOnAssert(const char *file,
+int wxOnAssert(const char *file,
                 int line,
                 const char *func,
                 const char *cond,
                 const char *msg)
 {
-    wxTheAssertHandler(file, line, func, cond, msg);
+    return wxTheAssertHandler(file, line, func, cond, msg);
 }
 
-void wxOnAssert(const char *file,
+int wxOnAssert(const char *file,
                 int line,
                 const char *func,
                 const char *cond,
                 const wxChar *msg)
 {
-    wxTheAssertHandler(file, line, func, cond, msg);
+    return wxTheAssertHandler(file, line, func, cond, msg);
 }
 #endif // wxUSE_UNICODE
 
@@ -1155,7 +1159,7 @@
 #if wxDEBUG_LEVEL
 
 static
-bool DoShowAssertDialog(const wxString& msg)
+int DoShowAssertDialog(const wxString& msg)
 {
     // under MSW we can show the dialog even in the console mode
 #if defined(__WXMSW__) && !defined(__WXMICROWIN__)
@@ -1172,30 +1176,31 @@
                           MB_YESNOCANCEL | MB_ICONSTOP ) )
     {
         case IDYES:
-            wxTrap();
-            break;
+            //wxTrap();
+            return wxYES;
 
+        case IDNO:
+            //ignore for this time
+            return wxNO;
+
         case IDCANCEL:
             // stop the asserts
-            return true;
-
-        //case IDNO: nothing to do
+            return wxCANCEL;
     }
 #else // !__WXMSW__
     wxFprintf(stderr, wxT("%s\n"), msg.c_str());
     fflush(stderr);
 
     // TODO: ask the user to enter "Y" or "N" on the console?
-    wxTrap();
 #endif // __WXMSW__/!__WXMSW__
 
     // continue with the asserts
-    return false;
+    return wxNO;
 }
 
 // show the standard assert dialog
 static
-void ShowAssertDialog(const wxString& file,
+int ShowAssertDialog(const wxString& file,
                       int line,
                       const wxString& func,
                       const wxString& cond,
@@ -1251,19 +1256,22 @@
     if ( !s_bNoAsserts )
     {
         // send it to the normal log destination
+        int ret = wxNO;
         wxLogDebug(wxT("%s"), msg.c_str());
-
         if ( traits )
         {
             // delegate showing assert dialog (if possible) to that class
-            s_bNoAsserts = traits->ShowAssertDialog(msg);
+            ret = traits->ShowAssertDialog(msg);
         }
         else // no traits object
         {
             // fall back to the function of last resort
-            s_bNoAsserts = DoShowAssertDialog(msg);
+            ret = DoShowAssertDialog(msg);
         }
+        s_bNoAsserts = ( wxCANCEL == ret );
+        return ret;
     }
+    return wxNO;
 }
 
 #endif // wxDEBUG_LEVEL
Index: src/common/appcmn.cpp
===================================================================
--- src/common/appcmn.cpp	(revision 61932)
+++ src/common/appcmn.cpp	(working copy)
@@ -445,7 +445,7 @@
     return NULL;
 }
 
-bool wxGUIAppTraitsBase::ShowAssertDialog(const wxString& msg)
+int wxGUIAppTraitsBase::ShowAssertDialog(const wxString& msg)
 {
     // under MSW we prefer to use the base class version using ::MessageBox()
     // even if wxMessageBox() is available because it has less chances to
@@ -458,6 +458,7 @@
 #if defined(__WXMSW__) || defined(__WXDFB__) || !wxUSE_MSGDLG
     return wxAppTraitsBase::ShowAssertDialog(msg);
 #else // wxUSE_MSGDLG
+    int ret=wxNO;
 #if wxDEBUG_LEVEL
     wxString msgDlg = msg;
 
@@ -477,27 +478,15 @@
     msgDlg += wxT("\nDo you want to stop the program?\n")
               wxT("You can also choose [Cancel] to suppress ")
               wxT("further warnings.");
-
-    switch ( wxMessageBox(msgDlg, wxT("wxWidgets Debug Alert"),
-                          wxYES_NO | wxCANCEL | wxICON_STOP ) )
-    {
-        case wxYES:
-            wxTrap();
-            break;
-
-        case wxCANCEL:
-            // no more asserts
-            return true;
-
-        //case wxNO: nothing to do
-    }
+    return wxMessageBox(msgDlg, wxT("wxWidgets Debug Alert"),
+                          wxYES_NO | wxCANCEL | wxICON_STOP );
 #else // !wxDEBUG_LEVEL
     // this function always exists (for ABI compatibility) but is never called
     // if debug level is 0 and so can simply do nothing then
     wxUnusedVar(msg);
 #endif // wxDEBUG_LEVEL/!wxDEBUG_LEVEL
 
-    return false;
+    return ret;
 #endif // !wxUSE_MSGDLG/wxUSE_MSGDLG
 }
 

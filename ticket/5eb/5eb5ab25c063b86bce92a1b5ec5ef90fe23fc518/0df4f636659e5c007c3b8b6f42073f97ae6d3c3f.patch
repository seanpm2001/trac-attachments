commit fb8f57091d22aeb1f6a724409cc77b3524cfdc2b
Author: Jens Lody <jens@codeblocks.org>
Date:   Tue Nov 6 10:37:51 2012 +0100

    * reimplement changes done to fix #14710, needed after merge with dynamic aui branch

diff --git a/include/wx/aui/tabart.h b/include/wx/aui/tabart.h
index 9b25e61..69ac1eb 100644
--- a/include/wx/aui/tabart.h
+++ b/include/wx/aui/tabart.h
@@ -60,6 +60,11 @@ public:
     virtual void SetColour(const wxColour& colour) = 0;
     virtual void SetActiveColour(const wxColour& colour) = 0;
 
+    virtual void DrawBorder(
+                 wxDC& dc,
+                 wxWindow* wnd,
+                 const wxRect& rect) = 0;
+
     virtual void DrawBackground(
                          wxDC& dc,
                          wxWindow* wnd,
@@ -100,6 +105,12 @@ public:
 
     virtual int GetIndentSize() = 0;
 
+    virtual int GetBorderWidth(
+                         wxWindow* wnd) = 0;
+
+    virtual int GetAdditionalBorderSpace(
+                         wxWindow* wnd) = 0;
+
     virtual wxSize GetBestTabSize(
                          wxWindow* wnd,
                          const wxAuiPaneInfoPtrArray& pages,
@@ -136,6 +147,11 @@ public:
     void SetColour(const wxColour& colour);
     void SetActiveColour(const wxColour& colour);
 
+    void DrawBorder(
+                 wxDC& dc,
+                 wxWindow* wnd,
+                 const wxRect& rect);
+
     void DrawBackground(
                  wxDC& dc,
                  wxWindow* wnd,
@@ -162,6 +178,12 @@ public:
 
     int GetIndentSize();
 
+    int GetBorderWidth(
+                 wxWindow* wnd);
+
+    int GetAdditionalBorderSpace(
+                 wxWindow* wnd);
+
     wxSize GetTabSize(
                  wxDC& dc,
                  wxWindow* wnd,
@@ -237,6 +259,11 @@ public:
     void SetColour(const wxColour& colour);
     void SetActiveColour(const wxColour& colour);
 
+    void DrawBorder(
+                 wxDC& dc,
+                 wxWindow* wnd,
+                 const wxRect& rect);
+
     void DrawBackground(
                  wxDC& dc,
                  wxWindow* wnd,
@@ -263,6 +290,12 @@ public:
 
     int GetIndentSize();
 
+    int GetBorderWidth(
+                 wxWindow* wnd);
+
+    int GetAdditionalBorderSpace(
+                 wxWindow* wnd);
+
     wxSize GetTabSize(
                  wxDC& dc,
                  wxWindow* wnd,
diff --git a/include/wx/aui/tabartgtk.h b/include/wx/aui/tabartgtk.h
index 58fbcef..dacc0a4 100644
--- a/include/wx/aui/tabartgtk.h
+++ b/include/wx/aui/tabartgtk.h
@@ -37,6 +37,7 @@ public:
     wxAuiGtkTabArt();
 
     virtual wxAuiTabArt* Clone();
+    virtual void DrawBorder(wxDC& dc, wxWindow* wnd, const wxRect& rect);
     virtual void DrawBackground(wxDC& dc, wxWindow* wnd, const wxRect& rect);
     virtual void DrawTab(wxDC& dc,
                          wxWindow* wnd,
@@ -53,6 +54,8 @@ public:
                          {
                              return GetBestTabSize(wnd, pages, requiredBmpSize).GetHeight();
                          }
+    int GetBorderWidth(wxWindow* wnd);
+    int GetAdditionalBorderSpace(wxWindow* wnd);
     virtual wxSize GetTabSize(wxDC& dc, wxWindow* wnd, const wxString& caption,
                               const wxBitmap& bitmap, bool active,
                               int closeButtonState, int* extent);
diff --git a/src/aui/dockart.cpp b/src/aui/dockart.cpp
index ddaa39c..fc6c798 100644
--- a/src/aui/dockart.cpp
+++ b/src/aui/dockart.cpp
@@ -476,7 +476,7 @@ void wxAuiDefaultDockArt::DrawBackground(wxDC& dc, wxWindow* WXUNUSED(window), i
     dc.DrawRectangle(rect.x, rect.y, rect.width, rect.height);
 }
 
-void wxAuiDefaultDockArt::DrawBorder(wxDC& dc, wxWindow* WXUNUSED(window), const wxRect& _rect,
+void wxAuiDefaultDockArt::DrawBorder(wxDC& dc, wxWindow* window, const wxRect& _rect,
                                   wxAuiPaneInfo& pane)
 {
     dc.SetPen(m_borderPen);
@@ -502,10 +502,39 @@ void wxAuiDefaultDockArt::DrawBorder(wxDC& dc, wxWindow* WXUNUSED(window), const
     }
     else
     {
-        for (i = 0; i < borderWidth; ++i)
+        // notebooks draw the border themselves, so they can use native rendering (e.g. tabartgtk)
+        wxAuiTabArt* art = 0;
+        wxAuiNotebook* nb = wxDynamicCast(window, wxAuiNotebook);
+        bool useDefaultBorder = true;
+        // if a pane is the only one in a notebook, there is no tab
+        if (nb)
         {
-            dc.DrawRectangle(rect.x, rect.y, rect.width, rect.height);
-            rect.Deflate(1);
+            wxAuiManager* mgr = wxAuiManager::GetManager(pane.window);
+            wxAuiTabContainer* ctrl;
+            int idx;
+
+            // find the tab ctrl with the current page
+            if (mgr && mgr->FindTab(pane.GetWindow(), &ctrl, &idx))
+            {
+                useDefaultBorder = (ctrl->GetPageCount() < 2);
+            }
+        }
+
+        if (!useDefaultBorder && nb)
+        {
+            art = nb->GetArtProvider();
+            if (art)
+            {
+                art->DrawBorder(dc, window, rect);
+            }
+        }
+        else
+        {
+            for (i = 0; i < borderWidth; ++i)
+            {
+                dc.DrawRectangle(rect.x, rect.y, rect.width, rect.height);
+                rect.Deflate(1);
+            }
         }
     }
 }
diff --git a/src/aui/framemanager.cpp b/src/aui/framemanager.cpp
index 23deb19..51cfff1 100644
--- a/src/aui/framemanager.cpp
+++ b/src/aui/framemanager.cpp
@@ -2303,9 +2303,34 @@ void wxAuiManager::LayoutAddPane(wxSizer* cont, wxAuiDockInfo& dock, wxAuiPaneIn
 
     if (pane.HasBorder())
     {
+        int border_flags = wxALL;
+        if(!allowtitlebar)
+        {
+            wxAuiNotebook* nb = wxDynamicCast(pane.window->GetParent(), wxAuiNotebook);
+            if (nb)
+            {
+                if (m_tab_art->m_flags & wxAUI_NB_TOP)
+                {
+                    border_flags &= ~wxTOP;
+                }
+                if (m_tab_art->m_flags & wxAUI_NB_BOTTOM)
+                {
+                    border_flags &= ~wxBOTTOM;
+                }
+                if (m_tab_art->m_flags & wxAUI_NB_LEFT)
+                {
+                    border_flags &= ~wxLEFT;
+                }
+                if (m_tab_art->m_flags & wxAUI_NB_RIGHT)
+                {
+                    border_flags &= ~wxRIGHT;
+                }
+                paneBorderSize = m_tab_art->GetAdditionalBorderSpace(nb);
+            }
+        }
         // allowing space for the pane's border
         sizerItem = cont->Add(horzPaneSizer, paneProportion,
-                               wxEXPAND | wxALL, paneBorderSize);
+                               wxEXPAND | border_flags, paneBorderSize);
 
         part.type = wxAuiDockUIPart::typePaneBorder;
         part.dock = &dock;
diff --git a/src/aui/tabart.cpp b/src/aui/tabart.cpp
index c66d115..1622aaa 100644
--- a/src/aui/tabart.cpp
+++ b/src/aui/tabart.cpp
@@ -36,6 +36,7 @@
 #include "wx/aui/auibook.h"
 #include "wx/aui/tabart.h"
 #include "wx/aui/framemanager.h"
+#include "wx/aui/dockart.h"
 
 #ifdef __WXMAC__
 #include "wx/osx/private.h"
@@ -291,6 +292,18 @@ void wxAuiGenericTabArt::SetSizingInfo(const wxSize& tabCtrlSize, size_t tabCoun
 }
 
 
+void wxAuiGenericTabArt::DrawBorder(wxDC& dc, wxWindow* wnd, const wxRect& rect)
+{
+    int i, border_width = GetBorderWidth(wnd);
+
+    wxRect theRect(rect);
+    for (i = 0; i < border_width; ++i)
+    {
+        dc.DrawRectangle(theRect.x, theRect.y, theRect.width, theRect.height);
+        theRect.Deflate(1);
+    }
+}
+
 void wxAuiGenericTabArt::DrawBackground(wxDC& dc, wxWindow* WXUNUSED(wnd), const wxRect& rect)
 {
     // draw background
@@ -766,6 +779,23 @@ int wxAuiGenericTabArt::GetIndentSize()
     return 5;
 }
 
+int wxAuiGenericTabArt::GetBorderWidth(wxWindow* wnd)
+{
+    wxAuiManager* mgr = wxAuiManager::GetManager(wnd);
+    if (mgr)
+    {
+       wxAuiDockArt*  art = mgr->GetArtProvider();
+        if (art)
+            return art->GetMetric(wxAUI_DOCKART_PANE_BORDER_SIZE);
+    }
+    return 1;
+}
+
+int wxAuiGenericTabArt::GetAdditionalBorderSpace(wxWindow* wnd)
+{
+    return GetBorderWidth(wnd);
+}
+
 wxSize wxAuiGenericTabArt::GetTabSize(wxDC& dc, wxWindow* WXUNUSED(wnd), const wxString& caption, const wxBitmap& bitmap, bool WXUNUSED(active), int closeButtonState, int* extent)
 {
     wxCoord measuredTextX, measuredTextY, tmp;
@@ -1164,6 +1194,18 @@ void wxAuiSimpleTabArt::SetActiveColour(const wxColour& colour)
     m_selectedBkPen = wxPen(colour);
 }
 
+void wxAuiSimpleTabArt::DrawBorder(wxDC& dc, wxWindow* wnd, const wxRect& rect)
+{
+    int i, border_width = GetBorderWidth(wnd);
+
+    wxRect theRect(rect);
+    for (i = 0; i < border_width; ++i)
+    {
+        dc.DrawRectangle(theRect.x, theRect.y, theRect.width, theRect.height);
+        theRect.Deflate(1);
+    }
+}
+
 void wxAuiSimpleTabArt::DrawBackground(wxDC& dc, wxWindow* WXUNUSED(wnd), const wxRect& rect)
 {
     // draw background
@@ -1171,28 +1213,25 @@ void wxAuiSimpleTabArt::DrawBackground(wxDC& dc, wxWindow* WXUNUSED(wnd), const
     dc.SetPen(*wxTRANSPARENT_PEN);
     dc.DrawRectangle(-1, -1, rect.GetWidth()+2, rect.GetHeight()+2);
 
-#if 0
-// NOTE (jens#1#): currently not needed, but might be reimplemented, if all drawing issues after the merge are fixed
 
     // draw base line
     dc.SetPen(*wxGREY_PEN);
     if (HasFlag(wxAUI_NB_LEFT))
     {
-        dc.DrawLine(rect.GetWidth(), 0, rect.GetWidth()-1, rect.GetHeight());
+        dc.DrawLine(rect.GetWidth()-1, 0, rect.GetWidth()-1, rect.GetHeight());
     }
     else if (HasFlag(wxAUI_NB_RIGHT))
     {
-        dc.DrawLine(1, 0, 1, rect.GetHeight());
+        dc.DrawLine(0, 0, 0, rect.GetHeight());
     }
     else if (HasFlag(wxAUI_NB_BOTTOM))
     {
-        dc.DrawLine(0, 1, rect.GetWidth(), 1);
+        dc.DrawLine(0, 0, rect.GetWidth(), 0);
     }
     else // must be wxAUI_NB_TOP
     {
         dc.DrawLine(0, rect.GetHeight()-1, rect.GetWidth(), rect.GetHeight()-1);
     }
-#endif
 }
 
 
@@ -1275,9 +1314,9 @@ void wxAuiSimpleTabArt::DrawTab(wxDC& dc, wxWindow* wnd, const wxAuiPaneInfo& pa
         points[2].y = tabY + 2;
         points[3].x = tabX + tabHeight + 2;
         points[3].y = tabY;
-        points[4].x = tabX + tabWidth;
+        points[4].x = tabX + tabWidth-1;
         points[4].y = tabY;
-        points[5].x = tabX + tabWidth;
+        points[5].x = tabX + tabWidth-1;
         points[5].y = tabY + tabHeight;
         points[6] = points[0];
     }
@@ -1301,7 +1340,7 @@ void wxAuiSimpleTabArt::DrawTab(wxDC& dc, wxWindow* wnd, const wxAuiPaneInfo& pa
     {
         tabY -= 3;
         points[0].x = tabX;
-        points[0].y = tabY - 1;
+        points[0].y = tabY;
         points[1].x = tabX + tabHeight - 3;
         points[1].y = tabY + tabHeight - 4;
         points[2].x = tabX + tabHeight + 3;
@@ -1311,13 +1350,13 @@ void wxAuiSimpleTabArt::DrawTab(wxDC& dc, wxWindow* wnd, const wxAuiPaneInfo& pa
         points[4].x = tabX + tabWidth;
         points[4].y = tabY + tabHeight - 4;
         points[5].x = tabX + tabWidth;
-        points[5].y = tabY - 1;
+        points[5].y = tabY;
         points[6] = points[0];
      }
      else // must be wxAUI_NB_TOP
      {
         points[0].x = tabX;
-        points[0].y = tabY + tabHeight;
+        points[0].y = tabY + tabHeight - 1;
         points[1].x = tabX + tabHeight - 3;
         points[1].y = tabY + 2;
         points[2].x = tabX + tabHeight + 3;
@@ -1327,7 +1366,7 @@ void wxAuiSimpleTabArt::DrawTab(wxDC& dc, wxWindow* wnd, const wxAuiPaneInfo& pa
         points[4].x = tabX + tabWidth;
         points[4].y = tabY + 2;
         points[5].x = tabX + tabWidth;
-        points[5].y = tabY + tabHeight;
+        points[5].y = tabY + tabHeight - 1;
         points[6] = points[0];
     }
 
@@ -1419,6 +1458,23 @@ int wxAuiSimpleTabArt::GetIndentSize()
     return 0;
 }
 
+int wxAuiSimpleTabArt::GetBorderWidth(wxWindow* wnd)
+{
+    wxAuiManager* mgr = wxAuiManager::GetManager(wnd);
+    if (mgr)
+    {
+       wxAuiDockArt*  art = mgr->GetArtProvider();
+        if (art)
+            return art->GetMetric(wxAUI_DOCKART_PANE_BORDER_SIZE);
+    }
+    return 1;
+}
+
+int wxAuiSimpleTabArt::GetAdditionalBorderSpace(wxWindow* wnd)
+{
+    return GetBorderWidth(wnd);
+}
+
 wxSize wxAuiSimpleTabArt::GetTabSize(wxDC& dc, wxWindow* WXUNUSED(wnd), const wxString& caption, const wxBitmap& WXUNUSED(bitmap), bool WXUNUSED(active), int closeButtonState, int* extent)
 {
     wxCoord measuredTextX, measuredTextY, tmp;
diff --git a/src/aui/tabartgtk.cpp b/src/aui/tabartgtk.cpp
index 3b1d285..ca164d4 100644
--- a/src/aui/tabartgtk.cpp
+++ b/src/aui/tabartgtk.cpp
@@ -83,6 +83,99 @@ void wxAuiGtkTabArt::DrawBackground(wxDC& dc, wxWindow* WXUNUSED(wnd), const wxR
                                        rect.x, rect.y, rect.width, rect.height);
 }
 
+void wxAuiGtkTabArt::DrawBorder(wxDC& WXUNUSED(dc), wxWindow* wnd, const wxRect& rect)
+{
+    if (!wnd) return;
+    if (!wnd->m_wxwindow) return;
+    if (!gtk_widget_is_drawable(wnd->m_wxwindow)) return;
+
+    GtkStyle *style_notebook = gtk_widget_get_style(wxGTKPrivate::GetNotebookWidget());
+    wxRect borderRect(rect);
+
+    int width = GetAdditionalBorderSpace(wnd);
+
+    // We need the rectangles here, because the background of a gtk-box
+    // is not transparent and can interfere with elements of the windows on
+    // top of them (e.g. scrollbar)
+    // The clipping-regin of the box is always a rectangle, so we need to
+    // draw the box three times to get all three sides.
+    // We just need one side and clip all the rest.
+    GdkRectangle clipRectLeft;
+    clipRectLeft.x = rect.x;
+    clipRectLeft.y = rect.y;
+    clipRectLeft.width = width;
+    clipRectLeft.height = rect.height;
+
+    GdkRectangle clipRectTop;
+    clipRectTop.x = rect.x;
+    clipRectTop.y = rect.y;
+    clipRectTop.width = rect.width;
+    clipRectTop.height = width;
+
+    GdkRectangle clipRectRight;
+    clipRectRight.x = rect.x + rect.width - width;
+    clipRectRight.y = rect.y;
+    clipRectRight.width = width;
+    clipRectRight.height = rect.height;
+
+    GdkRectangle clipRectBottom;
+    clipRectBottom.x = rect.x;
+    clipRectBottom.y = rect.y + rect.height - width;
+    clipRectBottom.width = rect.width;
+    clipRectBottom.height = width;
+
+    // We make the height/width of the rect 10 pixel larger than needed,
+    // because we nned just three sides and don't want the rounded corner
+    // of the fourth side, we do not show.
+    // The fourth side is drawn in DrawTab as gap-box
+    GdkRectangle clipRect[3];
+    if (IsHorizontal())
+    {
+        borderRect.x += 1;
+        borderRect.height += 10;
+        borderRect.width-=1;
+        clipRect[0] = clipRectLeft;
+        clipRect[1] = clipRectRight;
+        if (HasFlag(wxAUI_NB_TOP))
+        {
+            clipRect[2] = clipRectBottom;
+            borderRect.y -= 10;
+        }
+        if (HasFlag(wxAUI_NB_BOTTOM))
+        {
+            clipRect[2] = clipRectTop;
+        }
+    }
+    else
+    {
+        borderRect.y += 1;
+        borderRect.width += 10;
+        borderRect.height-=1;
+        clipRect[0] = clipRectTop;
+        clipRect[1] = clipRectBottom;
+        if (HasFlag(wxAUI_NB_LEFT))
+        {
+            clipRect[2] = clipRectRight;
+            borderRect.x -= 10;
+        }
+        if (HasFlag(wxAUI_NB_RIGHT))
+        {
+            clipRect[2] = clipRectLeft;
+        }
+    }
+
+    size_t i;
+    for (i = 0; i < 3; ++i)
+    {
+        gtk_paint_box(style_notebook, wnd->GTKGetDrawingWindow(), GTK_STATE_NORMAL, GTK_SHADOW_OUT,
+                      &clipRect[i], wnd->m_wxwindow,
+                      const_cast<char*>("notebook"),
+                      borderRect.x, borderRect.y,
+                      borderRect.width, borderRect.height);
+    }
+
+}
+
 void ButtonStateAndShadow(int buttonState, GtkStateType& state, GtkShadowType& shadow)
 {
 
@@ -192,6 +285,8 @@ void wxAuiGtkTabArt::DrawTab(wxDC& dc, wxWindow* wnd, const wxAuiPaneInfo& page,
 
     wxRect tabRect = inRect;
     wxRect gapRect = wnd->GetRect();
+    gapRect.width = dc.GetSize().x;
+    gapRect.height = dc.GetSize().y;
     int gapStart = 0, gapWidth = 0;
 
     GtkPositionType gapBoxPos;
@@ -204,11 +299,10 @@ void wxAuiGtkTabArt::DrawTab(wxDC& dc, wxWindow* wnd, const wxAuiPaneInfo& page,
         if (page.HasFlag(wxAuiPaneInfo::optionActiveNotebook))
             tabRect.height += 2 * GTK_NOTEBOOK (wxGTKPrivate::GetNotebookWidget())->tab_hborder;
         // if no bitmap is set, we need a tiny correction
-        if (! page.GetBitmap().IsOk())
-            tabRect.height += 1;
         tabRect.y += GTK_NOTEBOOK (wxGTKPrivate::GetNotebookWidget())->tab_hborder / 2;
         gapRect.height = 6 * GTK_NOTEBOOK (wxGTKPrivate::GetNotebookWidget())->tab_hborder;
         gapRect.x = 1;
+        gapRect.width -= 1;
         gapStart = tabRect.x - GTK_NOTEBOOK (wxGTKPrivate::GetNotebookWidget())->tab_vborder / 2;
         gapWidth = tabRect.width;
 
@@ -223,7 +317,6 @@ void wxAuiGtkTabArt::DrawTab(wxDC& dc, wxWindow* wnd, const wxAuiPaneInfo& page,
         else//wxAUI_NB_BOTTOM
         {
             tabRect.y += 2 * GTK_NOTEBOOK (wxGTKPrivate::GetNotebookWidget())->tab_hborder;
-            tabRect.height += 2;
             gapRect.y = tabRect.y - gapRect.height;
             gapRect.y += GTK_NOTEBOOK (wxGTKPrivate::GetNotebookWidget())->tab_hborder / 2;
             gapBoxPos = GTK_POS_BOTTOM;
@@ -232,10 +325,11 @@ void wxAuiGtkTabArt::DrawTab(wxDC& dc, wxWindow* wnd, const wxAuiPaneInfo& page,
     }
     else
     {
-        tabRect.width -= 4 * GTK_NOTEBOOK (wxGTKPrivate::GetNotebookWidget())->tab_vborder;
+        tabRect.width -= 3 * GTK_NOTEBOOK (wxGTKPrivate::GetNotebookWidget())->tab_vborder;
         tabRect.height = tabSize.y;
         gapRect.width = 6 * GTK_NOTEBOOK (wxGTKPrivate::GetNotebookWidget())->tab_hborder;
         gapRect.y = 1;
+        gapRect.height -= 1;
         gapStart = tabRect.y - GTK_NOTEBOOK (wxGTKPrivate::GetNotebookWidget())->tab_hborder / 2;
         gapWidth = tabRect.height;
 
@@ -512,11 +606,23 @@ wxSize wxAuiGtkTabArt::GetBestTabSize(wxWindow* wnd, const wxAuiPaneInfoPtrArray
     SetSelectedFont(m_normalFont);
 
     wxSize tabSize = wxAuiGenericTabArt::GetBestTabSize(wnd, pages, requiredBmpSize);
-    tabSize.IncBy(3 * gtk_widget_get_style(wxGTKPrivate::GetNotebookWidget())->xthickness,
-                   3 * gtk_widget_get_style(wxGTKPrivate::GetNotebookWidget())->ythickness);
+
+    tabSize.IncBy(3 * (GTK_NOTEBOOK (wxGTKPrivate::GetNotebookWidget())->tab_vborder + gtk_widget_get_style(wxGTKPrivate::GetNotebookWidget())->xthickness),
+                  3 * (GTK_NOTEBOOK (wxGTKPrivate::GetNotebookWidget())->tab_hborder + gtk_widget_get_style(wxGTKPrivate::GetNotebookWidget())->ythickness));
     return tabSize;
 }
 
+int wxAuiGtkTabArt::GetBorderWidth(wxWindow* WXUNUSED(wnd))
+{
+    return wxMax(GTK_NOTEBOOK (wxGTKPrivate::GetNotebookWidget())->tab_hborder,
+                 GTK_NOTEBOOK (wxGTKPrivate::GetNotebookWidget())->tab_vborder);
+}
+
+int wxAuiGtkTabArt::GetAdditionalBorderSpace(wxWindow* wnd)
+{
+    return 2 * GetBorderWidth(wnd);
+}
+
 wxSize wxAuiGtkTabArt::GetTabSize(wxDC& dc, wxWindow* wnd, const wxString& caption, const wxBitmap& bitmap, bool active, int closeButtonState, int* extent)
 {
     wxSize tabSize = wxAuiGenericTabArt::GetTabSize(dc, wnd, caption, bitmap, active, closeButtonState, extent);

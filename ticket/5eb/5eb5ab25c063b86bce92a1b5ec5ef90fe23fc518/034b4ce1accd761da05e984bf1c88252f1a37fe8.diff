commit 1c5761a313722fc64e756bcf4b10fe312802b55d
Author: Jens Lody <jens@codeblocks.org>
Date:   Fri Oct 26 15:15:26 2012 +0200

    * fix drawing issues in tabart-classes introduced with the merge

diff --git a/src/aui/dockart.cpp b/src/aui/dockart.cpp
index db986e5..ddaa39c 100644
--- a/src/aui/dockart.cpp
+++ b/src/aui/dockart.cpp
@@ -1158,7 +1158,10 @@ void wxAuiTabContainer::CalculateRequiredHeight(wxDC& dc,wxWindow* wnd,int& tota
         }
         else
         {
-            totalSize += size.y;
+            if (i+1 < pageCount)
+                totalSize += extent;
+            else
+                totalSize += size.y;
         }
         if (i >= m_tabOffset)
         {
@@ -1168,7 +1171,10 @@ void wxAuiTabContainer::CalculateRequiredHeight(wxDC& dc,wxWindow* wnd,int& tota
             }
             else
             {
-                visibleSize += size.y;
+                if (i+1 < pageCount)
+                    visibleSize += extent;
+                else
+                    visibleSize += size.y;
             }
         }
     }
@@ -1202,17 +1208,24 @@ void wxAuiTabContainer::CalculateRequiredWidth(wxDC& dc,wxWindow* wnd,int& total
 
         if (IsHorizontal())
         {
-            totalSize += size.x;
+            if (i+1 < pageCount)
+                totalSize += extent;
+            else
+                totalSize += size.x;
         }
         else
         {
              totalSize = std::max(totalSize,size.x);
         }
+
         if (i >= m_tabOffset)
         {
             if (IsHorizontal())
             {
-                visibleSize += size.x;
+                if (i+1 < pageCount)
+                    visibleSize += extent;
+                else
+                    visibleSize += size.x;
             }
             else
             {
@@ -1258,7 +1271,6 @@ void wxAuiTabContainer::Render(wxDC* rawDC, wxWindow* wnd)
     int backwButtonsSize = 0;
     int forwButtonsSize = 0;
 
-    int offset = 0;
 
     int locationBtnRightTop;
     int locationBtnLeftBottom;
@@ -1285,11 +1297,9 @@ void wxAuiTabContainer::Render(wxDC* rawDC, wxWindow* wnd)
 
 
     // draw the forward buttons on the top
-    offset = m_rect.x + m_rect.width;
     for (i = buttonCount; i > 0 ; --i)
     {
         wxAuiTabContainerButton& button = m_buttons.Item(i - 1);
-
         if (button.location != locationBtnRightTop)
             continue;
         if (button.curState & wxAUI_BUTTON_STATE_HIDDEN)
@@ -1298,7 +1308,6 @@ void wxAuiTabContainer::Render(wxDC* rawDC, wxWindow* wnd)
             continue;
 
         wxRect button_rect = m_rect;
-        button_rect.SetWidth(offset);
         button_rect.SetX(1);
         button_rect.SetY(1);
 
@@ -1310,7 +1319,6 @@ void wxAuiTabContainer::Render(wxDC* rawDC, wxWindow* wnd)
                           locationBtnRightTop,
                           &button.rect);
 
-        offset -= button.rect.GetWidth();
         if (IsHorizontal())
         {
             forwButtonsSize += button.rect.GetWidth();
@@ -1326,27 +1334,20 @@ void wxAuiTabContainer::Render(wxDC* rawDC, wxWindow* wnd)
     // afforded on screen
     int totalSize = 0;
     int visibleSize = 0;
+    int btn_size;
     if(IsHorizontal())
     {
         CalculateRequiredWidth(dc,wnd,totalSize,visibleSize);
-    }
-    else
-    {
-        CalculateRequiredHeight(dc,wnd,totalSize,visibleSize);
-    }
-
-    size_t tabOffset=m_tabOffset;
-    int btn_size;
-    if (IsHorizontal())
-    {
         btn_size = forwButtonsSize;
     }
     else
     {
-        // If all tabs can fit on screen then we don't want to apply offset even if we still have an offset, so set to 0.
-        tabOffset=0;
+        CalculateRequiredHeight(dc,wnd,totalSize,visibleSize);
         btn_size = backwButtonsSize;
     }
+    // ensure, we show as max tabs as possible
+    while (m_tabOffset > 0 && IsTabVisible(pageCount-1, m_tabOffset-1, &dc, wnd) )
+            --m_tabOffset;
 
     // show up/down buttons
     for (i = 0; i < buttonCount; ++i)
@@ -1367,7 +1368,7 @@ void wxAuiTabContainer::Render(wxDC* rawDC, wxWindow* wnd)
         wxAuiTabContainerButton& button = m_buttons.Item(i);
         if (button.id == wxAUI_BUTTON_LEFT || button.id == wxAUI_BUTTON_UP)
         {
-            if (tabOffset == 0)
+            if (m_tabOffset == 0)
                 button.curState |= wxAUI_BUTTON_STATE_DISABLED;
             else
                 button.curState &= ~wxAUI_BUTTON_STATE_DISABLED;
@@ -1392,7 +1393,6 @@ void wxAuiTabContainer::Render(wxDC* rawDC, wxWindow* wnd)
 
         wxRect button_rect = m_rect;
         button_rect.SetY(1);
-        button_rect.SetWidth(offset);
 
         if (IsHorizontal())
         {
@@ -1407,7 +1407,6 @@ void wxAuiTabContainer::Render(wxDC* rawDC, wxWindow* wnd)
                           locationBtnRightTop,
                           &button.rect);
 
-        offset -= button.rect.GetWidth();
         if (IsHorizontal())
         {
             forwButtonsSize += button.rect.GetWidth();
@@ -1419,7 +1418,6 @@ void wxAuiTabContainer::Render(wxDC* rawDC, wxWindow* wnd)
     }
 
 
-    offset = 0;
 
     // draw the buttons on the bottom side
 
@@ -1434,7 +1432,6 @@ void wxAuiTabContainer::Render(wxDC* rawDC, wxWindow* wnd)
 
         wxRect button_rect = m_rect;
         button_rect.SetX(1);
-        button_rect.width -= offset;
         button_rect.SetY(1);
 
         if (!IsHorizontal() && button.id == wxAUI_BUTTON_DOWN)
@@ -1450,7 +1447,6 @@ void wxAuiTabContainer::Render(wxDC* rawDC, wxWindow* wnd)
                           locationBtnLeftBottom,
                           &button.rect);
 
-        offset += button.rect.GetWidth();
         if (IsHorizontal())
         {
             backwButtonsSize += button.rect.GetWidth();
@@ -1462,7 +1458,7 @@ void wxAuiTabContainer::Render(wxDC* rawDC, wxWindow* wnd)
     }
 
     // this is not a typo, we use the size we determined when drawing the top (aka backw) buttons
-    offset = backwButtonsSize;
+    int offset = backwButtonsSize;
 
     if (offset == 0)
         offset += m_tab_art->GetIndentSize();
@@ -1485,7 +1481,7 @@ void wxAuiTabContainer::Render(wxDC* rawDC, wxWindow* wnd)
 
 
     // buttons before the tab offset must be set to hidden
-    for (i = 0; i < tabOffset; ++i)
+    for (i = 0; i < m_tabOffset; ++i)
     {
         m_tabCloseButtons.Item(i).curState = wxAUI_BUTTON_STATE_HIDDEN;
     }
@@ -1530,7 +1526,7 @@ void wxAuiTabContainer::Render(wxDC* rawDC, wxWindow* wnd)
         rect.width = m_rect.width;
     }
 
-    for (i = tabOffset; i < pageCount; ++i)
+    for (i = m_tabOffset; i < pageCount; ++i)
     {
         wxAuiPaneInfo& page = *m_pages.Item(i);
         wxAuiTabContainerButton& tab_button = m_tabCloseButtons.Item(i);
@@ -1594,7 +1590,7 @@ void wxAuiTabContainer::Render(wxDC* rawDC, wxWindow* wnd)
 
 
     // draw the active tab again so it stands in the foreground
-    if (active >= tabOffset && active < m_pages.GetCount())
+    if (active >= m_tabOffset && active < m_pages.GetCount())
     {
         wxAuiPaneInfo& page = *m_pages.Item(active);
 
@@ -1835,28 +1831,8 @@ bool wxAuiTabContainer::TabHitTest(int x, int y, wxAuiPaneInfo** hit) const
             return false;
     }
 
-    // find out if size of tabs is larger than can be
-    // afforded on screen
-    int totalSize = 0;
-    int visibleSize = 0;
-    wxMemoryDC dc;
-    if(IsHorizontal())
-    {
-        CalculateRequiredWidth(dc,m_pages.Item(0)->GetWindow(),totalSize,visibleSize);
-    }
-    else
-    {
-        CalculateRequiredHeight(dc,m_pages.Item(0)->GetWindow(),totalSize,visibleSize);
-    }
-
-    size_t tabOffset=m_tabOffset;
-    if (totalSize <= m_rect.GetWidth())
-    {
-        tabOffset=0;
-    }
-
     size_t i, pageCount = m_pages.GetCount();
-    for (i = tabOffset; i < pageCount; ++i)
+    for (i = m_tabOffset; i < pageCount; ++i)
     {
         wxAuiPaneInfo& page = *m_pages.Item(i);
         if (page.rect.Contains(x,y))
diff --git a/src/aui/tabart.cpp b/src/aui/tabart.cpp
index fbf9cce..1f08abf 100644
--- a/src/aui/tabart.cpp
+++ b/src/aui/tabart.cpp
@@ -296,10 +296,6 @@ void wxAuiGenericTabArt::DrawBackground(wxDC& dc, wxWindow* WXUNUSED(wnd), const
     wxRect bgRect, baseRect;
 
     wxDirection d;
-    if (!HasFlag(wxAUI_NB_TOP))
-        bgRect = wxRect(rect.x, rect.y, rect.width+2, rect.height);
-    else //for wxAUI_NB_TOP
-        bgRect = wxRect(rect.x, rect.y, rect.width+2, rect.height-3);
 
     // draw base lines
 
@@ -308,21 +304,25 @@ void wxAuiGenericTabArt::DrawBackground(wxDC& dc, wxWindow* WXUNUSED(wnd), const
 
     if (HasFlag(wxAUI_NB_BOTTOM))
     {
+         bgRect = wxRect(rect.x, rect.y + 3, rect.width, rect.height - 3);
          baseRect = wxRect(-1, 0, w + 2, 4);
          d = wxNORTH;
     }
     else if (HasFlag(wxAUI_NB_LEFT))
     {
+        bgRect = wxRect(rect.x, rect.y, rect.width - 3, rect.height);
         baseRect = wxRect(w - 5, -1, w, y + 2);
         d = wxEAST;
     }
     else if (HasFlag(wxAUI_NB_RIGHT))
     {
+         bgRect = wxRect(rect.x + 3, rect.y, rect.width - 3, rect.height);
          baseRect = wxRect(0, -1, 5, y + 2);
          d = wxWEST;
     }
     else //for wxAUI_NB_TOP
     {
+        bgRect = wxRect(rect.x, rect.y, rect.width, rect.height - 3);
         baseRect = wxRect (-1, y - 4, w + 2, 4);
         d = wxSOUTH;
     }
@@ -378,21 +378,18 @@ void wxAuiGenericTabArt::DrawTab(wxDC& dc, wxWindow* wnd, const wxAuiPaneInfo& p
     if (HasFlag(wxAUI_NB_LEFT))
     {
         tabHeight += 1;
-        tabWidth = inRect.width - 5;
+        tabWidth = inRect.width - 4;
         tabY = inRect.y - 1;
     }
     if (HasFlag(wxAUI_NB_RIGHT))
     {
         tabHeight += 1;
-        tabWidth = inRect.width - 5;
+        tabWidth = inRect.width - 4;
         tabY = inRect.y - 1;
-        tabX += 4;
-    }
-    if (! page.GetBitmap().IsOk())
-    {
-        tabHeight += 1;
-        tabY -= 1;
+        tabX += 3;
     }
+    if (HasFlag(wxAUI_NB_BOTTOM))
+        tabY += 2;
 
     caption = page.caption;
 
@@ -419,6 +416,8 @@ void wxAuiGenericTabArt::DrawTab(wxDC& dc, wxWindow* wnd, const wxAuiPaneInfo& p
         clipWidth = (inRect.x + inRect.width) - tabX;
     if (tabY + tabHeight > inRect.y + inRect.height)
         clipHeight = (inRect.y + inRect.height) - tabY;
+    ++clipWidth;
+    ++clipHeight;
 
     // since the above code above doesn't play well with WXDFB or WXCOCOA,
     // we'll just use a rectangle for the clipping region for now --
@@ -461,6 +460,7 @@ void wxAuiGenericTabArt::DrawTab(wxDC& dc, wxWindow* wnd, const wxAuiPaneInfo& p
     {
         borderPoints[0] = wxPoint(tabX,             tabY+tabHeight-4);
         borderPoints[1] = wxPoint(tabX,             tabY+2);
+        borderPoints[2] = wxPoint(tabX+2,           tabY);
         borderPoints[3] = wxPoint(tabX+tabWidth-2, tabY);
         borderPoints[4] = wxPoint(tabX+tabWidth,   tabY+2);
         borderPoints[5] = wxPoint(tabX+tabWidth,   tabY+tabHeight-4);
@@ -597,7 +597,7 @@ void wxAuiGenericTabArt::DrawTab(wxDC& dc, wxWindow* wnd, const wxAuiPaneInfo& p
             rTop.x += 2;
             rTop.y++;
             rTop.width -= 2;
-            rTop.height += 3;
+            rTop.height += 2;
             rTop.width /= 2;
 
             rBase = rTop;
@@ -648,10 +648,23 @@ void wxAuiGenericTabArt::DrawTab(wxDC& dc, wxWindow* wnd, const wxAuiPaneInfo& p
         else
         {
             dc.DrawLine(borderPoints[0].x,
-                        borderPoints[0].y+1,
+                        borderPoints[0].y,
                         borderPoints[5].x,
-                        borderPoints[5].y);
+                        borderPoints[5].y+1);
+        }
+    }
+    else
+    {
+        dc.SetPen(m_baseColourPen);
+
+        if (!IsHorizontal())
+        {
+            dc.DrawLine(borderPoints[0].x,
+                        borderPoints[0].y,
+                        borderPoints[5].x,
+                        borderPoints[5].y+1);
         }
+
     }
 
 
@@ -804,10 +817,11 @@ wxSize wxAuiGenericTabArt::GetTabSize(wxDC& dc, wxWindow* WXUNUSED(wnd), const w
 }
 
 
-void wxAuiGenericTabArt::DrawButton(wxDC& dc, wxWindow* wnd, const wxRect& inRect, int bitmapID, int buttonState, int orientation, wxRect* outRect)
+void wxAuiGenericTabArt::DrawButton(wxDC& dc, wxWindow* WXUNUSED(wnd), const wxRect& inRect, int bitmapID, int buttonState, int orientation, wxRect* outRect)
 {
     wxBitmap bmp;
     wxRect rect = inRect;
+    int xOffset = 0;
 
     switch (bitmapID)
     {
@@ -832,7 +846,6 @@ void wxAuiGenericTabArt::DrawButton(wxDC& dc, wxWindow* wnd, const wxRect& inRec
                 bmp = m_disabledUpBmp;
             else
                 bmp = m_activeUpBmp;
-            rect.width = wnd->GetRect().GetWidth();
             rect.x = ((rect.x + rect.width)/2) - (bmp.GetWidth()/2);
             break;
         case wxAUI_BUTTON_DOWN:
@@ -846,15 +859,21 @@ void wxAuiGenericTabArt::DrawButton(wxDC& dc, wxWindow* wnd, const wxRect& inRec
                 bmp = m_disabledRightBmp;
             else
                 bmp = m_activeRightBmp;
-            rect.x = inRect.x + inRect.width - bmp.GetWidth();
-            if (HasFlag(wxAUI_NB_LEFT))
-                rect.x -= 5;
+            if (HasFlag(wxAUI_NB_WINDOWLIST_BUTTON))
+                xOffset += m_activeWindowListBmp.GetWidth();
+            if (HasFlag(wxAUI_NB_CLOSE_BUTTON))
+                xOffset += m_activeCloseBmp.GetWidth();
             break;
         case wxAUI_BUTTON_WINDOWLIST:
             if (buttonState & wxAUI_BUTTON_STATE_DISABLED)
                 bmp = m_disabledWindowListBmp;
             else
                 bmp = m_activeWindowListBmp;
+            rect.x = inRect.x + inRect.width - bmp.GetWidth();
+            if (HasFlag(wxAUI_NB_CLOSE_BUTTON))
+                xOffset += m_activeCloseBmp.GetWidth();
+            if (HasFlag(wxAUI_NB_LEFT))
+                rect.x -= 5;
             break;
     }
 
@@ -889,6 +908,8 @@ void wxAuiGenericTabArt::DrawButton(wxDC& dc, wxWindow* wnd, const wxRect& inRec
                       bmp.GetWidth(), bmp.GetHeight());
     }
 
+    rect.x -= xOffset;
+
     IndentPressedBitmap(&rect, buttonState);
     dc.DrawBitmap(bmp, rect.x, rect.y, true);
 
@@ -1140,6 +1161,9 @@ void wxAuiSimpleTabArt::DrawBackground(wxDC& dc, wxWindow* WXUNUSED(wnd), const
     dc.SetPen(*wxTRANSPARENT_PEN);
     dc.DrawRectangle(-1, -1, rect.GetWidth()+2, rect.GetHeight()+2);
 
+#if 0
+// NOTE (jens#1#): currently not needed, but might be reimplemented, if all drawing issues after the merge are fixed
+
     // draw base line
     dc.SetPen(*wxGREY_PEN);
     if (HasFlag(wxAUI_NB_LEFT))
@@ -1158,6 +1182,7 @@ void wxAuiSimpleTabArt::DrawBackground(wxDC& dc, wxWindow* WXUNUSED(wnd), const
     {
         dc.DrawLine(0, rect.GetHeight()-1, rect.GetWidth(), rect.GetHeight()-1);
     }
+#endif
 }
 
 
@@ -1199,7 +1224,7 @@ void wxAuiSimpleTabArt::DrawTab(wxDC& dc, wxWindow* wnd, const wxAuiPaneInfo& pa
     wxCoord tabHeight = tabSize.y;
     wxCoord tabWidth = tabSize.x;
     wxCoord tabX = inRect.x;
-    wxCoord tabY = inRect.y + inRect.height - tabHeight - 1;
+    wxCoord tabY = inRect.y + inRect.height - tabHeight;
     if (!IsHorizontal())
     {
         tabWidth = inRect.width;
@@ -1240,17 +1265,17 @@ void wxAuiSimpleTabArt::DrawTab(wxDC& dc, wxWindow* wnd, const wxAuiPaneInfo& pa
         points[2].y = tabY + 2;
         points[3].x = tabX + tabHeight + 2;
         points[3].y = tabY;
-        points[4].x = tabX + tabWidth - 1;
+        points[4].x = tabX + tabWidth;
         points[4].y = tabY;
-        points[5].x = tabX + tabWidth - 1;
+        points[5].x = tabX + tabWidth;
         points[5].y = tabY + tabHeight;
         points[6] = points[0];
     }
     else if (HasFlag(wxAUI_NB_RIGHT))
     {
-        points[0].x = tabX + 1;
+        points[0].x = tabX;
         points[0].y = tabY + tabHeight;
-        points[1].x = tabX + 1;
+        points[1].x = tabX;
         points[1].y = tabY;
         points[2].x = tabX + tabWidth - tabHeight - 3;
         points[2].y = tabY;
@@ -1264,6 +1289,7 @@ void wxAuiSimpleTabArt::DrawTab(wxDC& dc, wxWindow* wnd, const wxAuiPaneInfo& pa
     }
     else if (HasFlag(wxAUI_NB_BOTTOM))
     {
+        tabY -= 3;
         points[0].x = tabX;
         points[0].y = tabY - 1;
         points[1].x = tabX + tabHeight - 3;
@@ -1400,7 +1426,7 @@ wxSize wxAuiSimpleTabArt::GetTabSize(wxDC& dc, wxWindow* WXUNUSED(wnd), const wx
 
     if (IsHorizontal())
     {
-        if (m_flags & wxAUI_MGR_NB_TAB_FIXED_WIDTH)
+        if (HasFlag(wxAUI_MGR_NB_TAB_FIXED_WIDTH))
         {
             tabWidth = m_fixedTabSize;
         }
@@ -1408,7 +1434,7 @@ wxSize wxAuiSimpleTabArt::GetTabSize(wxDC& dc, wxWindow* WXUNUSED(wnd), const wx
     }
     else
     {
-        if (m_flags & wxAUI_MGR_NB_TAB_FIXED_WIDTH)
+        if (HasFlag(wxAUI_NB_TAB_FIXED_HEIGHT))
              tabWidth = m_fixedTabSize;
         tabWidth += 16;
         *extent = tabHeight + 2;
@@ -1418,10 +1444,11 @@ wxSize wxAuiSimpleTabArt::GetTabSize(wxDC& dc, wxWindow* WXUNUSED(wnd), const wx
 }
 
 
-void wxAuiSimpleTabArt::DrawButton(wxDC& dc, wxWindow* wnd, const wxRect& inRect, int bitmapID, int buttonState, int orientation, wxRect* outRect)
+void wxAuiSimpleTabArt::DrawButton(wxDC& dc, wxWindow* WXUNUSED(wnd), const wxRect& inRect, int bitmapID, int buttonState, int orientation, wxRect* outRect)
 {
     wxBitmap bmp;
     wxRect rect = inRect;
+    int xOffset = 0;
 
     switch (bitmapID)
     {
@@ -1437,7 +1464,6 @@ void wxAuiSimpleTabArt::DrawButton(wxDC& dc, wxWindow* wnd, const wxRect& inRect
                 bmp = m_disabledUpBmp;
             else
                 bmp = m_activeUpBmp;
-            rect.width = wnd->GetRect().GetWidth();
             rect.x = ((rect.x + rect.width)/2) - (bmp.GetWidth()/2);
             break;
         case wxAUI_BUTTON_DOWN:
@@ -1457,13 +1483,19 @@ void wxAuiSimpleTabArt::DrawButton(wxDC& dc, wxWindow* wnd, const wxRect& inRect
                 bmp = m_disabledRightBmp;
             else
                 bmp = m_activeRightBmp;
-            rect.x = inRect.x + inRect.width - bmp.GetWidth();
+            if (HasFlag(wxAUI_NB_WINDOWLIST_BUTTON))
+                xOffset += m_activeWindowListBmp.GetWidth();
+            if (HasFlag(wxAUI_NB_CLOSE_BUTTON))
+                xOffset += m_activeCloseBmp.GetWidth();
             break;
         case wxAUI_BUTTON_WINDOWLIST:
             if (buttonState & wxAUI_BUTTON_STATE_DISABLED)
                 bmp = m_disabledWindowListBmp;
             else
                 bmp = m_activeWindowListBmp;
+            rect.x = inRect.x + inRect.width - bmp.GetWidth();
+            if (HasFlag(wxAUI_NB_CLOSE_BUTTON))
+                xOffset += m_activeCloseBmp.GetWidth();
             break;
     }
 
@@ -1497,6 +1529,7 @@ void wxAuiSimpleTabArt::DrawButton(wxDC& dc, wxWindow* wnd, const wxRect& inRect
                       bmp.GetWidth(), bmp.GetHeight());
     }
 
+    rect.x -= xOffset;
 
     DrawButtons(dc, rect, bmp, *wxWHITE, buttonState);
 
diff --git a/src/aui/tabartgtk.cpp b/src/aui/tabartgtk.cpp
index 8914580..3b1d285 100644
--- a/src/aui/tabartgtk.cpp
+++ b/src/aui/tabartgtk.cpp
@@ -108,21 +108,12 @@ void ButtonStateAndShadow(int buttonState, GtkStateType& state, GtkShadowType& s
     }
 }
 
-wxRect DrawCloseButton(wxDC& dc, GtkWidget* widget, int buttonState, wxRect const& inRect, int orientation, GdkRectangle* clipRect)
+wxRect CalculateCloseButtonRect(wxRect const& inRect, int orientation)
 {
     GtkStyle* styleButton = gtk_widget_get_style(wxGTKPrivate::GetButtonWidget());
     int xthickness = styleButton->xthickness;
     int ythickness = styleButton->ythickness;
 
-    wxBitmap bmp(gtk_widget_render_icon(widget, GTK_STOCK_CLOSE, GTK_ICON_SIZE_SMALL_TOOLBAR, "tab"));
-
-    if(bmp.GetWidth() != s_CloseIconSize || bmp.GetHeight() != s_CloseIconSize)
-    {
-        wxImage img = bmp.ConvertToImage();
-        img.Rescale(s_CloseIconSize, s_CloseIconSize);
-        bmp = img;
-    }
-
     int buttonSize = s_CloseIconSize + 2 * xthickness;
 
     wxRect outRect;
@@ -142,6 +133,26 @@ wxRect DrawCloseButton(wxDC& dc, GtkWidget* widget, int buttonState, wxRect cons
     outRect.width = buttonSize;
     outRect.height = buttonSize;
 
+    return outRect;
+}
+
+wxRect DrawCloseButton(wxDC& dc, GtkWidget* widget, int buttonState, wxRect const& inRect, int orientation, GdkRectangle* clipRect)
+{
+    GtkStyle* styleButton = gtk_widget_get_style(wxGTKPrivate::GetButtonWidget());
+    int xthickness = styleButton->xthickness;
+    int ythickness = styleButton->ythickness;
+
+    wxBitmap bmp(gtk_widget_render_icon(widget, GTK_STOCK_CLOSE, GTK_ICON_SIZE_SMALL_TOOLBAR, "tab"));
+
+    if(bmp.GetWidth() != s_CloseIconSize || bmp.GetHeight() != s_CloseIconSize)
+    {
+        wxImage img = bmp.ConvertToImage();
+        img.Rescale(s_CloseIconSize, s_CloseIconSize);
+        bmp = img;
+    }
+
+    wxRect outRect = CalculateCloseButtonRect(inRect, orientation);
+
     wxGTKDCImpl* impldc = (wxGTKDCImpl*) dc.GetImpl();
     GdkWindow* window = impldc->GetGDKWindow();
 
@@ -241,6 +252,7 @@ void wxAuiGtkTabArt::DrawTab(wxDC& dc, wxWindow* wnd, const wxAuiPaneInfo& page,
         }
         else//wxAUI_NB_RIGHT
         {
+            tabRect.x = inRect.width - tabRect.width;
             if (!page.HasFlag(wxAuiPaneInfo::optionActiveNotebook))
                 tabRect.width -= 2 * GTK_NOTEBOOK (wxGTKPrivate::GetNotebookWidget())->tab_vborder;
             gapRect.x = tabRect.x - gapRect.width;
@@ -440,11 +452,20 @@ void wxAuiGtkTabArt::DrawButton(wxDC& dc, wxWindow* wnd, const wxRect& inRect, i
             break;
 
         case wxAUI_BUTTON_RIGHT:
+            if (HasFlag(wxAUI_NB_WINDOWLIST_BUTTON))
+            {
+                int scrollArrowHLength;
+                gtk_widget_style_get(widget,
+                                     "scroll-arrow-hlength", &scrollArrowHLength,
+                                     NULL);
+                rect.width -= 1.5 * scrollArrowHLength;
+            }
+            if (HasFlag(wxAUI_NB_CLOSE_BUTTON))
+                rect.width -= CalculateCloseButtonRect(inRect, orientation).GetWidth();
             rect = DrawSimpleArrow(dc, widget, buttonState, rect, orientation, GTK_ARROW_RIGHT);
             break;
 
         case wxAUI_BUTTON_UP:
-            rect.width = wnd->GetRect().GetWidth();
             rect = DrawSimpleArrow(dc, widget, buttonState, rect, orientation, GTK_ARROW_UP);
             break;
 
@@ -462,6 +483,8 @@ void wxAuiGtkTabArt::DrawButton(wxDC& dc, wxWindow* wnd, const wxRect& inRect, i
                 rect.height = 1.5 * scrollArrowVLength;
                 rect.width = 1.5 * scrollArrowHLength;
                 rect.x = inRect.x + inRect.width - rect.width;
+                if (HasFlag(wxAUI_NB_CLOSE_BUTTON))
+                    rect.x -= CalculateCloseButtonRect(inRect, orientation).GetWidth();
 
                 if (orientation == wxUP)
                 {

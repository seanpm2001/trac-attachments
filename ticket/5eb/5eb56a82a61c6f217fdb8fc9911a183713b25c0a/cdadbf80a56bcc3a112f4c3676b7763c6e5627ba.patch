Index: src/gtk/window.cpp
===================================================================
--- src/gtk/window.cpp	(révision 64284)
+++ src/gtk/window.cpp	(copie de travail)
@@ -3745,7 +3745,7 @@
     {
         GtkWidget *w = GetConnectWidget();
         wxToolTip::GTKApply(w, NULL);
-#if GTK_CHECK_VERSION(2, 12, 0)
+#ifdef __WXGTK218__
         // Just applying NULL doesn't work on 2.12.0, so also use
         // gtk_widget_set_has_tooltip. It is part of the new GtkTooltip API
         // but seems also to work with the old GtkTooltips.
@@ -3755,10 +3755,17 @@
     }
 }
 
+#ifdef __WXGTK218__
+void wxWindowGTK::GTKApplyToolTip( const gchar *tip )
+{
+    gtk_widget_set_tooltip_text(GetConnectWidget(), tip);
+}
+#else
 void wxWindowGTK::GTKApplyToolTip( GtkTooltips *tips, const gchar *tip )
 {
     gtk_tooltips_set_tip(tips, GetConnectWidget(), tip, NULL);
 }
+#endif // __WXGTK218__
 #endif // wxUSE_TOOLTIPS
 
 bool wxWindowGTK::SetBackgroundColour( const wxColour &colour )
Index: src/gtk/radiobox.cpp
===================================================================
--- src/gtk/radiobox.cpp	(révision 64284)
+++ src/gtk/radiobox.cpp	(copie de travail)
@@ -567,6 +567,22 @@
 }
 
 #if wxUSE_TOOLTIPS
+#ifdef __WXGTK218__
+void wxRadioBox::GTKApplyToolTip( const gchar *tip )
+{
+    // set this tooltip for all radiobuttons which don't have their own tips
+    unsigned n = 0;
+    for ( wxRadioBoxButtonsInfoList::compatibility_iterator node = m_buttonsInfo.GetFirst();
+          node;
+          node = node->GetNext(), n++ )
+    {
+        if ( !GetItemToolTip(n) )
+        {
+            gtk_widget_set_tooltip_text(GTK_WIDGET(node->GetData()->button), tip);
+        }
+    }
+}
+#else
 void wxRadioBox::GTKApplyToolTip(GtkTooltips * WXUNUSED(tips), const gchar *tip)
 {
     // set this tooltip for all radiobuttons which don't have their own tips
@@ -581,6 +597,7 @@
         }
     }
 }
+#endif // __WXGTK218__
 
 void wxRadioBox::DoSetItemToolTip(unsigned int n, wxToolTip *tooltip)
 {
@@ -590,9 +607,12 @@
     if ( tooltip )
         buf = wxGTK_CONV(tooltip->GetTip());
 
+#ifdef __WXGTK218__
+    gtk_widget_set_tooltip_text(GTK_WIDGET(m_buttonsInfo[n]->button), buf);
+#else
     wxToolTip::GTKApply(GTK_WIDGET(m_buttonsInfo[n]->button), buf);
+#endif // __WXGTK218__
 }
-
 #endif // wxUSE_TOOLTIPS
 
 GdkWindow *wxRadioBox::GTKGetWindow(wxArrayGdkWindows& windows) const
Index: src/gtk/toolbar.cpp
===================================================================
--- src/gtk/toolbar.cpp	(révision 64284)
+++ src/gtk/toolbar.cpp	(copie de travail)
@@ -346,16 +346,20 @@
 void wxToolBar::Init()
 {
     m_toolbar = NULL;
+#ifndef __WXGTK218__
     m_tooltips = NULL;
+#endif
 }
 
 wxToolBar::~wxToolBar()
 {
+#ifndef __WXGTK218__
     if (m_tooltips)
     {
         gtk_object_destroy(GTK_OBJECT(m_tooltips));
         g_object_unref(m_tooltips);
     }
+#endif
 }
 
 bool wxToolBar::Create( wxWindow *parent,
@@ -376,9 +380,11 @@
     FixupStyle();
 
     m_toolbar = GTK_TOOLBAR( gtk_toolbar_new() );
+#ifndef __WXGTK218__
     m_tooltips = gtk_tooltips_new();
     g_object_ref(m_tooltips);
     gtk_object_sink(GTK_OBJECT(m_tooltips));
+#endif
     GtkSetStyle();
 
     if (style & wxTB_DOCKABLE)
@@ -528,8 +534,12 @@
             }
             if (!HasFlag(wxTB_NO_TOOLTIPS) && !tool->GetShortHelp().empty())
             {
+#ifdef __WXGTK218__
+                gtk_tool_item_set_tooltip_text(tool->m_item, wxGTK_CONV(tool->GetShortHelp()));
+#else
                 gtk_tool_item_set_tooltip(tool->m_item,
                     m_tooltips, wxGTK_CONV(tool->GetShortHelp()), "");
+#endif
             }
             g_signal_connect(GTK_BIN(tool->m_item)->child, "button_press_event",
                 G_CALLBACK(button_press_event), tool);
@@ -695,8 +705,12 @@
         (void)tool->SetShortHelp(helpString);
         if (tool->m_item)
         {
+#ifdef __WXGTK218__
+            gtk_tool_item_set_tooltip_text(tool->m_item, wxGTK_CONV(helpString));
+#else
             gtk_tool_item_set_tooltip(tool->m_item,
                 m_tooltips, wxGTK_CONV(helpString), "");
+#endif
         }
     }
 }
Index: src/gtk/listbox.cpp
===================================================================
--- src/gtk/listbox.cpp	(révision 64284)
+++ src/gtk/listbox.cpp	(copie de travail)
@@ -920,11 +920,18 @@
 // ----------------------------------------------------------------------------
 
 #if wxUSE_TOOLTIPS
+#ifdef __WXGTK218__
+void wxListBox::GTKApplyToolTip( const gchar *tip )
+{
+    gtk_widget_set_tooltip_text(GTK_WIDGET( m_treeview ), tip);
+}
+#else
 void wxListBox::GTKApplyToolTip( GtkTooltips *tips, const gchar *tip )
 {
     // RN: Is this needed anymore?
     gtk_tooltips_set_tip( tips, GTK_WIDGET( m_treeview ), tip, NULL );
 }
+#endif // __WXGTK218__
 #endif // wxUSE_TOOLTIPS
 
 GtkWidget *wxListBox::GetConnectWidget()
Index: src/gtk/tooltip.cpp
===================================================================
--- src/gtk/tooltip.cpp	(révision 64284)
+++ src/gtk/tooltip.cpp	(copie de travail)
@@ -23,8 +23,9 @@
 //-----------------------------------------------------------------------------
 // global data
 //-----------------------------------------------------------------------------
-
+#ifdef __WXGTK218__
 static GtkTooltips *gs_tooltips = NULL;
+#endif // __WXGTK218__
 
 //-----------------------------------------------------------------------------
 // wxToolTip
@@ -49,6 +50,14 @@
     if (!win)
         return;
 
+#ifdef __WXGTK218__
+    m_window = win;
+    
+    if (m_text.empty())
+        m_window->GTKApplyToolTip( NULL );
+    else
+        m_window->GTKApplyToolTip( wxGTK_CONV_SYS(m_text) );
+#else
     if ( !gs_tooltips )
         gs_tooltips = gtk_tooltips_new();
 
@@ -58,19 +67,30 @@
         m_window->GTKApplyToolTip( gs_tooltips, NULL );
     else
         m_window->GTKApplyToolTip( gs_tooltips, wxGTK_CONV_SYS(m_text) );
+#endif // __WXGTK218__
 }
 
 /* static */
 void wxToolTip::GTKApply(GtkWidget *w, const gchar *tip)
 {
+#ifdef __WXGTK218__
+    gtk_widget_set_tooltip_text(w, tip);
+#else
     if ( !gs_tooltips )
         gs_tooltips = gtk_tooltips_new();
 
     gtk_tooltips_set_tip(gs_tooltips, w, tip, NULL);
+#endif // __WXGTK218__
 }
 
 void wxToolTip::Enable( bool flag )
 {
+#ifdef __WXGTK218__
+    GtkSettings* settings = gtk_settings_get_default();
+    if(!settings)
+        return;
+    gtk_settings_set_long_property(settings, "gtk-enable-tooltips", flag?TRUE:FALSE, NULL);
+#else
     if (!gs_tooltips)
         return;
 
@@ -78,8 +98,18 @@
         gtk_tooltips_enable( gs_tooltips );
     else
         gtk_tooltips_disable( gs_tooltips );
+#endif // __WXGTK218__
 }
 
+#ifdef __WXGTK218__
+void wxToolTip::SetDelay( long msecs )
+{
+    GtkSettings* settings = gtk_settings_get_default();
+    if(!settings)
+        return;
+    gtk_settings_set_long_property(settings, "gtk-tooltip-timeout", msecs, NULL);
+}
+#else
 G_BEGIN_DECLS
 void gtk_tooltips_set_delay (GtkTooltips *tooltips,
                              guint delay);
@@ -94,6 +124,7 @@
     // Try to not use it, after which remove the prototype above.
     gtk_tooltips_set_delay( gs_tooltips, (int)msecs );
 }
+#endif // __WXGTK218__
 
 void wxToolTip::SetAutoPop( long WXUNUSED(msecs) )
 {
Index: include/wx/gtk/toolbar.h
===================================================================
--- include/wx/gtk/toolbar.h	(révision 64284)
+++ include/wx/gtk/toolbar.h	(copie de travail)
@@ -91,8 +91,9 @@
     virtual void AddChildGTK(wxWindowGTK* child);
 
     GtkToolbar* m_toolbar;
+#ifndef __WXGTK218__
     GtkTooltips* m_tooltips;
-
+#endif
     DECLARE_DYNAMIC_CLASS(wxToolBar)
 };
 
Index: include/wx/gtk/listbox.h
===================================================================
--- include/wx/gtk/listbox.h	(révision 64284)
+++ include/wx/gtk/listbox.h	(copie de travail)
@@ -85,7 +85,11 @@
     GtkWidget *GetConnectWidget();
 
 #if wxUSE_TOOLTIPS
+#ifdef __WXGTK218__
+    void GTKApplyToolTip( const gchar *tip );
+#else
     void GTKApplyToolTip( GtkTooltips *tips, const gchar *tip );
+#endif // __WXGTK218__
 #endif // wxUSE_TOOLTIPS
 
     struct _GtkTreeView   *m_treeview;
Index: include/wx/gtk/radiobox.h
===================================================================
--- include/wx/gtk/radiobox.h	(révision 64284)
+++ include/wx/gtk/radiobox.h	(copie de travail)
@@ -131,7 +131,11 @@
     void GtkDisableEvents();
     void GtkEnableEvents();
 #if wxUSE_TOOLTIPS
+#ifdef __WXGTK218__
+    void GTKApplyToolTip( const gchar *tip );
+#else
     void GTKApplyToolTip( GtkTooltips *tips, const gchar *tip );
+#endif // __WXGTK218__
 #endif // wxUSE_TOOLTIPS
 
     wxRadioBoxButtonsInfoList   m_buttonsInfo;
Index: include/wx/gtk/window.h
===================================================================
--- include/wx/gtk/window.h	(révision 64284)
+++ include/wx/gtk/window.h	(copie de travail)
@@ -12,6 +12,8 @@
 
 #include "wx/dynarray.h"
 
+#include <gtk/gtk.h>
+
 // helper structure that holds class that holds GtkIMContext object and
 // some additional data needed for key events processing
 struct wxGtkIMData;
@@ -217,7 +219,11 @@
 
 #if wxUSE_TOOLTIPS
     // applies tooltip to the widget (tip must be UTF-8 encoded)
+#ifdef __WXGTK218__
+    virtual void GTKApplyToolTip( const gchar *tip );
+#else
     virtual void GTKApplyToolTip( GtkTooltips *tips, const gchar *tip );
+#endif // __WXGTK218__
 #endif // wxUSE_TOOLTIPS
 
     // Called when a window should delay showing itself

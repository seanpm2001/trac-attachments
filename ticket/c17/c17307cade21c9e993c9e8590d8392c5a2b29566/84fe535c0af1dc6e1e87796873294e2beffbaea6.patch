? version-script
? wxgtk-2.3-config
? wxgtk-2.5-config
? wxgtkd-2.4-config
? wxgtkd-2.5-config
? contrib/config.log
? contrib/config.status
? contrib/samples/Makefile
? contrib/samples/applet/Makefile
? contrib/samples/canvas/Makefile
? contrib/samples/canvas/simple/Makefile
? contrib/samples/canvas/test/Makefile
? contrib/samples/fl/Makefile
? contrib/samples/fl/fl_demo1/Makefile
? contrib/samples/fl/fl_demo2/Makefile
? contrib/samples/fl/fl_sample1/Makefile
? contrib/samples/fl/fl_sample2/Makefile
? contrib/samples/fl/fl_sample3/Makefile
? contrib/samples/gizmos/Makefile
? contrib/samples/gizmos/led
? contrib/samples/gizmos/dynsash/Makefile
? contrib/samples/gizmos/dynsash_switch/Makefile
? contrib/samples/gizmos/editlbox/Makefile
? contrib/samples/gizmos/multicell/Makefile
? contrib/samples/gizmos/splittree/Makefile
? contrib/samples/mmedia/Makefile
? contrib/samples/ogl/Makefile
? contrib/samples/ogl/ogledit/Makefile
? contrib/samples/ogl/studio/Makefile
? contrib/samples/plot/Makefile
? contrib/samples/stc/Makefile
? contrib/samples/svg/Makefile
? contrib/samples/xrc/Makefile
? contrib/src/Makefile
? contrib/src/applet/Makefile
? contrib/src/canvas/Makefile
? contrib/src/fl/Makefile
? contrib/src/gizmos/Makefile
? contrib/src/mmedia/Makefile
? contrib/src/net/Makefile
? contrib/src/ogl/Makefile
? contrib/src/plot/Makefile
? contrib/src/stc/Makefile
? contrib/src/svg/Makefile
? contrib/src/xrc/Makefile
? contrib/utils/Makefile
? contrib/utils/convertrc/Makefile
? contrib/utils/wxrc/Makefile
? contrib/utils/wxrcedit/Makefile
? demos/Makefile
? demos/config.log
? demos/config.status
? demos/bombs/Makefile
? demos/dbbrowse/Makefile
? demos/forty/Makefile
? demos/fractal/Makefile
? demos/life/Makefile
? demos/poem/Makefile
? docs/latex/wx/sizer00.eps
? docs/latex/wx/sizer01.eps
? docs/latex/wx/sizer02.eps
? docs/latex/wx/sizer03.eps
? docs/latex/wx/sizer04.eps
? docs/latex/wx/sizer05.eps
? docs/latex/wx/sizer06.eps
? docs/latex/wx/sizer07.eps
? docs/latex/wx/sizer08.eps
? docs/latex/wx/sizer09.eps
? docs/latex/wx/sizer10.eps
? docs/latex/wx/sizer11.eps
? lib/libwx_gtkd-2.4.so.0.0.0
? lib/wx
? samples/Makefile
? samples/config.cache
? samples/config.log
? samples/config.status
? samples/minimal.debug
? samples/artprov/Makefile
? samples/calendar/Makefile
? samples/calendar/calendar
? samples/calendar/calendar.d
? samples/caret/Makefile
? samples/checklst/Makefile
? samples/config/Makefile
? samples/console/Makefile
? samples/controls/Makefile
? samples/controls/controls
? samples/controls/controls.d
? samples/db/Makefile
? samples/dialogs/Makefile
? samples/dialup/Makefile
? samples/dnd/Makefile
? samples/docview/Makefile
? samples/docvwmdi/Makefile
? samples/dragimag/Makefile
? samples/drawing/Makefile
? samples/dynamic/Makefile
? samples/dynamic/dynamic
? samples/dynamic/dynamic.d
? samples/erase/Makefile
? samples/event/Makefile
? samples/exec/Makefile
? samples/font/Makefile
? samples/grid/Makefile
? samples/help/Makefile
? samples/html/Makefile
? samples/html/about/Makefile
? samples/html/help/Makefile
? samples/html/helpview/Makefile
? samples/html/printing/Makefile
? samples/html/test/Makefile
? samples/html/virtual/Makefile
? samples/html/widget/Makefile
? samples/html/zip/Makefile
? samples/image/Makefile
? samples/image/image
? samples/image/image.d
? samples/image/test.xpm
? samples/internat/Makefile
? samples/ipc/Makefile
? samples/joytest/Makefile
? samples/keyboard/Makefile
? samples/layout/Makefile
? samples/listctrl/Makefile
? samples/mdi/Makefile
? samples/memcheck/Makefile
? samples/menu/Makefile
? samples/minifram/Makefile
? samples/minimal/Makefile
? samples/minimal/minimal
? samples/minimal/minimal.d
? samples/minimal/test.txt
? samples/mobile/Makefile
? samples/mobile/styles/Makefile
? samples/mobile/wxedit/Makefile
? samples/newgrid/Makefile
? samples/notebook/Makefile
? samples/opengl/Makefile
? samples/opengl/cube/Makefile
? samples/opengl/isosurf/Makefile
? samples/opengl/penguin/Makefile
? samples/png/Makefile
? samples/printing/Makefile
? samples/proplist/Makefile
? samples/propsize/Makefile
? samples/resource/Makefile
? samples/rotate/Makefile
? samples/sashtest/Makefile
? samples/scroll/Makefile
? samples/scrollsub/Makefile
? samples/sockets/Makefile
? samples/splitter/Makefile
? samples/statbar/Makefile
? samples/taskbar/Makefile
? samples/text/Makefile
? samples/thread/Makefile
? samples/toolbar/Makefile
? samples/treectrl/Makefile
? samples/treelay/Makefile
? samples/typetest/Makefile
? samples/validate/Makefile
? samples/widgets/Makefile
? samples/wizard/Makefile
? utils/Makefile
? utils/config.log
? utils/config.status
? utils/HelpGen/Makefile
? utils/HelpGen/src/Makefile
? utils/dialoged/Makefile
? utils/emulator/Makefile
? utils/emulator/src/Makefile
? utils/helpview/Makefile
? utils/helpview/src/Makefile
? utils/hhp2cached/Makefile
? utils/makegen/Makefile
? utils/tex2rtf/Makefile
? utils/tex2rtf/src/Makefile
Index: include/wx/event.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/event.h,v
retrieving revision 1.158.2.1
diff -b -u -2 -r1.158.2.1 event.h
--- include/wx/event.h	2002/10/30 19:55:06	1.158.2.1
+++ include/wx/event.h	2003/02/15 11:00:44
@@ -1986,4 +1986,5 @@
 class WXDLLEXPORT wxEvtHandler : public wxObject
 {
+    friend class wxChainEvtHandler;
 public:
     wxEvtHandler();
@@ -1995,4 +1996,5 @@
     void SetPreviousHandler(wxEvtHandler *handler) { m_previousHandler = handler; }
 
+
     void SetEvtHandlerEnabled(bool enabled) { m_enabled = enabled; }
     bool GetEvtHandlerEnabled() const { return m_enabled; }
@@ -2125,8 +2127,74 @@
     virtual void *DoGetClientData() const;
 
+    //! hooks for wxRefCountedEvtHandler
+    virtual void IncRef() {};
+    virtual void DecRef() {};
+
 private:
     DECLARE_NO_COPY_CLASS(wxEvtHandler)
     DECLARE_DYNAMIC_CLASS(wxEvtHandler)
 };
+
+// ----------------------------------------------------------------------------
+// List of pointers to wxEvtHandlers
+// ----------------------------------------------------------------------------
+
+//#include "list.h"
+WX_DECLARE_LIST(wxEvtHandler,EvtHandlerList);
+
+// ----------------------------------------------------------------------------
+// wxChainEvtHandler: the base class for wxWindow class
+// A handler that manages list of event handlers.
+// ----------------------------------------------------------------------------
+
+class wxChainEvtHandler : public wxEvtHandler
+{
+    public:
+        wxChainEvtHandler() {};
+        virtual ~wxChainEvtHandler();
+        /**
+            process m_handlers list if wxEvtHandler::ProcessEvent returns FALSE
+            @return TRUE if event was processed, FALSE otherwise
+        */
+        virtual bool ProcessEvent(wxEvent& p_event);
+
+        /**
+            push/pop event handler: allows to chain a custom event handler to
+            already existing ones
+        */
+        void PushEventHandler( wxEvtHandler *handler );
+        /**
+            @warning this method is dangerous for public use.
+        */
+        wxEvtHandler *PopEventHandler( bool deleteHandler = FALSE );
+        /**
+            find the given handler in the event handler list and remove (but
+            not delete) it from the event handler list, return TRUE if it was
+            found and FALSE otherwise (this also results in an assert failure so
+            this function should only be called when the handler is supposed to
+            be there)
+        */
+        bool RemoveEventHandler(wxEvtHandler *handler);
+    protected:
+        //! List of owned event handlers
+        EvtHandlerList m_handlers;
+};
+
+// ----------------------------------------------------------------------------
+// wxRefCountedEvtHandler: base class for 'plug and forget' pluggable event handlers
+// ----------------------------------------------------------------------------
+
+class wxRefCountedEvtHandler : public wxEvtHandler
+{
+    public:
+        wxRefCountedEvtHandler() { mCounter = 0;};
+        virtual ~wxRefCountedEvtHandler() {};
+    protected:
+        virtual void IncRef() { mCounter++;};
+        virtual void DecRef() { mCounter--; if (mCounter == 0) delete this; };
+    private:
+        int mCounter;
+};
+
 
 typedef void (wxEvtHandler::*wxEventFunction)(wxEvent&);
Index: include/wx/window.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/window.h,v
retrieving revision 1.94.2.4
diff -b -u -2 -r1.94.2.4 window.h
--- include/wx/window.h	2002/11/22 21:37:10	1.94.2.4
+++ include/wx/window.h	2003/02/15 11:00:48
@@ -90,5 +90,5 @@
 // ----------------------------------------------------------------------------
 
-class WXDLLEXPORT wxWindowBase : public wxEvtHandler
+class WXDLLEXPORT wxWindowBase : public wxChainEvtHandler
 {
 public:
@@ -472,21 +472,10 @@
 
         // get the current event handler
-    wxEvtHandler *GetEventHandler() const { return m_eventHandler; }
+    wxEvtHandler *GetEventHandler() const;
 
         // replace the event handler (allows to completely subclass the
         // window)
-    void SetEventHandler( wxEvtHandler *handler ) { m_eventHandler = handler; }
+    void SetEventHandler( wxEvtHandler *handler );
 
-        // push/pop event handler: allows to chain a custom event handler to
-        // alreasy existing ones
-    void PushEventHandler( wxEvtHandler *handler );
-    wxEvtHandler *PopEventHandler( bool deleteHandler = FALSE );
-
-        // find the given handler in the event handler chain and remove (but
-        // not delete) it from the event handler chain, return TRUE if it was
-        // found and FALSE otherwise (this also results in an assert failure so
-        // this function should only be called when the handler is supposed to
-        // be there)
-    bool RemoveEventHandler(wxEvtHandler *handler);
 
     // validators
@@ -884,8 +873,4 @@
                          m_maxWidth,
                          m_maxHeight;
-
-    // event handler for this window: usually is just 'this' but may be
-    // changed with SetEventHandler()
-    wxEvtHandler        *m_eventHandler;
 
 #if wxUSE_VALIDATORS
Index: src/common/event.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/common/event.cpp,v
retrieving revision 1.110.2.1
diff -b -u -2 -r1.110.2.1 event.cpp
--- src/common/event.cpp	2002/10/30 19:55:38	1.110.2.1
+++ src/common/event.cpp	2003/02/15 11:01:02
@@ -566,5 +566,4 @@
     m_rawCode = evt.m_rawCode;
     m_rawFlags = evt.m_rawFlags;
-        
 #if wxUSE_UNICODE
     m_uniChar = evt.m_uniChar;
@@ -1137,2 +1136,85 @@
 
 #endif // wxUSE_GUI
+
+#include "wx/listimpl.cpp"
+WX_DEFINE_LIST(EvtHandlerList);
+
+wxChainEvtHandler::~wxChainEvtHandler()
+{
+    EvtHandlerList::Node* node = m_handlers.GetFirst();
+    while(node != NULL)
+    {
+        wxEvtHandler* handler = node -> GetData();
+        wxASSERT_MSG(handler != NULL,_T("Got node with no data"));
+        handler -> DecRef(); //this could delete handler
+        node = node -> GetNext();
+    };
+};
+
+/**
+    Try to process event by our children. If it returns false try process it ourself.
+    @return TRUE if event was processed, FALSE otherwise
+*/
+bool
+wxChainEvtHandler::ProcessEvent(wxEvent& p_event)
+{
+    for(EvtHandlerList::Node* node = m_handlers.GetFirst(); node != NULL; node = node -> GetNext())
+    {
+        wxEvtHandler* handler = node -> GetData();
+        wxASSERT_MSG(handler != NULL,_T("Got node with no data"));
+        // we cannot do this -> ProcessEvent() here
+        // This will cause infinite recursive call loop.
+        // Instead we call parent wxEvtHandler::ProcessEvent() if we should try to process event
+        if (handler != this)
+        {
+            if (handler -> ProcessEvent(p_event))
+                return TRUE;
+        } else {
+            if (wxEvtHandler::ProcessEvent(p_event))
+                return TRUE;
+            };
+        };
+    return FALSE;
+};
+
+void
+wxChainEvtHandler::PushEventHandler( wxEvtHandler *handler )
+{
+    m_handlers.Insert(handler);
+    handler -> IncRef();
+};
+
+/**
+    This is safe with RefCountedEventHandler too.
+*/
+wxEvtHandler *
+wxChainEvtHandler::PopEventHandler( bool deleteHandler = FALSE )
+{
+    wxEvtHandler* handler = m_handlers.GetFirst() -> GetData();
+    wxASSERT_MSG(handler != NULL,_T("Got node with no data"));
+    if (deleteHandler)
+    {
+        delete handler;
+        handler = (wxEvtHandler *) NULL;
+    } else {
+        handler -> DecRef();
+    };
+    m_handlers.DeleteNode(m_handlers.GetFirst());
+    return handler;
+};
+
+bool
+wxChainEvtHandler::RemoveEventHandler(wxEvtHandler *handler)
+{
+    EvtHandlerList::Node* node = m_handlers.Find(handler);
+    if (handler == NULL)
+    {
+        wxASSERT_MSG(false,_T("Handler not found"));
+        return false;
+    };
+    wxEvtHandler* h = node -> GetData();
+    wxASSERT_MSG(h != NULL,_T("Got node with no data"));
+    h -> DecRef(); //this could cause self destruction of h.
+    m_handlers.DeleteNode(node);
+    return TRUE;
+}
Index: src/common/wincmn.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/common/wincmn.cpp,v
retrieving revision 1.123.2.5
diff -b -u -2 -r1.123.2.5 wincmn.cpp
--- src/common/wincmn.cpp	2003/02/02 15:06:36	1.123.2.5
+++ src/common/wincmn.cpp	2003/02/15 11:01:06
@@ -121,6 +121,4 @@
     m_isEnabled = TRUE;
 
-    // the default event handler is just this window
-    m_eventHandler = this;
 
 #if wxUSE_VALIDATORS
@@ -199,4 +197,8 @@
                               const wxString& name)
 {
+
+    // the default event handler is just this window
+    m_handlers.Append(this);
+
     // m_isWindow is set to TRUE in wxWindowBase::Init() as well as many other
     // member variables - check that it has been called (will catch the case
@@ -732,75 +734,26 @@
 // ----------------------------------------------------------------------------
 
-void wxWindowBase::PushEventHandler(wxEvtHandler *handler)
-{
-    wxEvtHandler *handlerOld = GetEventHandler();
+/**
+    @returns default event handler.
 
-    handler->SetNextHandler(handlerOld);
+    wxWindowBase class manages a list of pushed event handlers itself instead of
+    having chain linked by Set(Next/Prev)Handler, so we always return pointer to itself
 
-    if ( handlerOld )
-        GetEventHandler()->SetPreviousHandler(handler);
-
-    SetEventHandler(handler);
-}
-
-wxEvtHandler *wxWindowBase::PopEventHandler(bool deleteHandler)
+    @warning this function is depricated. library calls like \
+    obj -> GetEventHandler() -> ProcessEvent(evt) should be replaced with obj -> ProcessEvent(evt).
+*/
+wxEvtHandler *wxWindowBase::GetEventHandler() const
 {
-    wxEvtHandler *handlerA = GetEventHandler();
-    if ( handlerA )
-    {
-        wxEvtHandler *handlerB = handlerA->GetNextHandler();
-        handlerA->SetNextHandler((wxEvtHandler *)NULL);
-
-        if ( handlerB )
-            handlerB->SetPreviousHandler((wxEvtHandler *)NULL);
-        SetEventHandler(handlerB);
-
-        if ( deleteHandler )
-        {
-            delete handlerA;
-            handlerA = (wxEvtHandler *)NULL;
-        }
-    }
-
-    return handlerA;
+    return (wxEvtHandler *) this;
 }
 
-bool wxWindowBase::RemoveEventHandler(wxEvtHandler *handler)
+void wxWindowBase::SetEventHandler(wxEvtHandler *handler)
 {
-    wxCHECK_MSG( handler, FALSE, _T("RemoveEventHandler(NULL) called") );
-
-    wxEvtHandler *handlerPrev = NULL,
-                 *handlerCur = GetEventHandler();
-    while ( handlerCur )
-    {
-        wxEvtHandler *handlerNext = handlerCur->GetNextHandler();
-
-        if ( handlerCur == handler )
-        {
-            if ( handlerPrev )
-            {
-                handlerPrev->SetNextHandler(handlerNext);
-            }
-            else
+    for (wxEvtHandler* h = GetEventHandler(); h != NULL; h = GetEventHandler())
             {
-                SetEventHandler(handlerNext);
-            }
-
-            if ( handlerNext )
-            {
-                handlerNext->SetPreviousHandler ( handlerPrev );
-            }
-            handler->SetNextHandler(NULL);
-
-            return TRUE;
-        }
-
-        handlerPrev = handlerCur;
-        handlerCur = handlerNext;
-    }
-
-    wxFAIL_MSG( _T("where has the event handler gone?") );
-
-    return FALSE;
+        PopEventHandler(h);
+    };
+    wxASSERT(m_handlers.GetCount() == 0);
+    m_handlers.Append(handler);
 }
 

 	  	 

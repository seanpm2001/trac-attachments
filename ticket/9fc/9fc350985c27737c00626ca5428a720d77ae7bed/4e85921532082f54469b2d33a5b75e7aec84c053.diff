Index: artprov/arttest.cpp
===================================================================
RCS file: /home/wxcvs/wxWindows/samples/artprov/arttest.cpp,v
retrieving revision 1.2
diff -u -r1.2 arttest.cpp
--- artprov/arttest.cpp	6 Apr 2002 14:55:16 -0000	1.2
+++ artprov/arttest.cpp	20 Jul 2002 01:15:19 -0000
@@ -195,7 +195,8 @@
     msg.Printf( _T("This is the about dialog of wxArtProvider sample.\n")
                 _T("Welcome to %s"), wxVERSION_STRING);
 
-    wxMessageBox(msg, _T("About Minimal"), wxOK | wxICON_INFORMATION, this);
+    wxMessageBox(msg, _T("About wxArtProvider sample"),
+        wxOK | wxICON_INFORMATION, this);
 }
 
 void MyFrame::OnBrowser(wxCommandEvent& WXUNUSED(event))
Index: controls/controls.cpp
===================================================================
RCS file: /home/wxcvs/wxWindows/samples/controls/controls.cpp,v
retrieving revision 1.195
diff -u -r1.195 controls.cpp
--- controls/controls.cpp	4 Jun 2002 12:48:17 -0000	1.195
+++ controls/controls.cpp	20 Jul 2002 01:15:19 -0000
@@ -757,8 +757,7 @@
 
 #if !defined(__WXMOTIF__) && !defined(__WIN16__)  // wxStaticBitmap not working under Motif yet; and icons not allowed under WIN16.
     wxIcon icon = wxArtProvider::GetIcon(wxART_INFORMATION);
-    wxStaticBitmap *bmpStatic = new wxStaticBitmap(panel, -1, icon,
-                                                   wxPoint(10, 10));
+    (void) new wxStaticBitmap( panel, -1, icon, wxPoint(10, 10) );
 
     // VZ: don't leak memory
     // bmpStatic = new wxStaticBitmap(panel, -1, wxNullIcon, wxPoint(50, 10));
@@ -1254,8 +1253,8 @@
     if ( m_spinctrl )
     {
         wxString s;
-        s.Printf(_T("Spin ctrl text changed: now %d (from event: %s)\n"),
-                 m_spinctrl->GetValue(), event.GetString());
+        s.Printf( _T("Spin ctrl text changed: now %d (from event: %s)\n"),
+                 m_spinctrl->GetValue(), event.GetString().c_str() );
         m_text->AppendText(s);
     }
 }
@@ -1265,8 +1264,8 @@
     if ( m_spinctrl )
     {
         wxString s;
-        s.Printf(_T("Spin ctrl changed: now %d (from event: %d)\n"),
-                 m_spinctrl->GetValue(), event.GetInt());
+        s.Printf( _T("Spin ctrl changed: now %d (from event: %ld)\n"),
+                 m_spinctrl->GetValue(), event.GetInt() );
         m_text->AppendText(s);
     }
 }
@@ -1275,8 +1274,9 @@
 {
     if ( m_spinctrl )
     {
-        m_text->AppendText(wxString::Format(_T("Spin up: %d (from event: %d)\n"),
-                           m_spinctrl->GetValue(), event.GetInt()));
+        m_text->AppendText( wxString::Format(
+            _T("Spin up: %d (from event: %ld)\n"),
+            m_spinctrl->GetValue(), event.GetInt() ) );
     }
 }
 
@@ -1284,8 +1284,9 @@
 {
     if ( m_spinctrl )
     {
-        m_text->AppendText(wxString::Format(_T("Spin down: %d (from event: %d)\n"),
-                           m_spinctrl->GetValue(), event.GetInt()));
+        m_text->AppendText( wxString::Format(
+            _T("Spin down: %d (from event: %ld)\n"),
+            m_spinctrl->GetValue(), event.GetInt() ) );
     }
 }
 
Index: dialup/nettest.cpp
===================================================================
RCS file: /home/wxcvs/wxWindows/samples/dialup/nettest.cpp,v
retrieving revision 1.5
diff -u -r1.5 nettest.cpp
--- dialup/nettest.cpp	27 Mar 2002 18:44:49 -0000	1.5
+++ dialup/nettest.cpp	20 Jul 2002 01:15:20 -0000
@@ -199,7 +199,7 @@
         msg = event.IsConnectedEvent() ? wxT("Successfully connected")
                                        : wxT("Dialing failed");
 
-        wxLogStatus(wxT(""));
+        wxLogStatus(wxEmptyString);
     }
     else
     {
Index: dnd/dnd.cpp
===================================================================
RCS file: /home/wxcvs/wxWindows/samples/dnd/dnd.cpp,v
retrieving revision 1.80
diff -u -r1.80 dnd.cpp
--- dnd/dnd.cpp	28 Apr 2002 14:30:54 -0000	1.80
+++ dnd/dnd.cpp	20 Jul 2002 01:15:33 -0000
@@ -1760,7 +1760,7 @@
     wxPoint pt(x, y);
 
     wxString s;
-    s.Printf(wxT("Shape dropped at (%ld, %ld)"), pt.x, pt.y);
+    s.Printf(wxT("Shape dropped at (%d, %d)"), pt.x, pt.y);
     SetStatusText(s);
 
     shape->Move(pt);
Index: erase/erase.cpp
===================================================================
RCS file: /home/wxcvs/wxWindows/samples/erase/erase.cpp,v
retrieving revision 1.11
diff -u -r1.11 erase.cpp
--- erase/erase.cpp	5 May 2002 21:31:08 -0000	1.11
+++ erase/erase.cpp	20 Jul 2002 01:15:33 -0000
@@ -88,8 +88,7 @@
 enum
 {
     // menu items
-    Minimal_Quit = 1,
-    Minimal_About
+    ID_MENU_QUIT = 1,
 };
 
 
@@ -101,7 +100,7 @@
 
 bool MyApp::OnInit()
 {
-    MyFrame *frame = new MyFrame(_T("Minimal wxWindows App"),
+    MyFrame *frame = new MyFrame(_T("Erase sample"),
                                  wxPoint(50, 50), wxSize(450, 340));
 
     frame->Show(TRUE);
@@ -114,26 +113,22 @@
 // ----------------------------------------------------------------------------
 
 BEGIN_EVENT_TABLE(MyFrame, wxFrame)
-    EVT_MENU(Minimal_Quit,  MyFrame::OnQuit)
-    EVT_MENU(Minimal_About, MyFrame::OnAbout)
+    EVT_MENU(ID_MENU_QUIT,  MyFrame::OnQuit)
+    EVT_MENU(wxID_ABOUT, MyFrame::OnAbout)
 END_EVENT_TABLE()
 
 // frame constructor
 MyFrame::MyFrame(const wxString& title, const wxPoint& pos, const wxSize& size)
        : wxFrame((wxFrame *)NULL, -1, title, pos, size)
 {
-#ifdef __WXMAC__
-    wxApp::s_macAboutMenuItemId = Minimal_About;
-#endif
-
     SetIcon(wxICON(mondrian));
 
     wxMenu *menuFile = new wxMenu("", wxMENU_TEAROFF);
 
     wxMenu *helpMenu = new wxMenu;
-    helpMenu->Append(Minimal_About, _T("&About...\tCtrl-A"), _T("Show about dialog"));
+    helpMenu->Append(wxID_ABOUT, _T("&About...\tCtrl-A"), _T("Show about dialog"));
 
-    menuFile->Append(Minimal_Quit, _T("E&xit\tAlt-X"), _T("Quit this program"));
+    menuFile->Append(ID_MENU_QUIT, _T("E&xit\tAlt-X"), _T("Quit this program"));
 
     wxMenuBar *menuBar = new wxMenuBar();
     menuBar->Append(menuFile, _T("&File"));
Index: exec/exec.cpp
===================================================================
RCS file: /home/wxcvs/wxWindows/samples/exec/exec.cpp,v
retrieving revision 1.17
diff -u -r1.17 exec.cpp
--- exec/exec.cpp	12 Jul 2002 19:54:21 -0000	1.17
+++ exec/exec.cpp	20 Jul 2002 01:15:33 -0000
@@ -122,7 +122,7 @@
     void DoAsyncExec(const wxString& cmd);
 
     // the PID of the last process we launched asynchronously
-    int m_pidLast;
+    long m_pidLast;
 
     // last command we executed
     wxString m_cmdLast;
@@ -505,16 +505,16 @@
     if ( sig == 0 )
     {
         if ( wxProcess::Exists(pid) )
-            wxLogStatus(_T("Process %d is running."), pid);
+            wxLogStatus(_T("Process %ld is running."), pid);
         else
-            wxLogStatus(_T("No process with pid = %d."), pid);
+            wxLogStatus(_T("No process with pid = %ld."), pid);
     }
     else // not SIGNONE
     {
         wxKillError rc = wxProcess::Kill(pid, (wxSignal)sig);
         if ( rc == wxKILL_OK )
         {
-            wxLogStatus(_T("Process %d killed with signal %d."), pid, sig);
+            wxLogStatus(_T("Process %ld killed with signal %d."), pid, sig);
         }
         else
         {
@@ -527,7 +527,7 @@
                 _T("unspecified error"),
             };
 
-            wxLogStatus(_T("Failed to kill process %d with signal %d: %s"),
+            wxLogStatus(_T("Failed to kill process %ld with signal %d: %s"),
                         pid, sig, errorText[rc]);
         }
     }
@@ -543,13 +543,14 @@
     m_pidLast = wxExecute(cmd, wxEXEC_ASYNC, process);
     if ( !m_pidLast )
     {
-        wxLogError(_T("Execution of '%s' failed."), cmd.c_str());
+        wxLogError( _T("Execution of '%s' failed."), cmd.c_str() );
 
         delete process;
     }
     else
     {
-        wxLogStatus(_T("Process %ld (%s) launched."), m_pidLast, cmd.c_str());
+        wxLogStatus( _T("Process %ld (%s) launched."),
+            m_pidLast, cmd.c_str() );
 
         m_cmdLast = cmd;
     }
@@ -564,12 +565,13 @@
     if ( !cmd )
         return;
 
-    wxLogStatus(_T("'%s' is running please wait..."), cmd.c_str());
+    wxLogStatus( _T("'%s' is running please wait..."), cmd.c_str() );
 
     int code = wxExecute(cmd, wxEXEC_SYNC);
 
     wxLogStatus(_T("Process '%s' terminated with exit code %d."),
-                cmd.c_str(), code);
+        cmd.c_str(), code);
+
     m_cmdLast = cmd;
 }
 
@@ -676,10 +678,10 @@
 
     // always execute the filter asynchronously
     MyPipedProcess2 *process = new MyPipedProcess2(this, cmd, input);
-    int pid = wxExecute(cmd, wxEXEC_ASYNC, process);
+    long pid = wxExecute(cmd, wxEXEC_ASYNC, process);
     if ( pid )
     {
-        wxLogStatus(_T("Process %ld (%s) launched."), pid, cmd.c_str());
+        wxLogStatus( _T("Process %ld (%s) launched."), pid, cmd.c_str() );
 
         m_running.Add(process);
     }
Index: html/printing/printing.cpp
===================================================================
RCS file: /home/wxcvs/wxWindows/samples/html/printing/printing.cpp,v
retrieving revision 1.6
diff -u -r1.6 printing.cpp
--- html/printing/printing.cpp	17 Mar 2002 14:15:41 -0000	1.6
+++ html/printing/printing.cpp	20 Jul 2002 01:15:34 -0000
@@ -77,7 +77,6 @@
 {
     // menu items
     Minimal_Quit = 1,
-    Minimal_About,
     Minimal_Print,
     Minimal_Preview,
     Minimal_PageSetup,
@@ -95,7 +94,7 @@
 // simple menu events like this the static method is much simpler.
 BEGIN_EVENT_TABLE(MyFrame, wxFrame)
     EVT_MENU(Minimal_Quit, MyFrame::OnQuit)
-    EVT_MENU(Minimal_About, MyFrame::OnAbout)
+    EVT_MENU(wxID_ABOUT, MyFrame::OnAbout)
     EVT_MENU(Minimal_Print, MyFrame::OnPrint)
     EVT_MENU(Minimal_Preview, MyFrame::OnPreview)
     EVT_MENU(Minimal_PageSetup, MyFrame::OnPageSetup)
@@ -163,7 +162,7 @@
     menuFile->Append(Minimal_Print, "Print...");
     menuFile->Append(Minimal_Preview, "Preview...");
     menuFile->AppendSeparator();
-    menuFile->Append(Minimal_About, "&About");
+    menuFile->Append(wxID_ABOUT, "&About");
     menuFile->AppendSeparator();
     menuFile->Append(Minimal_Quit, "&Exit");
 
Index: html/virtual/virtual.cpp
===================================================================
RCS file: /home/wxcvs/wxWindows/samples/html/virtual/virtual.cpp,v
retrieving revision 1.7
diff -u -r1.7 virtual.cpp
--- html/virtual/virtual.cpp	24 Mar 2002 15:50:57 -0000	1.7
+++ html/virtual/virtual.cpp	20 Jul 2002 01:15:34 -0000
@@ -103,7 +103,6 @@
    
     // event handlers (these functions should _not_ be virtual)
       void OnQuit(wxCommandEvent& event);
-      void OnAbout(wxCommandEvent& event);
       void OnBack(wxCommandEvent& event);
       void OnForward(wxCommandEvent& event);
 
@@ -121,7 +120,6 @@
    {
     // menu items
    Minimal_Quit = 1,
-   Minimal_About,
    Minimal_Back,
    Minimal_Forward,
    
@@ -138,7 +136,6 @@
 // simple menu events like this the static method is much simpler.
    BEGIN_EVENT_TABLE(MyFrame, wxFrame)
    EVT_MENU(Minimal_Quit,  MyFrame::OnQuit)
-   EVT_MENU(Minimal_About, MyFrame::OnAbout)
    EVT_MENU(Minimal_Back, MyFrame::OnBack)
    EVT_MENU(Minimal_Forward, MyFrame::OnForward)
    END_EVENT_TABLE()
@@ -164,13 +161,13 @@
     // Create the main application window
       MyFrame *frame = new MyFrame("wxHtmlWindow testing application",
          wxPoint(50, 50), wxSize(640, 480));
-   
+
     // Show it and tell the application that it's our main window
     // @@@ what does it do exactly, in fact? is it necessary here?
       frame->Show(TRUE);
       SetTopWindow(frame);
       wxFileSystem::AddHandler(new MyVFS);
-   
+
     // success: wxApp::OnRun() will be called which will enter the main message
     // loop and the application will run. If we returned FALSE here, the
     // application would exit immediately.
@@ -219,12 +216,6 @@
     // TRUE is to force the frame to close
       Close(TRUE);
    }
-
-   void MyFrame::OnAbout(wxCommandEvent& WXUNUSED(event))
-   {
-   }
-
-
 
    void MyFrame::OnBack(wxCommandEvent& WXUNUSED(event))
    {
Index: html/widget/widget.cpp
===================================================================
RCS file: /home/wxcvs/wxWindows/samples/html/widget/widget.cpp,v
retrieving revision 1.7
diff -u -r1.7 widget.cpp
--- html/widget/widget.cpp	19 Mar 2002 23:40:37 -0000	1.7
+++ html/widget/widget.cpp	20 Jul 2002 01:15:34 -0000
@@ -26,8 +26,6 @@
 #include "wx/html/htmlwin.h"
 
 
-
-
 /*
 
 
@@ -41,42 +39,36 @@
 
 TAG_HANDLER_BEGIN(MYBIND, "MYBIND")
 
-    TAG_HANDLER_PROC(tag)
-    {
-        wxWindow *wnd;
-        int ax, ay;
-        int fl = 0;
-
-        tag.ScanParam(wxT("X"), wxT("%i"), &ax);
-        tag.ScanParam(wxT("Y"), wxT("%i"), &ay);
-        if (tag.HasParam(wxT("FLOAT")))
-            fl = ax;
-
-        wnd = new wxTextCtrl(m_WParser->GetWindow(), -1, tag.GetParam(wxT("NAME")),
-                             wxPoint(0,0), wxSize(ax, ay), wxTE_MULTILINE);
-        wnd->Show(TRUE);
+TAG_HANDLER_PROC(tag)
+{
+    wxWindow *wnd;
+    int ax, ay;
+    int fl = 0;
 
-        m_WParser->GetContainer()->InsertCell(new wxHtmlWidgetCell(wnd, fl));
+    tag.ScanParam(wxT("X"), wxT("%i"), &ax);
+    tag.ScanParam(wxT("Y"), wxT("%i"), &ay);
 
-        return FALSE;
-    }
-
-TAG_HANDLER_END(MYBIND)
+    if (tag.HasParam(wxT("FLOAT"))) fl = ax;
 
+    wnd = new wxTextCtrl(m_WParser->GetWindow(), -1, tag.GetParam(wxT("NAME")),
+        wxPoint(0,0), wxSize(ax, ay), wxTE_MULTILINE);
 
+    wnd->Show(TRUE);
 
-TAGS_MODULE_BEGIN(MyBind)
-
-    TAGS_MODULE_ADD(MYBIND)
-
-TAGS_MODULE_END(MyBind)
+    m_WParser->GetContainer()->InsertCell(new wxHtmlWidgetCell(wnd, fl));
 
+    return FALSE;
+}
 
+TAG_HANDLER_END(MYBIND)
 
 
 
+TAGS_MODULE_BEGIN(MyBind)
 
+    TAGS_MODULE_ADD(MYBIND)
 
+TAGS_MODULE_END(MyBind)
 
 
 // ----------------------------------------------------------------------------
@@ -84,52 +76,50 @@
 // ----------------------------------------------------------------------------
 
 // Define a new application type, each program should derive a class from wxApp
-   class MyApp : public wxApp
-   {
-   public:
+class MyApp : public wxApp
+{
+public:
     // override base class virtuals
     // ----------------------------
-   
+
     // this one is called on application startup and is a good place for the app
     // initialization (doing it here and not in the ctor allows to have an error
     // return: if OnInit() returns false, the application terminates)
-      virtual bool OnInit();
-   };
+    virtual bool OnInit();
+};
 
 // Define a new frame type: this is going to be our main frame
-   class MyFrame : public wxFrame
-   {
-   public:
+class MyFrame : public wxFrame
+{
+public:
     // ctor(s)
-      MyFrame(const wxString& title, const wxPoint& pos, const wxSize& size);
-   
+    MyFrame(const wxString& title, const wxPoint& pos, const wxSize& size);
+
     // event handlers (these functions should _not_ be virtual)
-      void OnQuit(wxCommandEvent& event);
-      void OnAbout(wxCommandEvent& event);
-      void OnBack(wxCommandEvent& event);
-      void OnForward(wxCommandEvent& event);
+    void OnQuit(wxCommandEvent& event);
+    void OnBack(wxCommandEvent& event);
+    void OnForward(wxCommandEvent& event);
 
-   private:
+private:
     // any class wishing to process wxWindows events must use this macro
     DECLARE_EVENT_TABLE()
-   };
+};
 
 // ----------------------------------------------------------------------------
 // constants
 // ----------------------------------------------------------------------------
 
 // IDs for the controls and the menu commands
-   enum
-   {
+enum
+{
     // menu items
-   Minimal_Quit = 1,
-   Minimal_About,
-   Minimal_Back,
-   Minimal_Forward,
-   
+    Minimal_Quit = 1,
+    Minimal_Back,
+    Minimal_Forward,
+
     // controls start here (the numbers are, of course, arbitrary)
-   Minimal_Text = 1000,
-   };
+    Minimal_Text = 1000,
+};
 
 // ----------------------------------------------------------------------------
 // event tables and other macros for wxWindows
@@ -138,45 +128,44 @@
 // the event tables connect the wxWindows events with the functions (event
 // handlers) which process them. It can be also done at run-time, but for the
 // simple menu events like this the static method is much simpler.
-   BEGIN_EVENT_TABLE(MyFrame, wxFrame)
-   EVT_MENU(Minimal_Quit,  MyFrame::OnQuit)
-   EVT_MENU(Minimal_About, MyFrame::OnAbout)
-   EVT_MENU(Minimal_Back, MyFrame::OnBack)
-   EVT_MENU(Minimal_Forward, MyFrame::OnForward)
-   END_EVENT_TABLE()
-   
-   // Create a new application object: this macro will allow wxWindows to create
-   // the application object during program execution (it's better than using a
-   // static object for many reasons) and also declares the accessor function
-   // wxGetApp() which will return the reference of the right type (i.e. MyApp and
-   // not wxApp)
-   IMPLEMENT_APP(MyApp)
-   
-   // ============================================================================
-   // implementation
-   // ============================================================================
-   
-   // ----------------------------------------------------------------------------
-   // the application class
-   // ----------------------------------------------------------------------------
-   
-   // `Main program' equivalent: the program execution "starts" here
-   bool MyApp::OnInit()
-   {
+BEGIN_EVENT_TABLE(MyFrame, wxFrame)
+    EVT_MENU(Minimal_Quit,  MyFrame::OnQuit)
+    EVT_MENU(Minimal_Back, MyFrame::OnBack)
+    EVT_MENU(Minimal_Forward, MyFrame::OnForward)
+END_EVENT_TABLE()
+
+// Create a new application object: this macro will allow wxWindows to create
+// the application object during program execution (it's better than using a
+// static object for many reasons) and also declares the accessor function
+// wxGetApp() which will return the reference of the right type (i.e. MyApp and
+// not wxApp)
+IMPLEMENT_APP(MyApp)
+
+// ============================================================================
+// implementation
+// ============================================================================
+
+// ----------------------------------------------------------------------------
+// the application class
+// ----------------------------------------------------------------------------
+
+// `Main program' equivalent: the program execution "starts" here
+bool MyApp::OnInit()
+{
     // Create the main application window
-      MyFrame *frame = new MyFrame("wxHtmlWindow testing application",
-         wxPoint(50, 50), wxSize(640, 480));
-   
+    MyFrame *frame = new MyFrame( "wxHtmlWindow testing application",
+        wxPoint(50, 50), wxSize(640, 480) );
+
     // Show it and tell the application that it's our main window
     // @@@ what does it do exactly, in fact? is it necessary here?
-      frame->Show(TRUE);
-      SetTopWindow(frame);
+    frame->Show(TRUE);
+    SetTopWindow(frame);
 
     // success: wxApp::OnRun() will be called which will enter the main message
     // loop and the application will run. If we returned FALSE here, the
     // application would exit immediately.
-      return TRUE;
-   }
+    return TRUE;
+}
 
 // ----------------------------------------------------------------------------
 // main frame
@@ -185,61 +174,49 @@
 wxHtmlWindow *html;
 
 // frame constructor
-   MyFrame::MyFrame(const wxString& title, const wxPoint& pos, const wxSize& size)
-   : wxFrame((wxFrame *)NULL, -1, title, pos, size)
-   {
+MyFrame::MyFrame(const wxString& title, const wxPoint& pos, const wxSize& size)
+: wxFrame((wxFrame *)NULL, -1, title, pos, size)
+{
     // create a menu bar
-      wxMenu *menuFile = new wxMenu;
-      wxMenu *menuNav = new wxMenu;
+    wxMenu *menuFile = new wxMenu;
+    wxMenu *menuNav = new wxMenu;
 
-      menuFile->Append(Minimal_Quit, "E&xit");
-      menuNav->Append(Minimal_Back, "Go &BACK");
-      menuNav->Append(Minimal_Forward, "Go &FORWARD");
+    menuFile->Append(Minimal_Quit, "E&xit");
+    menuNav->Append(Minimal_Back, "Go &BACK");
+    menuNav->Append(Minimal_Forward, "Go &FORWARD");
 
     // now append the freshly created menu to the menu bar...
-      wxMenuBar *menuBar = new wxMenuBar;
-      menuBar->Append(menuFile, "&File");
-      menuBar->Append(menuNav, "&Navigate");
+    wxMenuBar *menuBar = new wxMenuBar;
+    menuBar->Append(menuFile, "&File");
+    menuBar->Append(menuNav, "&Navigate");
 
     // ... and attach this menu bar to the frame
-      SetMenuBar(menuBar);
-   
-      CreateStatusBar(2);
-
-      html = new wxHtmlWindow(this);
-      html -> SetRelatedFrame(this, "VFS Demo: '%s'");
-      html -> SetRelatedStatusBar(1);
-      html -> LoadPage("start.htm");
-   }
-
-
-// event handlers
-
-   void MyFrame::OnQuit(wxCommandEvent& WXUNUSED(event))
-   {
-    // TRUE is to force the frame to close
-      Close(TRUE);
-   }
-
-   void MyFrame::OnAbout(wxCommandEvent& WXUNUSED(event))
-   {
-   }
-
-
+    SetMenuBar(menuBar);
 
-   void MyFrame::OnBack(wxCommandEvent& WXUNUSED(event))
-   {
-   if (!html -> HistoryBack()) wxMessageBox("You reached prehistory era!");
-   }
+    CreateStatusBar(2);
 
-
-   void MyFrame::OnForward(wxCommandEvent& WXUNUSED(event))
-   {
-   if (!html -> HistoryForward()) wxMessageBox("No more items in history!");
-   }
+    html = new wxHtmlWindow(this);
+    html -> SetRelatedFrame(this, "VFS Demo: '%s'");
+    html -> SetRelatedStatusBar(1);
+    html -> LoadPage("start.htm");
+}
 
 
+// event handlers
 
+void MyFrame::OnQuit(wxCommandEvent& WXUNUSED(event))
+{
+    // TRUE is to force the frame to close
+    Close(TRUE);
+}
 
+void MyFrame::OnBack(wxCommandEvent& WXUNUSED(event))
+{
+    if (!html -> HistoryBack()) wxMessageBox("You reached prehistory era!");
+}
 
 
+void MyFrame::OnForward(wxCommandEvent& WXUNUSED(event))
+{
+    if (!html -> HistoryForward()) wxMessageBox("No more items in history!");
+}
Index: html/zip/zip.cpp
===================================================================
RCS file: /home/wxcvs/wxWindows/samples/html/zip/zip.cpp,v
retrieving revision 1.4
diff -u -r1.4 zip.cpp
--- html/zip/zip.cpp	13 Jan 2002 17:41:56 -0000	1.4
+++ html/zip/zip.cpp	20 Jul 2002 01:15:34 -0000
@@ -30,49 +30,47 @@
 // ----------------------------------------------------------------------------
 
 // Define a new application type, each program should derive a class from wxApp
-   class MyApp : public wxApp
-   {
-   public:
+class MyApp : public wxApp
+{
+public:
     // override base class virtuals
     // ----------------------------
 
     // this one is called on application startup and is a good place for the app
     // initialization (doing it here and not in the ctor allows to have an error
     // return: if OnInit() returns false, the application terminates)
-      virtual bool OnInit();
-   };
+    virtual bool OnInit();
+};
 
 // Define a new frame type: this is going to be our main frame
-   class MyFrame : public wxFrame
-   {
-   public:
+class MyFrame : public wxFrame
+{
+public:
     // ctor(s)
-      MyFrame(const wxString& title, const wxPoint& pos, const wxSize& size);
+    MyFrame(const wxString& title, const wxPoint& pos, const wxSize& size);
 
     // event handlers (these functions should _not_ be virtual)
-      void OnQuit(wxCommandEvent& event);
-      void OnAbout(wxCommandEvent& event);
-      void OnBack(wxCommandEvent& event);
-      void OnForward(wxCommandEvent& event);
+    void OnQuit(wxCommandEvent& event);
+    void OnBack(wxCommandEvent& event);
+    void OnForward(wxCommandEvent& event);
 
-   private:
+private:
     // any class wishing to process wxWindows events must use this macro
     DECLARE_EVENT_TABLE()
-   };
+};
 
 // ----------------------------------------------------------------------------
 // constants
 // ----------------------------------------------------------------------------
 
 // IDs for the controls and the menu commands
-   enum
-   {
+enum
+{
     // menu items
-   Minimal_Quit = 1,
-   Minimal_About,
-   Minimal_Back,
-   Minimal_Forward
-   };
+    Minimal_Quit = 1,
+    Minimal_Back,
+    Minimal_Forward
+};
 
 // ----------------------------------------------------------------------------
 // event tables and other macros for wxWindows
@@ -81,53 +79,53 @@
 // the event tables connect the wxWindows events with the functions (event
 // handlers) which process them. It can be also done at run-time, but for the
 // simple menu events like this the static method is much simpler.
-   BEGIN_EVENT_TABLE(MyFrame, wxFrame)
-   EVT_MENU(Minimal_Quit,  MyFrame::OnQuit)
-   EVT_MENU(Minimal_About, MyFrame::OnAbout)
-   EVT_MENU(Minimal_Back, MyFrame::OnBack)
-   EVT_MENU(Minimal_Forward, MyFrame::OnForward)
-   END_EVENT_TABLE()
-
-   // Create a new application object: this macro will allow wxWindows to create
-   // the application object during program execution (it's better than using a
-   // static object for many reasons) and also declares the accessor function
-   // wxGetApp() which will return the reference of the right type (i.e. MyApp and
-   // not wxApp)
-   IMPLEMENT_APP(MyApp)
-
-   // ============================================================================
-   // implementation
-   // ============================================================================
-
-   // ----------------------------------------------------------------------------
-   // the application class
-   // ----------------------------------------------------------------------------
-   // `Main program' equivalent: the program execution "starts" here
-   bool MyApp::OnInit()
-   {
-     #if wxUSE_LIBPNG
-     wxImage::AddHandler(new wxPNGHandler);
-     #endif
-     #if wxUSE_LIBJPEG
-     wxImage::AddHandler(new wxJPEGHandler);
-     #endif
+BEGIN_EVENT_TABLE(MyFrame, wxFrame)
+    EVT_MENU(Minimal_Quit,  MyFrame::OnQuit)
+    EVT_MENU(Minimal_Back, MyFrame::OnBack)
+    EVT_MENU(Minimal_Forward, MyFrame::OnForward)
+END_EVENT_TABLE()
+
+// Create a new application object: this macro will allow wxWindows to create
+// the application object during program execution (it's better than using a
+// static object for many reasons) and also declares the accessor function
+// wxGetApp() which will return the reference of the right type (i.e. MyApp and
+// not wxApp)
+IMPLEMENT_APP(MyApp)
+
+// ============================================================================
+// implementation
+// ============================================================================
+
+// ----------------------------------------------------------------------------
+// the application class
+// ----------------------------------------------------------------------------
+// `Main program' equivalent: the program execution "starts" here
+bool MyApp::OnInit()
+{
+#if wxUSE_LIBPNG
+    wxImage::AddHandler(new wxPNGHandler);
+#endif
+#if wxUSE_LIBJPEG
+    wxImage::AddHandler(new wxJPEGHandler);
+#endif
 
-     wxFileSystem::AddHandler(new wxZipFSHandler);
+    wxFileSystem::AddHandler(new wxZipFSHandler);
 
     // Create the main application window
-      MyFrame *frame = new MyFrame("wxHtmlWindow testing application",
-         wxPoint(50, 50), wxSize(640, 480));
+    MyFrame *frame = new MyFrame( "wxHtmlWindow testing application",
+        wxPoint(50, 50), wxSize(640, 480) );
 
     // Show it and tell the application that it's our main window
     // @@@ what does it do exactly, in fact? is it necessary here?
-      frame->Show(TRUE);
-      SetTopWindow(frame);
+    frame->Show(TRUE);
+    SetTopWindow(frame);
 
     // success: wxApp::OnRun() will be called which will enter the main message
     // loop and the application will run. If we returned FALSE here, the
     // application would exit immediately.
-      return TRUE;
-   }
+
+    return TRUE;
+}
 
 // ----------------------------------------------------------------------------
 // main frame
@@ -136,57 +134,50 @@
 wxHtmlWindow *html;
 
 // frame constructor
-   MyFrame::MyFrame(const wxString& title, const wxPoint& pos, const wxSize& size)
-   : wxFrame((wxFrame *)NULL, -1, title, pos, size)
-   {
+MyFrame::MyFrame(const wxString& title, const wxPoint& pos, const wxSize& size)
+: wxFrame((wxFrame *)NULL, -1, title, pos, size)
+{
     // create a menu bar
-      wxMenu *menuFile = new wxMenu;
-      wxMenu *menuNav = new wxMenu;
+    wxMenu *menuFile = new wxMenu;
+    wxMenu *menuNav = new wxMenu;
 
-      menuFile->Append(Minimal_Quit, "E&xit");
-      menuNav->Append(Minimal_Back, "Go &BACK");
-      menuNav->Append(Minimal_Forward, "Go &FORWARD");
+    menuFile->Append(Minimal_Quit, "E&xit");
+    menuNav->Append(Minimal_Back, "Go &BACK");
+    menuNav->Append(Minimal_Forward, "Go &FORWARD");
 
     // now append the freshly created menu to the menu bar...
-      wxMenuBar *menuBar = new wxMenuBar;
-      menuBar->Append(menuFile, "&File");
-      menuBar->Append(menuNav, "&Navigate");
+    wxMenuBar *menuBar = new wxMenuBar;
+    menuBar->Append(menuFile, "&File");
+    menuBar->Append(menuNav, "&Navigate");
 
     // ... and attach this menu bar to the frame
-      SetMenuBar(menuBar);
+    SetMenuBar(menuBar);
 
-      CreateStatusBar(1);
+    CreateStatusBar(1);
 
-      {
-      html = new wxHtmlWindow(this);
-      html -> SetRelatedFrame(this, "HTML : %s");
-      html -> SetRelatedStatusBar(0);
-      html -> LoadPage("start.htm");
-      }
-   }
+    {
+    html = new wxHtmlWindow(this);
+    html -> SetRelatedFrame(this, "HTML : %s");
+    html -> SetRelatedStatusBar(0);
+    html -> LoadPage("start.htm");
+    }
+}
 
 
 // event handlers
 
-   void MyFrame::OnQuit(wxCommandEvent& WXUNUSED(event))
-   {
+void MyFrame::OnQuit(wxCommandEvent& WXUNUSED(event))
+{
     // TRUE is to force the frame to close
-      Close(TRUE);
-   }
-
-   void MyFrame::OnAbout(wxCommandEvent& WXUNUSED(event))
-   {
-   }
-
-
-
-   void MyFrame::OnBack(wxCommandEvent& WXUNUSED(event))
-   {
-   if (!html -> HistoryBack()) wxMessageBox("You reached prehistory era!");
-   }
-
+    Close(TRUE);
+}
 
-   void MyFrame::OnForward(wxCommandEvent& WXUNUSED(event))
-   {
-   if (!html -> HistoryForward()) wxMessageBox("No more items in history!");
-   }
+void MyFrame::OnBack(wxCommandEvent& WXUNUSED(event))
+{
+    if (!html -> HistoryBack()) wxMessageBox("You reached prehistory era!");
+}
+
+void MyFrame::OnForward(wxCommandEvent& WXUNUSED(event))
+{
+    if (!html -> HistoryForward()) wxMessageBox("No more items in history!");
+}
Index: internat/internat.cpp
===================================================================
RCS file: /home/wxcvs/wxWindows/samples/internat/internat.cpp,v
retrieving revision 1.22
diff -u -r1.22 internat.cpp
--- internat/internat.cpp	21 Mar 2002 10:32:14 -0000	1.22
+++ internat/internat.cpp	20 Jul 2002 01:15:34 -0000
@@ -37,45 +37,44 @@
 class MyApp: public wxApp
 {
 public:
-  virtual bool OnInit();
+    virtual bool OnInit();
 
 protected:
-  wxLocale m_locale; // locale we'll be using
+    wxLocale m_locale; // locale we'll be using
 };
 
 // Define a new frame type
 class MyFrame: public wxFrame
-{ 
+{
 public:
-  MyFrame(wxFrame *frame, const wxChar *title, int x, int y, int w, int h,
-          wxLocale& m_locale);
+    MyFrame(wxFrame *frame, const wxChar *title,
+        const wxPoint& pos, const wxSize& size, wxLocale& m_locale);
 
 public:
-  void OnQuit(wxCommandEvent& event);
-  void OnAbout(wxCommandEvent& event);
-  void OnPlay(wxCommandEvent& event);
-  void OnOpen(wxCommandEvent& event);
-
-  DECLARE_EVENT_TABLE()
-  
-  wxLocale& m_locale;
+    void OnQuit(wxCommandEvent& event);
+    void OnAbout(wxCommandEvent& event);
+    void OnPlay(wxCommandEvent& event);
+    void OnOpen(wxCommandEvent& event);
+
+    DECLARE_EVENT_TABLE()
+
+    wxLocale& m_locale;
 };
 
 // ID for the menu commands
 enum
 {
-  MINIMAL_QUIT = 1,
-  MINIMAL_TEXT,
-  MINIMAL_ABOUT,
-  MINIMAL_TEST,
-  MINIMAL_OPEN
+    MINIMAL_QUIT = 1,
+    MINIMAL_TEXT,
+    MINIMAL_TEST,
+    MINIMAL_OPEN
 };
 
 BEGIN_EVENT_TABLE(MyFrame, wxFrame)
-  EVT_MENU(MINIMAL_QUIT, MyFrame::OnQuit)
-  EVT_MENU(MINIMAL_ABOUT, MyFrame::OnAbout)
-  EVT_MENU(MINIMAL_TEST, MyFrame::OnPlay)
-  EVT_MENU(MINIMAL_OPEN, MyFrame::OnOpen)
+    EVT_MENU(MINIMAL_QUIT, MyFrame::OnQuit)
+    EVT_MENU(wxID_ABOUT, MyFrame::OnAbout)
+    EVT_MENU(MINIMAL_TEST, MyFrame::OnPlay)
+    EVT_MENU(MINIMAL_OPEN, MyFrame::OnOpen)
 END_EVENT_TABLE()
 
 IMPLEMENT_APP(MyApp)
@@ -84,131 +83,133 @@
 // `Main program' equivalent, creating windows and returning main app frame
 bool MyApp::OnInit()
 {
-  const wxString langs[] =
-  {
-      _T("(System default)"),
-      _T("French"),
-      _T("German"),
-      _T("Russian"),
-      _T("English"),
-      _T("English (U.S.)")
-  };
+    const wxString langs[] =
+    {
+        _T("(System default)"),
+        _T("French"),
+        _T("German"),
+        _T("Russian"),
+        _T("English"),
+        _T("English (U.S.)")
+    };
 
-  SetExitOnFrameDelete(FALSE);
-  int lng = wxGetSingleChoiceIndex(_T("Please choose language:"), _T("Language"), 
+    SetExitOnFrameDelete(FALSE);
+    int lng = wxGetSingleChoiceIndex(_T("Please choose language:"), _T("Language"), 
                                    WXSIZEOF(langs), langs);
-  SetExitOnFrameDelete(TRUE);
+    SetExitOnFrameDelete(TRUE);
 
-  switch (lng)
-  {
-      case 0 : m_locale.Init(wxLANGUAGE_DEFAULT); break;
-      case 1 : m_locale.Init(wxLANGUAGE_FRENCH); break;
-      case 2 : m_locale.Init(wxLANGUAGE_GERMAN); break;
-      case 3 : m_locale.Init(wxLANGUAGE_RUSSIAN); break;
-      case 4 : m_locale.Init(wxLANGUAGE_ENGLISH); break;
-      case -1:
-      case 5 : m_locale.Init(wxLANGUAGE_ENGLISH_US); break;
-  }
-
-  // Initialize the catalogs we'll be using
-  /* not needed any more, done in wxLocale ctor
-  m_locale.AddCatalog("wxstd");      // 1) for library messages
-  */
-  m_locale.AddCatalog(wxT("internat"));      // 2) our private one
-  /* this catalog is installed in standard location on Linux systems,
+    switch (lng)
+    {
+        case 0 : m_locale.Init(wxLANGUAGE_DEFAULT); break;
+        case 1 : m_locale.Init(wxLANGUAGE_FRENCH); break;
+        case 2 : m_locale.Init(wxLANGUAGE_GERMAN); break;
+        case 3 : m_locale.Init(wxLANGUAGE_RUSSIAN); break;
+        case 4 : m_locale.Init(wxLANGUAGE_ENGLISH); break;
+        case -1:
+        case 5 : m_locale.Init(wxLANGUAGE_ENGLISH_US); break;
+    }
+
+    // Initialize the catalogs we'll be using
+    /* not needed any more, done in wxLocale ctor
+    m_locale.AddCatalog("wxstd");      // 1) for library messages
+    */
+    m_locale.AddCatalog(wxT("internat"));      // 2) our private one
+    /* this catalog is installed in standard location on Linux systems,
      it might not be installed on yours - just ignore the errrors
      or comment out this line then */
 #ifdef __LINUX__
-  {
+    {
     wxLogNull noLog;
     m_locale.AddCatalog("fileutils");  // 3) and another just for testing
-  }
+    }
 #endif
-  
-  // Create the main frame window
-  MyFrame *frame = new MyFrame((wxFrame *) NULL, _("International wxWindows App"),
-                               50, 50, 350, 60, m_locale);
-
-  // Give it an icon
-  frame->SetIcon(wxICON(mondrian));
-
-  // Make a menubar
-  wxMenu *file_menu = new wxMenu;
-  file_menu->Append(MINIMAL_ABOUT, _("&About..."));
-  file_menu->AppendSeparator();
-  file_menu->Append(MINIMAL_QUIT, _("E&xit"));
-
-  wxMenu *test_menu = new wxMenu;
-  test_menu->Append(MINIMAL_OPEN, _("&Open bogus file"));
-  test_menu->Append(MINIMAL_TEST, _("&Play a game"));
-
-  wxMenuBar *menu_bar = new wxMenuBar;
-  menu_bar->Append(file_menu, _("&File"));
-  menu_bar->Append(test_menu, _("&Test"));
-  frame->SetMenuBar(menu_bar);
-
-  // Show the frame
-  frame->Show(TRUE);
-  SetTopWindow(frame);
 
-  return TRUE;
+    // Create the main frame window
+    MyFrame *frame = new MyFrame( (wxFrame *) NULL,
+        _("International wxWindows App"), wxPoint(50, 50), wxSize(350, 60),
+        m_locale);
+
+    // Give it an icon
+    frame->SetIcon(wxICON(mondrian));
+
+    // Make a menubar
+    wxMenu *file_menu = new wxMenu;
+    file_menu->Append(wxID_ABOUT, _("&About..."));
+    file_menu->AppendSeparator();
+    file_menu->Append(MINIMAL_QUIT, _("E&xit"));
+
+    wxMenu *test_menu = new wxMenu;
+    test_menu->Append(MINIMAL_OPEN, _("&Open bogus file"));
+    test_menu->Append(MINIMAL_TEST, _("&Play a game"));
+
+    wxMenuBar *menu_bar = new wxMenuBar;
+    menu_bar->Append(file_menu, _("&File"));
+    menu_bar->Append(test_menu, _("&Test"));
+    frame->SetMenuBar(menu_bar);
+
+    // Show the frame
+    frame->Show(TRUE);
+    SetTopWindow(frame);
+
+    return TRUE;
 }
 
 // My frame constructor
-MyFrame::MyFrame(wxFrame *frame, const wxChar *title, int x, int y,
-                 int w, int h, wxLocale& l)
-       : wxFrame(frame, -1, title, wxPoint(x, y), wxSize(w, h)),
+MyFrame::MyFrame(wxFrame *frame, const wxChar *title,
+    const wxPoint& pos, const wxSize& size, wxLocale& l)
+       : wxFrame(frame, -1, title, pos, size),
          m_locale(l)
 {
+    // Empty
 }
 
 void MyFrame::OnQuit(wxCommandEvent& WXUNUSED(event) )
 {
-  Close(TRUE);
+    Close(TRUE);
 }
 
 void MyFrame::OnAbout(wxCommandEvent& WXUNUSED(event))
 {
-  wxString localeInfo;
-  localeInfo.Printf(_("Language: %s\nSystem locale name: %s\nCanonical locale name: %s\n"),
-                      m_locale.GetLocale(),
-                      m_locale.GetSysName().c_str(),
-                      m_locale.GetCanonicalName().c_str());
-
-  wxMessageDialog(this, wxString(_("I18n sample\n(c) 1998, 1999 Vadim Zeitlin and Julian Smart"))
-                          + wxT("\n\n") + localeInfo,
-                  _("About Internat"), wxOK | wxICON_INFORMATION).ShowModal();
+    wxString localeInfo;
+    localeInfo.Printf( _("Language: %s\nSystem locale name: %s\nCanonical locale name: %s\n"),
+        m_locale.GetLocale(),
+        m_locale.GetSysName().c_str(),
+        m_locale.GetCanonicalName().c_str() );
+
+    wxMessageDialog(this, wxString(_("I18n sample\n(c) 1998, 1999 Vadim Zeitlin and Julian Smart"))
+        + wxT("\n\n") + localeInfo,
+        _("About Internat"), wxOK | wxICON_INFORMATION).ShowModal();
 }
 
 void MyFrame::OnPlay(wxCommandEvent& WXUNUSED(event))
 {
-  wxString str = wxGetTextFromUser(_("Enter your number:"),
-                                   _("Try to guess my number!"),
-                                  "", this);
-  if ( str.IsEmpty() )
-      return;
-
-  int num;
-  wxSscanf(str, wxT("%d"), &num);
-  if ( num == 0 )
-    str = _("You've probably entered an invalid number.");
-  else if ( num == 9 )  // this message is not translated (not in catalog)
-    str = "You've found a bug in this program!";
-  else if ( num != 17 ) // a more implicit way to write _()
-    str = wxGetTranslation(wxT("Bad luck! try again..."));
-  else {
-    str.Empty();
-    // string must be split in two -- otherwise the translation won't be found
-    str << _("Congratulations! you've won. Here is the magic phrase:")
-        << _("cannot create fifo `%s'");
-  }
+    wxString str = wxGetTextFromUser(_("Enter your number:"),
+        _("Try to guess my number!"), wxEmptyString, this);
+
+    if ( str.IsEmpty() ) return;
+
+    int num;
+    wxSscanf(str, wxT("%d"), &num);
+    if ( num == 0 )
+        str = _("You've probably entered an invalid number.");
+    else if ( num == 9 )  // this message is not translated (not in catalog)
+        str = "You've found a bug in this program!";
+    else if ( num != 17 ) // a more implicit way to write _()
+        str = wxGetTranslation(wxT("Bad luck! try again..."));
+    else
+    {
+        str.Empty();
+        // string must be split in two -- otherwise the translation won't be found
+        str << _("Congratulations! you've won. Here is the magic phrase:")
+            << _("cannot create fifo `%s'");
+    }
 
-  wxMessageBox(str, _("Result"), wxOK | wxICON_INFORMATION);
+    wxMessageBox(str, _("Result"), wxOK | wxICON_INFORMATION);
 }
 
 void MyFrame::OnOpen(wxCommandEvent&)
 {
-  // open a bogus file -- the error message should be also translated if you've
-  // got wxstd.mo somewhere in the search path
-  wxFile file(wxT("NOTEXIST.ING"));
+    // open a bogus file -- the error message should be also translated if you've
+    // got wxstd.mo somewhere in the search path
+    wxFile file(wxT("NOTEXIST.ING"));
 }
Index: ipc/client.cpp
===================================================================
RCS file: /home/wxcvs/wxWindows/samples/ipc/client.cpp,v
retrieving revision 1.10
diff -u -r1.10 client.cpp
--- ipc/client.cpp	15 Apr 2002 18:24:46 -0000	1.10
+++ ipc/client.cpp	20 Jul 2002 01:15:34 -0000
@@ -170,15 +170,24 @@
 void MyFrame::OnExecute(wxCommandEvent& event)
 {
     if (the_connection)
-        if (!the_connection->Execute("Hello from the client!"))
+    {
+        if ( !the_connection->Execute(wxT("Hello from the client!")) )
+        {
             wxMessageBox("Execute failed", "Client Demo Error");
+        }
+    }
 }
 
+
 void MyFrame::OnPoke(wxCommandEvent& event)
 {
     if (the_connection)
-        if (!the_connection->Poke("An item", "Some data to poke at the server!"))
+    {
+        if (!the_connection->Poke(wxT("An item"), wxT("Some data to poke at the server!")))
+        {
             wxMessageBox("Poke failed", "Client Demo Error");
+        }
+    }
 }
 
 void MyFrame::OnRequest(wxCommandEvent& event)
Index: ipc/server.cpp
===================================================================
RCS file: /home/wxcvs/wxWindows/samples/ipc/server.cpp,v
retrieving revision 1.10
diff -u -r1.10 server.cpp
--- ipc/server.cpp	10 May 2002 12:26:30 -0000	1.10
+++ ipc/server.cpp	20 Jul 2002 01:15:34 -0000
@@ -136,7 +136,11 @@
         wxString value = listBox->GetStringSelection();
         if (the_connection)
         {
-            the_connection->Advise(IPC_ADVISE_NAME, (wxChar *)value.c_str());
+            //the_connection->Advise(IPC_ADVISE_NAME, (wxChar *)value.c_str());
+            //the_connection->Advise(true);//, wxT(IPC_ADVISE_NAME), (const wxString&) value);
+            //the_connection->OnAdvise("bla", "bla", "bla", 3, wxIPC_TEXT);
+            //wxString str = wxT("test");
+            the_connection->Execute(true);//(const wxString &) str);
         }
     }
 }
Index: joytest/joytest.cpp
===================================================================
RCS file: /home/wxcvs/wxWindows/samples/joytest/joytest.cpp,v
retrieving revision 1.9
diff -u -r1.9 joytest.cpp
--- joytest/joytest.cpp	17 Mar 2002 14:15:41 -0000	1.9
+++ joytest/joytest.cpp	20 Jul 2002 01:15:34 -0000
@@ -21,7 +21,11 @@
 #endif
 
 #if !wxUSE_JOYSTICK
-#error You must set wxUSE_JOYSTICK to 1 in setup.h!
+#   error You must set wxUSE_JOYSTICK to 1 in setup.h
+#endif
+
+#if !wxUSE_STATUSBAR
+#   error You must set wxUSE_STATUSBAR to 1 in setup.h
 #endif
 
 #include "wx/wave.h"
@@ -40,57 +44,55 @@
 int winNumber = 1;
 
 // Initialise this in OnInit, not statically
-bool MyApp::OnInit(void)
+bool MyApp::OnInit()
 {
-  wxJoystick stick(wxJOYSTICK1);
-  if (!stick.IsOk())
-  {
-    wxMessageBox("No joystick detected!");
-    return FALSE;
-  }
+    wxJoystick stick(wxJOYSTICK1);
+    if (!stick.IsOk())
+    {
+        wxMessageBox("No joystick detected!");
+        return FALSE;
+    }
+
 #if wxUSE_WAVE
-  m_fire.Create("gun.wav");
+    m_fire.Create("gun.wav");
 #endif // wxUSE_WAVE
 
-  m_maxX = stick.GetXMax();
-  m_maxY = stick.GetYMax();
+    m_maxX = stick.GetXMax();
+    m_maxY = stick.GetYMax();
 
-  // Create the main frame window
+    // Create the main frame window
 
-  frame = new MyFrame(NULL, "Joystick Demo", wxPoint(0, 0), wxSize(500, 400),
-   wxDEFAULT_FRAME_STYLE | wxHSCROLL | wxVSCROLL);
+    frame = new MyFrame(NULL, "Joystick Demo", wxDefaultPosition,
+        wxSize(500, 400), wxDEFAULT_FRAME_STYLE | wxHSCROLL | wxVSCROLL);
 
   // Give it an icon (this is ignored in MDI mode: uses resources)
 #ifdef __WXMSW__
-  frame->SetIcon(wxIcon("joyicon"));
+    frame->SetIcon(wxIcon("joyicon"));
 #endif
 #ifdef __X__
-  frame->SetIcon(wxIcon("joyicon.xbm"));
+    frame->SetIcon(wxIcon("joyicon.xbm"));
 #endif
 
-  // Make a menubar
-  wxMenu *file_menu = new wxMenu;
+    // Make a menubar
+    wxMenu *file_menu = new wxMenu;
 
-  file_menu->Append(JOYTEST_QUIT, "&Exit");
+    file_menu->Append(JOYTEST_QUIT, "&Exit");
 
-  wxMenu *help_menu = new wxMenu;
-  help_menu->Append(JOYTEST_ABOUT, "&About");
+    wxMenuBar *menu_bar = new wxMenuBar;
 
-  wxMenuBar *menu_bar = new wxMenuBar;
+    menu_bar->Append(file_menu, "&File");
 
-  menu_bar->Append(file_menu, "&File");
-  menu_bar->Append(help_menu, "&Help");
+    // Associate the menu bar with the frame
+    frame->SetMenuBar(menu_bar);
 
-  // Associate the menu bar with the frame
-  frame->SetMenuBar(menu_bar);
+    frame->CreateStatusBar();
 
-  frame->CreateStatusBar();
+    frame->CenterOnScreen();
+    frame->Show(TRUE);
 
-  frame->Show(TRUE);
+    SetTopWindow(frame);
 
-  SetTopWindow(frame);
-
-  return TRUE;
+    return TRUE;
 }
 
 BEGIN_EVENT_TABLE(MyCanvas, wxScrolledWindow)
@@ -99,13 +101,13 @@
 
 // Define a constructor for my canvas
 MyCanvas::MyCanvas(wxWindow *parent, const wxPoint& pos, const wxSize& size):
- wxScrolledWindow(parent, -1, pos, size, wxSUNKEN_BORDER)
+    wxScrolledWindow(parent, -1, pos, size, wxSUNKEN_BORDER)
 {
     wxJoystick joystick(wxJOYSTICK1);
     joystick.SetCapture(this);
 }
 
-MyCanvas::~MyCanvas(void)
+MyCanvas::~MyCanvas()
 {
     wxJoystick joystick(wxJOYSTICK1);
     joystick.ReleaseCapture();
@@ -113,62 +115,65 @@
 
 void MyCanvas::OnJoystickEvent(wxJoystickEvent& event)
 {
-  wxClientDC dc(this);
+    wxClientDC dc(this);
+
+    wxPoint pt(event.GetPosition());
+
+    // Scale to canvas size
+    int cw, ch;
+    GetSize(&cw, &ch);
+
+    pt.x = (long) (((double)pt.x/(double)wxGetApp().m_maxX) * cw);
+    pt.y = (long) (((double)pt.y/(double)wxGetApp().m_maxY) * ch);
+
+    if (xpos > -1 && ypos > -1 && event.IsMove() && event.ButtonIsDown())
+    {
+        dc.SetPen(*wxBLACK_PEN);
+        dc.DrawLine(xpos, ypos, pt.x, pt.y);
+    }
+
+    xpos = pt.x;
+    ypos = pt.y;
 
-  wxPoint pt(event.GetPosition());
+    char buf[100];
+    if (event.ButtonDown())
+        sprintf(buf, "Joystick (%d, %d) Fire!", pt.x, pt.y);
+    else
+        sprintf(buf, "Joystick (%d, %d)", pt.x, pt.y);
 
-  // Scale to canvas size
-  int cw, ch;
-  GetSize(&cw, &ch);
-
-  pt.x = (long) (((double)pt.x/(double)wxGetApp().m_maxX) * cw);
-  pt.y = (long) (((double)pt.y/(double)wxGetApp().m_maxY) * ch);
-
-  if (xpos > -1 && ypos > -1 && event.IsMove() && event.ButtonIsDown())
-  {
-    dc.SetPen(*wxBLACK_PEN);
-    dc.DrawLine(xpos, ypos, pt.x, pt.y);
-  }
-  xpos = pt.x;
-  ypos = pt.y;
-
-  char buf[100];
-  if (event.ButtonDown())
-    sprintf(buf, "Joystick (%d, %d) Fire!", pt.x, pt.y);
-  else
-    sprintf(buf, "Joystick (%d, %d)", pt.x, pt.y);
-  frame->SetStatusText(buf);
+    frame->SetStatusText(buf);
 
 #if wxUSE_WAVE
-  if (event.ButtonDown() && wxGetApp().m_fire.IsOk())
-  {
-    wxGetApp().m_fire.Play();
-  }
+    if (event.ButtonDown() && wxGetApp().m_fire.IsOk())
+    {
+        wxGetApp().m_fire.Play();
+    }
 #endif // wxUSE_WAVE
 }
 
 BEGIN_EVENT_TABLE(MyFrame, wxFrame)
-  EVT_MENU(JOYTEST_QUIT, MyFrame::OnQuit)
+    EVT_MENU(JOYTEST_QUIT, MyFrame::OnQuit)
 END_EVENT_TABLE()
 
-MyFrame::MyFrame(wxFrame *parent, const wxString& title, const wxPoint& pos, const wxSize& size,
-const long style):
-  wxFrame(parent, -1, title, pos, size, style)
+MyFrame::MyFrame(wxFrame *parent, const wxString& title, const wxPoint& pos,
+    const wxSize& size, const long style)
+    : wxFrame(parent, -1, title, pos, size, style)
 {
-  canvas = new MyCanvas(this);
+    canvas = new MyCanvas(this);
 }
 
-MyFrame::~MyFrame(void)
+MyFrame::~MyFrame()
 {
+    // Empty
 }
 
 void MyFrame::OnQuit(wxCommandEvent& event)
 {
-      Close(TRUE);
+    Close(TRUE);
 }
 
 void MyFrame::OnActivate(wxActivateEvent& event)
 {
-  if (event.GetActive() && canvas)
-    canvas->SetFocus();
+    if (event.GetActive() && canvas)
+        canvas->SetFocus();
 }
Index: joytest/joytest.h
===================================================================
RCS file: /home/wxcvs/wxWindows/samples/joytest/joytest.h,v
retrieving revision 1.4
diff -u -r1.4 joytest.h
--- joytest/joytest.h	17 Mar 2002 14:15:41 -0000	1.4
+++ joytest/joytest.h	20 Jul 2002 01:15:34 -0000
@@ -12,8 +12,8 @@
 // Define a new application
 class MyApp: public wxApp
 {
-  public:
-    bool OnInit(void);
+public:
+    bool OnInit();
 
     // Joystick max values
     int     m_maxX;
@@ -28,9 +28,9 @@
 
 class MyCanvas: public wxScrolledWindow
 {
-  public:
+public:
     MyCanvas(wxWindow *parent, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize);
-    ~MyCanvas(void);
+    ~MyCanvas();
     void OnJoystickEvent(wxJoystickEvent& event);
 
     DECLARE_EVENT_TABLE()
@@ -38,10 +38,11 @@
 
 class MyFrame: public wxFrame
 {
-  public:
+public:
     MyCanvas *canvas;
-    MyFrame(wxFrame *parent, const wxString& title, const wxPoint& pos, const wxSize& size, const long style);
-    ~MyFrame(void);
+    MyFrame(wxFrame *parent, const wxString& title,
+        const wxPoint& pos, const wxSize& size, const long style);
+    ~MyFrame();
     void OnActivate(wxActivateEvent& event);
     void OnQuit(wxCommandEvent& event);
 
@@ -49,4 +50,3 @@
 };
 
 #define JOYTEST_QUIT        1
-#define JOYTEST_ABOUT       2
Index: propsize/propsize.cpp
===================================================================
RCS file: /home/wxcvs/wxWindows/samples/propsize/propsize.cpp,v
retrieving revision 1.4
diff -u -r1.4 propsize.cpp
--- propsize/propsize.cpp	21 Mar 2002 10:32:17 -0000	1.4
+++ propsize/propsize.cpp	20 Jul 2002 01:15:34 -0000
@@ -1,12 +1,12 @@
 /////////////////////////////////////////////////////////////////////////////
 // Name:        propsize.cpp
-// Purpose:     Minimal wxWindows sample
+// Purpose:     wxWindows propsize sample
 // Author:      Julian Smart
 // Modified by:
 // Created:     04/01/98
 // RCS-ID:      $Id: propsize.cpp,v 1.4 2002/03/21 10:32:17 JS Exp $
 // Copyright:   (c) Julian Smart
-// Licence:     wxWindows licence
+// License:     wxWindows license
 /////////////////////////////////////////////////////////////////////////////
 
 // ============================================================================
@@ -86,7 +86,6 @@
 {
     // menu items
     Minimal_Quit = 1,
-    Minimal_About
 };
 
 // ----------------------------------------------------------------------------
@@ -98,7 +97,7 @@
 // simple menu events like this the static method is much simpler.
 BEGIN_EVENT_TABLE(MyFrame, wxFrame)
     EVT_MENU(Minimal_Quit,  MyFrame::OnQuit)
-    EVT_MENU(Minimal_About, MyFrame::OnAbout)
+    EVT_MENU(wxID_ABOUT, MyFrame::OnAbout)
 END_EVENT_TABLE()
 
 // Create a new application object: this macro will allow wxWindows to create
@@ -148,7 +147,7 @@
     // create a menu bar
     wxMenu *menuFile = new wxMenu("", wxMENU_TEAROFF);
 
-    menuFile->Append(Minimal_About, "&About...\tCtrl-A", "Show about dialog");
+    menuFile->Append(wxID_ABOUT, "&About...\tCtrl-A", "Show about dialog");
     menuFile->AppendSeparator();
     menuFile->Append(Minimal_Quit, "E&xit\tAlt-X", "Quit this program");
 
@@ -166,60 +165,62 @@
 #endif // wxUSE_STATUSBAR
 
 #define AddLine(orient) \
-     Add( new wxStaticLine( this, -1, wxDefaultPosition, wxSize(2,2), orient), \
-     0, wxEXPAND)
+    Add( new wxStaticLine( this, -1, wxDefaultPosition, wxSize(2,2), orient), \
+    0, wxEXPAND)
+
 #define AddButton(label,align) Add( \
-     new wxButton( this, -1, label, wxDefaultPosition, wxSize(100,50)), \
-     1, wxSHAPED | align)
+    new wxButton( this, -1, label, wxDefaultPosition, wxSize(100,50)), \
+    1, wxSHAPED | align)
 
-  wxBoxSizer *topsizer = new wxBoxSizer( wxVERTICAL );
-  // top row -- top-aligned
-  wxBoxSizer *hsizer1 = new wxBoxSizer( wxHORIZONTAL );
-  hsizer1->AddButton( "one", wxALIGN_LEFT | wxALIGN_TOP);
-  hsizer1->AddLine(wxVERTICAL);
-  hsizer1->AddButton( "two", wxALIGN_CENTER_HORIZONTAL | wxALIGN_TOP);
-  hsizer1->AddLine(wxVERTICAL);
-  hsizer1->AddButton( "three", wxALIGN_RIGHT | wxALIGN_TOP);
-
-  topsizer->Add(hsizer1, 1, wxEXPAND);
-  topsizer->AddLine(wxHORIZONTAL);
-
-  wxBoxSizer *hsizer2 = new wxBoxSizer( wxHORIZONTAL );
-  hsizer2->AddButton( "four", wxALIGN_LEFT | wxALIGN_CENTER_VERTICAL);
-  hsizer2->AddLine(wxVERTICAL);
-  // sizer that preserves it's shape
-  wxBoxSizer *vsizer = new wxBoxSizer( wxVERTICAL );
-  vsizer->Add(
-     new wxButton( this, -1, "up", wxDefaultPosition, wxSize(100,25)), \
-     1, wxEXPAND);
-  vsizer->Add(
-     new wxButton( this, -1, "down", wxDefaultPosition, wxSize(100,25)), \
-     1, wxEXPAND);
-  hsizer2->Add(vsizer, 1, wxSHAPED | wxALIGN_CENTER);
-  hsizer2->AddLine(wxVERTICAL);
-  hsizer2->AddButton( "six", wxALIGN_RIGHT | wxALIGN_CENTER_VERTICAL);
-
-  topsizer->Add(hsizer2, 1, wxEXPAND);
-  topsizer->AddLine(wxHORIZONTAL);
-
-  wxBoxSizer *hsizer3 = new wxBoxSizer( wxHORIZONTAL );
-  hsizer3->AddButton( "seven", wxALIGN_LEFT | wxALIGN_BOTTOM);
-  hsizer3->AddLine(wxVERTICAL);
-  hsizer3->AddButton( "eight", wxALIGN_CENTER_HORIZONTAL | wxALIGN_BOTTOM);
-  hsizer3->AddLine(wxVERTICAL);
-  // wxEXPAND should have no effect
-  hsizer3->AddButton( "nine", wxEXPAND | wxALIGN_RIGHT | wxALIGN_BOTTOM);
-
-  topsizer->Add(hsizer3, 1, wxEXPAND);
+    wxBoxSizer *topsizer = new wxBoxSizer( wxVERTICAL );
+    // top row -- top-aligned
+    wxBoxSizer *hsizer1 = new wxBoxSizer( wxHORIZONTAL );
+    hsizer1->AddButton( "one", wxALIGN_LEFT | wxALIGN_TOP);
+    hsizer1->AddLine(wxVERTICAL);
+    hsizer1->AddButton( "two", wxALIGN_CENTER_HORIZONTAL | wxALIGN_TOP);
+    hsizer1->AddLine(wxVERTICAL);
+    hsizer1->AddButton( "three", wxALIGN_RIGHT | wxALIGN_TOP);
+
+    topsizer->Add(hsizer1, 1, wxEXPAND);
+    topsizer->AddLine(wxHORIZONTAL);
+
+    wxBoxSizer *hsizer2 = new wxBoxSizer( wxHORIZONTAL );
+    hsizer2->AddButton( "four", wxALIGN_LEFT | wxALIGN_CENTER_VERTICAL);
+    hsizer2->AddLine(wxVERTICAL);
+    // sizer that preserves it's shape
+    wxBoxSizer *vsizer = new wxBoxSizer( wxVERTICAL );
+    vsizer->Add(
+        new wxButton( this, -1, "up", wxDefaultPosition, wxSize(100,25) ),
+        1, wxEXPAND);
+
+    vsizer->Add(
+        new wxButton( this, -1, "down", wxDefaultPosition, wxSize(100,25) ),
+        1, wxEXPAND);
+
+    hsizer2->Add(vsizer, 1, wxSHAPED | wxALIGN_CENTER);
+    hsizer2->AddLine(wxVERTICAL);
+    hsizer2->AddButton( "six", wxALIGN_RIGHT | wxALIGN_CENTER_VERTICAL);
+
+    topsizer->Add(hsizer2, 1, wxEXPAND);
+    topsizer->AddLine(wxHORIZONTAL);
+
+    wxBoxSizer *hsizer3 = new wxBoxSizer( wxHORIZONTAL );
+    hsizer3->AddButton( "seven", wxALIGN_LEFT | wxALIGN_BOTTOM);
+    hsizer3->AddLine(wxVERTICAL);
+    hsizer3->AddButton( "eight", wxALIGN_CENTER_HORIZONTAL | wxALIGN_BOTTOM);
+    hsizer3->AddLine(wxVERTICAL);
+    // wxEXPAND should have no effect
+    hsizer3->AddButton( "nine", wxEXPAND | wxALIGN_RIGHT | wxALIGN_BOTTOM);
+
+    topsizer->Add(hsizer3, 1, wxEXPAND);
 
-  // set frame to minimum size
-  topsizer->Fit( this );
+    // set frame to minimum size
+    topsizer->Fit( this );
 
-  // don't allow frame to get smaller than what the sizers tell ye
-  // topsizer->SetSizeHints( this );
+    // don't allow frame to get smaller than what the sizers tell ye
+    // topsizer->SetSizeHints( this );
 
-  SetSizer( topsizer );
-  SetAutoLayout( TRUE );
+    SetSizer( topsizer );
 }
 
 
Index: thread/thread.cpp
===================================================================
RCS file: /home/wxcvs/wxWindows/samples/thread/thread.cpp,v
retrieving revision 1.8
diff -u -r1.8 thread.cpp
--- thread/thread.cpp	1 Jul 2002 14:55:39 -0000	1.8
+++ thread/thread.cpp	20 Jul 2002 01:15:36 -0000
@@ -223,7 +223,7 @@
 {
     wxString text;
 
-    text.Printf(wxT("Thread 0x%x started (priority = %d).\n"),
+    text.Printf(wxT("Thread 0x%x started (priority = %u).\n"),
                 GetId(), GetPriority());
     WriteText(text);
     // wxLogMessage(text); -- test wxLog thread safeness
Index: widgets/combobox.cpp
===================================================================
RCS file: /home/wxcvs/wxWindows/samples/widgets/combobox.cpp,v
retrieving revision 1.7
diff -u -r1.7 combobox.cpp
--- widgets/combobox.cpp	9 Apr 2002 10:31:36 -0000	1.7
+++ widgets/combobox.cpp	20 Jul 2002 01:15:37 -0000
@@ -494,10 +494,10 @@
 
 void ComboboxWidgetsPage::OnComboBox(wxCommandEvent& event)
 {
-    int sel = event.GetInt();
+    long sel = event.GetInt();
     m_textDelete->SetValue(wxString::Format(_T("%ld"), sel));
 
-    wxLogMessage(_T("Combobox item %d selected"), sel);
+    wxLogMessage(_T("Combobox item %ld selected"), sel);
 }
 
 void ComboboxWidgetsPage::OnCheckOrRadioBox(wxCommandEvent& event)
Index: widgets/gauge.cpp
===================================================================
RCS file: /home/wxcvs/wxWindows/samples/widgets/gauge.cpp,v
retrieving revision 1.4
diff -u -r1.4 gauge.cpp
--- widgets/gauge.cpp	9 Apr 2002 10:31:36 -0000	1.4
+++ widgets/gauge.cpp	20 Jul 2002 01:15:37 -0000
@@ -209,7 +209,7 @@
                                             _T("Set &range"),
                                             GaugePage_RangeText,
                                             &m_textRange);
-    m_textRange->SetValue(wxString::Format(_T("%lu"), m_range));
+    m_textRange->SetValue( wxString::Format(_T("%lu"), m_range) );
     sizerMiddle->Add(sizerRow, 0, wxALL | wxGROW, 5);
 
     btn = new wxButton(this, GaugePage_Progress, _T("Simulate &progress"));
@@ -400,4 +400,4 @@
     wxLogMessage(_T("Progress finished."));
 }
 
-#endif
\ No newline at end of file
+#endif
Index: widgets/listbox.cpp
===================================================================
RCS file: /home/wxcvs/wxWindows/samples/widgets/listbox.cpp,v
retrieving revision 1.5
diff -u -r1.5 listbox.cpp
--- widgets/listbox.cpp	9 Apr 2002 10:31:36 -0000	1.5
+++ widgets/listbox.cpp	20 Jul 2002 01:15:37 -0000
@@ -491,20 +491,20 @@
 
 void ListboxWidgetsPage::OnListbox(wxCommandEvent& event)
 {
-    int sel = event.GetInt();
+    long sel = event.GetInt();
     m_textDelete->SetValue(wxString::Format(_T("%ld"), sel));
 
-    wxLogMessage(_T("Listbox item %d selected"), sel);
+    wxLogMessage(_T("Listbox item %ld selected"), sel);
 }
 
 void ListboxWidgetsPage::OnListboxDClick(wxCommandEvent& event)
 {
-    wxLogMessage(_T("Listbox item %d double clicked"), event.GetInt());
+    wxLogMessage( _T("Listbox item %ld double clicked"), event.GetInt() );
 }
 
 void ListboxWidgetsPage::OnCheckListbox(wxCommandEvent& event)
 {
-    wxLogMessage(_T("Listbox item %d toggled"), event.GetInt());
+    wxLogMessage( _T("Listbox item %ld toggled"), event.GetInt() );
 }
 
 void ListboxWidgetsPage::OnCheckOrRadioBox(wxCommandEvent& event)
@@ -512,4 +512,4 @@
     CreateLbox();
 }
 
-#endif
\ No newline at end of file
+#endif
Index: widgets/radiobox.cpp
===================================================================
RCS file: /home/wxcvs/wxWindows/samples/widgets/radiobox.cpp,v
retrieving revision 1.4
diff -u -r1.4 radiobox.cpp
--- widgets/radiobox.cpp	9 Apr 2002 10:31:37 -0000	1.4
+++ widgets/radiobox.cpp	20 Jul 2002 01:15:37 -0000
@@ -454,4 +454,4 @@
     event.Enable(enable);
 }
 
-#endif
\ No newline at end of file
+#endif
Index: widgets/slider.cpp
===================================================================
RCS file: /home/wxcvs/wxWindows/samples/widgets/slider.cpp,v
retrieving revision 1.6
diff -u -r1.6 slider.cpp
--- widgets/slider.cpp	10 Jul 2002 14:11:05 -0000	1.6
+++ widgets/slider.cpp	20 Jul 2002 01:15:37 -0000
@@ -231,8 +231,8 @@
     m_textMax = new wxTextCtrl(this, SliderPage_MaxText, _T(""));
     sizerRow->Add(m_textMax, 1, wxLEFT | wxALIGN_CENTRE_VERTICAL, 5);
 
-    m_textMin->SetValue(wxString::Format(_T("%lu"), m_min));
-    m_textMax->SetValue(wxString::Format(_T("%lu"), m_max));
+    m_textMin->SetValue( wxString::Format(_T("%d"), m_min) );
+    m_textMax->SetValue( wxString::Format(_T("%d"), m_max) );
 
     sizerMiddle->Add(sizerRow, 0, wxALL | wxGROW, 5);
 
@@ -449,7 +449,7 @@
 
 void SliderWidgetsPage::OnUpdateUICurValueText(wxUpdateUIEvent& event)
 {
-    event.SetText( wxString::Format(_T("%d"), m_slider->GetValue()));
+    event.SetText( wxString::Format(_T("%d"), m_slider->GetValue()) );
 }
 
 void SliderWidgetsPage::OnUpdateUIOtherSide(wxUpdateUIEvent& event)
@@ -459,10 +459,10 @@
 
 void SliderWidgetsPage::OnSlider(wxScrollEvent& event)
 {
-    int value = event.GetInt();
+    long value = event.GetInt();
 
     wxASSERT_MSG( value == m_slider->GetValue(),
-                  wxT("slider value should be the same") );
+        wxT("slider value should be the same") );
 
     wxEventType eventType = event.GetEventType();
 
Index: widgets/spinbtn.cpp
===================================================================
RCS file: /home/wxcvs/wxWindows/samples/widgets/spinbtn.cpp,v
retrieving revision 1.5
diff -u -r1.5 spinbtn.cpp
--- widgets/spinbtn.cpp	14 May 2002 11:28:13 -0000	1.5
+++ widgets/spinbtn.cpp	20 Jul 2002 01:15:37 -0000
@@ -224,8 +224,8 @@
     m_textMax = new wxTextCtrl(this, SpinBtnPage_MaxText, _T(""));
     sizerRow->Add(m_textMax, 1, wxLEFT | wxALIGN_CENTRE_VERTICAL, 5);
 
-    m_textMin->SetValue(wxString::Format(_T("%lu"), m_min));
-    m_textMax->SetValue(wxString::Format(_T("%lu"), m_max));
+    m_textMin->SetValue( wxString::Format(_T("%d"), m_min) );
+    m_textMax->SetValue( wxString::Format(_T("%d"), m_max) );
 
     sizerMiddle->Add(sizerRow, 0, wxALL | wxGROW, 5);
 
@@ -405,14 +405,14 @@
 
 void SpinBtnWidgetsPage::OnSpinBtnUp(wxCommandEvent& event)
 {
-    wxLogMessage(_T("Spin button value incremented, will be %d (was %d)"),
-                 event.GetInt(), m_spinbtn->GetValue());
+    wxLogMessage( _T("Spin button value incremented, will be %ld (was %d)"),
+                  event.GetInt(), m_spinbtn->GetValue() );
 }
 
 void SpinBtnWidgetsPage::OnSpinBtnDown(wxCommandEvent& event)
 {
-    wxLogMessage(_T("Spin button value decremented, will be %d (was %d)"),
-                 event.GetInt(), m_spinbtn->GetValue());
+    wxLogMessage( _T("Spin button value decremented, will be %ld (was %d)"),
+                  event.GetInt(), m_spinbtn->GetValue() );
 }
 
 void SpinBtnWidgetsPage::OnSpinCtrl(wxCommandEvent& event)
Index: widgets/textctrl.cpp
===================================================================
RCS file: /home/wxcvs/wxWindows/samples/widgets/textctrl.cpp,v
retrieving revision 1.5
diff -u -r1.5 textctrl.cpp
--- widgets/textctrl.cpp	9 Apr 2002 10:31:37 -0000	1.5
+++ widgets/textctrl.cpp	20 Jul 2002 01:15:37 -0000
@@ -604,7 +604,7 @@
     if ( m_textLineLast )
     {
         m_textLineLast->SetValue(
-                wxString::Format(_T("%ld"), m_text->GetNumberOfLines()));
+                wxString::Format(_T("%d"), m_text->GetNumberOfLines()) );
     }
 
     if ( m_textSelFrom && m_textSelTo )
@@ -699,7 +699,7 @@
         else
         {
             long elapsed = sw.Time();
-            wxLogMessage(_T("Loaded file '%s' in %u.%us"),
+            wxLogMessage(_T("Loaded file '%s' in %lu.%us"),
                          filename.c_str(), elapsed / 1000, elapsed % 1000);
         }
     }

 	  	 

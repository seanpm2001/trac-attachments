diff -bu1 -r wxWindows/samples/db/dbtest.cpp wxWin/samples/db/dbtest.cpp
--- wxWindows/samples/db/dbtest.cpp	2003-06-24 23:00:40.000000000 +0200
+++ wxWin/samples/db/dbtest.cpp	2004-01-22 14:31:34.000000000 +0100
@@ -93,3 +93,3 @@
 
-    wxLogMessage("\nThe following datatypes are supported by the\ndatabase you are currently connected to:");
+    wxLogMessage(wxT("\nThe following datatypes are supported by the\ndatabase you are currently connected to:"));
 #ifdef SQL_C_BINARY
@@ -97,4 +97,4 @@
     {
-        nativeDataTypeName = "SQL_C_BINARY (" + nativeDataTypeName;
-        nativeDataTypeName += ")";
+        nativeDataTypeName = wxT("SQL_C_BINARY (") + nativeDataTypeName;
+        nativeDataTypeName += wxT(")");
         wxLogMessage(nativeDataTypeName);
@@ -105,4 +105,4 @@
     {
-        nativeDataTypeName = "SQL_C_BIT (" + nativeDataTypeName;
-        nativeDataTypeName += ")";
+        nativeDataTypeName = wxT("SQL_C_BIT (") + nativeDataTypeName;
+        nativeDataTypeName += wxT(")");
         wxLogMessage(nativeDataTypeName);
@@ -113,4 +113,4 @@
     {
-        nativeDataTypeName = "SQL_C_BOOKMARK (" + nativeDataTypeName;
-        nativeDataTypeName += ")";
+        nativeDataTypeName = wxT("SQL_C_BOOKMARK (") + nativeDataTypeName;
+        nativeDataTypeName += wxT(")");
         wxLogMessage(nativeDataTypeName);
@@ -121,4 +121,4 @@
     {
-        nativeDataTypeName = "SQL_C_CHAR (" + nativeDataTypeName;
-        nativeDataTypeName += ")";
+        nativeDataTypeName = wxT("SQL_C_CHAR (") + nativeDataTypeName;
+        nativeDataTypeName += wxT(")");
         wxLogMessage(nativeDataTypeName);
@@ -129,4 +129,4 @@
     {
-        nativeDataTypeName = "SQL_C_DATE (" + nativeDataTypeName;
-        nativeDataTypeName += ")";
+        nativeDataTypeName = wxT("SQL_C_DATE (") + nativeDataTypeName;
+        nativeDataTypeName += wxT(")");
         wxLogMessage(nativeDataTypeName);
@@ -137,4 +137,4 @@
     {
-        nativeDataTypeName = "SQL_C_DEFAULT (" + nativeDataTypeName;
-        nativeDataTypeName += ")";
+        nativeDataTypeName = wxT("SQL_C_DEFAULT (") + nativeDataTypeName;
+        nativeDataTypeName += wxT(")");
         wxLogMessage(nativeDataTypeName);
@@ -145,4 +145,4 @@
     {
-        nativeDataTypeName = "SQL_C_DOUBLE (" + nativeDataTypeName;
-        nativeDataTypeName += ")";
+        nativeDataTypeName = wxT("SQL_C_DOUBLE (") + nativeDataTypeName;
+        nativeDataTypeName += wxT(")");
         wxLogMessage(nativeDataTypeName);
@@ -153,4 +153,4 @@
     {
-        nativeDataTypeName = "SQL_C_FLOAT (" + nativeDataTypeName;
-        nativeDataTypeName += ")";
+        nativeDataTypeName = wxT("SQL_C_FLOAT (") + nativeDataTypeName;
+        nativeDataTypeName += wxT(")");
         wxLogMessage(nativeDataTypeName);
@@ -161,4 +161,4 @@
     {
-        nativeDataTypeName = "SQL_C_GUID (" + nativeDataTypeName;
-        nativeDataTypeName += ")";
+        nativeDataTypeName = wxT("SQL_C_GUID (") + nativeDataTypeName;
+        nativeDataTypeName += wxT(")");
         wxLogMessage(nativeDataTypeName);
@@ -169,4 +169,4 @@
     {
-        nativeDataTypeName = "SQL_C_INTERVAL_DAY (" + nativeDataTypeName;
-        nativeDataTypeName += ")";
+        nativeDataTypeName = wxT("SQL_C_INTERVAL_DAY (") + nativeDataTypeName;
+        nativeDataTypeName += wxT(")");
         wxLogMessage(nativeDataTypeName);
@@ -177,4 +177,4 @@
     {
-        nativeDataTypeName = "SQL_C_INTERVAL_DAY_TO_HOUR (" + nativeDataTypeName;
-        nativeDataTypeName += ")";
+        nativeDataTypeName = wxT("SQL_C_INTERVAL_DAY_TO_HOUR (") + nativeDataTypeName;
+        nativeDataTypeName += wxT(")");
         wxLogMessage(nativeDataTypeName);
@@ -185,4 +185,4 @@
     {
-        nativeDataTypeName = "SQL_C_INTERVAL_DAY_TO_MINUTE (" + nativeDataTypeName;
-        nativeDataTypeName += ")";
+        nativeDataTypeName = wxT("SQL_C_INTERVAL_DAY_TO_MINUTE (") + nativeDataTypeName;
+        nativeDataTypeName += wxT(")");
         wxLogMessage(nativeDataTypeName);
@@ -193,4 +193,4 @@
     {
-        nativeDataTypeName = "SQL_C_INTERVAL_DAY_TO_SECOND (" + nativeDataTypeName;
-        nativeDataTypeName += ")";
+        nativeDataTypeName = wxT("SQL_C_INTERVAL_DAY_TO_SECOND (") + nativeDataTypeName;
+        nativeDataTypeName += wxT(")");
         wxLogMessage(nativeDataTypeName);
@@ -201,4 +201,4 @@
     {
-        nativeDataTypeName = "SQL_C_INTERVAL_HOUR (" + nativeDataTypeName;
-        nativeDataTypeName += ")";
+        nativeDataTypeName = wxT("SQL_C_INTERVAL_HOUR (") + nativeDataTypeName;
+        nativeDataTypeName += wxT(")");
         wxLogMessage(nativeDataTypeName);
@@ -209,4 +209,4 @@
     {
-        nativeDataTypeName = "SQL_C_INTERVAL_HOUR_TO_MINUTE (" + nativeDataTypeName;
-        nativeDataTypeName += ")";
+        nativeDataTypeName = wxT("SQL_C_INTERVAL_HOUR_TO_MINUTE (") + nativeDataTypeName;
+        nativeDataTypeName += wxT(")");
         wxLogMessage(nativeDataTypeName);
@@ -217,4 +217,4 @@
     {
-        nativeDataTypeName = "SQL_C_INTERVAL_HOUR_TO_SECOND (" + nativeDataTypeName;
-        nativeDataTypeName += ")";
+        nativeDataTypeName = wxT("SQL_C_INTERVAL_HOUR_TO_SECOND (") + nativeDataTypeName;
+        nativeDataTypeName += wxT(")");
         wxLogMessage(nativeDataTypeName);
@@ -225,4 +225,4 @@
     {
-        nativeDataTypeName = "SQL_C_INTERVAL_MINUTE (" + nativeDataTypeName;
-        nativeDataTypeName += ")";
+        nativeDataTypeName = wxT("SQL_C_INTERVAL_MINUTE (") + nativeDataTypeName;
+        nativeDataTypeName += wxT(")");
         wxLogMessage(nativeDataTypeName);
@@ -233,4 +233,4 @@
     {
-        nativeDataTypeName = "SQL_C_INTERVAL_MINUTE_TO_SECOND (" + nativeDataTypeName;
-        nativeDataTypeName += ")";
+        nativeDataTypeName = wxT("SQL_C_INTERVAL_MINUTE_TO_SECOND (") + nativeDataTypeName;
+        nativeDataTypeName += wxT(")");
         wxLogMessage(nativeDataTypeName);
@@ -241,4 +241,4 @@
     {
-        nativeDataTypeName = "SQL_C_INTERVAL_MONTH (" + nativeDataTypeName;
-        nativeDataTypeName += ")";
+        nativeDataTypeName = wxT("SQL_C_INTERVAL_MONTH (") + nativeDataTypeName;
+        nativeDataTypeName += wxT(")");
         wxLogMessage(nativeDataTypeName);
@@ -249,4 +249,4 @@
     {
-        nativeDataTypeName = "SQL_C_INTERVAL_SECOND (" + nativeDataTypeName;
-        nativeDataTypeName += ")";
+        nativeDataTypeName = wxT("SQL_C_INTERVAL_SECOND (") + nativeDataTypeName;
+        nativeDataTypeName += wxT(")");
         wxLogMessage(nativeDataTypeName);
@@ -257,4 +257,4 @@
     {
-        nativeDataTypeName = "SQL_C_INTERVAL_YEAR (" + nativeDataTypeName;
-        nativeDataTypeName += ")";
+        nativeDataTypeName = wxT("SQL_C_INTERVAL_YEAR (") + nativeDataTypeName;
+        nativeDataTypeName += wxT(")");
         wxLogMessage(nativeDataTypeName);
@@ -265,4 +265,4 @@
     {
-        nativeDataTypeName = "SQL_C_INTERVAL_YEAR_TO_MONTH (" + nativeDataTypeName;
-        nativeDataTypeName += ")";
+        nativeDataTypeName = wxT("SQL_C_INTERVAL_YEAR_TO_MONTH (") + nativeDataTypeName;
+        nativeDataTypeName += wxT(")");
         wxLogMessage(nativeDataTypeName);
@@ -273,4 +273,4 @@
     {
-        nativeDataTypeName = "SQL_C_LONG (" + nativeDataTypeName;
-        nativeDataTypeName += ")";
+        nativeDataTypeName = wxT("SQL_C_LONG (") + nativeDataTypeName;
+        nativeDataTypeName += wxT(")");
         wxLogMessage(nativeDataTypeName);
@@ -281,4 +281,4 @@
     {
-        nativeDataTypeName = "SQL_C_NUMERIC (" + nativeDataTypeName;
-        nativeDataTypeName += ")";
+        nativeDataTypeName = wxT("SQL_C_NUMERIC (") + nativeDataTypeName;
+        nativeDataTypeName += wxT(")");
         wxLogMessage(nativeDataTypeName);
@@ -289,4 +289,4 @@
     {
-        nativeDataTypeName = "SQL_C_SBIGINT (" + nativeDataTypeName;
-        nativeDataTypeName += ")";
+        nativeDataTypeName = wxT("SQL_C_SBIGINT (") + nativeDataTypeName;
+        nativeDataTypeName += wxT(")");
         wxLogMessage(nativeDataTypeName);
@@ -297,4 +297,4 @@
     {
-        nativeDataTypeName = "SQL_C_SHORT (" + nativeDataTypeName;
-        nativeDataTypeName += ")";
+        nativeDataTypeName = wxT("SQL_C_SHORT (") + nativeDataTypeName;
+        nativeDataTypeName += wxT(")");
         wxLogMessage(nativeDataTypeName);
@@ -305,4 +305,4 @@
     {
-        nativeDataTypeName = "SQL_C_SLONG (" + nativeDataTypeName;
-        nativeDataTypeName += ")";
+        nativeDataTypeName = wxT("SQL_C_SLONG (") + nativeDataTypeName;
+        nativeDataTypeName += wxT(")");
         wxLogMessage(nativeDataTypeName);
@@ -313,4 +313,4 @@
     {
-        nativeDataTypeName = "SQL_C_SSHORT (" + nativeDataTypeName;
-        nativeDataTypeName += ")";
+        nativeDataTypeName = wxT("SQL_C_SSHORT (") + nativeDataTypeName;
+        nativeDataTypeName += wxT(")");
         wxLogMessage(nativeDataTypeName);
@@ -321,4 +321,4 @@
     {
-        nativeDataTypeName = "SQL_C_STINYINT (" + nativeDataTypeName;
-        nativeDataTypeName += ")";
+        nativeDataTypeName = wxT("SQL_C_STINYINT (") + nativeDataTypeName;
+        nativeDataTypeName += wxT(")");
         wxLogMessage(nativeDataTypeName);
@@ -329,4 +329,4 @@
     {
-        nativeDataTypeName = "SQL_C_TIME (" + nativeDataTypeName;
-        nativeDataTypeName += ")";
+        nativeDataTypeName = wxT("SQL_C_TIME (") + nativeDataTypeName;
+        nativeDataTypeName += wxT(")");
         wxLogMessage(nativeDataTypeName);
@@ -337,4 +337,4 @@
     {
-        nativeDataTypeName = "SQL_C_TIMESTAMP (" + nativeDataTypeName;
-        nativeDataTypeName += ")";
+        nativeDataTypeName = wxT("SQL_C_TIMESTAMP (") + nativeDataTypeName;
+        nativeDataTypeName += wxT(")");
         wxLogMessage(nativeDataTypeName);
@@ -345,4 +345,4 @@
     {
-        nativeDataTypeName = "SQL_C_TINYINT (" + nativeDataTypeName;
-        nativeDataTypeName += ")";
+        nativeDataTypeName = wxT("SQL_C_TINYINT (") + nativeDataTypeName;
+        nativeDataTypeName += wxT(")");
         wxLogMessage(nativeDataTypeName);
@@ -353,4 +353,4 @@
     {
-        nativeDataTypeName = "SQL_C_TYPE_DATE (" + nativeDataTypeName;
-        nativeDataTypeName += ")";
+        nativeDataTypeName = wxT("SQL_C_TYPE_DATE (") + nativeDataTypeName;
+        nativeDataTypeName += wxT(")");
         wxLogMessage(nativeDataTypeName);
@@ -361,4 +361,4 @@
     {
-        nativeDataTypeName = "SQL_C_TYPE_TIME (" + nativeDataTypeName;
-        nativeDataTypeName += ")";
+        nativeDataTypeName = wxT("SQL_C_TYPE_TIME (") + nativeDataTypeName;
+        nativeDataTypeName += wxT(")");
         wxLogMessage(nativeDataTypeName);
@@ -369,4 +369,4 @@
     {
-        nativeDataTypeName = "SQL_C_TYPE_TIMESTAMP (" + nativeDataTypeName;
-        nativeDataTypeName += ")";
+        nativeDataTypeName = wxT("SQL_C_TYPE_TIMESTAMP (") + nativeDataTypeName;
+        nativeDataTypeName += wxT(")");
         wxLogMessage(nativeDataTypeName);
@@ -377,4 +377,4 @@
     {
-        nativeDataTypeName = "SQL_C_UBIGINT (" + nativeDataTypeName;
-        nativeDataTypeName += ")";
+        nativeDataTypeName = wxT("SQL_C_UBIGINT (") + nativeDataTypeName;
+        nativeDataTypeName += wxT(")");
         wxLogMessage(nativeDataTypeName);
@@ -385,4 +385,4 @@
     {
-        nativeDataTypeName = "SQL_C_ULONG (" + nativeDataTypeName;
-        nativeDataTypeName += ")";
+        nativeDataTypeName = wxT("SQL_C_ULONG (") + nativeDataTypeName;
+        nativeDataTypeName += wxT(")");
         wxLogMessage(nativeDataTypeName);
@@ -393,4 +393,4 @@
     {
-        nativeDataTypeName = "SQL_C_USHORT (" + nativeDataTypeName;
-        nativeDataTypeName += ")";
+        nativeDataTypeName = wxT("SQL_C_USHORT (") + nativeDataTypeName;
+        nativeDataTypeName += wxT(")");
         wxLogMessage(nativeDataTypeName);
@@ -401,4 +401,4 @@
     {
-        nativeDataTypeName = "SQL_C_UTINYINT (" + nativeDataTypeName;
-        nativeDataTypeName += ")";
+        nativeDataTypeName = wxT("SQL_C_UTINYINT (") + nativeDataTypeName;
+        nativeDataTypeName += wxT(")");
         wxLogMessage(nativeDataTypeName);
@@ -409,4 +409,4 @@
     {
-        nativeDataTypeName = "SQL_C_VARBOOKMARK (" + nativeDataTypeName;
-        nativeDataTypeName += ")";
+        nativeDataTypeName = wxT("SQL_C_VARBOOKMARK (") + nativeDataTypeName;
+        nativeDataTypeName += wxT(")");
         wxLogMessage(nativeDataTypeName);
@@ -419,4 +419,4 @@
     {
-        nativeDataTypeName = "SQL_DATE (" + nativeDataTypeName;
-        nativeDataTypeName += ")";
+        nativeDataTypeName = wxT("SQL_DATE (") + nativeDataTypeName;
+        nativeDataTypeName += wxT(")");
         wxLogMessage(nativeDataTypeName);
@@ -427,4 +427,4 @@
     {
-        nativeDataTypeName = "SQL_INTERVAL (" + nativeDataTypeName;
-        nativeDataTypeName += ")";
+        nativeDataTypeName = wxT("SQL_INTERVAL (") + nativeDataTypeName;
+        nativeDataTypeName += wxT(")");
         wxLogMessage(nativeDataTypeName);
@@ -435,4 +435,4 @@
     {
-        nativeDataTypeName = "SQL_TIME (" + nativeDataTypeName;
-        nativeDataTypeName += ")";
+        nativeDataTypeName = wxT("SQL_TIME (") + nativeDataTypeName;
+        nativeDataTypeName += wxT(")");
         wxLogMessage(nativeDataTypeName);
@@ -443,4 +443,4 @@
     {
-        nativeDataTypeName = "SQL_TIMESTAMP (" + nativeDataTypeName;
-        nativeDataTypeName += ")";
+        nativeDataTypeName = wxT("SQL_TIMESTAMP (") + nativeDataTypeName;
+        nativeDataTypeName += wxT(")");
         wxLogMessage(nativeDataTypeName);
@@ -451,4 +451,4 @@
     {
-        nativeDataTypeName = "SQL_LONGVARCHAR (" + nativeDataTypeName;
-        nativeDataTypeName += ")";
+        nativeDataTypeName = wxT("SQL_LONGVARCHAR (") + nativeDataTypeName;
+        nativeDataTypeName += wxT(")");
         wxLogMessage(nativeDataTypeName);
@@ -459,4 +459,4 @@
     {
-        nativeDataTypeName = "SQL_BINARY (" + nativeDataTypeName;
-        nativeDataTypeName += ")";
+        nativeDataTypeName = wxT("SQL_BINARY (") + nativeDataTypeName;
+        nativeDataTypeName += wxT(")");
         wxLogMessage(nativeDataTypeName);
@@ -467,4 +467,4 @@
     {
-        nativeDataTypeName = "SQL_VARBINARY (" + nativeDataTypeName;
-        nativeDataTypeName += ")";
+        nativeDataTypeName = wxT("SQL_VARBINARY (") + nativeDataTypeName;
+        nativeDataTypeName += wxT(")");
         wxLogMessage(nativeDataTypeName);
@@ -475,4 +475,4 @@
     {
-        nativeDataTypeName = "SQL_LOGVARBINARY (" + nativeDataTypeName;
-        nativeDataTypeName += ")";
+        nativeDataTypeName = wxT("SQL_LOGVARBINARY (") + nativeDataTypeName;
+        nativeDataTypeName += wxT(")");
         wxLogMessage(nativeDataTypeName);
@@ -483,4 +483,4 @@
     {
-        nativeDataTypeName = "SQL_BIGINT (" + nativeDataTypeName;
-        nativeDataTypeName += ")";
+        nativeDataTypeName = wxT("SQL_BIGINT (") + nativeDataTypeName;
+        nativeDataTypeName += wxT(")");
         wxLogMessage(nativeDataTypeName);
@@ -491,4 +491,4 @@
     {
-        nativeDataTypeName = "SQL_TINYINT (" + nativeDataTypeName;
-        nativeDataTypeName += ")";
+        nativeDataTypeName = wxT("SQL_TINYINT (") + nativeDataTypeName;
+        nativeDataTypeName += wxT(")");
         wxLogMessage(nativeDataTypeName);
@@ -499,4 +499,4 @@
     {
-        nativeDataTypeName = "SQL_BIT (" + nativeDataTypeName;
-        nativeDataTypeName += ")";
+        nativeDataTypeName = wxT("SQL_BIT (") + nativeDataTypeName;
+        nativeDataTypeName += wxT(")");
         wxLogMessage(nativeDataTypeName);
@@ -507,4 +507,4 @@
     {
-        nativeDataTypeName = "SQL_GUID (" + nativeDataTypeName;
-        nativeDataTypeName += ")";
+        nativeDataTypeName = wxT("SQL_GUID (") + nativeDataTypeName;
+        nativeDataTypeName += wxT(")");
         wxLogMessage(nativeDataTypeName);
@@ -516,4 +516,4 @@
     {
-        nativeDataTypeName = "SQL_CHAR (" + nativeDataTypeName;
-        nativeDataTypeName += ")";
+        nativeDataTypeName = wxT("SQL_CHAR (") + nativeDataTypeName;
+        nativeDataTypeName += wxT(")");
         wxLogMessage(nativeDataTypeName);
@@ -524,4 +524,4 @@
     {
-        nativeDataTypeName = "SQL_INTEGER (" + nativeDataTypeName;
-        nativeDataTypeName += ")";
+        nativeDataTypeName = wxT("SQL_INTEGER (") + nativeDataTypeName;
+        nativeDataTypeName += wxT(")");
         wxLogMessage(nativeDataTypeName);
@@ -532,4 +532,4 @@
     {
-        nativeDataTypeName = "SQL_SAMLLINT (" + nativeDataTypeName;
-        nativeDataTypeName += ")";
+        nativeDataTypeName = wxT("SQL_SAMLLINT (") + nativeDataTypeName;
+        nativeDataTypeName += wxT(")");
         wxLogMessage(nativeDataTypeName);
@@ -540,4 +540,4 @@
     {
-        nativeDataTypeName = "SQL_REAL (" + nativeDataTypeName;
-        nativeDataTypeName += ")";
+        nativeDataTypeName = wxT("SQL_REAL (") + nativeDataTypeName;
+        nativeDataTypeName += wxT(")");
         wxLogMessage(nativeDataTypeName);
@@ -548,4 +548,4 @@
     {
-        nativeDataTypeName = "SQL_DOUBLE (" + nativeDataTypeName;
-        nativeDataTypeName += ")";
+        nativeDataTypeName = wxT("SQL_DOUBLE (") + nativeDataTypeName;
+        nativeDataTypeName += wxT(")");
         wxLogMessage(nativeDataTypeName);
@@ -556,4 +556,4 @@
     {
-        nativeDataTypeName = "SQL_NUMERIC (" + nativeDataTypeName;
-        nativeDataTypeName += ")";
+        nativeDataTypeName = wxT("SQL_NUMERIC (") + nativeDataTypeName;
+        nativeDataTypeName += wxT(")");
         wxLogMessage(nativeDataTypeName);
@@ -564,4 +564,4 @@
     {
-        nativeDataTypeName = "SQL_DATE (" + nativeDataTypeName;
-        nativeDataTypeName += ")";
+        nativeDataTypeName = wxT("SQL_DATE (") + nativeDataTypeName;
+        nativeDataTypeName += wxT(")");
         wxLogMessage(nativeDataTypeName);
@@ -572,4 +572,4 @@
     {
-        nativeDataTypeName = "SQL_TIME (" + nativeDataTypeName;
-        nativeDataTypeName += ")";
+        nativeDataTypeName = wxT("SQL_TIME (") + nativeDataTypeName;
+        nativeDataTypeName += wxT(")");
         wxLogMessage(nativeDataTypeName);
@@ -580,4 +580,4 @@
     {
-        nativeDataTypeName = "SQL_TIMESTAMP (" + nativeDataTypeName;
-        nativeDataTypeName += ")";
+        nativeDataTypeName = wxT("SQL_TIMESTAMP (") + nativeDataTypeName;
+        nativeDataTypeName += wxT(")");
         wxLogMessage(nativeDataTypeName);
@@ -588,4 +588,4 @@
     {
-        nativeDataTypeName = "SQL_VARCHAR (" + nativeDataTypeName;
-        nativeDataTypeName += ")";
+        nativeDataTypeName = wxT("SQL_VARCHAR (") + nativeDataTypeName;
+        nativeDataTypeName += wxT(")");
         wxLogMessage(nativeDataTypeName);
@@ -598,4 +598,4 @@
     {
-        nativeDataTypeName = "SQL_C_TCHAR (" + nativeDataTypeName;
-        nativeDataTypeName += ")";
+        nativeDataTypeName = wxT("SQL_C_TCHAR (") + nativeDataTypeName;
+        nativeDataTypeName += wxT(")");
         wxLogMessage(nativeDataTypeName);
@@ -604,3 +604,3 @@
 
-    wxLogMessage("\n");
+    wxLogMessage(wxT("\n"));
 }  // CheckSupportForAllDataTypes()
@@ -621,3 +621,3 @@
     wxMenu *file_menu = new wxMenu;
-    file_menu->Append(FILE_CREATE, wxT("&Create CONTACT table"));
+    file_menu->Append(FILE_CREATE_ID, wxT("&Create CONTACT table"));
     file_menu->Append(FILE_RECREATE_TABLE, wxT("&Recreate CONTACT table"));
@@ -701,7 +701,7 @@
 */
-char* wxRemoveLineTerminator(char* aString)
+wxChar* wxRemoveLineTerminator(wxChar* aString)
 {
-    int len = strlen(aString);
-    while (len > 0 && (aString[len-1] == '\r' || aString[len-1] == '\n')) {
-        aString[len-1] = '\0';
+    int len = wxStrlen(aString);
+    while (len > 0 && (aString[len-1] == wxT('\r') || aString[len-1] == wxT('\n'))) {
+        aString[len-1] = wxT('\0');
         len--;
@@ -715,3 +715,3 @@
     FILE *paramFile;
-    if ((paramFile = fopen(PARAM_FILENAME, wxT("r"))) == NULL)
+    if ((paramFile = wxFopen(PARAM_FILENAME, wxT("r"))) == NULL)
     {
@@ -725,3 +725,3 @@
     wxChar buffer[1000+1];
-    fgets(buffer, sizeof(params.ODBCSource), paramFile);
+    wxFgets(buffer, sizeof(params.ODBCSource), paramFile);
     wxRemoveLineTerminator(buffer);
@@ -729,3 +729,3 @@
 
-    fgets(buffer, sizeof(params.UserName), paramFile);
+    wxFgets(buffer, sizeof(params.UserName), paramFile);
     wxRemoveLineTerminator(buffer);
@@ -733,3 +733,3 @@
 
-    fgets(buffer, sizeof(params.Password), paramFile);
+    wxFgets(buffer, sizeof(params.Password), paramFile);
     wxRemoveLineTerminator(buffer);
@@ -737,3 +737,3 @@
 
-    fgets(buffer, sizeof(params.DirPath), paramFile);
+    wxFgets(buffer, sizeof(params.DirPath), paramFile);
     wxRemoveLineTerminator(buffer);
@@ -747,6 +747,6 @@
 
-bool DatabaseDemoApp::WriteParamFile(Cparameters &params)
+bool DatabaseDemoApp::WriteParamFile(Cparameters &WXUNUSED(params))
 {
     FILE *paramFile;
-    if ((paramFile = fopen(PARAM_FILENAME, wxT("wt"))) == NULL)
+    if ((paramFile = wxFopen(PARAM_FILENAME, wxT("wt"))) == NULL)
     {
@@ -758,10 +758,10 @@
 
-    fputs(wxGetApp().params.ODBCSource, paramFile);
-    fputc(wxT('\n'), paramFile);
-    fputs(wxGetApp().params.UserName, paramFile);
-    fputc(wxT('\n'), paramFile);
-    fputs(wxGetApp().params.Password, paramFile);
-    fputc(wxT('\n'), paramFile);
-    fputs(wxGetApp().params.DirPath, paramFile);
-    fputc(wxT('\n'), paramFile);
+    wxFputs(wxGetApp().params.ODBCSource, paramFile);
+    wxFputc(wxT('\n'), paramFile);
+    wxFputs(wxGetApp().params.UserName, paramFile);
+    wxFputc(wxT('\n'), paramFile);
+    wxFputs(wxGetApp().params.Password, paramFile);
+    wxFputc(wxT('\n'), paramFile);
+    wxFputs(wxGetApp().params.DirPath, paramFile);
+    wxFputc(wxT('\n'), paramFile);
     fclose(paramFile);
@@ -792,3 +792,3 @@
         tStr = wxT("Error creating CONTACTS table.\nTable was not created.\n\n");
-        wxMessageBox(wxDbLogExtendedErrorMsg(tStr.c_str(),Contact->GetDb(),__FILE__,__LINE__),
+        wxMessageBox(wxDbLogExtendedErrorMsg(tStr.c_str(),Contact->GetDb(),__TFILE__,__LINE__),
                      wxT("ODBC Error..."),wxOK | wxICON_EXCLAMATION);
@@ -804,3 +804,3 @@
             tStr = wxT("Error creating CONTACTS indexes.\nIndexes will be unavailable.\n\n");
-            wxMessageBox(wxDbLogExtendedErrorMsg(tStr.c_str(),Contact->GetDb(),__FILE__,__LINE__),
+            wxMessageBox(wxDbLogExtendedErrorMsg(tStr.c_str(),Contact->GetDb(),__TFILE__,__LINE__),
                          wxT("ODBC Error..."),wxOK | wxICON_EXCLAMATION);
@@ -819,3 +819,3 @@
 BEGIN_EVENT_TABLE(DatabaseDemoFrame, wxFrame)
-    EVT_MENU(FILE_CREATE, DatabaseDemoFrame::OnCreate)
+    EVT_MENU(FILE_CREATE_ID, DatabaseDemoFrame::OnCreate)
     EVT_MENU(FILE_RECREATE_TABLE, DatabaseDemoFrame::OnRecreateTable)
@@ -851,3 +851,3 @@
 
-void DatabaseDemoFrame::OnCreate(wxCommandEvent& event)
+void DatabaseDemoFrame::OnCreate(wxCommandEvent& WXUNUSED(event))
 {
@@ -857,3 +857,3 @@
 
-void DatabaseDemoFrame::OnRecreateTable(wxCommandEvent& event)
+void DatabaseDemoFrame::OnRecreateTable(wxCommandEvent& WXUNUSED(event))
 {
@@ -863,3 +863,3 @@
 
-void DatabaseDemoFrame::OnRecreateIndexes(wxCommandEvent& event)
+void DatabaseDemoFrame::OnRecreateIndexes(wxCommandEvent& WXUNUSED(event))
 {
@@ -873,3 +873,3 @@
         tStr = wxT("Error creating CONTACTS indexes.\nNew indexes will be unavailable.\n\n");
-        wxMessageBox(wxDbLogExtendedErrorMsg(tStr.c_str(),wxGetApp().Contact->GetDb(),__FILE__,__LINE__),
+        wxMessageBox(wxDbLogExtendedErrorMsg(tStr.c_str(),wxGetApp().Contact->GetDb(),__TFILE__,__LINE__),
                      wxT("ODBC Error..."),wxOK | wxICON_EXCLAMATION);
@@ -884,3 +884,3 @@
 #if wxUSE_NEW_GRID
-void DatabaseDemoFrame::OnDbGridTable(wxCommandEvent& )
+void DatabaseDemoFrame::OnDbGridTable(wxCommandEvent& WXUNUSED(event))
 {
@@ -894,3 +894,3 @@
 
-void DatabaseDemoFrame::OnExit(wxCommandEvent& event)
+void DatabaseDemoFrame::OnExit(wxCommandEvent& WXUNUSED(event))
 {
@@ -900,3 +900,3 @@
 
-void DatabaseDemoFrame::OnEditParameters(wxCommandEvent& event)
+void DatabaseDemoFrame::OnEditParameters(wxCommandEvent& WXUNUSED(event))
 {
@@ -909,3 +909,3 @@
 
-void DatabaseDemoFrame::OnAbout(wxCommandEvent& event)
+void DatabaseDemoFrame::OnAbout(wxCommandEvent& WXUNUSED(event))
 {
@@ -1041,3 +1041,3 @@
 
-            wxMessageBox(wxDbLogExtendedErrorMsg(tStr.c_str(),wxGetApp().Contact->GetDb(),__FILE__,__LINE__),
+            wxMessageBox(wxDbLogExtendedErrorMsg(tStr.c_str(),wxGetApp().Contact->GetDb(),__TFILE__,__LINE__),
                          wxT("ODBC Error..."),wxOK | wxICON_EXCLAMATION);
@@ -1084,6 +1084,6 @@
 
-    wxStrcpy(idxDef[0].ColName, "IS_DEV");
+    wxStrcpy(idxDef[0].ColName, wxT("IS_DEV"));
     idxDef[0].Ascending = TRUE;
 
-    wxStrcpy(idxDef[1].ColName, "NAME");
+    wxStrcpy(idxDef[1].ColName, wxT("NAME"));
     idxDef[1].Ascending = TRUE;
@@ -1091,3 +1091,3 @@
     indexName = GetTableName();
-    indexName += "_IDX1";
+    indexName += wxT("_IDX1");
     Ok = CreateIndex(indexName.c_str(), TRUE, 2, idxDef, recreate);
@@ -1176,3 +1176,3 @@
 
-void CeditorDlg::OnCommand(wxWindow& win, wxCommandEvent& event)
+void CeditorDlg::OnCommand(wxWindow& win, wxCommandEvent& WXUNUSED(event))
 {
@@ -1297,3 +1297,3 @@
             tStr = wxT("ODBC error during Query()\n\n");
-            wxMessageBox(wxDbLogExtendedErrorMsg(tStr.c_str(),wxGetApp().Contact->GetDb(),__FILE__,__LINE__),
+            wxMessageBox(wxDbLogExtendedErrorMsg(tStr.c_str(),wxGetApp().Contact->GetDb(),__TFILE__,__LINE__),
                          wxT("ODBC Error..."),wxOK | wxICON_EXCLAMATION);
@@ -1343,3 +1343,3 @@
             wxGetApp().Contact->whereStr.Empty();
-            wxGetApp().Contact->SetOrderByClause("NAME");
+            wxGetApp().Contact->SetOrderByClause(wxT("NAME"));
 
@@ -1367,3 +1367,3 @@
                 tStr = wxT("ODBC error during Query()\n\n");
-                wxMessageBox(wxDbLogExtendedErrorMsg(tStr.c_str(),wxGetApp().Contact->GetDb(),__FILE__,__LINE__),
+                wxMessageBox(wxDbLogExtendedErrorMsg(tStr.c_str(),wxGetApp().Contact->GetDb(),__TFILE__,__LINE__),
                              wxT("ODBC Error..."),wxOK | wxICON_EXCLAMATION);
@@ -1404,3 +1404,3 @@
             tStr = wxT("ODBC error during Query()\n\n");
-            wxMessageBox(wxDbLogExtendedErrorMsg(tStr.c_str(),wxGetApp().Contact->GetDb(),__FILE__,__LINE__),
+            wxMessageBox(wxDbLogExtendedErrorMsg(tStr.c_str(),wxGetApp().Contact->GetDb(),__TFILE__,__LINE__),
                          wxT("ODBC Error..."),wxOK | wxICON_EXCLAMATION);
@@ -1444,3 +1444,3 @@
         CheckSupportForAllDataTypes(wxGetApp().READONLY_DB);
-        wxMessageBox("Support datatypes was dumped to stdout.");
+        wxMessageBox(wxT("Support datatypes was dumped to stdout."));
         return;
@@ -1451,3 +1451,3 @@
         DisplayDbDiagnostics(wxGetApp().READONLY_DB);
-        wxMessageBox("Diagnostics info was dumped to stdout.");
+        wxMessageBox(wxT("Diagnostics info was dumped to stdout."));
         return;
@@ -1457,6 +1457,6 @@
     {
-        if (wxGetApp().Contact->GetDb()->Catalog("","catalog.txt"))
-            wxMessageBox("The file 'catalog.txt' was created.");
+        if (wxGetApp().Contact->GetDb()->Catalog(wxT(""),wxT("catalog.txt")))
+            wxMessageBox(wxT("The file 'catalog.txt' was created."));
         else
-            wxMessageBox("Creation of the file 'catalog.txt' was failed.");
+            wxMessageBox(wxT("Creation of the file 'catalog.txt' was failed."));
         return;
@@ -1518,3 +1518,3 @@
 
-            wxMessageBox(wxDbLogExtendedErrorMsg(tStr.c_str(),wxGetApp().Contact->GetDb(),__FILE__,__LINE__),
+            wxMessageBox(wxDbLogExtendedErrorMsg(tStr.c_str(),wxGetApp().Contact->GetDb(),__TFILE__,__LINE__),
                          wxT("ODBC Error..."),wxOK | wxICON_EXCLAMATION);
@@ -1529,3 +1529,3 @@
             tStr.Printf(wxT("Unable to open the table '%s' as the table\ndoes not appear to exist in the tablespace available\nto the currently logged in user.\n\n"),CONTACT_TABLE_NAME);
-            wxMessageBox(wxDbLogExtendedErrorMsg(tStr.c_str(),wxGetApp().Contact->GetDb(),__FILE__,__LINE__),
+            wxMessageBox(wxDbLogExtendedErrorMsg(tStr.c_str(),wxGetApp().Contact->GetDb(),__TFILE__,__LINE__),
                          wxT("ODBC Error..."),wxOK | wxICON_EXCLAMATION);
@@ -1628,3 +1628,3 @@
         tStr = wxT("ODBC error during Query()\n\n");
-        wxMessageBox(wxDbLogExtendedErrorMsg(tStr.c_str(),wxGetApp().Contact->GetDb(),__FILE__,__LINE__),
+        wxMessageBox(wxDbLogExtendedErrorMsg(tStr.c_str(),wxGetApp().Contact->GetDb(),__TFILE__,__LINE__),
                      wxT("ODBC Error..."),wxOK | wxICON_EXCLAMATION);
@@ -1775,5 +1775,5 @@
 
-        mm      = atoi(tStr.SubString(0,first));
-        dd      = atoi(tStr.SubString(first+1,second));
-        yyyy    = atoi(tStr.SubString(second+1,tStr.Length()-1));
+        mm      = wxAtoi(tStr.SubString(0,first));
+        dd      = wxAtoi(tStr.SubString(first+1,second));
+        yyyy    = wxAtoi(tStr.SubString(second+1,tStr.Length()-1));
 
@@ -1835,4 +1835,4 @@
 
-    wxGetApp().Contact->Contributions = atoi(pContribTxt->GetValue());
-    wxGetApp().Contact->LinesOfCode = atol(pLinesTxt->GetValue());
+    wxGetApp().Contact->Contributions = wxAtoi(pContribTxt->GetValue());
+    wxGetApp().Contact->LinesOfCode = wxAtol(pLinesTxt->GetValue());
 
@@ -1880,3 +1880,3 @@
                     tStr = wxT("A duplicate key value already exists in the table.\nUnable to save record\n\n");
-                    wxMessageBox(wxDbLogExtendedErrorMsg(tStr.c_str(),wxGetApp().Contact->GetDb(),__FILE__,__LINE__),
+                    wxMessageBox(wxDbLogExtendedErrorMsg(tStr.c_str(),wxGetApp().Contact->GetDb(),__TFILE__,__LINE__),
                                  wxT("ODBC Error..."),wxOK | wxICON_EXCLAMATION);
@@ -1888,3 +1888,3 @@
                     tStr = wxT("Database insert failed\n\n");
-                    wxMessageBox(wxDbLogExtendedErrorMsg(tStr.c_str(),wxGetApp().Contact->GetDb(),__FILE__,__LINE__),
+                    wxMessageBox(wxDbLogExtendedErrorMsg(tStr.c_str(),wxGetApp().Contact->GetDb(),__TFILE__,__LINE__),
                                  wxT("ODBC Error..."),wxOK | wxICON_EXCLAMATION);
@@ -1896,3 +1896,3 @@
             wxGetApp().Contact->GetDb()->RollbackTrans();
-            wxGetApp().Contact->whereStr.Printf("NAME = '%s'",saveName.c_str());
+            wxGetApp().Contact->whereStr.Printf(wxT("NAME = '%s'"),saveName.c_str());
             if (!wxGetApp().Contact->UpdateWhere(wxGetApp().Contact->whereStr))
@@ -1901,3 +1901,3 @@
                 tStr = wxT("Database update failed\n\n");
-                wxMessageBox(wxDbLogExtendedErrorMsg(tStr.c_str(),wxGetApp().Contact->GetDb(),__FILE__,__LINE__),
+                wxMessageBox(wxDbLogExtendedErrorMsg(tStr.c_str(),wxGetApp().Contact->GetDb(),__TFILE__,__LINE__),
                              wxT("ODBC Error..."),wxOK | wxICON_EXCLAMATION);
@@ -2008,3 +2008,3 @@
         tStr = wxT("ODBC error during Query()\n\n");
-        wxMessageBox(wxDbLogExtendedErrorMsg(tStr.c_str(),wxGetApp().Contact->GetDb(),__FILE__,__LINE__),
+        wxMessageBox(wxDbLogExtendedErrorMsg(tStr.c_str(),wxGetApp().Contact->GetDb(),__TFILE__,__LINE__),
                      wxT("ODBC Error..."),wxOK | wxICON_EXCLAMATION);
@@ -2103,3 +2103,3 @@
 
-void CparameterDlg::OnCommand(wxWindow& win, wxCommandEvent& event)
+void CparameterDlg::OnCommand(wxWindow& win, wxCommandEvent& WXUNUSED(event))
 {
@@ -2322,3 +2322,3 @@
         tStr = wxT("ODBC error during GetColumns()\n\n");
-        wxMessageBox(wxDbLogExtendedErrorMsg(tStr.c_str(),wxGetApp().Contact->GetDb(),__FILE__,__LINE__),
+        wxMessageBox(wxDbLogExtendedErrorMsg(tStr.c_str(),wxGetApp().Contact->GetDb(),__TFILE__,__LINE__),
                      wxT("ODBC Error..."),wxOK | wxICON_EXCLAMATION);
@@ -2376,3 +2376,3 @@
 
-void CqueryDlg::OnCommand(wxWindow& win, wxCommandEvent& event)
+void CqueryDlg::OnCommand(wxWindow& win, wxCommandEvent& WXUNUSED(event))
 {
@@ -2579,3 +2579,3 @@
 
-void CqueryDlg::OnCloseWindow(wxCloseEvent& event)
+void CqueryDlg::OnCloseWindow(wxCloseEvent& WXUNUSED(event))
 {
@@ -2725,3 +2725,3 @@
             tStr = wxT("ODBC error during Open()\n\n");
-            wxMessageBox(wxDbLogExtendedErrorMsg(tStr.c_str(),wxGetApp().Contact->GetDb(),__FILE__,__LINE__),
+            wxMessageBox(wxDbLogExtendedErrorMsg(tStr.c_str(),wxGetApp().Contact->GetDb(),__TFILE__,__LINE__),
                          wxT("ODBC Error..."),wxOK | wxICON_EXCLAMATION);
@@ -2791,3 +2791,3 @@
     s += pDb->dbInf.dbmsName;
-    s += "\n";
+    s += wxT("\n");
 
@@ -2795,3 +2795,3 @@
     s += pDb->dbInf.dbmsVer;
-    s += "\n";
+    s += wxT("\n");
 
@@ -2799,3 +2799,3 @@
     s += pDb->dbInf.driverName;
-    s += "\n";
+    s += wxT("\n");
 
@@ -2803,3 +2803,3 @@
     s += pDb->dbInf.odbcVer;
-    s += "\n";
+    s += wxT("\n");
 
@@ -2807,3 +2807,3 @@
     s += pDb->dbInf.drvMgrOdbcVer;
-    s += "\n";
+    s += wxT("\n");
 
@@ -2811,3 +2811,3 @@
     s += pDb->dbInf.driverVer;
-    s += "\n";
+    s += wxT("\n");
 
@@ -2815,3 +2815,3 @@
     s += pDb->dbInf.serverName;
-    s += "\n";
+    s += wxT("\n");
 
@@ -2819,3 +2819,3 @@
     s += pDb->dbInf.databaseName;
-    s += "\n";
+    s += wxT("\n");
 
@@ -2823,3 +2823,3 @@
     s += pDb->dbInf.outerJoins;
-    s += "\n";
+    s += wxT("\n");
 
@@ -2827,8 +2827,8 @@
     s += pDb->dbInf.procedureSupport;
-    s += "\n";
+    s += wxT("\n");
 
     if (pDb->dbInf.maxConnections)
-        t.sprintf("%s%d\n", langDBINF_MAX_HDBC, pDb->dbInf.maxConnections);
+        t.sprintf(wxT("%s%d\n"), langDBINF_MAX_HDBC, pDb->dbInf.maxConnections);
     else
-        t.sprintf("%s%s\n", langDBINF_MAX_HDBC, langDBINF_UNLIMITED);
+        t.sprintf(wxT("%s%s\n"), langDBINF_MAX_HDBC, langDBINF_UNLIMITED);
     s += t;
@@ -2836,5 +2836,5 @@
     if (pDb->dbInf.maxStmts)
-        t.sprintf("%s%d\n", langDBINF_MAX_HSTMT, pDb->dbInf.maxStmts);
+        t.sprintf(wxT("%s%d\n"), langDBINF_MAX_HSTMT, pDb->dbInf.maxStmts);
     else
-        t.sprintf("%s%s\n", langDBINF_MAX_HSTMT, langDBINF_UNLIMITED);
+        t.sprintf(wxT("%s%s\n"), langDBINF_MAX_HSTMT, langDBINF_UNLIMITED);
     s += t;
@@ -2848,3 +2848,3 @@
     }
-    s += "\n";
+    s += wxT("\n");
 
@@ -2856,3 +2856,3 @@
     }
-    s += "\n";
+    s += wxT("\n");
 
@@ -2865,3 +2865,3 @@
     }
-    s += "\n";
+    s += wxT("\n");
 
@@ -2874,3 +2874,3 @@
     }
-    s += "\n";
+    s += wxT("\n");
 
@@ -2883,3 +2883,3 @@
     }
-    s += "\n";
+    s += wxT("\n");
 
@@ -2891,3 +2891,3 @@
     }
-    s += "\n";
+    s += wxT("\n");
 
@@ -2895,3 +2895,3 @@
     s += pDb->dbInf.supportIEF;
-    s += "\n";
+    s += wxT("\n");
 
@@ -2909,3 +2909,3 @@
     }
-    s += "\n";
+    s += wxT("\n");
 
@@ -2927,3 +2927,3 @@
     }
-    s += "\n";
+    s += wxT("\n");
 
@@ -2937,12 +2937,12 @@
     if (pDb->dbInf.txnIsolationOptions & SQL_TXN_READ_COMMITTED)
-        {if (comma++) s += ", "; s += langDBINF_READ_COMMITTED;}
+        {if (comma++) s += wxT(", "); s += langDBINF_READ_COMMITTED;}
     if (pDb->dbInf.txnIsolationOptions & SQL_TXN_REPEATABLE_READ)
-        {if (comma++) s += ", "; s += langDBINF_REPEATABLE_READ;}
+        {if (comma++) s += wxT(", "); s += langDBINF_REPEATABLE_READ;}
     if (pDb->dbInf.txnIsolationOptions & SQL_TXN_SERIALIZABLE)
-        {if (comma++) s += ", "; s += langDBINF_SERIALIZABLE;}
+        {if (comma++) s += wxT(", "); s += langDBINF_SERIALIZABLE;}
 #ifdef ODBC_V20
     if (pDb->dbInf.txnIsolationOptions & SQL_TXN_VERSIONING)
-        {if (comma++) s += ", "; s += langDBINF_VERSIONING;}
+        {if (comma++) s += wxT(", "); s += langDBINF_VERSIONING;}
 #endif
-    s += "\n";
+    s += wxT("\n");
 
@@ -2953,18 +2953,18 @@
     if (pDb->dbInf.fetchDirections & SQL_FD_FETCH_PRIOR)
-        {if (comma++) s += ", "; s += langDBINF_PREV;}
+        {if (comma++) s += wxT(", "); s += langDBINF_PREV;}
     if (pDb->dbInf.fetchDirections & SQL_FD_FETCH_FIRST)
-        {if (comma++) s += ", "; s += langDBINF_FIRST;}
+        {if (comma++) s += wxT(", "); s += langDBINF_FIRST;}
     if (pDb->dbInf.fetchDirections & SQL_FD_FETCH_LAST)
-        {if (comma++) s += ", "; s += langDBINF_LAST;}
+        {if (comma++) s += wxT(", "); s += langDBINF_LAST;}
     if (pDb->dbInf.fetchDirections & SQL_FD_FETCH_ABSOLUTE)
-        {if (comma++) s += ", "; s += langDBINF_ABSOLUTE;}
+        {if (comma++) s += wxT(", "); s += langDBINF_ABSOLUTE;}
     if (pDb->dbInf.fetchDirections & SQL_FD_FETCH_RELATIVE)
-        {if (comma++) s += ", "; s += langDBINF_RELATIVE;}
+        {if (comma++) s += wxT(", "); s += langDBINF_RELATIVE;}
 #ifdef ODBC_V20
     if (pDb->dbInf.fetchDirections & SQL_FD_FETCH_RESUME)
-        {if (comma++) s += ", "; s += langDBINF_RESUME;}
+        {if (comma++) s += wxT(", "); s += langDBINF_RESUME;}
 #endif
     if (pDb->dbInf.fetchDirections & SQL_FD_FETCH_BOOKMARK)
-        {if (comma++) s += ", "; s += langDBINF_BOOKMARK;}
-    s += "\n";
+        {if (comma++) s += wxT(", "); s += langDBINF_BOOKMARK;}
+    s += wxT("\n");
 
@@ -2975,6 +2975,6 @@
     if (pDb->dbInf.lockTypes & SQL_LCK_EXCLUSIVE)
-        {if (comma++) s += ", "; s += langDBINF_EXCLUSIVE;}
+        {if (comma++) s += wxT(", "); s += langDBINF_EXCLUSIVE;}
     if (pDb->dbInf.lockTypes & SQL_LCK_UNLOCK)
-        {if (comma++) s += ", "; s += langDBINF_UNLOCK;}
-    s += "\n";
+        {if (comma++) s += wxT(", "); s += langDBINF_UNLOCK;}
+    s += wxT("\n");
 
@@ -2985,10 +2985,10 @@
     if (pDb->dbInf.posOperations & SQL_POS_REFRESH)
-        {if (comma++) s += ", "; s += langDBINF_REFRESH;}
+        {if (comma++) s += wxT(", "); s += langDBINF_REFRESH;}
     if (pDb->dbInf.posOperations & SQL_POS_UPDATE)
-        {if (comma++) s += ", "; s += langDBINF_UPD;}
+        {if (comma++) s += wxT(", "); s += langDBINF_UPD;}
     if (pDb->dbInf.posOperations & SQL_POS_DELETE)
-        {if (comma++) s += ", "; s += langDBINF_DEL;}
+        {if (comma++) s += wxT(", "); s += langDBINF_DEL;}
     if (pDb->dbInf.posOperations & SQL_POS_ADD)
-        {if (comma++) s += ", "; s += langDBINF_ADD;}
-    s += "\n";
+        {if (comma++) s += wxT(", "); s += langDBINF_ADD;}
+    s += wxT("\n");
 
@@ -2999,6 +2999,6 @@
     if (pDb->dbInf.posStmts & SQL_PS_POSITIONED_UPDATE)
-        {if (comma++) s += ", "; s += langDBINF_POS_UPD;}
+        {if (comma++) s += wxT(", "); s += langDBINF_POS_UPD;}
     if (pDb->dbInf.posStmts & SQL_PS_SELECT_FOR_UPDATE)
-        {if (comma++) s += ", "; s += langDBINF_SELECT_FOR_UPD;}
-    s += "\n";
+        {if (comma++) s += wxT(", "); s += langDBINF_SELECT_FOR_UPD;}
+    s += wxT("\n");
 
@@ -3009,8 +3009,8 @@
     if (pDb->dbInf.scrollConcurrency & SQL_SCCO_LOCK)
-        {if (comma++) s += ", "; s += langDBINF_LOCK;}
+        {if (comma++) s += wxT(", "); s += langDBINF_LOCK;}
     if (pDb->dbInf.scrollConcurrency & SQL_SCCO_OPT_ROWVER)
-        {if (comma++) s += ", "; s += langDBINF_OPT_ROWVER;}
+        {if (comma++) s += wxT(", "); s += langDBINF_OPT_ROWVER;}
     if (pDb->dbInf.scrollConcurrency & SQL_SCCO_OPT_VALUES)
-        {if (comma++) s += ", "; s += langDBINF_OPT_VALUES;}
-    s += "\n";
+        {if (comma++) s += wxT(", "); s += langDBINF_OPT_VALUES;}
+    s += wxT("\n");
 
@@ -3021,10 +3021,10 @@
     if (pDb->dbInf.scrollOptions & SQL_SO_STATIC)
-        {if (comma++) s += ", "; s += langDBINF_STATIC;}
+        {if (comma++) s += wxT(", "); s += langDBINF_STATIC;}
     if (pDb->dbInf.scrollOptions & SQL_SO_KEYSET_DRIVEN)
-        {if (comma++) s += ", "; s += langDBINF_KEYSET_DRIVEN;}
+        {if (comma++) s += wxT(", "); s += langDBINF_KEYSET_DRIVEN;}
     if (pDb->dbInf.scrollOptions & SQL_SO_DYNAMIC)
-        {if (comma++) s += ", "; s += langDBINF_DYNAMIC;}
+        {if (comma++) s += wxT(", "); s += langDBINF_DYNAMIC;}
     if (pDb->dbInf.scrollOptions & SQL_SO_MIXED)
-        {if (comma++) s += ", "; s += langDBINF_MIXED;}
-    s += "\n";
+        {if (comma++) s += wxT(", "); s += langDBINF_MIXED;}
+    s += wxT("\n");
 
@@ -3035,6 +3035,6 @@
     if (pDb->dbInf.staticSensitivity & SQL_SS_DELETIONS)
-        {if (comma++) s += ", "; s += langDBINF_DELETIONS;}
+        {if (comma++) s += wxT(", "); s += langDBINF_DELETIONS;}
     if (pDb->dbInf.staticSensitivity & SQL_SS_UPDATES)
-        {if (comma++) s += ", "; s += langDBINF_UPDATES;}
-    s += "\n";
+        {if (comma++) s += wxT(", "); s += langDBINF_UPDATES;}
+    s += wxT("\n");
 #ifdef __VMS__
@@ -3053,5 +3053,5 @@
     }
-    s += "\n";
+    s += wxT("\n");
 
-    t.sprintf("%s%d\n", langDBINF_LOGIN_TIMEOUT, pDb->dbInf.loginTimeout);
+    t.sprintf(wxT("%s%lu\n"), langDBINF_LOGIN_TIMEOUT, pDb->dbInf.loginTimeout);
     s += t;
@@ -3061,5 +3061,5 @@
     {
-        s += "\n";
+        s += wxT("\n");
         s += langDBINF_ORACLE_BANNER;
-        s += "\n";
+        s += wxT("\n");
 
@@ -3068,3 +3068,3 @@
         ULONG dbBlockGets;
-        pDb->ExecSql("SELECT VALUE FROM V$SYSSTAT WHERE NAME = 'db block gets'");
+        pDb->ExecSql(wxT("SELECT VALUE FROM V$SYSSTAT WHERE NAME = 'db block gets'"));
         pDb->GetNext();
@@ -3072,3 +3072,3 @@
         {
-            t.sprintf("%s: %lu\n", langDBINF_DB_BLOCK_GETS, dbBlockGets);
+            t.sprintf(wxT("%s: %lu\n"), langDBINF_DB_BLOCK_GETS, dbBlockGets);
             s += t;
@@ -3077,3 +3077,3 @@
         ULONG consistentGets;
-        pDb->ExecSql("SELECT VALUE FROM V$SYSSTAT WHERE NAME = 'consistent gets'");
+        pDb->ExecSql(wxT("SELECT VALUE FROM V$SYSSTAT WHERE NAME = 'consistent gets'"));
         pDb->GetNext();
@@ -3081,3 +3081,3 @@
         {
-            t.sprintf("%s: %lu\n", langDBINF_CONSISTENT_GETS, consistentGets);
+            t.sprintf(wxT("%s: %lu\n"), langDBINF_CONSISTENT_GETS, consistentGets);
             s += t;
@@ -3086,3 +3086,3 @@
         ULONG physReads;
-        pDb->ExecSql("SELECT VALUE FROM V$SYSSTAT WHERE NAME = 'physical reads'");
+        pDb->ExecSql(wxT("SELECT VALUE FROM V$SYSSTAT WHERE NAME = 'physical reads'"));
         pDb->GetNext();
@@ -3090,3 +3090,3 @@
         {
-            t.sprintf("%s: %lu\n", langDBINF_PHYSICAL_READS, physReads);
+            t.sprintf(wxT("%s: %lu\n"), langDBINF_PHYSICAL_READS, physReads);
             s += t;
@@ -3095,3 +3095,3 @@
         ULONG hitRatio = (ULONG)((1.00 - ((float)physReads / (float)(dbBlockGets + consistentGets))) * 100.00);
-        t.sprintf("*** %s: %lu%%\n", langDBINF_CACHE_HIT_RATIO, hitRatio);
+        t.sprintf(wxT("*** %s: %lu%%\n"), langDBINF_CACHE_HIT_RATIO, hitRatio);
         s += t;
@@ -3099,8 +3099,8 @@
         // Tablespace information
-        s += "\n";
+        s += wxT("\n");
         s += langDBINF_TABLESPACE_IO;
-        s += "\n";
+        s += wxT("\n");
         ULONG physWrites;
         char tablespaceName[257];
-        pDb->ExecSql("SELECT NAME,PHYRDS,PHYWRTS FROM V$DATAFILE, V$FILESTAT WHERE V$DATAFILE.FILE# = V$FILESTAT.FILE#");
+        pDb->ExecSql(wxT("SELECT NAME,PHYRDS,PHYWRTS FROM V$DATAFILE, V$FILESTAT WHERE V$DATAFILE.FILE# = V$FILESTAT.FILE#"));
         while (pDb->GetNext())
@@ -3110,3 +3110,3 @@
             pDb->GetData(3, SQL_C_ULONG, &physWrites,    0,   &cb);
-            t.sprintf("%s\n\t%s: %lu\t%s: %lu\n", tablespaceName,
+            t.sprintf(wxT("%s\n\t%s: %lu\t%s: %lu\n"), tablespaceName,
                 langDBINF_PHYSICAL_READS, physReads, langDBINF_PHYSICAL_WRITES, physWrites);
@@ -3115,3 +3115,3 @@
 
-        s += "\n";
+        s += wxT("\n");
     }
@@ -3148,3 +3148,3 @@
     grid->RegisterDataType(wxGRID_VALUE_DATETIME,
-                             new wxGridCellDateTimeRenderer(_T("%d %b %Y")),
+                             new wxGridCellDateTimeRenderer(wxT("%d %b %Y")),
                              new wxGridCellTextEditor);
@@ -3198,3 +3198,3 @@
             tStr.Printf(wxT("Unable to open the table '%s'.\n\n"),CONTACT_TABLE_NAME);
-            wxMessageBox(wxDbLogExtendedErrorMsg(tStr.c_str(),wxGetApp().Contact->GetDb(),__FILE__,__LINE__),
+            wxMessageBox(wxDbLogExtendedErrorMsg(tStr.c_str(),wxGetApp().Contact->GetDb(),__TFILE__,__LINE__),
                          wxT("ODBC Error..."),wxOK | wxICON_EXCLAMATION);
@@ -3213,3 +3213,3 @@
         tStr = wxT("ODBC error during Query()\n\n");
-        wxMessageBox(wxDbLogExtendedErrorMsg(tStr.c_str(),wxGetApp().Contact->GetDb(),__FILE__,__LINE__),
+        wxMessageBox(wxDbLogExtendedErrorMsg(tStr.c_str(),wxGetApp().Contact->GetDb(),__TFILE__,__LINE__),
                      wxT("ODBC Error..."),wxOK | wxICON_EXCLAMATION);
diff -bu1 -r wxWindows/samples/db/dbtest.h wxWin/samples/db/dbtest.h
--- wxWindows/samples/db/dbtest.h	2003-06-24 23:00:40.000000000 +0200
+++ wxWin/samples/db/dbtest.h	2004-01-22 13:37:18.000000000 +0100
@@ -21,3 +21,3 @@
 // ID for the menu quit command
-#define FILE_CREATE           100
+#define FILE_CREATE_ID        100
 #define FILE_RECREATE_TABLE   110
@@ -41,3 +41,3 @@
 // Name of the table to be created/opened
-const wxChar     CONTACT_TABLE_NAME[]       = "contacts";
+const wxChar     CONTACT_TABLE_NAME[]       = wxT("contacts");
 
@@ -53,3 +53,3 @@
 
-const wxChar     PARAM_FILENAME[]           = "dbtest.cfg";
+const wxChar     PARAM_FILENAME[]           = wxT("dbtest.cfg");
 
@@ -462,11 +462,11 @@
 // Query strings
-wxChar * const langQRY_EQ           = "column = column | value";
-wxChar * const langQRY_LT           = "column < column | value";
-wxChar * const langQRY_GT           = "column > column | value";
-wxChar * const langQRY_LE           = "column <= column | value";
-wxChar * const langQRY_GE           = "column >= column | value";
-wxChar * const langQRY_BEGINS       = "columns that BEGIN with the string entered";
-wxChar * const langQRY_CONTAINS     = "columns that CONTAIN the string entered";
-wxChar * const langQRY_LIKE         = "% matches 0 or more of any char; _ matches 1 char";
-wxChar * const langQRY_BETWEEN      = "column BETWEEN value AND value";
+wxChar * const langQRY_EQ           = wxT("column = column | value");
+wxChar * const langQRY_LT           = wxT("column < column | value");
+wxChar * const langQRY_GT           = wxT("column > column | value");
+wxChar * const langQRY_LE           = wxT("column <= column | value");
+wxChar * const langQRY_GE           = wxT("column >= column | value");
+wxChar * const langQRY_BEGINS       = wxT("columns that BEGIN with the string entered");
+wxChar * const langQRY_CONTAINS     = wxT("columns that CONTAIN the string entered");
+wxChar * const langQRY_LIKE         = wxT("% matches 0 or more of any char; _ matches 1 char");
+wxChar * const langQRY_BETWEEN      = wxT("column BETWEEN value AND value");
 
@@ -562,93 +562,93 @@
 
-char * const langNO                        = "No";
-char * const langYES                       = "Yes";
-char * const langDBINF_DB_NAME             = "Database Name = ";
-char * const langDBINF_DB_VER              = "Database Version = ";
-char * const langDBINF_DRIVER_NAME         = "Driver Name = ";
-char * const langDBINF_DRIVER_ODBC_VER     = "Driver ODBC Version = ";
-char * const langDBINF_DRIVER_MGR_ODBC_VER = "Driver Manager ODBC Version = ";
-char * const langDBINF_DRIVER_VER          = "Driver Version = ";
-char * const langDBINF_SERVER_NAME         = "Server Name = ";
-char * const langDBINF_FILENAME            = "Filename = ";
-char * const langDBINF_OUTER_JOINS         = "Outer Joins = ";
-char * const langDBINF_STORED_PROC         = "Stored Procedures = ";
-char * const langDBINF_MAX_HDBC            = "Max # of Db connections = ";
-char * const langDBINF_MAX_HSTMT           = "Max # of cursors (per db connection) = ";
-char * const langDBINF_UNLIMITED           = "Unlimited or Unknown"; 
-char * const langDBINF_API_LVL             = "ODBC API conformance level = ";
-char * const langDBINF_CLI_LVL             = "Client (SAG) conformance level = ";
-char * const langDBINF_SQL_LVL             = "SQL conformance level = ";
-char * const langDBINF_COMMIT_BEHAVIOR     = "Commit Behavior = ";
-char * const langDBINF_ROLLBACK_BEHAVIOR   = "Rollback Behavior = ";
-char * const langDBINF_SUPP_NOT_NULL       = "Support NOT NULL clause = ";
-char * const langDBINF_SUPP_IEF            = "Support IEF = ";
-char * const langDBINF_TXN_ISOLATION       = "Transaction Isolation Level (default) = ";
-char * const langDBINF_TXN_ISOLATION_CURR  = "Transaction Isolation Level (current) = ";
-char * const langDBINF_TXN_ISOLATION_OPTS  = "Transaction Isolation Options Available = ";
-char * const langDBINF_FETCH_DIRS          = "Fetch Directions = ";
-char * const langDBINF_LOCK_TYPES          = "Lock Types (SQLSetPos) = ";
-char * const langDBINF_POS_OPERS           = "Position Operations (SQLSetPos) = ";
-char * const langDBINF_POS_STMTS           = "Position Statements = ";
-char * const langDBINF_SCROLL_CONCURR      = "Concurrency Options (scrollable cursors) = ";
-char * const langDBINF_SCROLL_OPTS         = "Scroll Options (scrollable cursors) = ";
-char * const langDBINF_STATIC_SENS         = "Static Sensitivity = ";
-char * const langDBINF_TXN_CAPABLE         = "Transaction Support = ";
-char * const langDBINF_LOGIN_TIMEOUT       = "Login Timeout = ";
-char * const langDBINF_NONE                = "None";
-char * const langDBINF_LEVEL1              = "Level 1";
-char * const langDBINF_LEVEL2              = "Level 2";
-char * const langDBINF_NOT_COMPLIANT       = "Not Compliant";
-char * const langDBINF_COMPLIANT           = "Compliant";
-char * const langDBINF_MIN_GRAMMAR         = "Minimum Grammer";
-char * const langDBINF_CORE_GRAMMAR        = "Core Grammer";
-char * const langDBINF_EXT_GRAMMAR         = "Extended Grammer";
-char * const langDBINF_DELETE_CURSORS      = "Delete cursors";
-char * const langDBINF_CLOSE_CURSORS       = "Close cursors";
-char * const langDBINF_PRESERVE_CURSORS    = "Preserve cursors";
-char * const langDBINF_READ_UNCOMMITTED    = "Read Uncommitted";
-char * const langDBINF_READ_COMMITTED      = "Read Committed";
-char * const langDBINF_REPEATABLE_READ     = "Repeatable Read";
-char * const langDBINF_SERIALIZABLE        = "Serializable";
-char * const langDBINF_VERSIONING          = "Versioning";
-char * const langDBINF_NEXT                = "Next";
-char * const langDBINF_PREV                = "Prev";
-char * const langDBINF_FIRST               = "First";
-char * const langDBINF_LAST                = "Last";
-char * const langDBINF_ABSOLUTE            = "Absolute";
-char * const langDBINF_RELATIVE            = "Relative";
-char * const langDBINF_RESUME              = "Resume";
-char * const langDBINF_BOOKMARK            = "Bookmark";
-char * const langDBINF_NO_CHANGE           = "No Change";
-char * const langDBINF_EXCLUSIVE           = "Exclusive";
-char * const langDBINF_UNLOCK              = "Unlock";
-char * const langDBINF_POSITION            = "Position";
-char * const langDBINF_REFRESH             = "Refresh";
-char * const langDBINF_UPD                 = "Upd";
-char * const langDBINF_DEL                 = "Del";
-char * const langDBINF_ADD                 = "Add";
-char * const langDBINF_POS_DEL             = "Pos Delete";
-char * const langDBINF_POS_UPD             = "Pos Update";
-char * const langDBINF_SELECT_FOR_UPD      = "Select For Update";
-char * const langDBINF_READ_ONLY           = "Read Only";
-char * const langDBINF_LOCK                = "Lock";
-char * const langDBINF_OPT_ROWVER          = "Opt. Rowver";
-char * const langDBINF_OPT_VALUES          = "Opt. Values";
-char * const langDBINF_FWD_ONLY            = "Fwd Only";
-char * const langDBINF_STATIC              = "Static";
-char * const langDBINF_KEYSET_DRIVEN       = "Keyset Driven";
-char * const langDBINF_DYNAMIC             = "Dynamic";
-char * const langDBINF_MIXED               = "Mixed";
-char * const langDBINF_ADDITIONS           = "Additions";
-char * const langDBINF_DELETIONS           = "Deletions";
-char * const langDBINF_UPDATES             = "Updates";
-char * const langDBINF_DML_ONLY            = "DML Only";
-char * const langDBINF_DDL_COMMIT          = "DDL Commit";
-char * const langDBINF_DDL_IGNORE          = "DDL Ignore";
-char * const langDBINF_DDL_AND_DML         = "DDL and DML";
-char * const langDBINF_ORACLE_BANNER       = ">>> ORACLE STATISTICS AND TUNING INFORMATION <<<";
-char * const langDBINF_DB_BLOCK_GETS       = "DB block gets";
-char * const langDBINF_CONSISTENT_GETS     = "Consistent gets";
-char * const langDBINF_PHYSICAL_READS      = "Physical reads";
-char * const langDBINF_CACHE_HIT_RATIO     = "Cache hit ratio";
-char * const langDBINF_TABLESPACE_IO       = "TABLESPACE I/O LEVELS";
-char * const langDBINF_PHYSICAL_WRITES     = "Physical writes";
+wxChar * const langNO                        = wxT("No");
+wxChar * const langYES                       = wxT("Yes");
+wxChar * const langDBINF_DB_NAME             = wxT("Database Name = ");
+wxChar * const langDBINF_DB_VER              = wxT("Database Version = ");
+wxChar * const langDBINF_DRIVER_NAME         = wxT("Driver Name = ");
+wxChar * const langDBINF_DRIVER_ODBC_VER     = wxT("Driver ODBC Version = ");
+wxChar * const langDBINF_DRIVER_MGR_ODBC_VER = wxT("Driver Manager ODBC Version = ");
+wxChar * const langDBINF_DRIVER_VER          = wxT("Driver Version = ");
+wxChar * const langDBINF_SERVER_NAME         = wxT("Server Name = ");
+wxChar * const langDBINF_FILENAME            = wxT("Filename = ");
+wxChar * const langDBINF_OUTER_JOINS         = wxT("Outer Joins = ");
+wxChar * const langDBINF_STORED_PROC         = wxT("Stored Procedures = ");
+wxChar * const langDBINF_MAX_HDBC            = wxT("Max # of Db connections = ");
+wxChar * const langDBINF_MAX_HSTMT           = wxT("Max # of cursors (per db connection) = ");
+wxChar * const langDBINF_UNLIMITED           = wxT("Unlimited or Unknown"); 
+wxChar * const langDBINF_API_LVL             = wxT("ODBC API conformance level = ");
+wxChar * const langDBINF_CLI_LVL             = wxT("Client (SAG) conformance level = ");
+wxChar * const langDBINF_SQL_LVL             = wxT("SQL conformance level = ");
+wxChar * const langDBINF_COMMIT_BEHAVIOR     = wxT("Commit Behavior = ");
+wxChar * const langDBINF_ROLLBACK_BEHAVIOR   = wxT("Rollback Behavior = ");
+wxChar * const langDBINF_SUPP_NOT_NULL       = wxT("Support NOT NULL clause = ");
+wxChar * const langDBINF_SUPP_IEF            = wxT("Support IEF = ");
+wxChar * const langDBINF_TXN_ISOLATION       = wxT("Transaction Isolation Level (default) = ");
+wxChar * const langDBINF_TXN_ISOLATION_CURR  = wxT("Transaction Isolation Level (current) = ");
+wxChar * const langDBINF_TXN_ISOLATION_OPTS  = wxT("Transaction Isolation Options Available = ");
+wxChar * const langDBINF_FETCH_DIRS          = wxT("Fetch Directions = ");
+wxChar * const langDBINF_LOCK_TYPES          = wxT("Lock Types (SQLSetPos) = ");
+wxChar * const langDBINF_POS_OPERS           = wxT("Position Operations (SQLSetPos) = ");
+wxChar * const langDBINF_POS_STMTS           = wxT("Position Statements = ");
+wxChar * const langDBINF_SCROLL_CONCURR      = wxT("Concurrency Options (scrollable cursors) = ");
+wxChar * const langDBINF_SCROLL_OPTS         = wxT("Scroll Options (scrollable cursors) = ");
+wxChar * const langDBINF_STATIC_SENS         = wxT("Static Sensitivity = ");
+wxChar * const langDBINF_TXN_CAPABLE         = wxT("Transaction Support = ");
+wxChar * const langDBINF_LOGIN_TIMEOUT       = wxT("Login Timeout = ");
+wxChar * const langDBINF_NONE                = wxT("None");
+wxChar * const langDBINF_LEVEL1              = wxT("Level 1");
+wxChar * const langDBINF_LEVEL2              = wxT("Level 2");
+wxChar * const langDBINF_NOT_COMPLIANT       = wxT("Not Compliant");
+wxChar * const langDBINF_COMPLIANT           = wxT("Compliant");
+wxChar * const langDBINF_MIN_GRAMMAR         = wxT("Minimum Grammer");
+wxChar * const langDBINF_CORE_GRAMMAR        = wxT("Core Grammer");
+wxChar * const langDBINF_EXT_GRAMMAR         = wxT("Extended Grammer");
+wxChar * const langDBINF_DELETE_CURSORS      = wxT("Delete cursors");
+wxChar * const langDBINF_CLOSE_CURSORS       = wxT("Close cursors");
+wxChar * const langDBINF_PRESERVE_CURSORS    = wxT("Preserve cursors");
+wxChar * const langDBINF_READ_UNCOMMITTED    = wxT("Read Uncommitted");
+wxChar * const langDBINF_READ_COMMITTED      = wxT("Read Committed");
+wxChar * const langDBINF_REPEATABLE_READ     = wxT("Repeatable Read");
+wxChar * const langDBINF_SERIALIZABLE        = wxT("Serializable");
+wxChar * const langDBINF_VERSIONING          = wxT("Versioning");
+wxChar * const langDBINF_NEXT                = wxT("Next");
+wxChar * const langDBINF_PREV                = wxT("Prev");
+wxChar * const langDBINF_FIRST               = wxT("First");
+wxChar * const langDBINF_LAST                = wxT("Last");
+wxChar * const langDBINF_ABSOLUTE            = wxT("Absolute");
+wxChar * const langDBINF_RELATIVE            = wxT("Relative");
+wxChar * const langDBINF_RESUME              = wxT("Resume");
+wxChar * const langDBINF_BOOKMARK            = wxT("Bookmark");
+wxChar * const langDBINF_NO_CHANGE           = wxT("No Change");
+wxChar * const langDBINF_EXCLUSIVE           = wxT("Exclusive");
+wxChar * const langDBINF_UNLOCK              = wxT("Unlock");
+wxChar * const langDBINF_POSITION            = wxT("Position");
+wxChar * const langDBINF_REFRESH             = wxT("Refresh");
+wxChar * const langDBINF_UPD                 = wxT("Upd");
+wxChar * const langDBINF_DEL                 = wxT("Del");
+wxChar * const langDBINF_ADD                 = wxT("Add");
+wxChar * const langDBINF_POS_DEL             = wxT("Pos Delete");
+wxChar * const langDBINF_POS_UPD             = wxT("Pos Update");
+wxChar * const langDBINF_SELECT_FOR_UPD      = wxT("Select For Update");
+wxChar * const langDBINF_READ_ONLY           = wxT("Read Only");
+wxChar * const langDBINF_LOCK                = wxT("Lock");
+wxChar * const langDBINF_OPT_ROWVER          = wxT("Opt. Rowver");
+wxChar * const langDBINF_OPT_VALUES          = wxT("Opt. Values");
+wxChar * const langDBINF_FWD_ONLY            = wxT("Fwd Only");
+wxChar * const langDBINF_STATIC              = wxT("Static");
+wxChar * const langDBINF_KEYSET_DRIVEN       = wxT("Keyset Driven");
+wxChar * const langDBINF_DYNAMIC             = wxT("Dynamic");
+wxChar * const langDBINF_MIXED               = wxT("Mixed");
+wxChar * const langDBINF_ADDITIONS           = wxT("Additions");
+wxChar * const langDBINF_DELETIONS           = wxT("Deletions");
+wxChar * const langDBINF_UPDATES             = wxT("Updates");
+wxChar * const langDBINF_DML_ONLY            = wxT("DML Only");
+wxChar * const langDBINF_DDL_COMMIT          = wxT("DDL Commit");
+wxChar * const langDBINF_DDL_IGNORE          = wxT("DDL Ignore");
+wxChar * const langDBINF_DDL_AND_DML         = wxT("DDL and DML");
+wxChar * const langDBINF_ORACLE_BANNER       = wxT(">>> ORACLE STATISTICS AND TUNING INFORMATION <<<");
+wxChar * const langDBINF_DB_BLOCK_GETS       = wxT("DB block gets");
+wxChar * const langDBINF_CONSISTENT_GETS     = wxT("Consistent gets");
+wxChar * const langDBINF_PHYSICAL_READS      = wxT("Physical reads");
+wxChar * const langDBINF_CACHE_HIT_RATIO     = wxT("Cache hit ratio");
+wxChar * const langDBINF_TABLESPACE_IO       = wxT("TABLESPACE I/O LEVELS");
+wxChar * const langDBINF_PHYSICAL_WRITES     = wxT("Physical writes");
Only in wxWin/samples/db: listdb.bak
diff -bu1 -r wxWindows/samples/db/listdb.cpp wxWin/samples/db/listdb.cpp
--- wxWindows/samples/db/listdb.cpp	2002-09-01 01:36:13.000000000 +0200
+++ wxWin/samples/db/listdb.cpp	2004-01-22 14:06:41.000000000 +0100
@@ -91,3 +91,3 @@
  */
-const char *GetExtendedDBErrorMsg2(wxDb *pDb, char *ErrFile, int ErrLine)
+const wxChar *GetExtendedDBErrorMsg2(wxDb *pDb, wxChar *ErrFile, int ErrLine)
 {
@@ -309,3 +309,3 @@
         tStr.Printf(wxT("Unable to open the table '%s'."),tableName);
-        tStr += GetExtendedDBErrorMsg2(pDb,__FILE__,__LINE__);
+        tStr += GetExtendedDBErrorMsg2(pDb,__TFILE__,__LINE__);
         wxMessageBox(tStr,wxT("ODBC Error..."));
@@ -341,3 +341,3 @@
             if (lookup2->GetNext())
-                maxColLen = col1Len = atoi(lookup2->lookupCol1);
+                maxColLen = col1Len = wxAtoi(lookup2->lookupCol1);
             else
@@ -432,3 +432,3 @@
 
-void ClookUpDlg::OnCommand(wxWindow& win, wxCommandEvent& event)
+void ClookUpDlg::OnCommand(wxWindow& win, wxCommandEvent& WXUNUSED(event))
 {
diff -bu1 -r wxWindows/samples/db/listdb.h wxWin/samples/db/listdb.h
--- wxWindows/samples/db/listdb.h	2003-06-24 23:00:40.000000000 +0200
+++ wxWin/samples/db/listdb.h	2004-01-22 14:31:45.000000000 +0100
@@ -34,3 +34,3 @@
 
-        Clookup(wxChar *tblName, wxChar *colName, wxDb *pDb, const wxString &defDir="");
+        Clookup(wxChar *tblName, wxChar *colName, wxDb *pDb, const wxString &defDir=wxT(""));
 
@@ -47,3 +47,3 @@
 
-        Clookup2(wxChar *tblName, wxChar *colName1, wxChar *colName2, wxDb *pDb, const wxString &defDir="");
+        Clookup2(wxChar *tblName, wxChar *colName1, wxChar *colName2, wxDb *pDb, const wxString &defDir=wxT(""));
 

 	  	 

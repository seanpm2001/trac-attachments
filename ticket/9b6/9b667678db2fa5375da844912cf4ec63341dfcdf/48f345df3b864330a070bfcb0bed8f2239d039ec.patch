Index: build/bakefiles/files.bkl
===================================================================
--- build/bakefiles/files.bkl	(revision 62257)
+++ build/bakefiles/files.bkl	(working copy)
@@ -1675,6 +1675,7 @@
     src/msw/msgdlg.cpp
     src/msw/nativdlg.cpp
     src/msw/nativewin.cpp
+    src/msw/nonownedwnd.cpp
     src/msw/notebook.cpp
     src/msw/ole/access.cpp
     src/msw/ownerdrw.cpp
@@ -1747,6 +1748,7 @@
     wx/msw/missing.h
     wx/msw/msgdlg.h
     wx/msw/msvcrt.h
+    wx/msw/nonownerwnd.h
     wx/msw/notebook.h
     wx/msw/ole/access.h
     wx/msw/ole/dataform.h
Index: include/wx/msw/nonownedwnd.h
===================================================================
--- include/wx/msw/nonownedwnd.h	(revision 0)
+++ include/wx/msw/nonownedwnd.h	(revision 0)
@@ -0,0 +1,61 @@
+///////////////////////////////////////////////////////////////////////////////
+// Name:        wx/msw/nonownedwnd.h
+// Purpose:     wxNonOwnedWindowMSW is the MSW implementation of wxNonOwnedWindow
+// Author:      Trigve Siver
+// Modified by:
+// Created:     05.10.09
+// RCS-ID:      $Id: toplevel.h 58757 2009-02-08 11:45:59Z VZ $
+// Copyright:   
+// Licence:     wxWindows licence
+///////////////////////////////////////////////////////////////////////////////
+
+#ifndef _WX_MSW_NONOWNEDWND_H_
+#define _WX_MSW_NONOWNEDWND_H_
+
+// ----------------------------------------------------------------------------
+// wxNonOwnedWindowMSW
+// ----------------------------------------------------------------------------
+
+class WXDLLIMPEXP_CORE wxNonOwnedWindowMSW : public wxNonOwnedWindowBase
+{
+public:
+    // construction
+    wxNonOwnedWindowMSW()
+    {
+        Init();
+    }
+
+    wxNonOwnedWindowMSW(wxWindow *parent,
+        wxWindowID id,
+        const wxPoint& pos = wxDefaultPosition,
+        const wxSize& size = wxDefaultSize,
+        long style = 0,
+        const wxString& name = wxPanelNameStr)
+    {
+        Init();
+
+        Create(parent, id, pos, size, style, name);
+    }
+
+    bool Create(wxWindow *parent,
+        wxWindowID id,
+        const wxPoint& pos = wxDefaultPosition,
+        const wxSize& size = wxDefaultSize,
+        long style = 0,
+        const wxString& name = wxPanelNameStr);
+
+    virtual bool Show(bool show = true);
+    virtual void Raise();
+    virtual void Lower();
+
+    // translate wxWidgets flags to Windows ones
+    virtual WXDWORD MSWGetStyle(long flags, WXDWORD *exstyle) const;
+
+protected:
+    // common part of all ctors
+    void Init();
+
+    bool CreateNonOwned(const wxPoint& pos, const wxSize& size, const wxString& title = wxEmptyString);
+};
+
+#endif // _WX_MSW_NONOWNEDWND_H_
Index: include/wx/nonownedwnd.h
===================================================================
--- include/wx/nonownedwnd.h	(revision 62257)
+++ include/wx/nonownedwnd.h	(working copy)
@@ -12,10 +12,37 @@
 #ifndef _WX_NONOWNEDWND_H_
 #define _WX_NONOWNEDWND_H_
 
+#include "wx/window.h"
+
+//-----------------------------------------------------------------------------
+// wxNonOwnedWindowBase
+//-----------------------------------------------------------------------------
+// This class represents base class for "non-owned" windows. A window is owned by another
+// window if it has a parent and is positioned within the parent. For example,
+// wxFrame is non-owned, because even though it can have a parent, it's
+// location is independent of it.  It is the base class for wxTopLevelWindow
+// and wxPopupWindow.
+class WXDLLIMPEXP_CORE wxNonOwnedWindowBase : public wxWindow
+{
+public:
+    // construction
+    wxNonOwnedWindowBase() {}
+    virtual ~wxNonOwnedWindowBase() {}
+
+    // pure virtuals
+    virtual bool Show(bool show = true) = 0;
+    virtual void Raise() = 0;
+    virtual void Lower() = 0;
+};
+
+
 #if defined(__WXDFB__)
     #include "wx/dfb/nonownedwnd.h"
 #elif defined(__WXMAC__)
     #include "wx/osx/nonownedwnd.h"
+#elif defined(__WXMSW__)
+    #include "wx/msw/nonownedwnd.h"
+    #define wxNonOwnedWindow wxNonOwnedWindowMSW
 #else
     // other ports can derive both wxTLW and wxPopupWindow directly
     // from wxWindow:
Index: src/msw/nonownedwnd.cpp
===================================================================
--- src/msw/nonownedwnd.cpp	(revision 0)
+++ src/msw/nonownedwnd.cpp	(revision 0)
@@ -0,0 +1,86 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        src/msw/nonownedwnd.cpp
+// Purpose:     Implements wxNonOwnedWindow for MSW
+// Author:      Trigve Siver
+// Created:     05/10/09
+// Id:          $Id: toplvcmn.cpp 61995 2009-09-21 13:11:26Z SC $
+// Copyright:   
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+// For compilers that support pre-compilation, includes "wx.h".
+#include "wx/wxprec.h"
+
+#ifdef __BORLANDC__
+#pragma hdrstop
+#endif
+
+#include "wx/nonownedwnd.h"
+
+#ifndef WX_PRECOMP
+#endif // WX_PRECOMP
+
+// ----------------------------------------------------------------------------
+// wxNonOwnedWindowMSW creation
+// ----------------------------------------------------------------------------
+
+bool wxNonOwnedWindowMSW::Create(wxWindow *parent,
+            wxWindowID id,
+            const wxPoint& pos,
+            const wxSize& size,
+            long style,
+            const wxString& name)
+{
+    CreateBase(parent, id, pos, size, style, wxDefaultValidator, name);
+    return CreateNonOwned(pos, size);
+}
+
+bool wxNonOwnedWindowMSW::CreateNonOwned(const wxPoint& pos, const wxSize& size, const wxString& title)
+{
+    WXDWORD exflags;
+    WXDWORD flags = MSWGetCreateWindowFlags(&exflags);
+
+#ifndef __WXWINCE__
+    if ( wxTheApp->GetLayoutDirection() == wxLayout_RightToLeft )
+        exflags |= WS_EX_LAYOUTRTL;
+#endif
+
+    return MSWCreate(MSWGetRegisteredClassName(),
+        title.wx_str(), pos, size, flags, exflags);
+}
+
+bool wxNonOwnedWindowMSW::Show(bool show)
+{
+    return wxWindow::Show(show);
+}
+
+void wxNonOwnedWindowMSW::Raise()
+{
+    wxWindow::Raise();
+}
+
+void wxNonOwnedWindowMSW::Lower()
+{
+    return wxWindow::Lower();
+}
+
+WXDWORD wxNonOwnedWindowMSW::MSWGetStyle(long WXUNUSED(flags), WXDWORD *exflags) const
+{
+    // let the base class deal with the common styles but fix the ones which
+    // don't make sense for us (we also deal with the borders ourselves)
+    WXDWORD msflags = wxWindow::MSWGetStyle( wxBORDER_NONE, exflags
+        ) & ~WS_CHILD | WS_VISIBLE;
+
+#if !defined(__POCKETPC__) && !defined(__WXWINCE__)
+    msflags |= WS_POPUP;
+#endif // !__POCKETPC__ && !__WXWINCE__
+
+    if ( exflags )
+        *exflags |= WS_EX_TOPMOST;
+
+    return msflags;
+}
+
+void wxNonOwnedWindowMSW::Init()
+{
+}
Index: src/msw/toplevel.cpp
===================================================================
--- src/msw/toplevel.cpp	(revision 62257)
+++ src/msw/toplevel.cpp	(working copy)
@@ -454,18 +454,7 @@
                                       const wxPoint& pos,
                                       const wxSize& size)
 {
-    WXDWORD exflags;
-    WXDWORD flags = MSWGetCreateWindowFlags(&exflags);
-
-    const wxSize sz = IsAlwaysMaximized() ? wxDefaultSize : size;
-
-#ifndef __WXWINCE__
-    if ( wxTheApp->GetLayoutDirection() == wxLayout_RightToLeft )
-        exflags |= WS_EX_LAYOUTRTL;
-#endif
-
-    return MSWCreate(MSWGetRegisteredClassName(),
-                     title.wx_str(), pos, sz, flags, exflags);
+    return CreateNonOwned(pos, IsAlwaysMaximized() ? wxDefaultSize : size, title);
 }
 
 bool wxTopLevelWindowMSW::Create(wxWindow *parent,

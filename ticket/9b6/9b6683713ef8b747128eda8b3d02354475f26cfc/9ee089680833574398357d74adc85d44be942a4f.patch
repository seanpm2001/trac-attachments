Index: src/msw/textentry.cpp
===================================================================
--- src/msw/textentry.cpp	(revision 76087)
+++ src/msw/textentry.cpp	(working copy)
@@ -102,6 +102,10 @@
 DEFINE_GUID(wxCLSID_AutoComplete,
     0x00bb2763, 0x6a77, 0x11d0, 0xa5, 0x35, 0x00, 0xc0, 0x4f, 0xd7, 0xd0, 0x62);
 
+#ifndef ACDD_VISIBLE
+    #define ACDD_VISIBLE 0x0001
+#endif
+
 // Small helper class which can be used to ensure thread safety even when
 // wxUSE_THREADS==0 (and hence wxCriticalSection does nothing).
 class CSLock
@@ -433,6 +437,10 @@
                                        ACO_UPDOWNKEYDROPSLIST);
             pAutoComplete2->Release();
         }
+
+        wxBIND_OR_CONNECT_HACK(m_win, wxEVT_CHAR_HOOK, wxKeyEventHandler,
+                               wxTextAutoCompleteData::OnCharHook,
+                               this);
     }
 
     ~wxTextAutoCompleteData()
@@ -568,7 +576,24 @@
         event.Skip();
     }
 
+    void OnCharHook(wxKeyEvent& event)
+    {
+        // If the autocomplete drop-down list is currently displayed when the
+        // user presses Escape, we should dismiss it.
+        if (event.GetKeyCode() == WXK_ESCAPE)
+        {
+            DWORD dwFlags = 0;
+            m_autoCompleteDropDown->GetDropDownStatus(&dwFlags, NULL);
+            if ( dwFlags ==  ACDD_VISIBLE )
+            {
+                ::SendMessage(m_win->GetHWND(), WM_KEYDOWN, WXK_ESCAPE, 0);
+                return;
+            }
+        }
 
+        event.Skip();
+    }
+
     // The text entry we're associated with.
     wxTextEntry * const m_entry;
 

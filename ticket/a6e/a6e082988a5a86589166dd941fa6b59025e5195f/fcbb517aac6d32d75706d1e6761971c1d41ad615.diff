--- include/wx/filesys.h.old	2007-02-10 10:34:11.000000000 +0300
+++ include/wx/filesys.h	2007-02-26 18:14:54.000000000 +0300
@@ -191,6 +191,9 @@
     virtual wxString FindFirst(const wxString& spec, int flags = 0);
     virtual wxString FindNext();
 
+    // Must be called after FindFirst/FindNext to release the resources
+    virtual void Cleanup() {}
+
     // returns protocol ("file", "http", "tar" etc.) The last (most right)
     // protocol is used:
     // {it returns "tar" for "file:subdir/archive.tar.gz#tar:/README.txt"}
@@ -265,6 +268,9 @@
     wxString FindFirst(const wxString& spec, int flags = 0);
     wxString FindNext();
 
+    // Must be called after FindFirst/FindNext to release the resources
+    void Cleanup();
+
     // find a file in a list of directories, returns false if not found
     bool FindFileInPath(wxString *pStr, const wxChar *path, const wxChar *file);
 
--- include/wx/fs_arc.h.old	2006-10-30 14:56:10.000000000 +0300
+++ include/wx/fs_arc.h	2007-02-26 19:05:39.000000000 +0300
@@ -31,7 +31,7 @@
     virtual wxFSFile* OpenFile(wxFileSystem& fs, const wxString& location);
     virtual wxString FindFirst(const wxString& spec, int flags = 0);
     virtual wxString FindNext();
-    void Cleanup();
+    virtual void Cleanup();
     virtual ~wxArchiveFSHandler();
 
 private:
--- src/common/filesys.cpp.old	2007-02-10 10:34:11.000000000 +0300
+++ src/common/filesys.cpp	2007-02-19 16:08:47.000000000 +0300
@@ -575,6 +575,13 @@
     WX_CLEAR_LIST(wxList, m_Handlers);
 }
 
+void wxFileSystem::Cleanup()
+{
+        wxFSHandlerHash::iterator it, en;
+        for( it = m_LocalHandlers.begin(), en = m_LocalHandlers.end(); it != en; ++it )
+            it->second->Cleanup();
+}
+
 static const wxString g_unixPathString(wxT("/"));
 static const wxString g_nativePathString(wxFILE_SEP_PATH);
 
--- src/common/fs_arc.cpp.old	2006-11-19 05:11:39.000000000 +0300
+++ src/common/fs_arc.cpp	2007-02-19 16:01:58.000000000 +0300
@@ -329,12 +329,12 @@
 wxArchiveFSHandler::~wxArchiveFSHandler()
 {
     Cleanup();
-    delete m_cache;
 }
 
 void wxArchiveFSHandler::Cleanup()
 {
     wxDELETE(m_DirsFound);
+    wxDELETE(m_cache);
 }
 
 bool wxArchiveFSHandler::CanOpen(const wxString& location)

 	  	 

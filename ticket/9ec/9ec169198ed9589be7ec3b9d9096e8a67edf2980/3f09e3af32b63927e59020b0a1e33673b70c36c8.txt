Index: include/wx/mac/control.h
===================================================================
RCS file: /home/wxcvs/wxWindows/include/wx/mac/control.h,v
retrieving revision 1.9
diff -r1.9 control.h
57c57,60
<    
---
>    void OnKeyDown( wxKeyEvent &event ) ;
>    void OnMouseEvent( wxMouseEvent &event ) ;
>    void OnPaint(wxPaintEvent& event) ;
>     
78,81d80
<    virtual void  	 DoSetSize(int x, int y,int width, int height,int sizeFlags = wxSIZE_AUTO ) ;
<    virtual void 	 OnKeyDown( wxKeyEvent &event ) ;
<    virtual void		 OnMouseEvent( wxMouseEvent &event ) ;
<    virtual void 	 OnPaint(wxPaintEvent& event) ;
83c82
<    ControlHandle	 GetMacControl() { return m_macControl ;}
---
>    ControlHandle	 GetMacControl() const { return m_macControl; }
111,112c110,113
<    virtual wxSize DoGetBestSize() const;
< 
---
>     virtual wxSize DoGetBestSize() const;
>     virtual void   DoSetSize(int x, int y, int width, int height,
>                              int sizeFlags = wxSIZE_AUTO ) ;
>     
Index: include/wx/mac/frame.h
===================================================================
RCS file: /home/wxcvs/wxWindows/include/wx/mac/frame.h,v
retrieving revision 1.10
diff -r1.10 frame.h
76,79d75
<     // get the origin of the client area (which may be different from (0, 0)
<     // if the frame has a toolbar) in client coordinates
<     virtual wxPoint GetClientAreaOrigin() const;
< 
119a116
>     virtual void DoMoveWindow(int x, int y, int width, int height);
Index: src/mac/app.cpp
===================================================================
RCS file: /home/wxcvs/wxWindows/src/mac/app.cpp,v
retrieving revision 1.28
diff -r1.28 app.cpp
33a34
> #include "wx/textctrl.h"
Index: src/mac/control.cpp
===================================================================
RCS file: /home/wxcvs/wxWindows/src/mac/control.cpp,v
retrieving revision 1.23
diff -r1.23 control.cpp
68a69
>     m_macControlIsShown = false;
260d260
< 
313d312
< 	m_macControlIsShown  = true ;
316a316
>     Show(false);
333,334c333,334
<  
<      UMAShowControl( m_macControl ) ;
---
> 
>      Show(true);
504,506c504
< void  wxControl::DoSetSize(int x, int y,
<             int width, int height,
<             int sizeFlags )
---
> void  wxControl::DoSetSize( int x, int y, int width, int height, int sizeFlags )
510c508
< 		wxWindow::DoSetSize( x , y ,width , height ,sizeFlags ) ;
---
> 		wxWindow::DoSetSize( x, y, width, height, sizeFlags ) ;
515,530c513,517
<      int new_x, new_y, new_width, new_height;
<      int mac_x, mac_y;
<  
<      new_x = m_x;
<      new_y = m_y;
<      new_width  = m_width;
<      new_height = m_height;
<  
<      if (sizeFlags & wxSIZE_ALLOW_MINUS_ONE)
<      {
<          new_x      = x;
<          new_y      = y;
<          new_width  = width;
<          new_height = height;
<      }
<      else
---
>      int mac_x, mac_y, xx, yy;
> 
>      GetPosition(&xx,&yy);
> 
>      if( !(sizeFlags & wxSIZE_ALLOW_MINUS_ONE) )
532,535c519,522
<          if (x != -1)      new_x      = x;
<          if (y != -1)      new_y      = y;
<          if (width != -1)  new_width  = width;
<          if (height != -1) new_height = height;
---
>          if (x == -1)      x      = xx;
>          if (y == -1)      y      = yy;
>          if (width == -1)  width  = m_width;
>          if (height == -1) height = m_height;
537c524
<  
---
> 
543c530
<              if (width == -1)   new_width = size.x;
---
>              if (width == -1)   width = size.x;
547c534
<              if (height == -1)   new_height = size.y;
---
>              if (height == -1)   height = size.y;
550,553c537,540
<      AdjustForParentClientOrigin(new_x, new_y, sizeFlags);
<  
<      mac_x = new_x;
<      mac_y = new_y;
---
>      AdjustForParentClientOrigin(x, y, sizeFlags);
> 
>      mac_x = x;
>      mac_y = y;
560c547
<  
---
> 
569,570c556
<      if ( new_width != oldbounds.right - oldbounds.left - 2 * m_macHorizontalBorder ||
<           new_height != oldbounds.bottom - oldbounds.top - 2 * m_macVerticalBorder)
---
>      if ( width != m_width || height != m_height )
578,579c564,565
<          if ((m_minWidth != -1) && (new_width < m_minWidth)) {
<              new_width = m_minWidth;
---
>          if ((m_minWidth != -1) && (width < m_minWidth)) {
>              width = m_minWidth;
581,582c567,568
<          if ((m_minHeight != -1) && (new_height < m_minHeight)) {
<              new_height = m_minHeight;
---
>          if ((m_minHeight != -1) && (height < m_minHeight)) {
>              height = m_minHeight;
584,585c570,571
<          if ((m_maxWidth != -1) && (new_width > m_maxWidth)) {
<              new_width = m_maxWidth;
---
>          if ((m_maxWidth != -1) && (width > m_maxWidth)) {
>              width = m_maxWidth;
587,588c573,574
<          if ((m_maxHeight != -1) && (new_height > m_maxHeight)) {
<              new_height = m_maxHeight;
---
>          if ((m_maxHeight != -1) && (height > m_maxHeight)) {
>              height = m_maxHeight;
593,594c579,580
<              m_x = new_x;
<              m_y = new_y;
---
>              m_x = x;
>              m_y = y;
605,606c591,592
<              m_width = new_width;
<              m_height = new_height;
---
>              m_width  = width;
>              m_height = height;
Index: src/mac/frame.cpp
===================================================================
RCS file: /home/wxcvs/wxWindows/src/mac/frame.cpp,v
retrieving revision 1.18
diff -r1.18 frame.cpp
64a65
> #if wxUSE_STATUSBAR
65a67
> #endif
75,99d76
< wxPoint wxFrameMac::GetClientAreaOrigin() const
< {
< 	// on mac we are at position -1,-1 with the control
<     wxPoint pt(0, 0);
< 
< #if wxUSE_TOOLBAR
<     if ( GetToolBar() )
<     {
<         int w, h;
<         GetToolBar()->GetSize(& w, & h);
< 
<         if ( GetToolBar()->GetWindowStyleFlag() & wxTB_VERTICAL )
<         {
<             pt.x += w - 1;
<         }
<         else
<         {
<             pt.y += h - 1 ;
<         }
<     }
< #endif // wxUSE_TOOLBAR
< 
<     return pt;
< }
< 
159c136
< 		for ( int i = 0 ; i < m_frameMenuBar->GetMenuCount() ; ++ i )
---
> 		for ( size_t i = 0 ; i < m_frameMenuBar->GetMenuCount() ; ++ i )
200a178,179
> #if wxUSE_STATUSBAR
> 
206,207c185
<     statusBar = new wxStatusBar(this, id,
<         style, name);
---
>     statusBar = new wxStatusBar(this, id, style, name);
215,225c193,201
<   if (m_frameStatusBar )
<   {
<     int w, h;
<     GetClientSize(&w, &h);
<     int sw, sh;
<     m_frameStatusBar->GetSize(&sw, &sh);
< 
<     // Since we wish the status bar to be directly under the client area,
<     // we use the adjusted sizes without using wxSIZE_NO_ADJUSTMENTS.
<     m_frameStatusBar->SetSize(0, h, w, sh);
<    }
---
>     if (m_frameStatusBar )
>     {
>         int w, h, sw, sh;
> 
>         GetSize(&w, &h);
>         m_frameStatusBar->GetSize(&sw, &sh);
> 
>         m_frameStatusBar->SetSize(0, h - sh, w, sh, wxSIZE_NO_ADJUSTMENTS);
>     }
227a204,205
> #endif // wxUSE_STATUSBAR
> 
246a225
> #if wxUSE_STATUSBAR
252a232
> #endif
312a293,349
> void wxFrameMac::DoMoveWindow(int x, int y, int width, int height)
> {
>     wxASSERT(m_macWindowData != NULL);
> 
>     bool doMove = false ;
>     bool doResize = false ;
> 
>     if ( x != m_x || y != m_y )
>     {
>         doMove = true ;
>     }
>     if ( width != m_width || height != m_height )
>     {
>         doResize = true ;
>     }
> 
>     if ( doMove || doResize )
>     {
>         m_x = x ;
>         m_y = y ;
>         m_width = width ;
>         m_height = height ;
> 
>         if ( doMove ) {
>             ::MoveWindow(m_macWindowData->m_macWindow, m_x, m_y, false); // don't make frontmost
>         }
> 
>         if ( doResize ) {
>             ::SizeWindow(m_macWindowData->m_macWindow, m_width, m_height  , true);
>         }
> 
>         if ( doMove )
>         {
>             wxPoint point(m_x, m_y);
>             wxMoveEvent event(point, m_windowId);
>             event.SetEventObject(this);
>             GetEventHandler()->ProcessEvent(event) ;
>         }
>         if ( doResize )
>         {
>             wxSize size(m_width, m_height);
>             wxSizeEvent event(size, m_windowId);
>             event.SetEventObject(this);
>             GetEventHandler()->ProcessEvent(event);
> 
> #if wxUSE_STATUSBAR
>             PositionStatusBar();
> #endif
> #if wxUSE_TOOLBAR
>             PositionToolBar();
> #endif
> 
>             MacRepositionScrollBars() ;
>         }
>     }
> }
> 
369a407
> #if wxUSE_STATUSBAR
375a414
> #endif
377c416,418
<     if (GetToolBar())
---
>     wxToolBar *toolbar = GetToolBar();
> 
>     if (toolbar)
378a420,421
>         toolbar->SetFrameHandledToolBar();
> 
380c423
<         GetToolBar()->GetSize(& tw, & th);
---
>         toolbar->GetSize( &tw, &th);
382,387c425,426
<         if (GetToolBar()->GetWindowStyleFlag() & wxTB_VERTICAL)
<         {
<             // Use the 'real' position. wxSIZE_NO_ADJUSTMENTS
<             // means, pretend we don't have toolbar/status bar, so we
<             // have the original client size.
<             GetToolBar()->SetSize(-1, -1, tw, ch + 2 , wxSIZE_NO_ADJUSTMENTS | wxSIZE_ALLOW_MINUS_ONE );
---
>         if (toolbar->GetWindowStyleFlag() & wxTB_VERTICAL) {
>             th = ch;
389,392c428,429
<         else
<         {
<             // Use the 'real' position
<             GetToolBar()->SetSize(-1, -1, cw + 2, th, wxSIZE_NO_ADJUSTMENTS | wxSIZE_ALLOW_MINUS_ONE );
---
>         else {
>             tw = cw;
393a431,434
>         // Use the 'real' position. wxSIZE_NO_ADJUSTMENTS
>         // means, pretend we don't have toolbar/status bar, so we
>         // have the original client size.
>         toolbar->SetSize(0, 0, tw, th, wxSIZE_NO_ADJUSTMENTS | wxSIZE_ALLOW_MINUS_ONE );
396a438
> 
Index: src/mac/slider.cpp
===================================================================
RCS file: /home/wxcvs/wxWindows/src/mac/slider.cpp,v
retrieving revision 1.8
diff -r1.8 slider.cpp
23c23
< END_EVENT_TABLE()
---
> END_EVENT_TABLE();
26,40c26,39
<  // The dimensions of the different styles of sliders (From Aqua document)
<  #define wxSLIDER_DIMENSIONACROSS 15
<  #define wxSLIDER_DIMENSIONACROSS_WITHTICKMARKS 24
<  #define wxSLIDER_DIMENSIONACROSS_ARROW 18
<  
<  // Distance between slider and text
<  #define wxSLIDER_BORDERTEXT 5
<  
<  /* NB!  The default orientation for a slider is horizontal however if the user specifies
<   * some slider styles but dosen't specify the orientation we have to assume he wants a
<   * horizontal one.  Therefore in this file when testing for the sliders orientation
<   * vertical is tested for if this is not set then we use the horizontal one
<   * eg.  if(GetWindowStyle() & wxSL_VERTICAL) {}  else { horizontal case }>  
<   */
< 
---
> // The dimensions of the different styles of sliders (From Aqua document)
> #define wxSLIDER_DIMENSIONACROSS 15
> #define wxSLIDER_DIMENSIONACROSS_WITHTICKMARKS 24
> #define wxSLIDER_DIMENSIONACROSS_ARROW 18
>  
> // Distance between slider and text
> #define wxSLIDER_BORDERTEXT 5
>  
> /* NB!  The default orientation for a slider is horizontal however if the user specifies
>  * some slider styles but dosen't specify the orientation we have to assume he wants a
>  * horizontal one.  Therefore in this file when testing for the sliders orientation
>  * vertical is tested for if this is not set then we use the horizontal one
>  * eg.  if(GetWindowStyle() & wxSL_VERTICAL) {}  else { horizontal case }>  
>  */
61,63c60,62
<      Rect bounds ;
<      Str255 title ;
<      SInt16 procID;
---
>     Rect bounds ;
>     Str255 title ;
>     SInt16 procID;
65,67c64,66
<      m_macMinimumStatic = NULL ;
<      m_macMaximumStatic = NULL ;
<      m_macValueStatic = NULL ;
---
>     m_macMinimumStatic = NULL ;
>     m_macMaximumStatic = NULL ;
>     m_macValueStatic = NULL ;
70,71c69,70
<      m_lineSize = 1;
<      m_tickFreq = 0;
---
>     m_lineSize = 1;
>     m_tickFreq = 0;
73,74c72,73
<      m_rangeMax = maxValue;
<      m_rangeMin = minValue;
---
>     m_rangeMax = maxValue;
>     m_rangeMin = minValue;
76c75
<      m_pageSize = (int)((maxValue-minValue)/10);
---
>     m_pageSize = (int)((maxValue-minValue)/10);
78,79c77,78
<      MacPreControlCreate( parent, id, "", pos, size, style,
<                           validator, name, &bounds, title );
---
>     MacPreControlCreate( parent, id, "", pos, size, style,
>                          validator, name, &bounds, title );
81,83c80,82
<      procID = kControlSliderProc + kControlSliderLiveFeedback;
<      if(style & wxSL_AUTOTICKS) {
<          procID += kControlSliderHasTickMarks;
---
>     procID = kControlSliderProc + kControlSliderLiveFeedback;
>     if(style & wxSL_AUTOTICKS) {
>         procID += kControlSliderHasTickMarks;
85,88c84,85
<   
< 
<      m_macControl = UMANewControl( parent->GetMacRootWindow(), &bounds, title, false,
<                                    value, minValue, maxValue, procID, (long) this);
---
>     m_macControl = UMANewControl( parent->GetMacRootWindow(), &bounds, title, false,
>                                   value, minValue, maxValue, procID, (long) this);
90c87
<      wxASSERT_MSG( m_macControl != NULL , "No valid mac control" ) ;
---
>     wxASSERT_MSG( m_macControl != NULL , "No valid mac control" ) ;
92c89
<      ::SetControlAction( m_macControl , wxMacLiveScrollbarActionUPP ) ;
---
>     ::SetControlAction( m_macControl , wxMacLiveScrollbarActionUPP ) ;
94,100c91,102
<      if(style & wxSL_LABELS)
<      {
<          m_macMinimumStatic = new wxStaticText( this, -1, "" );
<          m_macMaximumStatic = new wxStaticText( this, -1, "" );
<          m_macValueStatic = new wxStaticText( this, -1, "" );
<          SetRange(minValue, maxValue);
<          SetValue(value);
---
>     if(style & wxSL_LABELS)
>     {
>         m_macMinimumStatic = new wxStaticText( this, -1, "" );
>         m_macMaximumStatic = new wxStaticText( this, -1, "" );
>         m_macValueStatic = new wxStaticText( this, -1, "" );
>         SetRange(minValue, maxValue);
>         SetValue(value);
>     }
>     else {
>         m_macMinimumStatic = NULL ;
>         m_macMaximumStatic = NULL ;
>         m_macValueStatic = NULL ;
102,117d103
<   
<      else {
<          m_macMinimumStatic = NULL ;
<          m_macMaximumStatic = NULL ;
<          m_macValueStatic = NULL ;
<      }
<  
<      if(style & wxSL_VERTICAL) {
<          SetSizeHints(10, -1, 10, -1);  // Forces SetSize to use the proper width
<      }
<      else {
<          SetSizeHints(-1, 10, -1, 10);  // Forces SetSize to use the proper height
<      }
<      // NB!  SetSizeHints is overloaded by wxSlider and will substitute 10 with the
<      // proper dimensions, it also means other people cannot bugger the slider with
<      // other values
119c105,115
<      MacPostControlCreate() ;
---
>     if(style & wxSL_VERTICAL) {
>         SetSizeHints(10, -1, 10, -1);  // Forces SetSize to use the proper width
>     }
>     else {
>         SetSizeHints(-1, 10, -1, 10);  // Forces SetSize to use the proper height
>     }
>     // NB!  SetSizeHints is overloaded by wxSlider and will substitute 10 with the
>     // proper dimensions, it also means other people cannot bugger the slider with
>     // other values
>  
>     MacPostControlCreate() ;
121c117
<      return true;
---
>     return true;
260c256
<  /* This is overloaded in wxSlider so that the proper width/height will always be used
---
> /* This is overloaded in wxSlider so that the proper width/height will always be used
262,490c258,474
<  void wxSlider::SetSizeHints( int minW, int minH,
<                               int maxW , int maxH ,
<                               int incW , int incH )
<  {
<      wxSize size = GetBestSize();
<  
<      if(GetWindowStyle() & wxSL_VERTICAL) {
<          wxWindow::SetSizeHints(size.x, minH, size.x, maxH, incW, incH);
<      }
<      else {
<          wxWindow::SetSizeHints(minW, size.y, maxW, size.y, incW, incH);
<      }
<  }
<  
<  wxSize wxSlider::DoGetBestSize() const
<  {
<      wxSize size;
<      int textwidth, textheight;
<  
<      if(GetWindowStyle() & wxSL_LABELS)
<      {
<          wxString text;
<          int ht, wd;
<  
<          // Get maximum text label width and height
<          text.Printf("%d", m_rangeMin);
<          GetTextExtent(text, &textwidth, &textheight);
<          text.Printf("%d", m_rangeMax);
<          GetTextExtent(text, &wd, &ht);
<          if(ht > textheight) {
<              textheight = ht;
<          }
<          if (wd > textwidth) {
<              textwidth = wd;
<          }
<      }
<  
<      if(GetWindowStyle() & wxSL_VERTICAL)
<      {
<          if(GetWindowStyle() & wxSL_AUTOTICKS) {
<              size.x = wxSLIDER_DIMENSIONACROSS_WITHTICKMARKS;
<          }
<          else {
<              size.x = wxSLIDER_DIMENSIONACROSS_ARROW;
<          }
<          if(GetWindowStyle() & wxSL_LABELS) {
<              size.x += textwidth + wxSLIDER_BORDERTEXT;
<          }
<          size.y = 150;
<      }
<      else
<      {
<          if(GetWindowStyle() & wxSL_AUTOTICKS) {
<              size.y = wxSLIDER_DIMENSIONACROSS_WITHTICKMARKS;
<          }
<          else {
<              size.y = wxSLIDER_DIMENSIONACROSS_ARROW;
<          }
<          if(GetWindowStyle() & wxSL_LABELS) {
<              size.y += textheight + wxSLIDER_BORDERTEXT;
<          }
<          size.x = 150;
<      }
<      return size;
<  }
<  
<  void wxSlider::DoSetSize(int x, int y, int width, int height, int sizeFlags)
<  {
<      Rect oldbounds, newbounds;
<      int new_x, new_y, new_width, new_height;
<      int mac_x, mac_y;
<  
<      new_x = m_x;
<      new_y = m_y;
<      new_width  = m_width;
<      new_height = m_height;
<  
<      if (sizeFlags & wxSIZE_ALLOW_MINUS_ONE)
<      {
<          new_x      = x;
<          new_y      = y;
<          new_width  = width;
<          new_height = height;
<      }
<      else
<      {
<          if (x != -1)      new_x      = x;
<          if (y != -1)      new_y      = y;
<          if (width != -1)  new_width  = width;
<          if (height != -1) new_height = height;
<      }
<  
<      if(sizeFlags & wxSIZE_AUTO)
<      {
<          wxSize size = GetBestSize();
<          if (sizeFlags & wxSIZE_AUTO_WIDTH)
<          {
<              if (width == -1)   new_width = size.x;
<          }
<          if (sizeFlags & wxSIZE_AUTO_HEIGHT)
<          {
<              if (height == -1)   new_height = size.y;
<          }
<      }
<  
<      AdjustForParentClientOrigin(new_x, new_y, sizeFlags);
<  
<      mac_x = new_x;
<      mac_y = new_y;
<      if(GetParent()) {
<          GetParent()->MacClientToRootWindow(&mac_x, &mac_y);
<      }
<  
<      GetControlBounds(m_macControl, &oldbounds);
<      oldbounds.right = oldbounds.left + m_width;
<      oldbounds.bottom = oldbounds.top + m_height;
<  
<      bool doMove = false;
<      bool doResize = false;
<  
<      if ( mac_x != oldbounds.left || mac_y != oldbounds.top )
<      {
<          doMove = true ;
<      }
<      if ( new_width != m_width || new_height != m_height )
<      {
<          doResize = true ;
<      }
<  
<      if ( doMove || doResize )
<      {
<          // Ensure resize is within constraints
<          if ((m_minWidth != -1) && (new_width < m_minWidth)) {
<              new_width = m_minWidth;
<          }
<          if ((m_minHeight != -1) && (new_height < m_minHeight)) {
<              new_height = m_minHeight;
<          }
<          if ((m_maxWidth != -1) && (new_width > m_maxWidth)) {
<              new_width = m_maxWidth;
<          }
<          if ((m_maxHeight != -1) && (new_height > m_maxHeight)) {
<              new_height = m_maxHeight;
<          }
<  
<          DoMoveWindow(new_x, new_y, new_width, new_height);
<  
<          // Update window at old and new positions
<          SetRect(&newbounds, m_x, m_y, m_x + m_width, m_y + m_height);
<          WindowRef rootwindow = GetMacRootWindow();
<          InvalWindowRect( rootwindow , &oldbounds );
<          InvalWindowRect( rootwindow , &newbounds );
<  
<          if ( doMove )
<          {
<              wxMoveEvent event(wxPoint(m_x, m_y), m_windowId);
<              event.SetEventObject(this);
<              GetEventHandler()->ProcessEvent(event) ;
<          }
<          if ( doResize )
<          {
<              wxSizeEvent event(wxSize(m_width, m_height), m_windowId);
<              event.SetEventObject(this);
<              GetEventHandler()->ProcessEvent(event);
<          }
<      }
<  }
<  
<  void wxSlider::DoMoveWindow(int x, int y, int width, int height)
<  {
<      m_x = x;
<      m_y = y;
<      m_width  = width;
<      m_height = height;
<  
<      int  xborder, yborder;
<      int  minValWidth, maxValWidth, textwidth, textheight;
<      int  sliderBreadth;
<  
<      xborder = yborder = 0;
<  
<      if (GetWindowStyle() & wxSL_LABELS)
<      {
<          wxString text;
<          int ht;
<  
<          // Get maximum text label width and height
<          text.Printf("%d", m_rangeMin);
<          GetTextExtent(text, &minValWidth, &textheight);
<          text.Printf("%d", m_rangeMax);
<          GetTextExtent(text, &maxValWidth, &ht);
<          if(ht > textheight) {
<              textheight = ht;
<          }
<          textwidth = (minValWidth > maxValWidth ? minValWidth : maxValWidth);
<  
<          xborder = textwidth + wxSLIDER_BORDERTEXT;
<          yborder = textheight + wxSLIDER_BORDERTEXT;
<  
<          // Get slider breadth
<          if(GetWindowStyle() & wxSL_AUTOTICKS) {
<              sliderBreadth = wxSLIDER_DIMENSIONACROSS_WITHTICKMARKS;
<          }
<          else {
<              sliderBreadth = wxSLIDER_DIMENSIONACROSS_ARROW;
<          }
<  
<          if(GetWindowStyle() & wxSL_VERTICAL)
<          {
<              m_macMinimumStatic->Move(sliderBreadth + wxSLIDER_BORDERTEXT,
<                                       height - yborder - textheight);
<              m_macMaximumStatic->Move(sliderBreadth + wxSLIDER_BORDERTEXT, 0);
<              m_macValueStatic->Move(0, height - textheight);
<          }
<          else
<          {
<              m_macMinimumStatic->Move(0, sliderBreadth + wxSLIDER_BORDERTEXT);
<              m_macMaximumStatic->Move(width - xborder - maxValWidth / 2,
<                                       sliderBreadth + wxSLIDER_BORDERTEXT);
<              m_macValueStatic->Move(width - textwidth, 0);
<          }
<      }
<  
<      if(GetParent()) {
<          GetParent()->MacClientToRootWindow(&x, &y);
<      }
<      UMAMoveControl(m_macControl, x, y);
<      UMASizeControl(m_macControl, width - xborder, height - yborder);
< }
\ No newline at end of file
---
> void wxSlider::SetSizeHints( int minW, int minH,
>                              int maxW , int maxH ,
>                              int incW , int incH )
> {
>     wxSize size = GetBestSize();
>  
>     if(GetWindowStyle() & wxSL_VERTICAL) {
>         wxWindow::SetSizeHints(size.x, minH, size.x, maxH, incW, incH);
>     }
>     else {
>         wxWindow::SetSizeHints(minW, size.y, maxW, size.y, incW, incH);
>     }
> }
>  
> wxSize wxSlider::DoGetBestSize() const
> {
>     wxSize size;
>     int textwidth, textheight;
>  
>     if(GetWindowStyle() & wxSL_LABELS)
>     {
>         wxString text;
>         int ht, wd;
>  
>         // Get maximum text label width and height
>         text.Printf("%d", m_rangeMin);
>         GetTextExtent(text, &textwidth, &textheight);
>         text.Printf("%d", m_rangeMax);
>         GetTextExtent(text, &wd, &ht);
>         if(ht > textheight) {
>             textheight = ht;
>         }
>         if (wd > textwidth) {
>             textwidth = wd;
>         }
>     }
>  
>     if(GetWindowStyle() & wxSL_VERTICAL)
>     {
>         if(GetWindowStyle() & wxSL_AUTOTICKS) {
>             size.x = wxSLIDER_DIMENSIONACROSS_WITHTICKMARKS;
>         }
>         else {
>             size.x = wxSLIDER_DIMENSIONACROSS_ARROW;
>         }
>         if(GetWindowStyle() & wxSL_LABELS) {
>             size.x += textwidth + wxSLIDER_BORDERTEXT;
>         }
>         size.y = 150;
>     }
>     else
>     {
>         if(GetWindowStyle() & wxSL_AUTOTICKS) {
>             size.y = wxSLIDER_DIMENSIONACROSS_WITHTICKMARKS;
>         }
>         else {
>             size.y = wxSLIDER_DIMENSIONACROSS_ARROW;
>         }
>         if(GetWindowStyle() & wxSL_LABELS) {
>             size.y += textheight + wxSLIDER_BORDERTEXT;
>         }
>         size.x = 150;
>     }
>     return size;
> }
>  
> void wxSlider::DoSetSize(int x, int y, int width, int height, int sizeFlags)
> {
>     Rect oldbounds, newbounds;
>     int mac_x, mac_y, xx, yy;
> 
>     GetPosition(&xx,&yy);
> 
>     if( !(sizeFlags & wxSIZE_ALLOW_MINUS_ONE) )
>     {
>         if (x == -1)      x      = xx;
>         if (y == -1)      y      = yy;
>         if (width == -1)  width  = m_width;
>         if (height == -1) height = m_height;
>     }
> 
>     if(sizeFlags & wxSIZE_AUTO)
>     {
>         wxSize size = GetBestSize();
>         if (sizeFlags & wxSIZE_AUTO_WIDTH)
>         {
>             if (width == -1)   width = size.x;
>         }
>         if (sizeFlags & wxSIZE_AUTO_HEIGHT)
>         {
>             if (height == -1)   height = size.y;
>         }
>     }
>     AdjustForParentClientOrigin(x, y, sizeFlags);
>  
>     mac_x = x;
>     mac_y = y;
>     if(GetParent()) {
>         GetParent()->MacClientToRootWindow(&mac_x, &mac_y);
>     }
>  
>     GetControlBounds(m_macControl, &oldbounds);
>     oldbounds.right = oldbounds.left + m_width;
>     oldbounds.bottom = oldbounds.top + m_height;
>  
>     bool doMove = false;
>     bool doResize = false;
>  
>     if ( mac_x != oldbounds.left || mac_y != oldbounds.top )
>     {
>         doMove = true ;
>     }
>     if ( width != m_width || height != m_height )
>     {
>         doResize = true ;
>     }
>  
>     if ( doMove || doResize )
>     {
>         // Ensure resize is within constraints
>         if ((m_minWidth != -1) && (width < m_minWidth)) {
>             width = m_minWidth;
>         }
>         if ((m_minHeight != -1) && (height < m_minHeight)) {
>             height = m_minHeight;
>         }
>         if ((m_maxWidth != -1) && (width > m_maxWidth)) {
>             width = m_maxWidth;
>         }
>         if ((m_maxHeight != -1) && (height > m_maxHeight)) {
>             height = m_maxHeight;
>         }
>  
>         DoMoveWindow(x, y, width, height);
>  
>         // Update window at old and new positions
>         SetRect(&newbounds, m_x, m_y, m_x + m_width, m_y + m_height);
>         WindowRef rootwindow = GetMacRootWindow();
>         InvalWindowRect( rootwindow , &oldbounds );
>         InvalWindowRect( rootwindow , &newbounds );
>  
>         if ( doMove )
>         {
>             wxMoveEvent event(wxPoint(m_x, m_y), m_windowId);
>             event.SetEventObject(this);
>             GetEventHandler()->ProcessEvent(event) ;
>         }
>         if ( doResize )
>         {
>             wxSizeEvent event(wxSize(m_width, m_height), m_windowId);
>             event.SetEventObject(this);
>             GetEventHandler()->ProcessEvent(event);
>         }
>     }
> }
>  
> void wxSlider::DoMoveWindow(int x, int y, int width, int height)
> {
>     m_x = x;
>     m_y = y;
>     m_width  = width;
>     m_height = height;
>  
>     int  xborder, yborder;
>     int  minValWidth, maxValWidth, textwidth, textheight;
>     int  sliderBreadth;
>  
>     xborder = yborder = 0;
>  
>     if (GetWindowStyle() & wxSL_LABELS)
>     {
>         wxString text;
>         int ht;
>  
>         // Get maximum text label width and height
>         text.Printf("%d", m_rangeMin);
>         GetTextExtent(text, &minValWidth, &textheight);
>         text.Printf("%d", m_rangeMax);
>         GetTextExtent(text, &maxValWidth, &ht);
>         if(ht > textheight) {
>             textheight = ht;
>         }
>         textwidth = (minValWidth > maxValWidth ? minValWidth : maxValWidth);
>  
>         xborder = textwidth + wxSLIDER_BORDERTEXT;
>         yborder = textheight + wxSLIDER_BORDERTEXT;
>  
>         // Get slider breadth
>         if(GetWindowStyle() & wxSL_AUTOTICKS) {
>             sliderBreadth = wxSLIDER_DIMENSIONACROSS_WITHTICKMARKS;
>         }
>         else {
>             sliderBreadth = wxSLIDER_DIMENSIONACROSS_ARROW;
>         }
>  
>         if(GetWindowStyle() & wxSL_VERTICAL)
>         {
>             m_macMinimumStatic->Move(sliderBreadth + wxSLIDER_BORDERTEXT,
>                                      height - yborder - textheight);
>             m_macMaximumStatic->Move(sliderBreadth + wxSLIDER_BORDERTEXT, 0);
>             m_macValueStatic->Move(0, height - textheight);
>         }
>         else
>         {
>             m_macMinimumStatic->Move(0, sliderBreadth + wxSLIDER_BORDERTEXT);
>             m_macMaximumStatic->Move(width - xborder - maxValWidth / 2,
>                                      sliderBreadth + wxSLIDER_BORDERTEXT);
>             m_macValueStatic->Move(width - textwidth, 0);
>         }
>     }
>  
>     if(GetParent()) {
>         GetParent()->MacClientToRootWindow(&x, &y);
>     }
>     UMAMoveControl(m_macControl, x, y);
>     UMASizeControl(m_macControl, width - xborder, height - yborder);
> }
Index: src/mac/window.cpp
===================================================================
RCS file: /home/wxcvs/wxWindows/src/mac/window.cpp,v
retrieving revision 1.50
diff -r1.50 window.cpp
143d142
< 	m_macEraseOnRedraw = true ;
190a190,191
>     delete m_hScrollBar;
>     delete m_vScrollBar;
353a355
> 
417a420
> 
488c491,492
< 	
---
> 
> #ifndef __UNIX__
530a535,543
> #else // __UNIX__
>   if( m_hScrollBar && m_hScrollBar->IsShown() ) {
>       hh -= MAC_SCROLLBAR_SIZE;
>   }
>   if( m_vScrollBar && m_vScrollBar->IsShown() ) {
>       ww -= MAC_SCROLLBAR_SIZE;
>   }
> #endif // ! __UNIX__
>   
554,572d566
< 	int former_x = m_x ;
< 	int former_y = m_y ;
< 	int former_w = m_width ;
< 	int former_h = m_height ;
< 	
<   int actualWidth = width;
<   int actualHeight = height;
<   int actualX = x;
<   int actualY = y;
<   
<     if ((m_minWidth != -1) && (actualWidth < m_minWidth)) 
<     	actualWidth = m_minWidth;
<     if ((m_minHeight != -1) && (actualHeight < m_minHeight)) 
<     	actualHeight = m_minHeight;
<     if ((m_maxWidth != -1) && (actualWidth > m_maxWidth)) 
<     	actualWidth = m_maxWidth;
<     if ((m_maxHeight != -1) && (actualHeight > m_maxHeight)) 
<     	actualHeight = m_maxHeight;
< 
576c570
< 	if ( actualX != former_x || actualY != former_y )
---
> 	if ( x != m_x || y != m_y )
580c574
< 	if ( actualWidth != former_w || actualHeight != former_h )
---
> 	if ( width != m_width || height != m_height )
587,590c581,583
< 		if ( m_macWindowData )
< 		{
< 		}
< 		else
---
>         WindowRef macWindow = GetMacRootWindow();
> 
>         // Erase former position
592d584
< 			// erase former position
597,598c589
< 				// ClipRect( &clientrect ) ;
< 		    	InvalWindowRect( GetMacRootWindow() , &clientrect ) ;
---
> 		    	InvalWindowRect( macWindow, &clientrect ) ;
601,655c592,631
< 		m_x = actualX ;
< 		m_y = actualY ;
< 		m_width = actualWidth ;
< 		m_height = actualHeight ;
< 		if ( m_macWindowData )
< 		{
< 			if ( doMove )
< 				::MoveWindow(m_macWindowData->m_macWindow, m_x, m_y  , false); // don't make frontmost
< 			
< 			if ( doResize )
< 				::SizeWindow(m_macWindowData->m_macWindow, m_width, m_height  , true); 
< 			
< 			// the OS takes care of invalidating and erasing the new area
< 			// we have erased the old one	
< 			
< 			if ( IsKindOf( CLASSINFO( wxFrame ) ) )
< 			{
< 				wxFrame* frame = (wxFrame*) this ;
< 			  	frame->PositionStatusBar();
<   				frame->PositionToolBar();
< 			}
< 		}
< 		else
< 		{
< 			// erase new position
< 			
< 			{
< 				wxMacDrawingHelper focus( this ) ;
< 				if ( focus.Ok() )
< 				{
< 			  		Rect clientrect = { 0 , 0 , m_height , m_width } ;
<   					// ClipRect( &clientrect ) ;
< 			    	InvalWindowRect( GetMacRootWindow() , &clientrect ) ;
< 				}
< 			}
< 			
< 			if ( doMove )
< 				wxWindowMac::MacSuperChangedPosition() ; // like this only children will be notified
< 		}
< 		MacRepositionScrollBars() ;
< 		if ( doMove )
< 		{
< 	        wxPoint point(m_x, m_y);
<     		wxMoveEvent event(point, m_windowId);
<     		event.SetEventObject(this);
<     		GetEventHandler()->ProcessEvent(event) ;
<     	}
<     	if ( doResize )
<     	{
< 	         MacRepositionScrollBars() ;
< 	         wxSize size(m_width, m_height);
< 	         wxSizeEvent event(size, m_windowId);
< 	         event.SetEventObject(this);
< 	         GetEventHandler()->ProcessEvent(event);
<     	}
---
> 
>         // Update the internal position and size
> 		m_x = x;
> 		m_y = y;
> 		m_width  = width;
> 		m_height = height;
> 
>         // erase new position
>         {
>             wxMacDrawingHelper focus( this ) ;
>             if ( focus.Ok() )
>             {
>                 Rect clientrect = { 0 , 0 , m_height , m_width } ;
>                 InvalWindowRect( macWindow, &clientrect ) ;
>             }
>         }
> 
>         if ( doMove )
>         {
>             // Notify the children we have moved
>             wxNode *node = GetChildren().First();
>             while ( node )
>             {
>                 wxWindow *child = (wxWindow *)node->Data();
>                 child->DoSetSize(-1,-1,-1,-1, wxSIZE_USE_EXISTING) ;
>                 node = node->Next();
>             }
> 
>             wxPoint point(m_x, m_y);
>             wxMoveEvent event(point, m_windowId);
>             event.SetEventObject(this);
>             GetEventHandler()->ProcessEvent(event) ;
>         }
>         if ( doResize )
>         {
>             wxSize size(m_width, m_height);
>             wxSizeEvent event(size, m_windowId);
>             event.SetEventObject(this);
>             GetEventHandler()->ProcessEvent(event);
>         }
657c633
< 	
---
>     MacRepositionScrollBars();
691,692c667
<     wxSize size(-1, -1);
<     if ( width == -1 )
---
>     if( (width == -1) || (height == -1) )
694,704c669
<         if ( sizeFlags & wxSIZE_AUTO_WIDTH )
<         {
<             size = DoGetBestSize();
<             width = size.x;
<         }
<         else
<         {
<             // just take the current one
<             width = currentW;
<         }
<     }
---
>         wxSize size = DoGetBestSize();
706,708c671
<     if ( height == -1 )
<     {
<         if ( sizeFlags & wxSIZE_AUTO_HEIGHT )
---
>         if ( width == -1 )
710c673
<             if ( size.x == -1 )
---
>             if ( sizeFlags & wxSIZE_AUTO_WIDTH )
712c675,680
<                 size = DoGetBestSize();
---
>                 width = size.x;
>             }
>             else
>             {
>                 // just take the current one
>                 width = currentW;
714,716d681
<             //else: already called DoGetBestSize() above
< 
<             height = size.y;
718c683,684
<         else
---
> 
>         if ( height == -1 )
720,721c686,694
<             // just take the current one
<             height = currentH;
---
>             if ( sizeFlags & wxSIZE_AUTO_HEIGHT )
>             {
>                 height = size.y;
>             }
>             else
>             {
>                 // just take the current one
>                 height = currentH;
>             }
725c698,706
<     DoMoveWindow(x, y, width, height);
---
>     // Check that the new size is within the constraints
>     if ((m_minWidth != -1) && (width < m_minWidth))
>         width = m_minWidth;
>     if ((m_minHeight != -1) && (height < m_minHeight))
>         height = m_minHeight;
>     if ((m_maxWidth != -1) && (width > m_maxWidth))
>         width = m_maxWidth;
>     if ((m_maxHeight != -1) && (height > m_maxHeight))
>         height = m_maxHeight;
726a708
>     DoMoveWindow(x, y, width, height);
727a710
> 
730d712
< 
740,742c722,724
< 	if( !m_macWindowData )
< 	{
<     if (((sizeFlags & wxSIZE_NO_ADJUSTMENTS) == 0) && GetParent())
---
>     // don't do it for the dialogs/frames - they float independently of their
>     // parent
>     if ( !IsTopLevel() )
744,745c726,732
<         wxPoint pt(GetParent()->GetClientAreaOrigin());
<         x += pt.x; y += pt.y;
---
>         wxWindow *parent = GetParent();
>         if ( !(sizeFlags & wxSIZE_NO_ADJUSTMENTS) && parent )
>         {
>             wxPoint pt(parent->GetClientAreaOrigin());
>             x += pt.x;
>             y += pt.y;
>         }
747d733
<    }
818a805,810
>     if( m_hScrollBar && m_hScrollBar->m_isShown ) {
>         m_hScrollBar->MacSuperShown( show );
>     }
>     if( m_vScrollBar && m_vScrollBar->m_isShown ) {
>         m_vScrollBar->MacSuperShown( show );
>     }
1250c1242,1256
< /*
---
> 
>     // Draw the scroll bars
>     if(m_hScrollBar || m_vScrollBar)
>     {
>         wxPaintEvent paint(GetId());
>         paint.SetEventObject(this);
> 
>         if(m_hScrollBar && m_hScrollBar->IsShown()) {
>             m_hScrollBar->GetEventHandler()->ProcessEvent(paint);
>         }
>         if(m_vScrollBar && m_vScrollBar->IsShown()) {
>             m_vScrollBar->GetEventHandler()->ProcessEvent(paint);
>         }
>     }
> #if 0
1312c1318
<  */
---
> #endif
1320a1327,1329
>             if(m_hScrollBar == NULL) {
>                 MacCreateScrollBars(wxHSCROLL);
>             }
1332c1341
< 					m_hScrollBar->SetScrollbar( pos , thumbVisible , range , thumbVisible , refresh ) ;
---
> 					m_hScrollBar->SetScrollbar(pos, thumbVisible, range, thumbVisible, refresh);
1337a1347,1349
>             if(m_vScrollBar == NULL) {
>                 MacCreateScrollBars(wxVSCROLL);
>             }
1349c1361
< 					m_vScrollBar->SetScrollbar( pos , thumbVisible , range , thumbVisible , refresh ) ;
---
> 					m_vScrollBar->SetScrollbar(pos, thumbVisible, range, thumbVisible, refresh);
1662a1675,1684
>     if(m_hScrollBar && m_hScrollBar->IsShown() && m_hScrollBar->IsEnabled() )
>     {
>         if (m_hScrollBar->MacDispatchMouseEvent(event))
>             return TRUE;
>     }
>     if(m_vScrollBar && m_vScrollBar->IsShown() && m_vScrollBar->IsEnabled() )
>     {
>         if (m_vScrollBar->MacDispatchMouseEvent(event))
>             return TRUE;
>     }
1929c1951
<          	}		
---
>          	}
1958d1979
< 		MacPaintBorders() ;
1963c1984,1985
< 	}
---
>         MacPaintBorders() ;
>     }
1967c1989
< 			
---
> 
1971,1978c1993,2004
< 		SetRectRgn( childupdate , child->m_x , child->m_y , child->m_x + child->m_width ,  child->m_y + child->m_height ) ;
< 		SectRgn( childupdate , updatergn , childupdate ) ;
< 		OffsetRgn( childupdate , -child->m_x , -child->m_y ) ;
< 		if ( child->GetMacRootWindow() == window && child->IsShown() && !EmptyRgn( childupdate ) )
< 		{
< 			// because dialogs may also be children
< 			child->MacRedraw( childupdate , time ) ;
< 		}
---
>         if ( child->GetMacRootWindow() == window && child->IsShown() )
>         {
>             SetRectRgn( childupdate, child->m_x, child->m_y,
>                         child->m_x + child->m_width ,  child->m_y + child->m_height );
>             SectRgn( childupdate , updatergn , childupdate ) ;
>             OffsetRgn( childupdate , -child->m_x , -child->m_y ) ;
>             if ( !EmptyRgn( childupdate ) )
>             {
>                 // because dialogs may also be children
>                 child->MacRedraw( childupdate , time ) ;
>             }
>         }
1980c2006
< 	DisposeRgn( childupdate ) ;
---
>     DisposeRgn( childupdate ) ;
2020,2021c2046,2047
< 	wxWindowMac * win = wxFindWinFromMacWindow( window ) ;
< 	#if TARGET_CARBON
---
> 
> #if TARGET_CARBON
2023c2049
< 	#else
---
> #else
2025,2026c2051,2052
< 	#endif
< 	SetOrigin( 0 , 0 ) ;
---
> #endif
> 
2028c2054,2055
< 	if ( win )
---
> 
> 	if ( IsTopLevel() )
2031c2058,2060
< 		
---
> 
>         SetOrigin(0,0);
> 
2037c2066
<             if ( !EmptyRgn( region ) && win->m_macWindowData->m_macHasReceivedFirstActivate )
---
>             if ( !EmptyRgn( region ) && m_macWindowData->m_macHasReceivedFirstActivate )
2064,2078d2092
< 	wxASSERT_MSG( m_vScrollBar == NULL && m_hScrollBar == NULL , "attempt to create window twice" ) ;
< 	
< 	bool hasBoth = ( style & wxVSCROLL ) && ( style & wxHSCROLL ) ;
< 	int adjust = hasBoth ? MAC_SCROLLBAR_SIZE - 1: 0 ;
< 	int width, height ;
< 	GetClientSize( &width , &height ) ;
< 	
< 	wxPoint vPoint(width-MAC_SCROLLBAR_SIZE, 0) ;
< 	wxSize vSize(MAC_SCROLLBAR_SIZE, height - adjust) ;
< 	wxPoint hPoint(0 , height-MAC_SCROLLBAR_SIZE ) ;
< 	wxSize hSize( width - adjust, MAC_SCROLLBAR_SIZE) ;
< 	
< 	m_vScrollBar = new wxScrollBar(this, wxWINDOW_VSCROLL, vPoint, 
< 		vSize , wxVERTICAL);
< 
2081,2085c2095,2097
< 		
< 	}
< 	else
< 	{
< 		m_vScrollBar->Show(false) ;
---
>         m_vScrollBar = new wxScrollBar(this, wxWINDOW_VSCROLL, wxDefaultPosition,
>                                        wxDefaultSize, wxVERTICAL);
>         GetChildren().DeleteObject(m_vScrollBar);
2087,2092c2099,2100
< 	m_hScrollBar = new wxScrollBar(this, wxWINDOW_HSCROLL, hPoint, 
< 		hSize , wxHORIZONTAL);
< 	if ( style  & wxHSCROLL )
< 	{
< 	}
< 	else
---
> 
> 	if ( style & wxHSCROLL )
2094,2098c2102,2108
< 		m_hScrollBar->Show(false) ;
< 	}
< 	
< 	// because the create does not take into account the client area origin
< 	MacRepositionScrollBars() ; // we might have a real position shift
---
>         m_hScrollBar = new wxScrollBar(this, wxWINDOW_HSCROLL, wxDefaultPosition,
>                                        wxDefaultSize, wxHORIZONTAL);
>         GetChildren().DeleteObject(m_hScrollBar);
>     }
> 
>     // Now setup the scroll bar(s) position
> 	MacRepositionScrollBars();
2103c2113,2118
< 	bool hasBoth = ( m_hScrollBar && m_hScrollBar->IsShown()) && ( m_vScrollBar && m_vScrollBar->IsShown()) ;
---
>     if((m_vScrollBar == NULL) && (m_hScrollBar == NULL)) {
>         // No scrollbars so return
>         return;
>     }
> 
>     bool hasBoth = ( m_hScrollBar && m_hScrollBar->IsShown()) && ( m_vScrollBar && m_vScrollBar->IsShown()) ;
2118c2133,2134
< 	
---
> 
> #ifndef __UNIX__
2141c2157
< 	
---
> 
2163a2180
> #endif
2167c2184
< 		m_vScrollBar->SetSize( vPoint.x , vPoint.y, vSize.x, vSize.y , wxSIZE_ALLOW_MINUS_ONE);
---
> 		m_vScrollBar->SetSize( vPoint.x, vPoint.y, vSize.x, vSize.y, wxSIZE_ALLOW_MINUS_ONE);
2171c2188
< 		m_hScrollBar->SetSize( hPoint.x , hPoint.y, hSize.x, hSize.y, wxSIZE_ALLOW_MINUS_ONE);
---
> 		m_hScrollBar->SetSize( hPoint.x, hPoint.y, hSize.x, hSize.y, wxSIZE_ALLOW_MINUS_ONE);

 	  	 

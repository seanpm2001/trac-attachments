? wxX11univ_unicode_font.patch
Index: src/x11/font.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/x11/font.cpp,v
retrieving revision 1.31
diff -u -r1.31 font.cpp
--- src/x11/font.cpp	2006/11/20 16:21:00	1.31
+++ src/x11/font.cpp	2007/03/01 09:08:17
@@ -40,6 +40,7 @@
 
 #include "wx/fontutil.h"    // for wxNativeFontInfo
 #include "wx/tokenzr.h"
+#include "wx/fontenum.h"
 
 #include "wx/x11/private.h"
 
@@ -188,7 +189,7 @@
 
     // and here, do we really want to forbid creation of the font of the size
     // 90 (the value of wxDEFAULT)??
-    m_pointSize = pointSize == wxDEFAULT || pointSize == -1
+    m_pointSize = pointSize == wxDEFAULT || pointSize < 1
                     ? wxDEFAULT_FONT_SIZE
                     : pointSize;
 
@@ -196,26 +197,53 @@
     m_encoding = encoding;
 
 #if wxUSE_UNICODE
+    if (m_nativeFontInfo.description)
+        pango_font_description_free( m_nativeFontInfo.description );
+
     // Create native font info
     m_nativeFontInfo.description = pango_font_description_new();
 
-    // And set its values
-    switch (m_family)
-    {
-        case wxFONTFAMILY_MODERN:
-        case wxFONTFAMILY_TELETYPE:
-           pango_font_description_set_family( m_nativeFontInfo.description, "monospace" );
-           break;
-        case wxFONTFAMILY_ROMAN:
-           pango_font_description_set_family( m_nativeFontInfo.description, "serif" );
-           break;
-        default:
-           pango_font_description_set_family( m_nativeFontInfo.description, "sans" );
-           break;
+    // Font with special facename
+    if(!faceName.empty()) {
+
+        // Be sure the font exist on system 
+        // else try to load default font
+        if (!wxFontEnumerator::IsValidFacename(m_faceName)) {
+            // Load default sytem font
+            wxString str = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT).GetFaceName();
+
+            if(str.empty())     // When no Default Font ?
+                str = wxT("sans");
+
+            m_nativeFontInfo.SetFaceName(str);
+            m_faceName = str;
+
+            str.Printf(wxT("Font facename not font! Set default font: %s"), m_faceName.GetData());
+            wxFAIL_MSG(str);
+        }
+        else
+            m_nativeFontInfo.SetFaceName( faceName );
+    } 
+    // When no facename given (old way)
+    // TODO: Scan system for one valid font that match to the given family
+    else {
+        switch (m_family)
+        {
+            case wxFONTFAMILY_TELETYPE:
+                m_nativeFontInfo.SetFaceName( wxT("monospace") );
+                break;
+            case wxFONTFAMILY_ROMAN:
+                m_nativeFontInfo.SetFaceName( wxT("serif") );
+                break;
+            default:
+                m_nativeFontInfo.SetFaceName( wxT("sans") );
+                break;
+        }
+        m_faceName = m_nativeFontInfo.GetFaceName();
     }
-    SetStyle( m_style );
-    SetPointSize( m_pointSize );
-    SetWeight( m_weight );
+    m_nativeFontInfo.SetPointSize( m_pointSize );
+    m_nativeFontInfo.SetWeight( (wxFontWeight)m_weight );
+    m_nativeFontInfo.SetStyle( (wxFontStyle)m_style );
 #endif
 }
 
@@ -454,7 +482,9 @@
 
 void wxFontRefData::SetPointSize(int pointSize)
 {
-    m_pointSize = pointSize;
+    m_pointSize = pointSize == wxDEFAULT || pointSize < 1
+        ? wxDEFAULT_FONT_SIZE
+        : pointSize;
 
 #if wxUSE_UNICODE
     // Get native info

 	  	 

Index: include/wx/string.h
===================================================================
--- include/wx/string.h	(revision 53691)
+++ include/wx/string.h	(working copy)
@@ -1680,6 +1680,8 @@
   size_t Replace(const wxString& strOld,
                  const wxString& strNew,
                  bool bReplaceAll = true);
+      // character version
+  size_t Replace(wxChar from, wxChar to, bool bReplaceAll = true);
 
     // check if the string contents matches a mask containing '*' and '?'
   bool Matches(const wxString& mask) const;
Index: interface/string.h
===================================================================
--- interface/string.h	(revision 53691)
+++ interface/string.h	(working copy)
@@ -824,6 +824,16 @@
                    bool replaceAll = true);
 
     /**
+        Replace first (or all) occurrences of character with another one.
+        @e replaceAll: global replace (default), or only the first occurrence.
+        Returns the number of replacements made.
+           
+        @since 2.9.0
+    */
+    size_t Replace(wxChar from, wxChar to,
+                   bool replaceAll = true);
+
+    /**
         Returns the last @a count characters.
     */
     wxString Right(size_t count) const;
Index: src/common/string.cpp
===================================================================
--- src/common/string.cpp	(revision 53691)
+++ src/common/string.cpp	(working copy)
@@ -1265,6 +1265,31 @@
     return uiCount;
 }
 
+// replace first (or all) occurences of some character with another one
+size_t wxString::Replace(wxChar from,
+                         wxChar to, bool bReplaceAll)
+{
+    size_t uiCount = 0;   // count of replacements made
+    for (iterator i = begin(); i != end(); i++)
+    {
+        if (from == *i)
+        {
+            // replace this occurance of the old char with the new one
+            *i = to;
+
+            // increase replace count
+            ++uiCount;
+
+            // stop after the first one?
+            if ( !bReplaceAll )
+            {
+                break;
+            }
+        }
+    }
+    return uiCount;
+}
+
 bool wxString::IsAscii() const
 {
     for ( const_iterator i = begin(); i != end(); ++i )
Index: src/common/sysopt.cpp
===================================================================
--- src/common/sysopt.cpp	(revision 53691)
+++ src/common/sysopt.cpp	(working copy)
@@ -82,7 +82,7 @@
         // which can be set to affect the behaviour or just this application
         // and then for "wx_name" which can be set to change the option globally
         wxString var(name);
-        var.Replace(_T("."), _T("_"));  // '.'s not allowed in env var names
+        var.Replace('.', '_');  // '.'s not allowed in env var names
 
         wxString appname;
         if ( wxTheApp )
Index: src/generic/dirctrlg.cpp
===================================================================
--- src/generic/dirctrlg.cpp	(revision 53691)
+++ src/generic/dirctrlg.cpp	(working copy)
@@ -951,8 +951,8 @@
     wxString path2(path);
 
     // Make sure all separators are as per the current platform
-    path2.Replace(wxT("\\"), wxString(wxFILE_SEP_PATH));
-    path2.Replace(wxT("/"), wxString(wxFILE_SEP_PATH));
+    path2.Replace(wxFILE_SEP_PATH_DOS , wxFILE_SEP_PATH);
+    path2.Replace(wxFILE_SEP_PATH_UNIX, wxFILE_SEP_PATH);
 
     // Append a separator to foil bogus substring matching
     path2 += wxString(wxFILE_SEP_PATH);
Index: src/msw/dir.cpp
===================================================================
--- src/msw/dir.cpp	(revision 53691)
+++ src/msw/dir.cpp	(working copy)
@@ -333,9 +333,9 @@
         if ( !name.empty() )
         {
             // bring to canonical Windows form
-            name.Replace(_T("/"), _T("\\"));
+            name.Replace(wxFILE_SEP_PATH_UNIX, wxFILE_SEP_PATH);
 
-            if ( name.Last() == _T('\\') )
+            if ( name.Last() == wxFILE_SEP_PATH )
             {
                 // chop off the last (back)slash
                 name.Truncate(name.length() - 1);
Index: src/msw/dirdlg.cpp
===================================================================
--- src/msw/dirdlg.cpp	(revision 53691)
+++ src/msw/dirdlg.cpp	(working copy)
@@ -100,10 +100,10 @@
     m_path = path;
 
     // SHBrowseForFolder doesn't like '/'s nor the trailing backslashes
-    m_path.Replace(_T("/"), _T("\\"));
+    m_path.Replace(wxFILE_SEP_PATH_UNIX, wxFILE_SEP_PATH);
     if ( !m_path.empty() )
     {
-        while ( *(m_path.end() - 1) == _T('\\') )
+        while ( *(m_path.end() - 1) == wxFILE_SEP_PATH )
         {
             m_path.erase(m_path.length() - 1);
         }
@@ -112,7 +112,7 @@
         // the way the native dialog works)
         if ( *(m_path.end() - 1) == _T(':') )
         {
-            m_path += _T('\\');
+            m_path += wxFILE_SEP_PATH;
         }
     }
 }
Index: src/msw/tooltip.cpp
===================================================================
--- src/msw/tooltip.cpp	(revision 53691)
+++ src/msw/tooltip.cpp	(working copy)
@@ -386,7 +386,7 @@
             {
                 // replace the '\n's with spaces because otherwise they appear as
                 // unprintable characters in the tooltip string
-                m_text.Replace(_T("\n"), _T(" "));
+                m_text.Replace('\n', ' ');
                 ti.lpszText = (wxChar *)m_text.wx_str(); // const_cast
 
                 if ( !SendTooltipMessage(GetToolTipCtrl(), TTM_ADDTOOL, &ti) )

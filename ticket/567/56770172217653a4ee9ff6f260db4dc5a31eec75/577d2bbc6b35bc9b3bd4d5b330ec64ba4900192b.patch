Index: src/aui/framemanager.cpp
===================================================================
--- src/aui/framemanager.cpp	(revision 53750)
+++ src/aui/framemanager.cpp	(working copy)
@@ -1463,12 +1463,12 @@
 
     // replace escaped characters so we can
     // split up the string easily
-    pane.name.Replace(wxT("\a"), wxT("|"));
-    pane.name.Replace(wxT("\b"), wxT(";"));
-    pane.caption.Replace(wxT("\a"), wxT("|"));
-    pane.caption.Replace(wxT("\b"), wxT(";"));
-    pane_part.Replace(wxT("\a"), wxT("|"));
-    pane_part.Replace(wxT("\b"), wxT(";"));
+    pane.name.Replace(wxT('\a'), wxT('|'));
+    pane.name.Replace(wxT('\b'), wxT(';'));
+    pane.caption.Replace(wxT('\a'), wxT('|'));
+    pane.caption.Replace(wxT('\b'), wxT(';'));
+    pane_part.Replace(wxT('\a'), wxT('|'));
+    pane_part.Replace(wxT('\b'), wxT(';'));
 
     return;
 }
@@ -1573,8 +1573,8 @@
 
         // Undo our escaping as LoadPaneInfo needs to take an unescaped
         // name so it can be called by external callers
-        pane_part.Replace(wxT("\a"), wxT("|"));
-        pane_part.Replace(wxT("\b"), wxT(";"));
+        pane_part.Replace(wxT('\a'), wxT('|'));
+        pane_part.Replace(wxT('\b'), wxT(';'));
 
         LoadPaneInfo(pane_part, pane);
 
Index: src/common/ftp.cpp
===================================================================
--- src/common/ftp.cpp	(revision 53750)
+++ src/common/ftp.cpp	(working copy)
@@ -654,7 +654,7 @@
     int portNew = addrNew.Service();
 
     // We need to break the PORT number in bytes
-    addrIP.Replace(_T("."), _T(","));
+    addrIP.Replace(wxT('.'), wxT(','));
     addrIP << _T(',')
            << wxString::Format(_T("%d"), portNew >> 8) << _T(',')
            << wxString::Format(_T("%d"), portNew & 0xff);
Index: src/common/sysopt.cpp
===================================================================
--- src/common/sysopt.cpp	(revision 53750)
+++ src/common/sysopt.cpp	(working copy)
@@ -82,7 +82,7 @@
         // which can be set to affect the behaviour or just this application
         // and then for "wx_name" which can be set to change the option globally
         wxString var(name);
-        var.Replace(_T("."), _T("_"));  // '.'s not allowed in env var names
+        var.Replace(wxT('.'), wxT('_'));  // '.'s not allowed in env var names
 
         wxString appname;
         if ( wxTheApp )
Index: src/generic/dcpsg.cpp
===================================================================
--- src/generic/dcpsg.cpp	(revision 53750)
+++ src/generic/dcpsg.cpp	(working copy)
@@ -381,7 +381,7 @@
             XLOG2DEV(x+w), YLOG2DEV(y),
             XLOG2DEV(x+w), YLOG2DEV(y+h),
             XLOG2DEV(x),   YLOG2DEV(y+h) );
-    buffer.Replace( ",", "." );
+    buffer.Replace( wxT(','), wxT('.'));
     PsPrint( buffer );
 }
 
@@ -438,7 +438,7 @@
                    "stroke\n",
             XLOG2DEV(x1), YLOG2DEV(y1),
             XLOG2DEV(x2), YLOG2DEV(y2) );
-    buffer.Replace( ",", "." );
+    buffer.Replace( wxT(','), wxT('.'));
     PsPrint( buffer );
 
     CalcBoundingBox( x1, y1 );
@@ -494,7 +494,7 @@
                 XLOG2DEVREL(i_radius), YLOG2DEVREL(i_radius),
                 alpha1, alpha2,
                 XLOG2DEV(xc), YLOG2DEV(yc) );
-        buffer.Replace( ",", "." );
+        buffer.Replace( wxT(','), wxT('.'));
         PsPrint( buffer );
 
         CalcBoundingBox( xc-i_radius, yc-i_radius );
@@ -515,7 +515,7 @@
                 XLOG2DEVREL(i_radius), YLOG2DEVREL(i_radius),
                 alpha1, alpha2,
                 XLOG2DEV(xc), YLOG2DEV(yc) );
-        buffer.Replace( ",", "." );
+        buffer.Replace( wxT(','), wxT('.'));
         PsPrint( buffer );
 
         CalcBoundingBox( xc-i_radius, yc-i_radius );
@@ -552,7 +552,7 @@
                   XLOG2DEV(x+w/2), YLOG2DEV(y+h/2),
                   XLOG2DEVREL(w/2), YLOG2DEVREL(h/2),
                   sa, ea );
-        buffer.Replace( ",", "." );
+        buffer.Replace( wxT(','), wxT('.'));
         PsPrint( buffer );
 
         CalcBoundingBox( x ,y );
@@ -569,7 +569,7 @@
                   XLOG2DEV(x+w/2), YLOG2DEV(y+h/2),
                   XLOG2DEVREL(w/2), YLOG2DEVREL(h/2),
                   sa, ea );
-        buffer.Replace( ",", "." );
+        buffer.Replace( wxT(','), wxT('.'));
         PsPrint( buffer );
 
         CalcBoundingBox( x ,y );
@@ -592,7 +592,7 @@
                    "stroke\n",
             XLOG2DEV(x),   YLOG2DEV(y),
             XLOG2DEV(x+1), YLOG2DEV(y) );
-    buffer.Replace( ",", "." );
+    buffer.Replace( wxT(','), wxT('.'));
     PsPrint( buffer );
 
     CalcBoundingBox( x, y );
@@ -615,7 +615,7 @@
 
         wxString buffer;
         buffer.Printf( "%f %f moveto\n", xx, yy );
-        buffer.Replace( ",", "." );
+        buffer.Replace( wxT(','), wxT('.'));
         PsPrint( buffer );
 
         CalcBoundingBox( points[0].x + xoffset, points[0].y + yoffset );
@@ -626,7 +626,7 @@
             yy = YLOG2DEV(points[i].y + yoffset);
 
             buffer.Printf( "%f %f lineto\n", xx, yy );
-            buffer.Replace( ",", "." );
+            buffer.Replace( wxT(','), wxT('.'));
             PsPrint( buffer );
 
             CalcBoundingBox( points[i].x + xoffset, points[i].y + yoffset);
@@ -646,7 +646,7 @@
 
         wxString buffer;
         buffer.Printf( "%f %f moveto\n", xx, yy );
-        buffer.Replace( ",", "." );
+        buffer.Replace( wxT(','), wxT('.'));
         PsPrint( buffer );
 
         CalcBoundingBox( points[0].x + xoffset, points[0].y + yoffset );
@@ -657,7 +657,7 @@
             yy = YLOG2DEV(points[i].y + yoffset);
 
             buffer.Printf( "%f %f lineto\n", xx, yy );
-            buffer.Replace( ",", "." );
+            buffer.Replace( wxT(','), wxT('.'));
             PsPrint( buffer );
 
             CalcBoundingBox( points[i].x + xoffset, points[i].y + yoffset);
@@ -688,7 +688,7 @@
 
             wxString buffer;
             buffer.Printf( "%f %f moveto\n", xx, yy );
-            buffer.Replace( ",", "." );
+            buffer.Replace( wxT(','), wxT('.'));
             PsPrint( buffer );
 
             CalcBoundingBox( points[ofs].x + xoffset, points[ofs].y + yoffset );
@@ -699,7 +699,7 @@
                 yy = YLOG2DEV(points[ofs+j].y + yoffset);
 
                 buffer.Printf( "%f %f lineto\n", xx, yy );
-                buffer.Replace( ",", "." );
+                buffer.Replace( wxT(','), wxT('.'));
                 PsPrint( buffer );
 
                 CalcBoundingBox( points[ofs+j].x + xoffset, points[ofs+j].y + yoffset);
@@ -722,7 +722,7 @@
 
             wxString buffer;
             buffer.Printf( "%f %f moveto\n", xx, yy );
-            buffer.Replace( ",", "." );
+            buffer.Replace( wxT(','), wxT('.'));
             PsPrint( buffer );
 
             CalcBoundingBox( points[ofs].x + xoffset, points[ofs].y + yoffset );
@@ -733,7 +733,7 @@
                 yy = YLOG2DEV(points[ofs+j].y + yoffset);
 
                 buffer.Printf( "%f %f lineto\n", xx, yy );
-                buffer.Replace( ",", "." );
+                buffer.Replace( wxT(','), wxT('.'));
                 PsPrint( buffer );
 
                 CalcBoundingBox( points[ofs+j].x + xoffset, points[ofs+j].y + yoffset);
@@ -763,7 +763,7 @@
                    "%f %f moveto\n",
               XLOG2DEV(points[0].x+xoffset),
               YLOG2DEV(points[0].y+yoffset) );
-    buffer.Replace( ",", "." );
+    buffer.Replace( wxT(','), wxT('.'));
     PsPrint( buffer );
 
     for (i = 1; i < n; i++)
@@ -771,7 +771,7 @@
         buffer.Printf( "%f %f lineto\n",
                   XLOG2DEV(points[i].x+xoffset),
                   YLOG2DEV(points[i].y+yoffset) );
-        buffer.Replace( ",", "." );
+        buffer.Replace( wxT(','), wxT('.'));
         PsPrint( buffer );
     }
 
@@ -801,7 +801,7 @@
                 XLOG2DEV(x + width), YLOG2DEV(y),
                 XLOG2DEV(x + width), YLOG2DEV(y + height),
                 XLOG2DEV(x),         YLOG2DEV(y + height) );
-        buffer.Replace( ",", "." );
+        buffer.Replace( wxT(','), wxT('.'));
         PsPrint( buffer );
 
         CalcBoundingBox( x, y );
@@ -824,7 +824,7 @@
                 XLOG2DEV(x + width), YLOG2DEV(y),
                 XLOG2DEV(x + width), YLOG2DEV(y + height),
                 XLOG2DEV(x),         YLOG2DEV(y + height) );
-        buffer.Replace( ",", "." );
+        buffer.Replace( wxT(','), wxT('.'));
         PsPrint( buffer );
 
         CalcBoundingBox( x, y );
@@ -874,7 +874,7 @@
                 XLOG2DEV(x + width), YLOG2DEV(y + rad),
                 XLOG2DEV(x + width - rad), YLOG2DEV(y + rad), XLOG2DEVREL(rad),
                 XLOG2DEV(x + rad), YLOG2DEV(y) );
-        buffer.Replace( ",", "." );
+        buffer.Replace( wxT(','), wxT('.'));
         PsPrint( buffer );
 
         CalcBoundingBox( x, y );
@@ -906,7 +906,7 @@
                 XLOG2DEV(x + width), YLOG2DEV(y + rad),
                 XLOG2DEV(x + width - rad), YLOG2DEV(y + rad), XLOG2DEVREL(rad),
                 XLOG2DEV(x + rad), YLOG2DEV(y) );
-        buffer.Replace( ",", "." );
+        buffer.Replace( wxT(','), wxT('.'));
         PsPrint( buffer );
 
         CalcBoundingBox( x, y );
@@ -931,7 +931,7 @@
                        "fill\n",
                 XLOG2DEV(x + width / 2), YLOG2DEV(y + height / 2),
                 XLOG2DEVREL(width / 2), YLOG2DEVREL(height / 2) );
-        buffer.Replace( ",", "." );
+        buffer.Replace( wxT(','), wxT('.'));
         PsPrint( buffer );
 
         CalcBoundingBox( x - width, y - height );
@@ -948,7 +948,7 @@
                        "stroke\n",
                 XLOG2DEV(x + width / 2), YLOG2DEV(y + height / 2),
                 XLOG2DEVREL(width / 2), YLOG2DEVREL(height / 2) );
-        buffer.Replace( ",", "." );
+        buffer.Replace( wxT(','), wxT('.'));
         PsPrint( buffer );
 
         CalcBoundingBox( x - width, y - height );
@@ -997,7 +997,7 @@
                    "{currentfile pix readhexstring pop}\n"
                    "false 3 colorimage\n",
             w, w, xx, yy, ww, hh, w, h, w, -h, h );
-    buffer.Replace( ",", "." );
+    buffer.Replace( wxT(','), wxT('.'));
     PsPrint( buffer );
 
     unsigned char* data = image.GetData();
@@ -1124,7 +1124,7 @@
     double size = (double) m_font.GetPointSize();
     wxString buffer;
     buffer.Printf( "%f scalefont setfont\n", size * DEV2PS * m_scaleX );
-    buffer.Replace( ",", "." );
+    buffer.Replace( wxT(','), wxT('.'));
     PsPrint( buffer );
 }
 
@@ -1147,7 +1147,7 @@
 
     wxString buffer;
     buffer.Printf( "%f setlinewidth\n", width * DEV2PS * m_scaleX );
-    buffer.Replace( ",", "." );
+    buffer.Replace( wxT(','), wxT('.'));
     PsPrint( buffer );
 
 /*
@@ -1227,7 +1227,7 @@
 
         wxString buffer;
         buffer.Printf( "%f %f %f setrgbcolor\n", redPS, greenPS, bluePS );
-        buffer.Replace( ",", "." );
+        buffer.Replace( wxT(','), wxT('.'));
         PsPrint( buffer );
 
         m_currentRed = red;
@@ -1271,7 +1271,7 @@
 
         wxString buffer;
         buffer.Printf( "%f %f %f setrgbcolor\n", redPS, greenPS, bluePS );
-        buffer.Replace( ",", "." );
+        buffer.Replace( wxT(','), wxT('.'));
         PsPrint( buffer );
 
         m_currentRed = red;
@@ -1316,7 +1316,7 @@
 
             wxString buffer;
             buffer.Printf( "%f %f %f setrgbcolor\n", redPS, greenPS, bluePS );
-            buffer.Replace( ",", "." );
+            buffer.Replace( wxT(','), wxT('.'));
             PsPrint( buffer );
 
             m_currentRed = red;
@@ -1338,7 +1338,7 @@
 
     wxString buffer;
     buffer.Printf( "%f %f moveto\n", XLOG2DEV(x), YLOG2DEV(by) );
-    buffer.Replace( ",", "." );
+    buffer.Replace( wxT(','), wxT('.'));
     PsPrint( buffer );
     PsPrint( "(" );
 
@@ -1378,7 +1378,7 @@
                 XLOG2DEV(x), YLOG2DEV(uy),
                 m_underlineThickness,
                 XLOG2DEV(x + text_w), YLOG2DEV(uy) );
-        buffer.Replace( ",", "." );
+        buffer.Replace( wxT(','), wxT('.'));
         PsPrint( buffer );
     }
 
@@ -1426,7 +1426,7 @@
 
             wxString buffer;
             buffer.Printf( "%f %f %f setrgbcolor\n", redPS, greenPS, bluePS );
-            buffer.Replace( ",", "." );
+            buffer.Replace( wxT(','), wxT('.'));
             PsPrint( buffer );
 
             m_currentRed = red;
@@ -1439,11 +1439,11 @@
 
     wxString buffer;
     buffer.Printf( "%f %f moveto\n", XLOG2DEV(x), YLOG2DEV(y));
-    buffer.Replace( ",", "." );
+    buffer.Replace( wxT(','), wxT('.'));
     PsPrint( buffer );
 
     buffer.Printf( "%f rotate\n", angle );
-    buffer.Replace( ",", "." );
+    buffer.Replace( wxT(','), wxT('.'));
     PsPrint( buffer );
 
     PsPrint( "(" );
@@ -1475,7 +1475,7 @@
     PsPrint( ") show\n" );
 
     buffer.Printf( "%f rotate\n", -angle );
-    buffer.Replace( ",", "." );
+    buffer.Replace( wxT(','), wxT('.'));
     PsPrint( buffer );
 
     if (m_font.GetUnderlined())
@@ -1494,7 +1494,7 @@
                 XLOG2DEV(x), YLOG2DEV(uy),
                 m_underlineThickness,
                 XLOG2DEV(x + w), YLOG2DEV(uy) );
-        buffer.Replace( ",", "." );
+        buffer.Replace( wxT(','), wxT('.'));
         PsPrint( buffer );
     }
 
@@ -1550,7 +1550,7 @@
                    "%f %f lineto\n",
             XLOG2DEV(wxRound(x1)), YLOG2DEV(wxRound(y1)),
             XLOG2DEV(wxRound(x3)), YLOG2DEV(wxRound(y3)) );
-    buffer.Replace( ",", "." );
+    buffer.Replace( wxT(','), wxT('.'));
     PsPrint( buffer );
 
     CalcBoundingBox( (wxCoord)x1, (wxCoord)y1 );
@@ -1574,7 +1574,7 @@
             XLOG2DEV(wxRound(x1)), YLOG2DEV(wxRound(y1)),
             XLOG2DEV(wxRound(x2)), YLOG2DEV(wxRound(y2)),
             XLOG2DEV(wxRound(x3)), YLOG2DEV(wxRound(y3)) );
-        buffer.Replace( ",", "." );
+        buffer.Replace( wxT(','), wxT('.'));
         PsPrint( buffer );
 
         CalcBoundingBox( (wxCoord)x1, (wxCoord)y1 );
@@ -1589,7 +1589,7 @@
      */
 
     buffer.Printf( "%f %f lineto\nstroke\n", XLOG2DEV(wxRound(c)), YLOG2DEV(wxRound(d)) );
-    buffer.Replace( ",", "." );
+    buffer.Replace( wxT(','), wxT('.'));
     PsPrint( buffer );
 }
 #endif // wxUSE_SPLINES
@@ -1911,7 +1911,7 @@
     double scale_y = data->GetPrinterScaleY();
 
     buffer.Printf( "%f %f scale\n", scale_x, scale_y );
-    buffer.Replace( ",", "." );
+    buffer.Replace( wxT(','), wxT('.'));
     PsPrint( buffer );
 
 #endif
Index: src/generic/dirctrlg.cpp
===================================================================
--- src/generic/dirctrlg.cpp	(revision 53750)
+++ src/generic/dirctrlg.cpp	(working copy)
@@ -951,8 +951,8 @@
     wxString path2(path);
 
     // Make sure all separators are as per the current platform
-    path2.Replace(wxT("\\"), wxString(wxFILE_SEP_PATH));
-    path2.Replace(wxT("/"), wxString(wxFILE_SEP_PATH));
+    path2.Replace(wxT('\\'), wxFILE_SEP_PATH);
+    path2.Replace(wxT('/'), wxFILE_SEP_PATH);
 
     // Append a separator to foil bogus substring matching
     path2 += wxString(wxFILE_SEP_PATH);
Index: src/generic/listctrl.cpp
===================================================================
--- src/generic/listctrl.cpp	(revision 53750)
+++ src/generic/listctrl.cpp	(working copy)
@@ -1593,7 +1593,7 @@
     // we don't support displaying multiple lines currently (and neither does
     // wxMSW FWIW) so just merge all the lines
     wxString text(textOrig);
-    text.Replace(_T("\n"), _T(" "));
+    text.Replace(wxT('\n'), wxT(' '));
 
     wxCoord w, h;
     dc->GetTextExtent(text, &w, &h);
Index: src/generic/logg.cpp
===================================================================
--- src/generic/logg.cpp	(revision 53750)
+++ src/generic/logg.cpp	(working copy)
@@ -950,7 +950,7 @@
         }
 
         wxString msg = m_messages[n];
-        msg.Replace(wxT("\n"), wxT(" "));
+        msg.Replace(wxT('\n'), wxT(' '));
         msg = EllipsizeString(msg);
 
         m_listctrl->InsertItem(n, msg, image);
Index: src/html/helpdata.cpp
===================================================================
--- src/html/helpdata.cpp	(revision 53750)
+++ src/html/helpdata.cpp	(working copy)
@@ -488,10 +488,10 @@
 static wxString SafeFileName(const wxString& s)
 {
     wxString res(s);
-    res.Replace(wxT("#"), wxT("_"));
-    res.Replace(wxT(":"), wxT("_"));
-    res.Replace(wxT("\\"), wxT("_"));
-    res.Replace(wxT("/"), wxT("_"));
+    res.Replace(wxT('#'), wxT('_'));
+    res.Replace(wxT(':'), wxT('_'));
+    res.Replace(wxT('\\'), wxT('_'));
+    res.Replace(wxT('/'), wxT('_'));
     return res;
 }
 
Index: src/msw/dir.cpp
===================================================================
--- src/msw/dir.cpp	(revision 53750)
+++ src/msw/dir.cpp	(working copy)
@@ -333,7 +333,7 @@
         if ( !name.empty() )
         {
             // bring to canonical Windows form
-            name.Replace(_T("/"), _T("\\"));
+            name.Replace(wxT('/'), wxT('\\'));
 
             if ( name.Last() == _T('\\') )
             {
Index: src/msw/dirdlg.cpp
===================================================================
--- src/msw/dirdlg.cpp	(revision 53750)
+++ src/msw/dirdlg.cpp	(working copy)
@@ -100,7 +100,7 @@
     m_path = path;
 
     // SHBrowseForFolder doesn't like '/'s nor the trailing backslashes
-    m_path.Replace(_T("/"), _T("\\"));
+    m_path.Replace(wxT('/'), wxT('\\'));
     if ( !m_path.empty() )
     {
         while ( *(m_path.end() - 1) == _T('\\') )
Index: src/msw/tooltip.cpp
===================================================================
--- src/msw/tooltip.cpp	(revision 53750)
+++ src/msw/tooltip.cpp	(working copy)
@@ -386,7 +386,7 @@
             {
                 // replace the '\n's with spaces because otherwise they appear as
                 // unprintable characters in the tooltip string
-                m_text.Replace(_T("\n"), _T(" "));
+                m_text.Replace(wxT('\n'), wxT(' '));
                 ti.lpszText = (wxChar *)m_text.wx_str(); // const_cast
 
                 if ( !SendTooltipMessage(GetToolTipCtrl(), TTM_ADDTOOL, &ti) )

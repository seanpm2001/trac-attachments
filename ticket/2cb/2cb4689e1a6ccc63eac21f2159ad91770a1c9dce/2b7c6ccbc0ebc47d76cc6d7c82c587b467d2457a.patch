Index: include/wx/image.h
===================================================================
--- include/wx/image.h	(revision 56790)
+++ include/wx/image.h	(working copy)
@@ -36,6 +36,9 @@
 
 #define wxIMAGE_OPTION_RESOLUTIONUNIT        wxString(_T("ResolutionUnit"))
 
+#define wxIMAGE_OPTION_MAX_WIDTH             wxString(_T("MaxWidth"))
+#define wxIMAGE_OPTION_MAX_HEIGHT            wxString(_T("MaxHeight"))
+
 // constants used with wxIMAGE_OPTION_RESOLUTIONUNIT
 //
 // NB: don't change these values, they correspond to libjpeg constants
Index: interface/wx/image.h
===================================================================
--- interface/wx/image.h	(revision 56790)
+++ interface/wx/image.h	(working copy)
@@ -772,6 +772,10 @@
         @li wxPNG_TYPE_GREY: Stores grey image, converts from RGB.
         @li wxPNG_TYPE_GREY_RED: Stores grey image, uses red value as grey.
 
+        Options for wxJPEGHandler:
+        @li wxIMAGE_OPTION_MAX_WIDTH: The picture will be scaled to a width smaller or equal to this setting.
+        @li wxIMAGE_OPTION_MAX_HEIGHT: The picture will be scaled to a height smaller or equal to this setting.
+
         @see SetOption(), GetOption()
     */
     int GetOptionInt(const wxString& name) const;
Index: samples/image/image.cpp
===================================================================
--- samples/image/image.cpp	(revision 56790)
+++ samples/image/image.cpp	(working copy)
@@ -119,6 +119,8 @@
     void OnAbout( wxCommandEvent &event );
     void OnNewFrame( wxCommandEvent &event );
     void OnImageInfo( wxCommandEvent &event );
+    void OnThumbnail( wxCommandEvent &event );
+
 #ifdef wxHAVE_RAW_BITMAP
     void OnTestRawBitmap( wxCommandEvent &event );
 #endif // wxHAVE_RAW_BITMAP
@@ -1110,7 +1112,8 @@
     ID_ABOUT = wxID_ABOUT,
     ID_NEW = 100,
     ID_INFO,
-    ID_SHOWRAW
+    ID_SHOWRAW,
+    ID_SHOWTHUMBNAIL
 };
 
 IMPLEMENT_DYNAMIC_CLASS( MyFrame, wxFrame )
@@ -1120,6 +1123,7 @@
   EVT_MENU    (ID_QUIT,  MyFrame::OnQuit)
   EVT_MENU    (ID_NEW,   MyFrame::OnNewFrame)
   EVT_MENU    (ID_INFO,  MyFrame::OnImageInfo)
+  EVT_MENU    (ID_SHOWTHUMBNAIL, MyFrame::OnThumbnail)
 #ifdef wxHAVE_RAW_BITMAP
   EVT_MENU    (ID_SHOWRAW, MyFrame::OnTestRawBitmap)
 #endif
@@ -1144,6 +1148,8 @@
   menuImage->Append( ID_SHOWRAW, _T("Test &raw bitmap...\tCtrl-R"));
 #endif
   menuImage->AppendSeparator();
+  menuImage->Append( ID_SHOWTHUMBNAIL, _T("Test &thumb...\tCtrl-T"));
+  menuImage->AppendSeparator();
   menuImage->Append( ID_ABOUT, _T("&About..."));
   menuImage->AppendSeparator();
   menuImage->Append( ID_QUIT, _T("E&xit\tCtrl-Q"));
@@ -1309,3 +1315,33 @@
 
     return true;
 }
+
+void MyFrame::OnThumbnail( wxCommandEvent &WXUNUSED(event) )
+{
+  wxImage image;
+
+#if wxUSE_FILEDLG
+  wxString filename;
+  filename = wxFileSelector(_T("Select image file"));
+
+  if ( filename.empty() )
+    return;
+
+  image.SetOption(wxIMAGE_OPTION_MAX_WIDTH , 50);
+  image.SetOption(wxIMAGE_OPTION_MAX_HEIGHT, 50);
+
+  if ( !image.LoadFile(filename) )
+  {
+    wxLogError(_T("Couldn't load image from '%s'."), filename.c_str());
+    return;
+  }
+#else
+  wxLogError( _T("Couldn't create file selector dialog") );
+  return;
+#endif // wxUSE_FILEDLG
+
+  image.Rescale(50, 50, wxIMAGE_QUALITY_HIGH);
+
+  (new MyImageFrame(this, filename, wxBitmap(image)))->Show();
+}
+
Index: src/common/image.cpp
===================================================================
--- src/common/image.cpp	(revision 56790)
+++ src/common/image.cpp	(working copy)
@@ -1978,7 +1978,10 @@
 
 void wxImage::SetOption(const wxString& name, const wxString& value)
 {
-    wxCHECK_RET( Ok(), wxT("invalid image") );
+    if ( !M_IMGDATA )
+    {
+      m_refData = new wxImageRefData;
+    }
 
     AllocExclusive();
 
@@ -2004,7 +2007,10 @@
 
 wxString wxImage::GetOption(const wxString& name) const
 {
-    wxCHECK_MSG( Ok(), wxEmptyString, wxT("invalid image") );
+    if ( !M_IMGDATA )
+    {
+        return wxEmptyString;
+    }
 
     int idx = M_IMGDATA->m_optionNames.Index(name, false);
     if (idx == wxNOT_FOUND)
@@ -2020,9 +2026,14 @@
 
 bool wxImage::HasOption(const wxString& name) const
 {
-    wxCHECK_MSG( Ok(), false, wxT("invalid image") );
-
-    return (M_IMGDATA->m_optionNames.Index(name, false) != wxNOT_FOUND);
+    if ( !M_IMGDATA )
+    {
+        return false;
+    }
+    else
+    {
+        return (M_IMGDATA->m_optionNames.Index(name, false) != wxNOT_FOUND);
+    }
 }
 
 // ----------------------------------------------------------------------------
@@ -2223,10 +2234,18 @@
 
 bool wxImage::LoadFile( wxInputStream& stream, wxBitmapType type, int index )
 {
+    wxImageRefData * my_refData = new wxImageRefData;
+    if ( M_IMGDATA )
+    {
+      for ( wxArrayString::const_iterator options = M_IMGDATA->m_optionNames.begin(); options != M_IMGDATA->m_optionNames.end(); options++ )
+        my_refData->m_optionNames.Add(*options);
+      for ( wxArrayString::const_iterator values = M_IMGDATA->m_optionValues.begin(); values != M_IMGDATA->m_optionValues.end(); values++ )
+        my_refData->m_optionValues.Add(*values);
+    }
+
     UnRef();
+    m_refData = my_refData;
 
-    m_refData = new wxImageRefData;
-
     wxImageHandler *handler;
 
     if ( type == wxBITMAP_TYPE_ANY )
Index: src/common/imagjpeg.cpp
===================================================================
--- src/common/imagjpeg.cpp	(revision 56790)
+++ src/common/imagjpeg.cpp	(working copy)
@@ -231,7 +231,14 @@
     struct jpeg_decompress_struct cinfo;
     wx_error_mgr jerr;
     unsigned char *ptr;
+    int maxWidth(0), maxHeight(0);
 
+    if ( image && (image->HasOption(wxIMAGE_OPTION_MAX_WIDTH) || image->HasOption(wxIMAGE_OPTION_MAX_HEIGHT) ))
+    {
+      maxWidth  = image->GetOptionInt(wxIMAGE_OPTION_MAX_WIDTH);
+      maxHeight = image->GetOptionInt(wxIMAGE_OPTION_MAX_HEIGHT);
+    }
+
     image->Destroy();
     cinfo.err = jpeg_std_error( &jerr );
     jerr.error_exit = wx_error_exit;
@@ -268,9 +275,28 @@
         bytesPerPixel = 3;
     }
 
+    // At this point we know the width/height of the picture.
+    if ( maxWidth > 0 || maxHeight > 0 )
+    {
+      while ( cinfo.scale_denom < 8 )
+      {
+        int current_width  = (cinfo.image_width/cinfo.scale_denom)  >> 1,
+            current_height = (cinfo.image_height/cinfo.scale_denom) >> 1;
+
+        if ( maxWidth != 0 && current_width <= maxWidth )
+          break; // We reached our maximum width
+
+        if ( maxHeight != 0 && current_height <= maxHeight )
+          break; // We reached our maximum height
+
+        // Try 1 step more
+        cinfo.scale_denom = cinfo.scale_denom << 1;
+      }
+    }
+
     jpeg_start_decompress( &cinfo );
 
-    image->Create( cinfo.image_width, cinfo.image_height );
+    image->Create( cinfo.output_width, cinfo.output_height );
     if (!image->Ok()) {
         jpeg_finish_decompress( &cinfo );
         jpeg_destroy_decompress( &cinfo );

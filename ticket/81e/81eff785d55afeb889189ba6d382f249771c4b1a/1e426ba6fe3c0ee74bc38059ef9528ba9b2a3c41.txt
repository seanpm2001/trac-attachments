helpview.exe caused an Integer Divide By Zero at location 005e9fe3 in module helpview.exe.

Registers:
eax=00000000 ebx=0075d108 ecx=0232bd28 edx=00000000 esi=0046bf18 edi=0023f5f0
eip=005e9fe3 esp=0023f040 ebp=0023f0c8 iopl=0         nv up ei pl zr ac po nc
cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000256

Call stack:
005E9FE3  helpview.exe:005E9FE3  wxHashTable::Get(wchar_t const*) const  hash.cpp:547
	...
	wxObject *wxHashTable::Get (const wxChar *key) const
	{
>	  int position = (int) (MakeKey (key) % n);
	  if (position < 0) position = -position;
	
	...

0041DB76  helpview.exe:0041DB76  wxHtmlHelpFrame::OnToolbar(wxCommandEvent&)  helpfrm.cpp:1428
	...
	                wxHtmlHelpHashData *ha;
	                if (an.IsEmpty())
>	                    ha = (wxHtmlHelpHashData*) m_PagesHash->Get(m_HtmlWin->GetOpenedPage());
	                else
	                    ha = (wxHtmlHelpHashData*) m_PagesHash->Get(m_HtmlWin->GetOpenedPage() + wxT("#") + an);
	...

0059A3C5  helpview.exe:0059A3C5  wxAppConsole::HandleEvent(wxEvtHandler*, void (wxEvtHandler::*)(wxEvent&), wxEvent&) const  appbase.cpp:307
	...
	{
	    // by default, simply call the handler
>	    (handler->*func)(event);
	}
	
	...

005A1E36  helpview.exe:005A1E36  wxEvtHandler::ProcessEventIfMatches(wxEventTableEntryBase const&, wxEvtHandler*, wxEvent&)  event.cpp:1208
	...
	            // any exceptions which may be thrown by any handler in the program
	            // in one place
>	            wxTheApp->HandleEvent(handler, (wxEventFunction)entry.m_fn, event);
	        }
	        else
	...

005A0B03  helpview.exe:005A0B03  wxEventHashTable::HandleEvent(wxEvent&, wxEvtHandler*)  event.cpp:866
	...
	        for (size_t n = 0; n < count; n++)
	        {
>	            if ( wxEvtHandler::
	                    ProcessEventIfMatches(*eventEntryTable[n], self, event) )
	            {
	...

005A20B5  helpview.exe:005A20B5  wxEvtHandler::ProcessEvent(wxEvent&)  event.cpp:1270
	...
	
	        // Then static per-class event tables
>	        if ( GetEventHashTable().HandleEvent(event, this) )
	            return true;
	    }
	...

00483197  helpview.exe:00483197  wxWindowBase::TryParent(wxEvent&)  wincmn.cpp:2461
	...
	                wxPropagateOnce propagateOnce(event);
	
>	                return parent->GetEventHandler()->ProcessEvent(event);
	            }
	        }
	...

005A211A  helpview.exe:005A211A  wxEvtHandler::ProcessEvent(wxEvent&)  event.cpp:1283
	...
	    // Finally propagate the event upwards the window chain and/or to the
	    // application object as necessary
>	    return TryParent(event);
	}
	
	...

0055348C  helpview.exe:0055348C  wxToolBarBase::OnLeftClick(int, bool)  tbarbase.cpp:611
	...
	
	    // Send events to this toolbar instead (and thence up the window hierarchy)
>	    GetEventHandler()->ProcessEvent(event);
	
	    return true;
	...

0054F39F  helpview.exe:0054F39F  wxToolBar::MSWCommand(unsigned, unsigned short)  tbar95.cpp:977
	...
	    // OnLeftClick() can veto the button state change - for buttons which
	    // may be toggled only, of couse
>	    if ( !OnLeftClick((int)id, toggled) && tool->CanBeToggled() )
	    {
	        // revert back
	...

00461FD1  helpview.exe:00461FD1  wxFrame::HandleCommand(unsigned short, unsigned short, void*)  frame.cpp:841
	...
	        wxWindow *win = wxFindWinFromHandle(control);
	        if ( win )
>	            return win->MSWCommand(cmd, id);
	    }
	
	...

0046254D  helpview.exe:0046254D  wxFrame::MSWWindowProc(unsigned, unsigned, long)  frame.cpp:943
	...
	                              &id, &hwnd, &cmd);
	
>	                processed = HandleCommand(id, cmd, (WXHWND)hwnd);
	            }
	            break;
	...

0046BFBF  helpview.exe:0046BFBF  wxWndProc(HWND__*, unsigned, unsigned, long)  window.cpp:2182
	...
	
	    if ( wnd )
>	        rc = wnd->MSWWindowProc(message, wParam, lParam);
	    else
	        rc = ::DefWindowProc(hWnd, message, wParam, lParam);
	...

77D18709  USER32.dll:77D18709  GetDC
77D187EB  USER32.dll:77D187EB  GetDC
77D1B743  USER32.dll:77D1B743  GetParent
77D1B7AB  USER32.dll:77D1B7AB  SendMessageW
77413FFA  COMCTL32.DLL:77413FFA  FlatSB_SetScrollProp
77414E6B  COMCTL32.DLL:77414E6B  CreateToolbar
77D18709  USER32.dll:77D18709  GetDC
77D187EB  USER32.dll:77D187EB  GetDC
77D1C00E  USER32.dll:77D1C00E  DestroyCaret
77D1C034  USER32.dll:77D1C034  CallWindowProcW
0046B43B  helpview.exe:0046B43B  wxWindow::MSWDefWindowProc(unsigned, unsigned, long)  window.cpp:1791
	...
	{
	    if ( m_oldWndProc )
>	        return ::CallWindowProc(CASTWNDPROC m_oldWndProc, GetHwnd(), (UINT) nMsg, (WPARAM) wParam, (LPARAM) lParam);
	    else
	        return ::DefWindowProc(GetHwnd(), nMsg, wParam, lParam);
	...

0046D7F6  helpview.exe:0046D7F6  wxWindow::MSWWindowProc(unsigned, unsigned, long)  window.cpp:2862
	...
	                   wxGetMessageName(message));
	#endif // __WXDEBUG__
>	        rc.result = MSWDefWindowProc(message, wParam, lParam);
	    }
	
	...

0055061E  helpview.exe:0055061E  wxToolBar::MSWWindowProc(unsigned, unsigned, long)  tbar95.cpp:1451
	...
	    }
	
>	    return wxControl::MSWWindowProc(nMsg, wParam, lParam);
	}
	
	...

0046BFBF  helpview.exe:0046BFBF  wxWndProc(HWND__*, unsigned, unsigned, long)  window.cpp:2182
	...
	
	    if ( wnd )
>	        rc = wnd->MSWWindowProc(message, wParam, lParam);
	    else
	        rc = ::DefWindowProc(hWnd, message, wParam, lParam);
	...

77D18709  USER32.dll:77D18709  GetDC
77D187EB  USER32.dll:77D187EB  GetDC
77D189A5  USER32.dll:77D189A5  GetWindowLongW
77D189E8  USER32.dll:77D189E8  DispatchMessageW
005174DB  helpview.exe:005174DB  wxEventLoop::ProcessMessage(tagMSG*)  evtloop.cpp:110
	...
	        // if it wasn't done, dispatch it to the corresponding window
	        ::TranslateMessage(msg);
>	        ::DispatchMessage(msg);
	    }
	}
	...

00517F6C  helpview.exe:00517F6C  wxEventLoop::Dispatch()  evtloop.cpp:385
	...
	#endif // wxUSE_THREADS
	
>	    ProcessMessage(&msg);
	
	    return true;
	...

005178D1  helpview.exe:005178D1  wxEventLoop::Run()  evtloop.cpp:247
	...
	                // a message came or no more idle processing to do, sit in
	                // Dispatch() waiting for the next message
>	                if ( !Dispatch() )
	                {
	                    // we got WM_QUIT
	...

00458803  helpview.exe:00458803  wxAppBase::MainLoop()  appcmn.cpp:272
	...
	    wxEventLoopTiedPtr mainLoop(&m_mainLoop, new wxEventLoop);
	
>	    return m_mainLoop->Run();
	#else // !wxUSE_EVTLOOP_IN_APP
	    return 0;
	...

0045898F  helpview.exe:0045898F  wxAppBase::OnRun()  appcmn.cpp:340
	...
	    //else: it has been changed, assume the user knows what he is doing
	
>	    return MainLoop();
	}
	
	...

00632A5A  helpview.exe:00632A5A  wxEntryReal(int&, wchar_t**)  init.cpp:417
	...
	
	        // app execution
>	        return wxTheApp->OnRun();
	    }
	    wxCATCH_ALL( wxTheApp->OnUnhandledException(); return -1; )
	...

005F2C04  helpview.exe:005F2C04  wxEntry(int&, wchar_t**)  main.cpp:244
	...
	    DisableAutomaticSETranslator();
	
>	    return wxEntryReal(argc, argv);
	}
	
	...

0045F950  helpview.exe:0045F950  wxEntry(HINSTANCE__*, HINSTANCE__*, char*, int)  main.cpp:296
	...
	    argv[argc] = NULL;
	
>	    return wxEntry(argc, argv);
	}
	
	...

00401461  helpview.exe:00401461  WinMain  helpview.cpp:47
	...
	};
	
>	IMPLEMENT_APP(hvApp)
	
	hvApp::hvApp()
	...

006DBAEB  helpview.exe:006DBAEB
0040122D  helpview.exe:0040122D
00401258  helpview.exe:00401258
7C816D4F  kernel32.dll:7C816D4F  RegisterWaitForInputIdle

 	  	 

diff --git include/wx/richtext/richtextbuffer.h include/wx/richtext/richtextbuffer.h
index 8d73233..e50af1a 100644
--- include/wx/richtext/richtextbuffer.h
+++ include/wx/richtext/richtextbuffer.h
@@ -2102,7 +2102,7 @@ public:
     virtual wxString GetPropertiesMenuLabel() const { return wxEmptyString; }
 
     /**
-        Returns @true if objects of this class can accept the focus, i.e. a call to SetFocusObject
+        Returns @true if objects of this class can accept the focus, i.e. a call to SetAsFocusObject
         is possible. For example, containers supporting text, such as a text box object, can accept the focus,
         but a table can't (set the focus to individual cells instead).
     */
@@ -4738,7 +4738,7 @@ public:
 
     virtual wxString GetPropertiesMenuLabel() const { return _("&Table"); }
 
-    // Returns true if objects of this class can accept the focus, i.e. a call to SetFocusObject
+    // Returns true if objects of this class can accept the focus, i.e. a call to SetAsFocusObject
     // is possible. For example, containers supporting text, such as a text box object, can accept the focus,
     // but a table can't (set the focus to individual cells instead).
     virtual bool AcceptsFocus() const { return false; }
diff --git include/wx/richtext/richtextctrl.h include/wx/richtext/richtextctrl.h
index 58650c0..140b1e0 100644
--- include/wx/richtext/richtextctrl.h
+++ include/wx/richtext/richtextctrl.h
@@ -505,12 +505,12 @@ public:
     /**
         Sets m_focusObject without making any alterations.
     */
-    void StoreFocusObject(wxRichTextParagraphLayoutBox* obj) { m_focusObject = obj; }
+    void SetFocusObject(wxRichTextParagraphLayoutBox* obj) { m_focusObject = obj; }
 
     /**
         Sets the wxRichTextObject object that currently has the editing focus.
     */
-    bool SetFocusObject(wxRichTextParagraphLayoutBox* obj, bool setCaretPosition = true);
+    bool SetAsFocusObject(wxRichTextParagraphLayoutBox* obj, bool setCaretPosition = true);
 
 // Operations
 
@@ -1009,13 +1009,13 @@ public:
 
     /**
         Write a text box at the current insertion point, returning the text box.
-        You can then call SetFocusObject() to set the focus to the new object.
+        You can then call SetAsFocusObject() to set the focus to the new object.
     */
     virtual wxRichTextBox* WriteTextBox(const wxRichTextAttr& textAttr = wxRichTextAttr());
 
     /**
         Write a table at the current insertion point, returning the table.
-        You can then call SetFocusObject() to set the focus to the new object.
+        You can then call SetAsFocusObject() to set the focus to the new object.
     */
     virtual wxRichTextTable* WriteTable(int rows, int cols, const wxRichTextAttr& tableAttr = wxRichTextAttr(), const wxRichTextAttr& cellAttr = wxRichTextAttr());
 
diff --git interface/wx/richtext/richtextbuffer.h interface/wx/richtext/richtextbuffer.h
index 6c2a6b2..5e81e60 100644
--- interface/wx/richtext/richtextbuffer.h
+++ interface/wx/richtext/richtextbuffer.h
@@ -1983,7 +1983,7 @@ public:
     virtual wxString GetPropertiesMenuLabel() const { return wxEmptyString; }
 
     /**
-        Returns @true if objects of this class can accept the focus, i.e. a call to SetFocusObject
+        Returns @true if objects of this class can accept the focus, i.e. a call to SetAsFocusObject
         is possible. For example, containers supporting text, such as a text box object, can accept the focus,
         but a table can't (set the focus to individual cells instead).
     */
@@ -4619,7 +4619,7 @@ public:
 
     virtual wxString GetPropertiesMenuLabel() const { return _("&Table"); }
 
-    // Returns true if objects of this class can accept the focus, i.e. a call to SetFocusObject
+    // Returns true if objects of this class can accept the focus, i.e. a call to SetAsFocusObject
     // is possible. For example, containers supporting text, such as a text box object, can accept the focus,
     // but a table can't (set the focus to individual cells instead).
     virtual bool AcceptsFocus() const { return false; }
diff --git interface/wx/richtext/richtextctrl.h interface/wx/richtext/richtextctrl.h
index 30ffb12..e16cdf1 100644
--- interface/wx/richtext/richtextctrl.h
+++ interface/wx/richtext/richtextctrl.h
@@ -474,14 +474,14 @@ public:
     /**
         Setter for m_focusObject.
     */
-    void StoreFocusObject(wxRichTextParagraphLayoutBox* obj);
+    void SetFocusObject(wxRichTextParagraphLayoutBox* obj);
 
     /**
         Sets the wxRichTextObject object that currently has the editing focus.
         @param setCaretPosition
             Optionally set the caret position.
     */
-    bool SetFocusObject(wxRichTextParagraphLayoutBox* obj, bool setCaretPosition = true);
+    bool SetAsFocusObject(wxRichTextParagraphLayoutBox* obj, bool setCaretPosition = true);
 
 // Operations
 
@@ -973,13 +973,13 @@ public:
 
     /**
         Write a text box at the current insertion point, returning the text box.
-        You can then call SetFocusObject() to set the focus to the new object.
+        You can then call SetAsFocusObject() to set the focus to the new object.
     */
     virtual wxRichTextBox* WriteTextBox(const wxRichTextAttr& textAttr = wxRichTextAttr());
 
     /**
         Write a table at the current insertion point, returning the table.
-        You can then call SetFocusObject() to set the focus to the new object.
+        You can then call SetAsFocusObject() to set the focus to the new object.
     */
     virtual wxRichTextTable* WriteTable(int rows, int cols, const wxRichTextAttr& tableAttr = wxRichTextAttr(), const wxRichTextAttr& cellAttr = wxRichTextAttr());
 
diff --git samples/richtext/richtext.cpp samples/richtext/richtext.cpp
index 9f5b689..b9fa822 100644
--- samples/richtext/richtext.cpp
+++ samples/richtext/richtext.cpp
@@ -993,11 +993,11 @@ void MyFrame::WriteInitialText()
         attr.GetTextBoxAttr().GetBorder().SetStyle(wxTEXT_BOX_ATTR_BORDER_SOLID);
 
         wxRichTextBox* textBox = r.WriteTextBox(attr);
-        r.SetFocusObject(textBox);
+        r.SetAsFocusObject(textBox);
 
         r.WriteText(wxT("This is a text box. Just testing! Once more unto the breach, dear friends, once more..."));
 
-        r.SetFocusObject(NULL); // Set the focus back to the main buffer
+        r.SetAsFocusObject(NULL); // Set the focus back to the main buffer
         r.SetInsertionPointEnd();
     }
 #endif
@@ -1029,11 +1029,11 @@ void MyFrame::WriteInitialText()
             for (i = 0; i < table->GetColumnCount(); i++)
             {
                 wxString msg = wxString::Format(wxT("This is cell %d, %d"), (j+1), (i+1));
-                r.SetFocusObject(table->GetCell(j, i));
+                r.SetAsFocusObject(table->GetCell(j, i));
                 r.WriteText(msg);
             }
         }
-        r.SetFocusObject(NULL); // Set the focus back to the main buffer
+        r.SetAsFocusObject(NULL); // Set the focus back to the main buffer
         r.SetInsertionPointEnd();
     }
 #endif
diff --git src/richtext/richtextbuffer.cpp src/richtext/richtextbuffer.cpp
index e762e5a..2e636b3 100644
--- src/richtext/richtextbuffer.cpp
+++ src/richtext/richtextbuffer.cpp
@@ -9637,7 +9637,7 @@ void wxRichTextAction::UpdateAppearance(long caretPosition, bool sendUpdateEvent
 
     if (m_ctrl)
     {
-        m_ctrl->SetFocusObject(container);
+        m_ctrl->SetAsFocusObject(container);
         m_ctrl->SetCaretPosition(caretPosition);
 
         if (!m_ctrl->IsFrozen())
diff --git src/richtext/richtextctrl.cpp src/richtext/richtextctrl.cpp
index 0b8e477..3c5adf1 100644
--- src/richtext/richtextctrl.cpp
+++ src/richtext/richtextctrl.cpp
@@ -333,7 +333,7 @@ bool wxRichTextCtrl::Create( wxWindow* parent, wxWindowID id, const wxString& va
 
 wxRichTextCtrl::~wxRichTextCtrl()
 {
-    SetFocusObject(& GetBuffer(), false);
+    SetAsFocusObject(& GetBuffer(), false);
     GetBuffer().RemoveEventHandler(this);
 
     delete m_contextMenu;
@@ -584,7 +584,7 @@ void wxRichTextCtrl::OnLeftClick(wxMouseEvent& event)
         wxRichTextParagraphLayoutBox* container = wxDynamicCast(contextObj, wxRichTextParagraphLayoutBox);
         if (container && container != GetFocusObject() && container->AcceptsFocus())
         {
-            SetFocusObject(container, false /* don't set caret position yet */);
+            SetAsFocusObject(container, false /* don't set caret position yet */);
         }
 
         m_dragStart = event.GetLogicalPosition(dc);
@@ -745,7 +745,7 @@ void wxRichTextCtrl::OnMoveMouse(wxMouseEvent& event)
                 case wxDragCancel:
                     Refresh(); // This is needed in wxMSW, otherwise resetting the position doesn't 'take'
                     SetCaretPosition(oldPos);
-                    SetFocusObject(oldFocus, false);
+                    SetAsFocusObject(oldFocus, false);
                 default: break;
             }
             EndBatchUndo();
@@ -872,7 +872,7 @@ void wxRichTextCtrl::OnMoveMouse(wxMouseEvent& event)
                 Refresh();
 
                 if (otherContainer->AcceptsFocus())
-                    SetFocusObject(otherContainer, false /* don't set caret and clear selection */);
+                    SetAsFocusObject(otherContainer, false /* don't set caret and clear selection */);
                 MoveCaret(-1, false);
                 SetDefaultStyleToCursorStyle();
             }
@@ -906,7 +906,7 @@ void wxRichTextCtrl::OnRightClick(wxMouseEvent& event)
         wxRichTextParagraphLayoutBox* actualContainer = wxDynamicCast(contextObj, wxRichTextParagraphLayoutBox);
         if (actualContainer && actualContainer->AcceptsFocus())
         {
-            SetFocusObject(actualContainer, false /* don't set caret position yet */);
+            SetAsFocusObject(actualContainer, false /* don't set caret position yet */);
             SetCaretPositionAfterClick(actualContainer, position, hit);
         }
     }
@@ -1967,7 +1967,7 @@ bool wxRichTextCtrl::MoveDown(int noLines, int flags)
             wxRichTextParagraphLayoutBox* actualContainer = wxDynamicCast(contextObj, wxRichTextParagraphLayoutBox);
             if (actualContainer && actualContainer != GetFocusObject() && actualContainer->AcceptsFocus())
             {
-                SetFocusObject(actualContainer, false /* don't set caret position yet */);
+                SetAsFocusObject(actualContainer, false /* don't set caret position yet */);
 
                 container = actualContainer;
             }
@@ -3334,7 +3334,7 @@ int wxRichTextCtrl::PrepareContextMenu(wxMenu* menu, const wxPoint& pt, bool add
             {
                 if (actualContainer->AcceptsFocus())
                 {
-                    SetFocusObject(actualContainer, false /* don't set caret position yet */);
+                    SetAsFocusObject(actualContainer, false /* don't set caret position yet */);
                     SetCaretPositionAfterClick(actualContainer, position, hit);
                 }
 
@@ -4240,7 +4240,7 @@ wxPoint wxRichTextCtrl::DoGetMargins() const
                    GetBuffer().GetAttributes().GetTextBoxAttr().GetMargins().GetTop().GetValue());
 }
 
-bool wxRichTextCtrl::SetFocusObject(wxRichTextParagraphLayoutBox* obj, bool setCaretPosition)
+bool wxRichTextCtrl::SetAsFocusObject(wxRichTextParagraphLayoutBox* obj, bool setCaretPosition)
 {
     if (obj && !obj->AcceptsFocus())
         return false;
@@ -4352,7 +4352,7 @@ bool wxRichTextDropSource::GiveFeedback(wxDragResult WXUNUSED(effect))
 
     if (!(hit & wxRICHTEXT_HITTEST_NONE) && container && container->AcceptsFocus())
     {
-        m_rtc->StoreFocusObject(container);
+        m_rtc->SetFocusObject(container);
         m_rtc->SetCaretPositionAfterClick(container, position, hit);
     }
 

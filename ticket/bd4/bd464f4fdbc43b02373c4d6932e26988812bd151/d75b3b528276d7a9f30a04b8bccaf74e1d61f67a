--- wxMSW.orig/wxWidgets-2.6.2/src/common/intl.cpp	Mon Sep 19 13:48:46 2005
+++ wxWidgets-2.6.2/src/common/intl.cpp	Thu Sep 22 23:19:22 2005
@@ -74,4 +74,5 @@
 #include "wx/file.h"
 #include "wx/filename.h"
+#include "wx/filesys.h"
 #include "wx/tokenzr.h"
 #include "wx/module.h"
@@ -1122,5 +1123,7 @@
   fn.SetExt(_T("mo"));
   wxString strFullName;
-  if ( !wxFindFileInPath(&strFullName, searchPath, fn.GetFullPath()) ) {
+
+  wxFileSystem filesystem;
+  if ( !filesystem.wxFindFileInPath(&strFullName, searchPath, fn.GetFullPath()) ) {
     wxLogVerbose(_("catalog file for domain '%s' not found."), szName);
     wxLogTrace(TRACE_I18N, _T("Catalog \"%s.mo\" not found"), szName);
@@ -1132,20 +1135,25 @@
   wxLogTrace(TRACE_I18N, _T("Using catalog \"%s\"."), strFullName.c_str());
 
-  wxFile fileMsg(strFullName);
-  if ( !fileMsg.IsOpened() )
+  wxFSFile *fileMsg = filesystem.OpenFile(strFullName);
+  if ( fileMsg == NULL )
     return false;
 
   // get the file size (assume it is less than 4Gb...)
-  wxFileOffset nSize = fileMsg.Length();
-  if ( nSize == wxInvalidOffset )
+  wxFileOffset nSize = fileMsg->GetStream()->GetLength();
+  if ( nSize == wxInvalidOffset ) {
+	delete fileMsg;
     return false;
+  }
 
   // read the whole file in memory
   m_pData = new size_t8[nSize];
-  if ( fileMsg.Read(m_pData, (size_t)nSize) != nSize ) {
+  if ( fileMsg->GetStream()->Read(m_pData, (size_t)nSize).LastRead() != (size_t)nSize ) {
+	delete fileMsg;
     wxDELETEA(m_pData);
     return false;
   }
 
+  delete fileMsg;
+	
   // examine header
   bool bValid = nSize + (size_t)0 > sizeof(wxMsgCatalogHeader);
--- wxMSW.orig/wxWidgets-2.6.2/src/common/filesys.cpp	Tue Feb  1 19:36:54 2005
+++ wxWidgets-2.6.2/src/common/filesys.cpp	Thu Sep 22 22:55:48 2005
@@ -537,4 +537,47 @@
 }
 
+// find a file in a list of directories, returns false if not found
+bool wxFileSystem::wxFindFileInPath(wxString *pStr, const wxChar *pszPath, const wxChar *pszFile)
+{
+    // we assume that it's not empty
+    wxCHECK_MSG( !wxIsEmpty(pszFile), false,
+                 _T("empty file name in wxFindFileInPath"));
+
+    // skip path separator in the beginning of the file name if present
+    if ( wxIsPathSeparator(*pszFile) )
+        pszFile++;
+
+    // copy the path (strtok will modify it)
+    wxChar *szPath = new wxChar[wxStrlen(pszPath) + 1];
+    wxStrcpy(szPath, pszPath);
+
+    wxString strFile;
+    wxChar *pc, *save_ptr;
+    for ( pc = wxStrtok(szPath, wxPATH_SEP, &save_ptr);
+          pc != NULL;
+          pc = wxStrtok((wxChar *) NULL, wxPATH_SEP, &save_ptr) )
+    {
+        // search for the file in this directory
+        strFile = pc;
+        if ( !wxEndsWithPathSeparator(pc) )
+            strFile += wxFILE_SEP_PATH;
+        strFile += pszFile;
+
+		wxFSFile *file = OpenFile(strFile);
+        if ( file != NULL ) {
+			delete file;
+            *pStr = strFile;
+            break;
+        }
+    }
+
+    // suppress warning about unused variable save_ptr when wxStrtok() is a
+    // macro which throws away its third argument
+    save_ptr = pc;
+
+    delete [] szPath;
+
+    return pc != NULL;  // if true => we breaked from the loop
+}
 
 ///// Module:
--- wxMSW.orig/wxWidgets-2.6.2/include/wx/filesys.h	Fri Apr  8 13:57:40 2005
+++ wxWidgets-2.6.2/include/wx/filesys.h	Thu Sep 22 22:17:39 2005
@@ -186,4 +186,6 @@
     wxString FindNext();
 
+	bool wxFindFileInPath(wxString *pStr, const wxChar *pszPath, const wxChar *pszFile);
+
     // Adds FS handler.
     // In fact, this class is only front-end to the FS handlers :-)

 	  	 

Index: include/wx/snglinst.h
===================================================================
--- include/wx/snglinst.h	(revision 61932)
+++ include/wx/snglinst.h	(working copy)
@@ -43,13 +43,21 @@
     // returns false if initialization failed, it doesn't mean that another
     // instance is running - use IsAnotherRunning() to check it
     bool Create(const wxString& name, const wxString& path = wxEmptyString);
-
+    
     // is another copy of this program already running?
     bool IsAnotherRunning() const;
 
     // dtor is not virtual, this class is not meant to be used polymorphically
     ~wxSingleInstanceChecker();
 
+protected:
+    bool Create()
+    {
+        wxString name = wxString::Format(wxT("%s-%s"), 
+            wxTheApp->GetAppName().wx_str(), 
+            wxGetUserId().wx_str());
+        return Create(name);
+    }
 private:
     // common part of all ctors
     void Init() { m_impl = NULL; }
Index: interface/wx/snglinst.h
===================================================================
--- interface/wx/snglinst.h	(revision 61932)
+++ interface/wx/snglinst.h	(working copy)
@@ -23,14 +23,12 @@
     @code
     bool MyApp::OnInit()
     {
-        const wxString name = wxString::Format("MyApp-%s", wxGetUserId().c_str());
-        m_checker = new wxSingleInstanceChecker(name);
-        if ( m_checker-IsAnotherRunning() )
+        m_checker = new wxSingleInstanceChecker();
+        if ( m_checker->IsAnotherRunning() )
         {
             wxLogError(_("Another program instance is already running, aborting."));
 
-            delete m_checker; // OnExit() won't be called if we return false
-            m_checker = NULL;
+            wxDELETE(m_checker); // OnExit() won't be called if we return false
 
             return false;
         }
@@ -113,7 +111,7 @@
     /**
         Returns @true if another copy of this program is already running, @false
         otherwise.
+        If Create was not called previously, a usable mutex/lock name is automatically generated
     */
     bool IsAnotherRunning() const;
 };
-
Index: src/msw/snglinst.cpp
===================================================================
--- src/msw/snglinst.cpp	(revision 61932)
+++ src/msw/snglinst.cpp	(working copy)
@@ -115,7 +115,10 @@
 
 bool wxSingleInstanceChecker::IsAnotherRunning() const
 {
-    wxCHECK_MSG( m_impl, false, wxT("must call Create() first") );
+    if (m_impl == NULL)
+    {
+        const_cast<wxSingleInstanceChecker*>(this)->Create(); // automatically generate mutex/lock name
+    }
 
     // if the mutex had been opened, another instance is running - otherwise we
     // would have created it
Index: src/os2/snglinst.cpp
===================================================================
--- src/os2/snglinst.cpp	(revision 61932)
+++ src/os2/snglinst.cpp	(working copy)
@@ -119,7 +119,10 @@
 
 bool wxSingleInstanceChecker::IsAnotherRunning() const
 {
-    wxCHECK_MSG( m_impl, false, wxT("must call Create() first") );
+    if (m_impl == NULL)
+    {
+        const_cast<wxSingleInstanceChecker*>(this)->Create(); // automatically generate mutex/lock name
+    }
 
     return m_impl->IsAnotherRunning();
 }
Index: src/unix/snglinst.cpp
===================================================================
--- src/unix/snglinst.cpp	(revision 61932)
+++ src/unix/snglinst.cpp	(working copy)
@@ -373,7 +373,10 @@
 
 bool wxSingleInstanceChecker::IsAnotherRunning() const
 {
-    wxCHECK_MSG( m_impl, false, wxT("must call Create() first") );
+    if (m_impl == NULL)
+    {
+        const_cast<wxSingleInstanceChecker*>(this)->Create(); // automatically generate mutex/lock name
+    }
 
     const pid_t lockerPid = m_impl->GetLockerPID();
 

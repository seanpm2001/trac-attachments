Index: include/wx/bookctrl.h
===================================================================
--- include/wx/bookctrl.h	(revision 72145)
+++ include/wx/bookctrl.h	(working copy)
@@ -129,12 +129,14 @@
 
     // return the size of the area needed to accommodate the controller
     wxSize GetControllerSize() const;
+    wxSize GetControllerBestSize() const;
 
     // calculate the size of the control from the size of its page
     //
     // by default this simply returns size enough to fit both the page and the
     // controller
     virtual wxSize CalcSizeFromPage(const wxSize& sizePage) const;
+    virtual wxSize CalcBestSizeFromPage(const wxSize& sizePage) const;
 
     // get/set size of area between book control area and page area
     unsigned int GetInternalBorder() const { return m_internalBorder; }
Index: src/common/bookctrl.cpp
===================================================================
--- src/common/bookctrl.cpp	(revision 72145)
+++ src/common/bookctrl.cpp	(working copy)
@@ -128,6 +128,31 @@
     return size;
 }
 
+wxSize wxBookCtrlBase::CalcBestSizeFromPage(const wxSize& sizePage) const
+{
+    // Add the size of the controller and the border between if it's shown.
+    if ( !m_bookctrl || !m_bookctrl->IsShown() )
+        return sizePage;
+
+    const wxSize sizeController = GetControllerBestSize();
+
+    wxSize size = sizePage;
+    if ( IsVertical() )
+    {
+        if ( sizeController.x > sizePage.x )
+            size.x = sizeController.x;
+        size.y += sizeController.y + GetInternalBorder();
+    }
+    else // left/right aligned
+    {
+        size.x += sizeController.x + GetInternalBorder();
+        if ( sizeController.y > sizePage.y )
+            size.y = sizeController.y;
+    }
+
+    return size;
+}
+
 void wxBookCtrlBase::SetPageSize(const wxSize& size)
 {
     SetClientSize(CalcSizeFromPage(size));
@@ -159,7 +184,7 @@
 
     // convert display area to window area, adding the size necessary for the
     // tabs
-    wxSize best = CalcSizeFromPage(bestSize);
+    wxSize best = CalcBestSizeFromPage(bestSize);
     CacheBestSize(best);
     return best;
 }
@@ -305,6 +330,31 @@
     return size;
 }
 
+wxSize wxBookCtrlBase::GetControllerBestSize() const
+{
+    // For at least some book controls (e.g. wxChoicebook) it may make sense to
+    // (temporarily?) hide the controller and we shouldn't leave extra space
+    // for the hidden control in this case.
+    if ( !m_bookctrl || !m_bookctrl->IsShown() )
+        return wxSize(0, 0);
+
+    wxSize size;
+
+    // Ask for the best width/height considering the other direction.
+    if ( IsVertical() )
+    {
+        size.x = 100;
+        size.y = m_bookctrl->GetBestHeight(100);
+    }
+    else // left/right aligned
+    {
+        size.x = m_bookctrl->GetBestWidth(100);
+        size.y = 100;
+    }
+
+    return size;
+}
+
 // ----------------------------------------------------------------------------
 // miscellaneous stuff
 // ----------------------------------------------------------------------------

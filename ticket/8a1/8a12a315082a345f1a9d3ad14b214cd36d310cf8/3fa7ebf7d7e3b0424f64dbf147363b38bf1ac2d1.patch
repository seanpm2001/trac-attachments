Index: src/unix/taskbarx11.cpp
===================================================================
--- src/unix/taskbarx11.cpp	(revision 58467)
+++ src/unix/taskbarx11.cpp	(working copy)
@@ -274,7 +274,7 @@
     if (m_iconWnd)
     {
         m_iconWnd->Disconnect(
-            wxEVT_DESTROY, wxObjectEventFunction(NULL), NULL, this);
+            wxEVT_DESTROY, wxWindowDestroyEventHandler(wxTaskBarIcon::OnDestroy), NULL, this);
         RemoveIcon();
     }
 }
Index: tests/events/evthandler.cpp
===================================================================
--- tests/events/evthandler.cpp	(revision 0)
+++ tests/events/evthandler.cpp	(revision 0)
@@ -0,0 +1,188 @@
+///////////////////////////////////////////////////////////////////////////////
+// Name:        tests/events/evthandler.cpp
+// Purpose:     Test the new event types and wxEvtHandler-methods
+// Author:      Peter Most
+// Created:     2009-01-24
+// RCS-ID:      $Id: $
+// Copyright:   (c) 2009 Peter Most
+///////////////////////////////////////////////////////////////////////////////
+
+// ----------------------------------------------------------------------------
+// headers
+// ----------------------------------------------------------------------------
+
+#include "testprec.h"
+
+#ifdef __BORLANDC__
+    #pragma hdrstop
+#endif
+
+#ifndef WX_PRECOMP
+#endif // WX_PRECOMP
+
+#include "wx/event.h"
+
+
+// --------------------------------------------------------------------------
+// test class
+// --------------------------------------------------------------------------
+
+class EvtHandlerTestCase : public CppUnit::TestCase
+{
+public:
+    EvtHandlerTestCase() {}
+
+private:
+    CPPUNIT_TEST_SUITE( EvtHandlerTestCase );
+        CPPUNIT_TEST( TestConnectCompilation );
+        CPPUNIT_TEST( TestEventFunctorCompare );
+    CPPUNIT_TEST_SUITE_END();
+
+    void TestConnectCompilation();
+    void TestEventFunctorCompare();
+
+    DECLARE_NO_COPY_CLASS(EvtHandlerTestCase)
+};
+
+// register in the unnamed registry so that these tests are run by default
+CPPUNIT_TEST_SUITE_REGISTRATION( EvtHandlerTestCase );
+
+// also include in it's own registry so that these tests can be run alone
+CPPUNIT_TEST_SUITE_NAMED_REGISTRATION( EvtHandlerTestCase, "EvtHandlerTestCase" );
+
+const wxEventType EVT_LEGACY = wxNewEventType();
+
+class MyEvent : public wxEvent
+{
+};
+
+wxDEFINE_EVENT( EVT_EVENT, MyEvent )
+
+// An arbitrary functor:
+
+class MyFunctor
+{
+    public:
+        void operator () ( MyEvent & )
+        { }
+
+        bool operator == ( const MyFunctor & ) const
+        { return ( true ); }
+};
+
+
+class MyHandler : public wxEvtHandler
+{
+    public:
+        void handleMethod( MyEvent & )
+        { }
+
+        static void handleFunction( MyEvent & )
+        { }
+
+        void handleEvent( wxEvent & )
+        { }
+
+};
+
+void EvtHandlerTestCase::TestConnectCompilation()
+{
+    // Test that connecting the 'legacy' events still compiles:
+
+    MyHandler handler;
+
+    handler.Connect( EVT_LEGACY, (wxObjectEventFunction)&MyHandler::handleEvent, NULL, &handler );
+    handler.Connect( 0, EVT_LEGACY, (wxObjectEventFunction)&MyHandler::handleEvent, NULL, &handler );
+    handler.Connect( 0, 0, EVT_LEGACY, (wxObjectEventFunction)&MyHandler::handleEvent, NULL, &handler );
+
+    handler.Disconnect( EVT_LEGACY, (wxObjectEventFunction)&MyHandler::handleEvent, NULL, &handler );
+    handler.Disconnect( 0, EVT_LEGACY, (wxObjectEventFunction)&MyHandler::handleEvent, NULL, &handler );
+    handler.Disconnect( 0, 0, EVT_LEGACY, (wxObjectEventFunction)&MyHandler::handleEvent, NULL, &handler );
+
+
+
+    handler.Connect( EVT_LEGACY, (wxObjectEventFunction)&MyHandler::handleEvent );
+    handler.Connect( 0, EVT_LEGACY, (wxObjectEventFunction)&MyHandler::handleEvent );
+    handler.Connect( 0, 0, EVT_LEGACY, (wxObjectEventFunction)&MyHandler::handleEvent );
+
+    handler.Disconnect( EVT_LEGACY, (wxObjectEventFunction)&MyHandler::handleEvent );
+    handler.Disconnect( 0, EVT_LEGACY, (wxObjectEventFunction)&MyHandler::handleEvent );
+    handler.Disconnect( 0, 0, EVT_LEGACY, (wxObjectEventFunction)&MyHandler::handleEvent );
+
+    // Call (and therefore instantiate) all Connect() variants to detect template
+    // errors:
+
+#if !wxEVENTS_COMPATIBILITY_2_8
+
+    handler.Connect( EVT_EVENT, &MyHandler::handleFunction );
+    handler.Connect( 0, EVT_EVENT, &MyHandler::handleFunction );
+    handler.Connect( 0, 0, EVT_EVENT, &MyHandler::handleFunction );
+
+    handler.Disconnect( EVT_EVENT, &MyHandler::handleFunction );
+    handler.Disconnect( 0, EVT_EVENT, &MyHandler::handleFunction );
+    handler.Disconnect( 0, 0, EVT_EVENT, &MyHandler::handleFunction );
+
+
+
+    handler.Connect( EVT_EVENT, &MyHandler::handleMethod );
+    handler.Connect( 0, EVT_EVENT, &MyHandler::handleMethod );
+    handler.Connect( 0, 0, EVT_EVENT, &MyHandler::handleMethod );
+
+    handler.Disconnect( EVT_EVENT, &MyHandler::handleMethod );
+    handler.Disconnect( 0, EVT_EVENT, &MyHandler::handleMethod );
+    handler.Disconnect( 0, 0, EVT_EVENT, &MyHandler::handleMethod );
+
+
+
+    handler.Connect( EVT_EVENT, &MyHandler::handleMethod, NULL, &handler );
+    handler.Connect( 0, EVT_EVENT, &MyHandler::handleMethod, NULL, &handler );
+    handler.Connect( 0, 0, EVT_EVENT, &MyHandler::handleMethod, NULL, &handler );
+
+    handler.Disconnect( EVT_EVENT, &MyHandler::handleMethod, NULL, &handler );
+    handler.Disconnect( 0, EVT_EVENT, &MyHandler::handleMethod, NULL, &handler );
+    handler.Disconnect( 0, 0, EVT_EVENT, &MyHandler::handleMethod, NULL, &handler );
+
+
+
+    wxEvtHandler::Connect( &handler, EVT_EVENT, &MyHandler::handleMethod, NULL, &handler );
+    wxEvtHandler::Connect( &handler, 0, EVT_EVENT, &MyHandler::handleMethod, NULL, &handler );
+    wxEvtHandler::Connect( &handler, 0, 0, EVT_EVENT, &MyHandler::handleMethod, NULL, &handler );
+
+    wxEvtHandler::Disconnect( &handler, EVT_EVENT, &MyHandler::handleMethod, NULL, &handler );
+    wxEvtHandler::Disconnect( &handler, 0, EVT_EVENT, &MyHandler::handleMethod, NULL, &handler );
+    wxEvtHandler::Disconnect( &handler, 0, 0, EVT_EVENT, &MyHandler::handleMethod, NULL, &handler );
+
+
+
+    MyFunctor functor;
+
+    handler.Connect( EVT_EVENT, functor );
+    handler.Connect( 0, EVT_EVENT, functor );
+    handler.Connect( 0, 0, EVT_EVENT, functor );
+
+    handler.Disconnect( EVT_EVENT, functor );
+    handler.Disconnect( 0, EVT_EVENT, functor );
+    handler.Disconnect( 0, 0, EVT_EVENT, functor );
+#endif
+}
+
+void EvtHandlerTestCase::TestEventFunctorCompare()
+{
+//#if !wxEVENTS_COMPATIBILITY_2_8
+//    MyHandler handler1;
+//    wxEventFunctor *connectFunctor = wxNewEventFunctor( EVT_EVENT, &MyHandler::handleMethod, &handler1 );
+//    wxEventFunctor *disconnectFunctor = wxNewEventFunctor( EVT_EVENT, &MyHandler::handleMethod, &handler1 );
+//    wxEventFunctor *nullFunctor = wxNewEventFunctor( EVT_EVENT, &MyHandler::handleMethod );
+//   
+//    CPPUNIT_ASSERT( connectFunctor->Matches( *disconnectFunctor ));
+//    CPPUNIT_ASSERT( disconnectFunctor->Matches( *connectFunctor ));
+//
+//    CPPUNIT_ASSERT( connectFunctor->Matches( *nullFunctor ));
+//    CPPUNIT_ASSERT( nullFunctor->Matches( *connectFunctor ));
+//
+//    CPPUNIT_ASSERT( disconnectFunctor->Matches( *nullFunctor ));
+//    CPPUNIT_ASSERT( nullFunctor->Matches( *disconnectFunctor ));
+//#endif
+}
+
+
Index: tests/test.bkl
===================================================================
--- tests/test.bkl	(revision 58467)
+++ tests/test.bkl	(working copy)
@@ -114,6 +114,7 @@
             controls/textentrytest.cpp
             controls/treectrltest.cpp
             events/propagation.cpp
+            events/evthandler.cpp
             image/rawbmp.cpp
             html/htmlwindow.cpp
             misc/guifuncs.cpp
Index: include/wx/event.h
===================================================================
--- include/wx/event.h	(revision 58467)
+++ include/wx/event.h	(working copy)
@@ -69,7 +69,8 @@
 #define wxEVT_ANY           ((wxEventType)-1)
 
 // this is used to make the event table entry type safe, so that for an event
-// handler only a function with proper parameter list can be given.
+// handler only a function with proper parameter list can be given. See also
+// the wxEVENT_HANDLER_CAST-macro.
 #define wxStaticCastEvent(type, val) static_cast<type>(val)
 
 #define DECLARE_EVENT_TABLE_ENTRY(type, winid, idLast, fn, obj) \
@@ -99,48 +100,70 @@
 #undef wxEVENTS_COMPATIBILITY_2_8
 #define wxEVENTS_COMPATIBILITY_2_8 1
 
-// macros to create an event type depending on whether type safe events are
-// enabled.
+// New macros to create templatized event types:
 
 #if wxEVENTS_COMPATIBILITY_2_8
+
+    // Define/Declare a wxEventType-based event type:
+
     #define wxDEFINE_EVENT( name, type ) \
         const wxEventType name( wxNewEventType() );
 
     #define wxDECLARE_EXPORTED_EVENT( expdecl, name, type ) \
         extern const expdecl wxEventType name;
 
+    // Define/Declare a wxEventType-based event type and initialize it with a
+    // predefined event type. (Only used for wxEVT_SPIN_XXX for backward
+    // compatibility)
+ 
     #define wxDEFINE_EVENT_ALIAS( name, type, value ) \
         const wxEventType name = value;
 
     #define wxDECLARE_EXPORTED_EVENT_ALIAS( expdecl, name, type ) \
         extern const expdecl wxEventType name;
 
+    // Declare a local (not exported) wxEventType-based event type:
+
     #define wxDECLARE_LOCAL_EVENT( name, type ) \
         wxDECLARE_EXPORTED_EVENT( wxEMPTY_PARAMETER_VALUE, name, type )
 
+    // Try to cast the given event handler to the correct handler type:
+
     #define wxEVENT_HANDLER_CAST( functype, func ) \
         ( wxObjectEventFunction )( wxEventFunction )wxStaticCastEvent( functype, &func )
 #else
+    // Define/Declare a templatized event type with the corresponding event as
+    // a nested typedef:
+ 
     #define wxDEFINE_EVENT( name, type ) \
         const wxTypedEventType< type > name( wxNewEventType() );
 
     #define wxDECLARE_EXPORTED_EVENT( expdecl, name, type ) \
         extern const expdecl wxTypedEventType< type > name;
 
+    // Define/Declare a templatized event type and initialize it with a
+    // predefined event type. (Only used for wxEVT_SPIN_XXX for backward
+    // compatibility)
+
     #define wxDEFINE_EVENT_ALIAS( name, type, value ) \
         const wxTypedEventType< type > name( value );
 
     #define wxDECLARE_EXPORTED_EVENT_ALIAS( expdecl, name, type ) \
         extern const expdecl wxTypedEventType< type > name;
 
+    // Declare a local (not exported) templatized event type:
+
     #define wxDECLARE_LOCAL_EVENT( name, type ) \
         wxDECLARE_EXPORTED_EVENT( wxEMPTY_PARAMETER_VALUE, name, type )
 
+    // Don't cast the given event handler so that wxEvtHandler::Connect() sees
+    // the actual type:
+
     #define wxEVENT_HANDLER_CAST( functype, func ) \
         ( &func )
 #endif
 
-// template which associates the correct event object with the event type
+// Template which associates the correct event object with the event type
 
 #if !wxEVENTS_COMPATIBILITY_2_8
 
@@ -152,7 +175,9 @@
 
     wxTypedEventType(wxEventType type) { m_type = type; }
 
-    // used for static event tables
+    // Return a wxEventType reference for the initialization of the static
+    // event tables. See wxEventTableEntry::m_eventType for a more thorough
+    // explanation.
     operator const wxEventType&() const { return m_type; }
 
 private:
@@ -174,13 +199,13 @@
 typedef wxEventFunction wxObjectEventFunction;
 
 
-// the functors which will be stored in the static/dynamic tables
+// The event functor which is stored in the static and dynamic event tables:
 class WXDLLIMPEXP_BASE wxEventFunctor
 {
 public:
     virtual ~wxEventFunctor();
 
-    // this operator is used to actually invoke the event handler
+    // Invoke the actual event handler:
     virtual void operator()(wxEvtHandler *, wxEvent &) = 0;
 
     // this function tests whether this functor is matched, for the purpose of
@@ -2778,38 +2803,8 @@
                     wxObject *userData = NULL,
                     wxEvtHandler *eventSink = NULL)
         { return Disconnect(wxID_ANY, eventType, func, userData, eventSink); }
-
-
 #if !wxEVENTS_COMPATIBILITY_2_8
     //
-    // Connect a function to an event:
-    //
-    template <typename EventType>
-    void Connect(int winid,
-                 int lastId,
-                 const EventType &eventType,
-                 void (*func)(typename EventType::CorrespondingEvent&),
-                 wxObject* userData = NULL)
-    {
-        wxEventFunctorFunction< EventType > *functor = wxNewEventFunctor( eventType, func );
-
-        Subscribe( winid, lastId, eventType, functor, userData );
-    }
-
-    template <typename EventType>
-    void Connect( int winid,
-            const EventType &eventType,
-            void ( *func )( typename EventType::CorrespondingEvent & ),
-            wxObject* userData = NULL )
-        { Connect( winid, wxID_ANY, eventType, func, userData ); }
-
-    template <typename EventType>
-    void Connect( const EventType &eventType,
-            void ( *func )( typename EventType::CorrespondingEvent & ),
-            wxObject* userData = NULL )
-        { Connect( wxID_ANY, wxID_ANY, eventType, func, userData ); }
-
-    //
     // Connect a method to an event:
     //
 
@@ -2901,6 +2896,34 @@
         { Connect( sender, wxID_ANY, wxID_ANY, eventType, func, userData, eventSink ); }
 
     //
+    // Connect a function to an event:
+    //
+    template <typename EventType>
+    void Connect(int winid,
+                 int lastId,
+                 const EventType &eventType,
+                 void (*func)(typename EventType::CorrespondingEvent&),
+                 wxObject* userData = NULL)
+    {
+        wxEventFunctorFunction< EventType > *functor = wxNewEventFunctor( eventType, func );
+
+        Subscribe( winid, lastId, eventType, functor, userData );
+    }
+
+    template <typename EventType>
+    void Connect( int winid,
+            const EventType &eventType,
+            void ( *func )( typename EventType::CorrespondingEvent & ),
+            wxObject* userData = NULL )
+        { Connect( winid, wxID_ANY, eventType, func, userData ); }
+
+    template <typename EventType>
+    void Connect( const EventType &eventType,
+            void ( *func )( typename EventType::CorrespondingEvent & ),
+            wxObject* userData = NULL )
+        { Connect( wxID_ANY, wxID_ANY, eventType, func, userData ); }
+
+    //
     // Connect an arbitrary functor to an event:
     //
 

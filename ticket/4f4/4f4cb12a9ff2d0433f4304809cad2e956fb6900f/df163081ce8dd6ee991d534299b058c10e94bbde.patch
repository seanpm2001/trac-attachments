Index: include/wx/calctrl.h
===================================================================
--- include/wx/calctrl.h	(revision 56057)
+++ include/wx/calctrl.h	(working copy)
@@ -36,7 +36,7 @@
     // show Sunday as the first day of the week (default)
     wxCAL_SUNDAY_FIRST               = 0x0000,
 
-    // show Monder as the first day of the week
+    // show Monday as the first day of the week
     wxCAL_MONDAY_FIRST               = 0x0001,
 
     // highlight holidays
@@ -53,7 +53,10 @@
     wxCAL_SEQUENTIAL_MONTH_SELECTION = 0x0010,
 
     // show the neighbouring weeks in the previous and next month
-    wxCAL_SHOW_SURROUNDING_WEEKS     = 0x0020
+    wxCAL_SHOW_SURROUNDING_WEEKS     = 0x0020,
+
+    // show calendar week (week of year)
+    wxCAL_SHOW_CALENDAR_WEEK         = 0x0040
 };
 
 // ----------------------------------------------------------------------------
@@ -68,7 +71,8 @@
     wxCAL_HITTEST_DAY,          // on a day in the calendar
     wxCAL_HITTEST_INCMONTH,
     wxCAL_HITTEST_DECMONTH,
-    wxCAL_HITTEST_SURROUNDING_WEEK
+    wxCAL_HITTEST_SURROUNDING_WEEK,
+    wxCAL_HITTEST_WEEK
 };
 
 // border types for a date
@@ -209,6 +213,7 @@
     DECLARE_EXPORTED_EVENT_TYPE(WXDLLIMPEXP_ADV, wxEVT_CALENDAR_YEAR_CHANGED, 953)
     DECLARE_EXPORTED_EVENT_TYPE(WXDLLIMPEXP_ADV, wxEVT_CALENDAR_DOUBLECLICKED, 954)
     DECLARE_EXPORTED_EVENT_TYPE(WXDLLIMPEXP_ADV, wxEVT_CALENDAR_WEEKDAY_CLICKED, 955)
+    DECLARE_EXPORTED_EVENT_TYPE(WXDLLIMPEXP_ADV, wxEVT_CALENDAR_WEEK_CLICKED, 956)
 END_DECLARE_EVENT_TYPES()
 
 typedef void (wxEvtHandler::*wxCalendarEventFunction)(wxCalendarEvent&);
@@ -225,6 +230,7 @@
 #define EVT_CALENDAR_MONTH(id, fn) wx__DECLARE_CALEVT(MONTH_CHANGED, id, fn)
 #define EVT_CALENDAR_YEAR(id, fn) wx__DECLARE_CALEVT(YEAR_CHANGED, id, fn)
 #define EVT_CALENDAR_WEEKDAY_CLICKED(id, fn) wx__DECLARE_CALEVT(WEEKDAY_CLICKED, id, fn)
+#define EVT_CALENDAR_WEEK_CLICKED(id, fn) wx__DECLARE_CALEVT(WEEK_CLICKED, id, fn)
 
 #endif // wxUSE_CALENDARCTRL
 
Index: include/wx/generic/calctrl.h
===================================================================
--- include/wx/generic/calctrl.h	(revision 56057)
+++ include/wx/generic/calctrl.h	(working copy)
@@ -304,7 +304,8 @@
     // the width and height of one column/row in the calendar
     wxCoord m_widthCol,
             m_heightRow,
-            m_rowOffset;
+            m_rowOffset,
+            m_calendarWeekWidth;
 
     wxRect m_leftArrowRect,
            m_rightArrowRect;
Index: samples/calendar/calendar.cpp
===================================================================
--- samples/calendar/calendar.cpp	(revision 56057)
+++ samples/calendar/calendar.cpp	(working copy)
@@ -76,6 +76,7 @@
 
     void OnCalendar(wxCalendarEvent& event);
     void OnCalendarWeekDayClick(wxCalendarEvent& event);
+    void OnCalendarWeekClick(wxCalendarEvent& event);
     void OnCalendarChange(wxCalendarEvent& event);
     void OnCalMonthChange(wxCalendarEvent& event);
     void OnCalYearChange(wxCalendarEvent& event);
@@ -124,6 +125,7 @@
 
     void OnCalSeqMonth(wxCommandEvent& event);
     void OnCalShowSurroundingWeeks(wxCommandEvent& event);
+    void OnCalShowWeeks(wxCommandEvent& event);
 
     void OnSetDate(wxCommandEvent& event);
     void OnToday(wxCommandEvent& event);
@@ -179,6 +181,7 @@
     Calendar_Cal_Year,
     Calendar_Cal_SeqMonth,
     Calendar_Cal_SurroundWeeks,
+    Calendar_Cal_Weeks,
     Calendar_Cal_SetDate,
     Calendar_Cal_Today,
     Calendar_Cal_Resizable,
@@ -222,6 +225,7 @@
 
     EVT_MENU(Calendar_Cal_SeqMonth, MyFrame::OnCalSeqMonth)
     EVT_MENU(Calendar_Cal_SurroundWeeks, MyFrame::OnCalShowSurroundingWeeks)
+    EVT_MENU(Calendar_Cal_Weeks, MyFrame::OnCalShowWeeks)
 
     EVT_MENU(Calendar_Cal_SetDate, MyFrame::OnSetDate)
     EVT_MENU(Calendar_Cal_Today, MyFrame::OnToday)
@@ -238,6 +242,7 @@
     EVT_CALENDAR_YEAR       (Calendar_CalCtrl,   MyPanel::OnCalYearChange)
     EVT_CALENDAR_SEL_CHANGED(Calendar_CalCtrl,   MyPanel::OnCalendarChange)
     EVT_CALENDAR_WEEKDAY_CLICKED(Calendar_CalCtrl, MyPanel::OnCalendarWeekDayClick)
+    EVT_CALENDAR_WEEK_CLICKED(Calendar_CalCtrl,  MyPanel::OnCalendarWeekClick)
 END_EVENT_TABLE()
 
 #if wxUSE_DATEPICKCTRL
@@ -271,7 +276,7 @@
 #ifndef __WXWINCE__
                                  ,wxPoint(50, 50), wxSize(450, 340)
 #endif
-								 );
+                                 );
 
     frame->Show(true);
 
@@ -313,6 +318,10 @@
                     _T("Show s&urrounding weeks\tCtrl-W"),
                     _T("Show the neighbouring weeks in the prev/next month"),
                     true);
+    menuCal->Append(Calendar_Cal_Weeks,
+                    _T("Show week of year"),
+                    _T("Shows the week of the year in an extra column"),
+                    true);
     menuCal->AppendSeparator();
     menuCal->Append(Calendar_Cal_SeqMonth,
                     _T("To&ggle month selector style\tCtrl-G"),
@@ -360,6 +369,7 @@
     menuBar->Check(Calendar_Cal_Holidays, true);
     menuBar->Check(Calendar_Cal_Month, true);
     menuBar->Check(Calendar_Cal_Year, true);
+    menuBar->Check(Calendar_Cal_Weeks, true);
 
 #if wxUSE_DATEPICKCTRL
     menuBar->Check(Calendar_DatePicker_ShowCentury, true);
@@ -436,6 +446,12 @@
     m_panel->ToggleCalStyle(allow, wxCAL_SHOW_SURROUNDING_WEEKS);
 }
 
+void MyFrame::OnCalShowWeeks(wxCommandEvent& event)
+{
+    bool show = GetMenuBar()->IsChecked(event.GetId());
+    m_panel->ToggleCalStyle(show, wxCAL_SHOW_CALENDAR_WEEK);
+}
+
 void MyFrame::OnAllowYearUpdate(wxUpdateUIEvent& event)
 {
     event.Enable( GetMenuBar()->IsChecked(Calendar_Cal_Month));
@@ -537,8 +553,9 @@
                                     wxDefaultPosition,
                                     wxDefaultSize,
                                     wxCAL_MONDAY_FIRST |
-                                    wxCAL_SHOW_HOLIDAYS |
-                                    wxRAISED_BORDER);
+                                    wxCAL_SHOW_HOLIDAYS
+                                    | wxCAL_SHOW_CALENDAR_WEEK
+                                    | wxRAISED_BORDER );
 
     // adjust to vertical/horizontal display, check mostly dedicated to WinCE
     bool horizontal = ( wxSystemSettings::GetMetric(wxSYS_SCREEN_X) > wxSystemSettings::GetMetric(wxSYS_SCREEN_Y) );
@@ -581,6 +598,11 @@
                  wxDateTime::GetWeekDayName(event.GetWeekDay()).c_str());
 }
 
+void MyPanel::OnCalendarWeekClick(wxCalendarEvent& event)
+{
+    wxLogMessage(wxT("Clicked on week %d"), event.GetDate().GetWeekOfYear());
+}
+
 void MyPanel::ToggleCalStyle(bool on, int flag)
 {
     long style = m_calendar->GetWindowStyle();
@@ -589,7 +611,7 @@
     else
         style &= ~flag;
 
-    if ( flag == wxCAL_SEQUENTIAL_MONTH_SELECTION )
+    if ( flag == wxCAL_SEQUENTIAL_MONTH_SELECTION || flag == wxCAL_SHOW_CALENDAR_WEEK )
     {
         // changing this style requires recreating the control
         wxCalendarCtrl *calendar = new wxCalendarCtrl(this, Calendar_CalCtrl,
Index: src/generic/calctrl.cpp
===================================================================
--- src/generic/calctrl.cpp	(revision 56057)
+++ src/generic/calctrl.cpp	(working copy)
@@ -101,13 +101,14 @@
     wxFLAGS_MEMBER(wxCAL_NO_MONTH_CHANGE)
     wxFLAGS_MEMBER(wxCAL_SEQUENTIAL_MONTH_SELECTION)
     wxFLAGS_MEMBER(wxCAL_SHOW_SURROUNDING_WEEKS)
+    wxFLAGS_MEMBER(wxCAL_SHOW_CALENDAR_WEEK)
 
 wxEND_FLAGS( wxCalendarCtrlStyle )
 
 IMPLEMENT_DYNAMIC_CLASS_XTI(wxCalendarCtrl, wxControl,"wx/calctrl.h")
 
 wxBEGIN_PROPERTIES_TABLE(wxCalendarCtrl)
-    wxEVENT_RANGE_PROPERTY( Updated , wxEVT_CALENDAR_SEL_CHANGED , wxEVT_CALENDAR_WEEKDAY_CLICKED , wxCalendarEvent )
+    wxEVENT_RANGE_PROPERTY( Updated , wxEVT_CALENDAR_SEL_CHANGED , wxEVT_CALENDAR_WEEK_CLICKED , wxCalendarEvent )
     wxHIDE_PROPERTY( Children )
     wxPROPERTY( Date,wxDateTime, SetDate , GetDate, , 0 /*flags*/ , wxT("Helpstring") , wxT("group"))
     wxPROPERTY_FLAGS( WindowStyle , wxCalendarCtrlStyle , long , SetWindowStyleFlag , GetWindowStyleFlag , , 0 /*flags*/ , wxT("Helpstring") , wxT("group")) // style
@@ -132,6 +133,7 @@
 DEFINE_EVENT_TYPE(wxEVT_CALENDAR_YEAR_CHANGED)
 DEFINE_EVENT_TYPE(wxEVT_CALENDAR_DOUBLECLICKED)
 DEFINE_EVENT_TYPE(wxEVT_CALENDAR_WEEKDAY_CLICKED)
+DEFINE_EVENT_TYPE(wxEVT_CALENDAR_WEEK_CLICKED)
 
 // ============================================================================
 // implementation
@@ -164,7 +166,8 @@
     m_userChangedYear = false;
 
     m_widthCol =
-    m_heightRow = 0;
+    m_heightRow =
+    m_calendarWeekWidth = 0;
 
     wxDateTime::WeekDay wd;
     for ( wd = wxDateTime::Sun; wd < wxDateTime::Inv_WeekDay; wxNextWDay(wd) )
@@ -752,7 +755,7 @@
 
 // this is a composite control and it must arrange its parts each time its
 // size or position changes: the combobox and spinctrl are along the top of
-// the available area and the calendar takes up therest of the space
+// the available area and the calendar takes up the rest of the space
 
 // the static controls are supposed to be always smaller than combo/spin so we
 // always use the latter for size calculations and position the static to take
@@ -770,7 +773,7 @@
     // calc the size of the calendar
     ((wxCalendarCtrl *)this)->RecalcGeometry(); // const_cast
 
-    wxCoord width = 7*m_widthCol,
+    wxCoord width = 7*m_widthCol + m_calendarWeekWidth,
             height = 7*m_heightRow + m_rowOffset + VERT_MARGIN;
 
     if ( !HasFlag(wxCAL_SEQUENTIAL_MONTH_SELECTION) )
@@ -779,7 +782,6 @@
         // height including the drop down list) so don't use it
         height += m_spinYear->GetBestSize().y;
 
-
         wxCoord w2 = m_comboMonth->GetBestSize().x + HORZ_MARGIN + GetCharWidth()*6;
         if (width < w2)
             width = w2;
@@ -904,6 +906,9 @@
         }
     }
 
+    m_calendarWeekWidth = HasFlag( wxCAL_SHOW_CALENDAR_WEEK )
+        ? dc.GetTextExtent( wxString::Format( wxT( "%d" ), 42 )).GetWidth() + 4 : 0;
+
     // leave some margins
     m_widthCol += 2;
     m_heightRow += 2;
@@ -930,7 +935,7 @@
 #endif
 
     wxCoord y = 0;
-    wxCoord x0 = wxMax( (GetSize().x - m_widthCol*7) /2 , 0 );
+    wxCoord x0 = m_calendarWeekWidth;
 
     if ( HasFlag(wxCAL_SEQUENTIAL_MONTH_SELECTION) )
     {
@@ -1033,6 +1038,24 @@
     //dc.SetFont(*wxNORMAL_FONT);
 
     y += m_heightRow;
+
+    // draw column with calendar week nr
+    if ( HasFlag( wxCAL_SHOW_CALENDAR_WEEK ) && IsExposed( 0, y, m_calendarWeekWidth, m_heightRow * 6 ))
+    {
+        dc.SetBackgroundMode(wxTRANSPARENT);
+        dc.SetBrush(wxBrush(m_colHeaderBg, wxSOLID));
+        dc.SetPen(wxPen(m_colHeaderBg, 1, wxSOLID));
+        dc.DrawRectangle( 0, y, m_calendarWeekWidth, m_heightRow * 6 );
+        wxDateTime date = GetStartDate();
+        for ( size_t i = 0; i < 6; ++i )
+        {
+            const int weekNr = date.GetWeekOfYear();
+            wxString text = wxString::Format( wxT( "%d" ), weekNr );
+            dc.DrawText( text, m_calendarWeekWidth - dc.GetTextExtent( text ).GetWidth() - 2, y + m_heightRow * i );
+            date += wxDateSpan::Week();
+        }
+    }
+
     wxDateTime date = GetStartDate();
 
 #if DEBUG_PAINT
@@ -1047,7 +1070,6 @@
         if ( !IsExposed(x0, y, x0 + 7*m_widthCol, m_heightRow - 1) )
         {
             date += wxDateSpan::Week();
-
             continue;
         }
 
@@ -1216,9 +1238,9 @@
     wxRect rect;
 
     // always refresh the whole row at once because our OnPaint() will draw
-    // the whole row anyhow - and this allows the small optimisation in
+    // the whole row anyhow - and this allows the small optimization in
     // OnClick() below to work
-    rect.x = wxMax( (GetSize().x - m_widthCol*7) /2 , 0 );
+    rect.x = m_calendarWeekWidth;
 
     rect.y = (m_heightRow * GetWeek(date)) + m_rowOffset;
 
@@ -1284,7 +1306,7 @@
             {
                 int numpoints;
                 wxPoint corners[8]; // potentially 8 corners in polygon
-                wxCoord x0 = wxMax( (GetSize().x - m_widthCol*7) /2 , 0 );
+                wxCoord x0 = m_calendarWeekWidth;
 
                 if ( fw == tw )
                 {
@@ -1455,6 +1477,16 @@
             }
             break;
 
+        case wxCAL_HITTEST_WEEK:
+            if ( IsDateInRange( date ))
+            {
+                SetDateAndNotify( date );
+                GenerateEvent( wxEVT_CALENDAR_DAY_CHANGED );
+                GenerateEvent( wxEVT_CALENDAR_SEL_CHANGED );
+                GenerateEvent( wxEVT_CALENDAR_WEEK_CLICKED );
+            }
+            break;
+
         case wxCAL_HITTEST_HEADER:
             {
                 wxCalendarEvent eventWd(this, wxEVT_CALENDAR_WEEKDAY_CLICKED);
@@ -1490,7 +1522,7 @@
     RecalcGeometry();
 
     // the position where the calendar really begins
-    wxCoord x0 = wxMax((GetSize().x - m_widthCol*7)/2, 0);
+    wxCoord x0 = m_calendarWeekWidth;
 
     if ( HasFlag(wxCAL_SEQUENTIAL_MONTH_SELECTION) )
     {
@@ -1534,9 +1566,26 @@
 
     }
 
+    if ( pos.x - x0 < 0 )
+        if ( pos.x >= 0 && pos.y > m_rowOffset + m_heightRow && pos.y <= m_rowOffset + m_heightRow * 7 )
+        {
+            if ( date )
+            {
+                *date = GetStartDate();
+                *date += wxDateSpan::Week() * (( pos.y - m_rowOffset ) / m_heightRow - 1 );
+            }
+            if ( wd )
+                *wd = ( GetWindowStyle() & wxCAL_MONDAY_FIRST ) ? wxDateTime::Mon : wxDateTime::Sun;
+            return wxCAL_HITTEST_WEEK;
+        }
+        else    // early exit -> the rest of the function checks for clicks on days
+            return wxCAL_HITTEST_NOWHERE;
+
     // header: week days
     int wday = (pos.x - x0) / m_widthCol;
-    if ( pos.y < (m_heightRow + m_rowOffset) )
+    if ( wday > 6 )
+        return wxCAL_HITTEST_NOWHERE;
+    if ( pos.y < (m_heightRow + m_rowOffset))
     {
         if ( pos.y > m_rowOffset )
         {

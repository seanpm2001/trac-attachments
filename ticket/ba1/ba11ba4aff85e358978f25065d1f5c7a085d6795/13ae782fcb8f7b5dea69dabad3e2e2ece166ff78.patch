diff -ru wxWidgets.orig/samples/thread/thread.cpp wxWidgets/samples/thread/thread.cpp
--- wxWidgets.orig/samples/thread/thread.cpp	2007-09-25 08:51:42.000000000 +0200
+++ wxWidgets/samples/thread/thread.cpp	2007-10-23 10:35:06.000000000 +0200
@@ -165,6 +165,8 @@
     // thread execution starts here
     virtual void *Entry();
 
+    virtual ~MyThread();
+
     // called when the thread exits - whether it terminates normally or is
     // stopped with Delete() (but not when it is Kill()ed!)
     virtual void OnExit();
@@ -186,6 +188,7 @@
 
 void MyThread::WriteText(const wxString& text)
 {
+    //wxLogDebug(text); return;
     wxString msg;
 
     // before doing any GUI calls we must ensure that this thread is the only
@@ -201,6 +204,17 @@
 
 void MyThread::OnExit()
 {
+    // it's too early to remove me from wxGetApp().m_threads:
+    // if Delete()'d, wxGetApp().m_critsect not available now,
+    // wait until dtor
+    wxThread::OnExit();
+}
+
+MyThread::~MyThread(void)
+{
+    // remove me from wxGetApp().m_threads
+    // wxGetApp().m_critsect always available here!
+    // (if Delete()'d, this dtor is executed in callers thread context)
     wxCriticalSectionLocker locker(wxGetApp().m_critsect);
 
     wxArrayThread& threads = wxGetApp().m_threads;
@@ -458,12 +472,7 @@
         while ( ! threads.IsEmpty() )
         {
             thread = threads.Last();
-
-            wxGetApp().m_critsect.Leave();
-
             thread->Delete();
-
-            wxGetApp().m_critsect.Enter();
         }
     }
 
@@ -557,29 +566,23 @@
 void MyFrame::OnStopThread(wxCommandEvent& WXUNUSED(event) )
 {
     wxGetApp().m_critsect.Enter();
-
     // stop the last thread
     if ( wxGetApp().m_threads.IsEmpty() )
     {
         wxLogError(wxT("No thread to stop!"));
-
-        wxGetApp().m_critsect.Leave();
     }
     else
     {
         wxThread *thread = wxGetApp().m_threads.Last();
-
-        // it's important to leave critical section before calling Delete()
-        // because delete will (implicitly) call OnExit() which also tries
-        // to enter the same crit section - would dead lock.
-        wxGetApp().m_critsect.Leave();
-
-        thread->Delete();
-
+        if (thread->IsAlive()) // could be in the process of closing down (out of OnEntry)
+        {
+            thread->Delete();
+        }
 #if wxUSE_STATUSBAR
         SetStatusText(_T("Thread stopped."), 1);
 #endif // wxUSE_STATUSBAR
     }
+    wxGetApp().m_critsect.Leave();
 }
 
 void MyFrame::OnResumeThread(wxCommandEvent& WXUNUSED(event) )

 	  	 

Only in wxWindows/contrib/build/fl: vc_msw
Only in wxWindows/contrib/build/fl: vc_mswd
diff -ru2 -xCVS -xDebug -xRelease -xlib -x'.#*' -x'*.orig' -x'*.rej' -x'*~' -x'*.dsp' -x'*.dsw' -x'*.ncb' -x'*.opt' -x'*.plg' -x'*.bak' wxWindows.orig/include/wx/log.h wxWindows/include/wx/log.h
--- wxWindows.orig/include/wx/log.h	2004-02-15 13:59:50.647342400 +0100
+++ wxWindows/include/wx/log.h	2004-02-24 12:20:13.809291200 +0100
@@ -171,4 +171,8 @@
     static wxLog *GetActiveTarget();
 
+    // check if there already (or still) is a logger
+    // GetActiveTarget cannot be used for this, because it would create one
+    static bool HasActiveTarget();
+
     // change log target, pLogger may be NULL
     static wxLog *SetActiveTarget(wxLog *pLogger);
diff -ru2 -xCVS -xDebug -xRelease -xlib -x'.#*' -x'*.orig' -x'*.rej' -x'*~' -x'*.dsp' -x'*.dsw' -x'*.ncb' -x'*.opt' -x'*.plg' -x'*.bak' wxWindows.orig/include/wx/memory.h wxWindows/include/wx/memory.h
--- wxWindows.orig/include/wx/memory.h	2004-02-08 16:06:29.000000000 +0100
+++ wxWindows/include/wx/memory.h	2004-02-24 12:05:48.174569600 +0100
@@ -289,4 +289,7 @@
     static int CountObjectsLeft(bool sinceCheckpoint = FALSE);
 
+    // This function is used to output the dump
+    static void OutputDumpLine(const wxChar *szFormat, ...);
+
 private:
     // Store these here to allow access to the list without
@@ -300,4 +303,29 @@
 };
 
+// Final cleanup (e.g. deleting the log object and doing memory leak checking)
+// will be delayed until all wxDebugContextDumpDelayCounter objects have been
+// destructed. Adding one wxDebugContextDumpDelayCounter per file will delay
+// memory leak checking until after destructing all global objects.
+class WXDLLIMPEXP_BASE wxDebugContextDumpDelayCounter
+{
+public:
+    wxDebugContextDumpDelayCounter() {
+        sm_count++;
+    }
+
+    ~wxDebugContextDumpDelayCounter() {
+        sm_count--;
+        if(!sm_count) DoDump();
+    }
+private:
+    void DoDump();
+    static int sm_count;
+};
+
+// make leak dump after all globals have been destructed
+static wxDebugContextDumpDelayCounter wxDebugContextDumpDelayCounter_File;
+#define WXDEBUG_DUMPDELAYCOUNTER \
+    static wxDebugContextDumpDelayCounter wxDebugContextDumpDelayCounter_Extra;
+
 // Output a debug message, in a system dependent fashion.
 void WXDLLIMPEXP_BASE wxTrace(const wxChar *fmt ...) ATTRIBUTE_PRINTF_1;
@@ -307,5 +335,7 @@
 #define WXTRACELEVEL wxTraceLevel
 
-#else // else part for the #if __WXDEBUG__
+#else // (defined(__WXDEBUG__) && wxUSE_MEMORY_TRACING) || wxUSE_DEBUG_CONTEXT
+
+#define WXDEBUG_DUMPDELAYCOUNTER
 
 // Borland C++ Builder 6 seems to have troubles with inline functions (see bug
@@ -322,5 +352,5 @@
 #define WXTRACELEVEL TRUE ? (void)0 : wxTraceLevel
 
-#endif // __WXDEBUG__
+#endif // (defined(__WXDEBUG__) && wxUSE_MEMORY_TRACING) || wxUSE_DEBUG_CONTEXT
 
 #endif
Only in wxWindows/include/wx/msw: setup.h
diff -ru2 -xCVS -xDebug -xRelease -xlib -x'.#*' -x'*.orig' -x'*.rej' -x'*~' -x'*.dsp' -x'*.dsw' -x'*.ncb' -x'*.opt' -x'*.plg' -x'*.bak' wxWindows.orig/src/common/init.cpp wxWindows/src/common/init.cpp
--- wxWindows.orig/src/common/init.cpp	2003-12-14 17:36:08.000000000 +0100
+++ wxWindows/src/common/init.cpp	2004-02-24 11:24:18.424484800 +0100
@@ -339,14 +339,5 @@
 #endif // wxUSE_UNICODE
 
-    // check for memory leaks
-#if (defined(__WXDEBUG__) && wxUSE_MEMORY_TRACING) || wxUSE_DEBUG_CONTEXT
-    if (wxDebugContext::CountObjectsLeft(TRUE) > 0)
-    {
-        wxLogDebug(wxT("There were memory leaks.\n"));
-        wxDebugContext::Dump();
-        wxDebugContext::PrintStatistics();
-    }
-#endif // Debug
-
+    // Note: check for memory leaks is now done via wxDebugContextDumpDelayCounter
 #if wxUSE_LOG
     // and now delete the last logger as well
diff -ru2 -xCVS -xDebug -xRelease -xlib -x'.#*' -x'*.orig' -x'*.rej' -x'*~' -x'*.dsp' -x'*.dsw' -x'*.ncb' -x'*.opt' -x'*.plg' -x'*.bak' wxWindows.orig/src/common/log.cpp wxWindows/src/common/log.cpp
--- wxWindows.orig/src/common/log.cpp	2003-08-09 14:45:47.000000000 +0200
+++ wxWindows/src/common/log.cpp	2004-02-24 11:46:07.576953600 +0100
@@ -411,4 +411,9 @@
 }
 
+bool wxLog::HasActiveTarget()
+{
+    return ms_pLogger != NULL;
+}
+
 wxLog *wxLog::SetActiveTarget(wxLog *pLogger)
 {
diff -ru2 -xCVS -xDebug -xRelease -xlib -x'.#*' -x'*.orig' -x'*.rej' -x'*~' -x'*.dsp' -x'*.dsw' -x'*.ncb' -x'*.opt' -x'*.plg' -x'*.bak' wxWindows.orig/src/common/memory.cpp wxWindows/src/common/memory.cpp
--- wxWindows.orig/src/common/memory.cpp	2004-01-27 18:47:24.000000000 +0100
+++ wxWindows/src/common/memory.cpp	2004-02-24 13:08:13.850587200 +0100
@@ -344,5 +344,5 @@
 
     wxString msg2;
-    msg2.Printf(wxT(" at $%lX, size %d"), (long)GetActualData(), (int)RequestSize());
+    msg2.Printf(wxT(" at 0x%lX, size %d"), (long)GetActualData(), (int)RequestSize());
     msg += msg2;
 
@@ -357,5 +357,5 @@
     msg += wxT("non-object data");
     wxString msg2;
-    msg2.Printf(wxT(" at $%lX, size %d\n"), (long)GetActualData(), (int)RequestSize());
+    msg2.Printf(wxT(" at 0x%lX, size %d\n"), (long)GetActualData(), (int)RequestSize());
     msg += msg2;
 
@@ -390,8 +390,8 @@
 
     wxString msg2(wxT(""));
-    msg2.Printf(wxT(" at $%lX, size %d"), (long)GetActualData(), (int)RequestSize());
+    msg2.Printf(wxT(" at 0x%lX, size %d"), (long)GetActualData(), (int)RequestSize());
     msg += msg2;
 
-    wxLogMessage(msg);
+    wxDebugContext::OutputDumpLine(msg);
   }
   else
@@ -402,7 +402,7 @@
 
     wxString msg2(wxT(""));
-    msg2.Printf(wxT("non-object data at $%lX, size %d"), (long)GetActualData(), (int)RequestSize() );
+    msg2.Printf(wxT("non-object data at 0x%lX, size %d"), (long)GetActualData(), (int)RequestSize() );
     msg += msg2;
-    wxLogMessage(msg);
+    wxDebugContext::OutputDumpLine(msg);
   }
 }
@@ -614,9 +614,9 @@
         appNameStr = wxTheApp->GetAppName();
         appName = WXSTRINGCAST appNameStr;
-        wxLogMessage(wxT("----- Memory dump of %s at %s -----"), appName, WXSTRINGCAST wxNow() );
+        OutputDumpLine(wxT("----- Memory dump of %s at %s -----"), appName, WXSTRINGCAST wxNow() );
     }
     else
     {
-      wxLogMessage( wxT("----- Memory dump -----") );
+      OutputDumpLine( wxT("----- Memory dump -----") );
     }
   }
@@ -624,6 +624,6 @@
   TraverseList ((PmSFV)&wxMemStruct::Dump, (checkPoint ? checkPoint->m_next : (wxMemStruct*)NULL));
 
-  wxLogMessage( wxT("") );
-  wxLogMessage( wxT("") );
+  OutputDumpLine( wxT("") );
+  OutputDumpLine( wxT("") );
 
   return TRUE;
@@ -670,9 +670,9 @@
         appNameStr = wxTheApp->GetAppName();
         appName = WXSTRINGCAST appNameStr;
-        wxLogMessage(wxT("----- Memory statistics of %s at %s -----"), appName, WXSTRINGCAST wxNow() );
+        OutputDumpLine(wxT("----- Memory statistics of %s at %s -----"), appName, WXSTRINGCAST wxNow() );
     }
     else
     {
-      wxLogMessage( wxT("----- Memory statistics -----") );
+      OutputDumpLine( wxT("----- Memory statistics -----") );
     }
   }
@@ -731,5 +731,5 @@
     while (list)
     {
-      wxLogMessage(wxT("%ld objects of class %s, total size %ld"),
+      OutputDumpLine(wxT("%ld objects of class %s, total size %ld"),
           list->instanceCount, list->instanceClass, list->totalSize);
       wxDebugStatsStruct *old = list;
@@ -737,14 +737,14 @@
       free((char *)old);
     }
-    wxLogMessage(wxT(""));
+    OutputDumpLine(wxT(""));
   }
 
   SetDebugMode(currentMode);
 
-  wxLogMessage(wxT("Number of object items: %ld"), noObjectNodes);
-  wxLogMessage(wxT("Number of non-object items: %ld"), noNonObjectNodes);
-  wxLogMessage(wxT("Total allocated size: %ld"), totalSize);
-  wxLogMessage(wxT(""));
-  wxLogMessage(wxT(""));
+  OutputDumpLine(wxT("Number of object items: %ld"), noObjectNodes);
+  OutputDumpLine(wxT("Number of non-object items: %ld"), noNonObjectNodes);
+  OutputDumpLine(wxT("Total allocated size: %ld"), totalSize);
+  OutputDumpLine(wxT(""));
+  OutputDumpLine(wxT(""));
 
   return TRUE;
@@ -859,4 +859,50 @@
 }
 
+// This function is used to output the dump
+void wxDebugContext::OutputDumpLine(const wxChar *szFormat, ...)
+{
+    if( wxLog::IsEnabled() )
+    {
+        if( wxLog::HasActiveTarget() )
+        {
+            va_list argptr;
+            va_start(argptr, szFormat);
+            wxVLogMessage(szFormat, argptr);
+            va_end(argptr);
+        }
+        else
+        {
+            // a buffer of 2048 bytes should be long enough for a file name and a class name
+            wxChar buf[2048];
+            int count;
+            va_list argptr;
+            va_start(argptr, szFormat);
+            buf[sizeof(buf)-1] = _T('\0');
+
+            // keep 3 bytes for a \r\n\0
+            count=wxVsnprintf(buf, sizeof(buf)-3, szFormat, argptr);
+
+            #if defined(__WXMSW__) && !defined(__WXMICROWIN__)
+                // don't prepend debug/trace here: it goes to the
+                // debug window anyhow
+                if( count<0 )
+                    count = sizeof(buf)-3;
+                buf[count]=_T('\r');
+                buf[count+1]=_T('\n');
+                buf[count+2]=_T('\0');
+
+                OutputDebugString(buf);
+            #else
+                // send them to stderr
+                wxFprintf(stderr, wxT("[%s] %s\n"),
+                          level == wxLOG_Trace ? wxT("Trace")
+                                               : wxT("Debug"),
+                          str.c_str());
+                fflush(stderr);
+            #endif
+        }
+    }
+}
+
 #if USE_THREADSAFE_MEMORY_ALLOCATION
 static bool memSectionOk = FALSE;
@@ -1076,4 +1122,27 @@
 }
 
-#endif
+//----------------------------------------------------------------------------
+// Final cleanup after all global objects in all files have been destructed
+//----------------------------------------------------------------------------
+
+// Don't set it to 0 by dynamic initialization
+// Some compilers will realy do the asignment later
+// All global variables are initialized to 0 at the very beginning, and this is just fine.
+int wxDebugContextDumpDelayCounter::sm_count;
+
+void wxDebugContextDumpDelayCounter::DoDump()
+{
+    if (wxDebugContext::CountObjectsLeft(TRUE) > 0)
+    {
+        wxDebugContext::OutputDumpLine(wxT("There were memory leaks.\n"));
+        wxDebugContext::Dump();
+        wxDebugContext::PrintStatistics();
+    }
+}
+
+// Even if there is nothing else, make sure that there is at
+// least one clenup counter object
+static wxDebugContextDumpDelayCounter wxDebugContextDumpDelayCounter_One;
+
+#endif // (defined(__WXDEBUG__) && wxUSE_MEMORY_TRACING) || wxUSE_DEBUG_CONTEXT
 

 	  	 

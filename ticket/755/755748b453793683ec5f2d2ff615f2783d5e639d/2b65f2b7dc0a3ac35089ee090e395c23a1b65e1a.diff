--- /contrib/include/wx/stc/stc.h	(WX_2_8_BRANCH)
+++ /contrib/include/wx/stc/stc.h	2009-10-19 10:14:29.000000000 +0200
@@ -21,4 +21,5 @@
 #define __stc_h__
 
+#include "wx/defs.h"
 
 #include "wx/wx.h"
@@ -3269,5 +3270,5 @@ public:
 
     // Send a message to Scintilla
-    long SendMsg(int msg, long wp=0, long lp=0);
+    long SendMsg(int msg, wxUIntPtr wp=0, wxIntPtr lp=0) const;
 
 
--- /contrib/src/stc/gen_iface.py	(WX_2_8_BRANCH)
+++ /contrib/src/stc/gen_iface.py	2009-10-19 10:14:29.000000000 +0200
@@ -85,5 +85,5 @@ methodOverrideMap = {
                  '''void %s(const wxString& text) {
                     wxWX2MBbuf buf = (wxWX2MBbuf)wx2stc(text);
-                    SendMsg(%s, strlen(buf), (long)(const char*)buf);''',
+                    SendMsg(%s, strlen(buf), (sptr_t)(const char*)buf);''',
                  0),
 
@@ -92,5 +92,5 @@ methodOverrideMap = {
 
                        '''void %s(const wxMemoryBuffer& data) {
-                          SendMsg(%s, data.GetDataLen(), (long)data.GetData());''',
+                          SendMsg(%s, data.GetDataLen(), (sptr_t)data.GetData());''',
                        0),
 
@@ -100,5 +100,5 @@ methodOverrideMap = {
                  '''void %s(const wxString& text) {
                     wxWX2MBbuf buf = (wxWX2MBbuf)wx2stc(text);
-                    SendMsg(%s, strlen(buf), (long)(const char*)buf);''',
+                    SendMsg(%s, strlen(buf), (sptr_t)(const char*)buf);''',
                  0),
 
@@ -135,5 +135,5 @@ methodOverrideMap = {
         tr.chrg.cpMin = startPos;
         tr.chrg.cpMax = endPos;
-        len = SendMsg(%s, 0, (long)&tr);
+        len = SendMsg(%s, 0, (sptr_t)&tr);
         buf.UngetWriteBuf(len);
         return buf;''',
@@ -164,5 +164,5 @@ methodOverrideMap = {
         char* buf = (char*)mbuf.GetWriteBuf(len+1);
 
-        int pos = SendMsg(%s, len+1, (long)buf);
+        int pos = SendMsg(%s, len+1, (sptr_t)buf);
         mbuf.UngetWriteBuf(len);
         mbuf.AppendByte(0);
@@ -211,5 +211,5 @@ methodOverrideMap = {
         strm.CopyTo(buff, len);
         buff[len] = 0;
-        SendMsg(%s, markerNumber, (long)buff);
+        SendMsg(%s, markerNumber, (sptr_t)buff);
         delete [] buff;
         ''',
@@ -259,5 +259,5 @@ methodOverrideMap = {
 
      '''void %s(int length, char* styleBytes) {
-        SendMsg(%s, length, (long)styleBytes);''',
+        SendMsg(%s, length, (sptr_t)styleBytes);''',
      0),
 
@@ -314,5 +314,5 @@ methodOverrideMap = {
         strm.CopyTo(buff, len);
         buff[len] = 0;
-        SendMsg(%s, type, (long)buff);
+        SendMsg(%s, type, (sptr_t)buff);
         delete [] buff;
      ''',
@@ -347,5 +347,5 @@ methodOverrideMap = {
             ft.lpstrText = (char*)(const char*)buf;
 
-            return SendMsg(%s, flags, (long)&ft);''',
+            return SendMsg(%s, flags, (sptr_t)&ft);''',
      0),
 
@@ -386,5 +386,5 @@ methodOverrideMap = {
              fr.chrg.cpMax = endPos;
 
-             return SendMsg(%s, doDraw, (long)&fr);''',
+             return SendMsg(%s, doDraw, (sptr_t)&fr);''',
      0),
 
@@ -400,5 +400,5 @@ methodOverrideMap = {
          wxMemoryBuffer mbuf(len+1);
          char* buf = (char*)mbuf.GetWriteBuf(len+1);
-         SendMsg(%s, line, (long)buf);
+         SendMsg(%s, line, (sptr_t)buf);
          mbuf.UngetWriteBuf(len);
          mbuf.AppendByte(0);
@@ -423,5 +423,5 @@ methodOverrideMap = {
          wxMemoryBuffer mbuf(len+2);
          char* buf = (char*)mbuf.GetWriteBuf(len+1);
-         SendMsg(%s, 0, (long)buf);
+         SendMsg(%s, 0, (sptr_t)buf);
          mbuf.UngetWriteBuf(len);
          mbuf.AppendByte(0);
@@ -449,5 +449,5 @@ methodOverrideMap = {
          tr.chrg.cpMin = startPos;
          tr.chrg.cpMax = endPos;
-         SendMsg(%s, 0, (long)&tr);
+         SendMsg(%s, 0, (sptr_t)&tr);
          mbuf.UngetWriteBuf(len);
          mbuf.AppendByte(0);
@@ -471,5 +471,5 @@ methodOverrideMap = {
          wxMemoryBuffer mbuf(len+1);   // leave room for the null...
          char* buf = (char*)mbuf.GetWriteBuf(len+1);
-         SendMsg(%s, len+1, (long)buf);
+         SendMsg(%s, len+1, (sptr_t)buf);
          mbuf.UngetWriteBuf(len);
          mbuf.AppendByte(0);
@@ -500,5 +500,5 @@ methodOverrideMap = {
      int %s(const wxString& text) {
          wxWX2MBbuf buf = (wxWX2MBbuf)wx2stc(text);
-         return SendMsg(%s, strlen(buf), (long)(const char*)buf);''',
+         return SendMsg(%s, strlen(buf), (sptr_t)(const char*)buf);''',
      0),
 
@@ -510,5 +510,5 @@ methodOverrideMap = {
      int %s(const wxString& text) {
          wxWX2MBbuf buf = (wxWX2MBbuf)wx2stc(text);
-         return SendMsg(%s, strlen(buf), (long)(const char*)buf);''',
+         return SendMsg(%s, strlen(buf), (sptr_t)(const char*)buf);''',
      0),
 
@@ -520,5 +520,5 @@ methodOverrideMap = {
      int %s(const wxString& text) {
          wxWX2MBbuf buf = (wxWX2MBbuf)wx2stc(text);
-         return SendMsg(%s, strlen(buf), (long)(const char*)buf);''',
+         return SendMsg(%s, strlen(buf), (sptr_t)(const char*)buf);''',
      0),
 
@@ -534,10 +534,10 @@ methodOverrideMap = {
 
      '''wxString %s(const wxString& key) {
-         int len = SendMsg(SCI_GETPROPERTY, (long)(const char*)wx2stc(key), (long)NULL);
+         int len = SendMsg(SCI_GETPROPERTY, (sptr_t)(const char*)wx2stc(key), 0);
          if (!len) return wxEmptyString;
 
          wxMemoryBuffer mbuf(len+1);
          char* buf = (char*)mbuf.GetWriteBuf(len+1);
-         SendMsg(%s, (long)(const char*)wx2stc(key), (long)buf);
+         SendMsg(%s, (uptr_t)(const char*)wx2stc(key), (sptr_t)buf);
          mbuf.UngetWriteBuf(len);
          mbuf.AppendByte(0);
@@ -550,10 +550,10 @@ methodOverrideMap = {
 
      '''wxString %s(const wxString& key) {
-         int len = SendMsg(SCI_GETPROPERTYEXPANDED, (long)(const char*)wx2stc(key), (long)NULL);
+         int len = SendMsg(SCI_GETPROPERTYEXPANDED, (uptr_t)(const char*)wx2stc(key), 0);
          if (!len) return wxEmptyString;
 
          wxMemoryBuffer mbuf(len+1);
          char* buf = (char*)mbuf.GetWriteBuf(len+1);
-         SendMsg(%s, (long)(const char*)wx2stc(key), (long)buf);
+         SendMsg(%s, (uptr_t)(const char*)wx2stc(key), (sptr_t)buf);
          mbuf.UngetWriteBuf(len);
          mbuf.AppendByte(0);
@@ -578,5 +578,5 @@ methodOverrideMap = {
      'void %s(void* docPointer);',
      '''void %s(void* docPointer) {
-         SendMsg(%s, 0, (long)docPointer);''',
+         SendMsg(%s, 0, (sptr_t)docPointer);''',
      0),
 
@@ -592,5 +592,5 @@ methodOverrideMap = {
      'void %s(void* docPointer);',
      '''void %s(void* docPointer) {
-         SendMsg(%s, 0, (long)docPointer);''',
+         SendMsg(%s, 0, (sptr_t)docPointer);''',
      0),
 
@@ -599,5 +599,5 @@ methodOverrideMap = {
      'void %s(void* docPointer);',
      '''void %s(void* docPointer) {
-         SendMsg(%s, 0, (long)docPointer);''',
+         SendMsg(%s, 0, (sptr_t)docPointer);''',
      0),
 
@@ -800,5 +800,5 @@ def makeArgString(param):
 
     if typ == 'string':
-        return '(long)(const char*)wx2stc(%s)' % name
+        return '(sptr_t)(const char*)wx2stc(%s)' % name
     if typ == 'colour':
         return 'wxColourAsLong(%s)' % name
--- /contrib/src/stc/PlatWX.cpp	(WX_2_8_BRANCH)
+++ /contrib/src/stc/PlatWX.cpp	2009-10-19 10:14:29.000000000 +0200
@@ -1398,5 +1398,5 @@ long Platform::SendScintillaPointer(Wind
 
     wxStyledTextCtrl* stc = (wxStyledTextCtrl*)w;
-    return stc->SendMsg(msg, wParam, (long)lParam);
+    return stc->SendMsg(msg, wParam, (wxIntPtr)lParam);
 }
 
--- /contrib/src/stc/stc.cpp	(WX_2_8_BRANCH)
+++ /contrib/src/stc/stc.cpp	2009-10-19 10:14:29.000000000 +0200
@@ -195,5 +195,5 @@ wxStyledTextCtrl::~wxStyledTextCtrl() {
 //----------------------------------------------------------------------
 
-long wxStyledTextCtrl::SendMsg(int msg, long wp, long lp) {
+long wxStyledTextCtrl::SendMsg(int msg, wxUIntPtr wp, wxIntPtr lp) const {
 
     return m_swx->WndProc(msg, wp, lp);
@@ -230,15 +230,15 @@ void wxStyledTextCtrl::SetHScrollBar(wxS
 void wxStyledTextCtrl::AddText(const wxString& text) {
                     wxWX2MBbuf buf = (wxWX2MBbuf)wx2stc(text);
-                    SendMsg(2001, strlen(buf), (long)(const char*)buf);
+                    SendMsg(2001, strlen(buf), (sptr_t)(const char*)buf);
 }
 
 // Add array of cells to document.
 void wxStyledTextCtrl::AddStyledText(const wxMemoryBuffer& data) {
-                          SendMsg(2002, data.GetDataLen(), (long)data.GetData());
+                          SendMsg(2002, data.GetDataLen(), (sptr_t)data.GetData());
 }
 
 // Insert string at a position.
 void wxStyledTextCtrl::InsertText(int pos, const wxString& text) {
-    SendMsg(2003, pos, (long)(const char*)wx2stc(text));
+    SendMsg(2003, pos, (sptr_t)(const char*)wx2stc(text));
 }
 
@@ -314,5 +314,5 @@ wxMemoryBuffer wxStyledTextCtrl::GetStyl
         tr.chrg.cpMin = startPos;
         tr.chrg.cpMax = endPos;
-        len = SendMsg(2015, 0, (long)&tr);
+        len = SendMsg(2015, 0, (sptr_t)&tr);
         buf.UngetWriteBuf(len);
         return buf;
@@ -389,5 +389,5 @@ wxString wxStyledTextCtrl::GetCurLine(in
         char* buf = (char*)mbuf.GetWriteBuf(len+1);
 
-        int pos = SendMsg(2027, len+1, (long)buf);
+        int pos = SendMsg(2027, len+1, (sptr_t)buf);
         mbuf.UngetWriteBuf(len);
         mbuf.AppendByte(0);
@@ -526,5 +526,5 @@ void wxStyledTextCtrl::MarkerDefineBitma
         strm.CopyTo(buff, len);
         buff[len] = 0;
-        SendMsg(2049, markerNumber, (long)buff);
+        SendMsg(2049, markerNumber, (sptr_t)buff);
         delete [] buff;
         
@@ -613,5 +613,5 @@ void wxStyledTextCtrl::StyleSetSize(int 
 // Set the font of a style.
 void wxStyledTextCtrl::StyleSetFaceName(int style, const wxString& fontName) {
-    SendMsg(2056, style, (long)(const char*)wx2stc(fontName));
+    SendMsg(2056, style, (sptr_t)(const char*)wx2stc(fontName));
 }
 
@@ -683,5 +683,5 @@ void wxStyledTextCtrl::CmdKeyClearAll() 
 // Set the styles for a segment of the document.
 void wxStyledTextCtrl::SetStyleBytes(int length, char* styleBytes) {
-        SendMsg(2073, length, (long)styleBytes);
+        SendMsg(2073, length, (sptr_t)styleBytes);
 }
 
@@ -704,5 +704,5 @@ void wxStyledTextCtrl::SetCaretPeriod(in
 // First sets deaults like SetCharsDefault.
 void wxStyledTextCtrl::SetWordChars(const wxString& characters) {
-    SendMsg(2077, 0, (long)(const char*)wx2stc(characters));
+    SendMsg(2077, 0, (sptr_t)(const char*)wx2stc(characters));
 }
 
@@ -807,5 +807,5 @@ void wxStyledTextCtrl::StyleSetChangeabl
 // the caret should be used to provide context.
 void wxStyledTextCtrl::AutoCompShow(int lenEntered, const wxString& itemList) {
-    SendMsg(2100, lenEntered, (long)(const char*)wx2stc(itemList));
+    SendMsg(2100, lenEntered, (sptr_t)(const char*)wx2stc(itemList));
 }
 
@@ -832,5 +832,5 @@ void wxStyledTextCtrl::AutoCompComplete(
 // Define a set of character that when typed cancel the auto-completion list.
 void wxStyledTextCtrl::AutoCompStops(const wxString& characterSet) {
-    SendMsg(2105, 0, (long)(const char*)wx2stc(characterSet));
+    SendMsg(2105, 0, (sptr_t)(const char*)wx2stc(characterSet));
 }
 
@@ -848,5 +848,5 @@ int wxStyledTextCtrl::AutoCompGetSeparat
 // Select the item in the auto-completion list that starts with a string.
 void wxStyledTextCtrl::AutoCompSelect(const wxString& text) {
-    SendMsg(2108, 0, (long)(const char*)wx2stc(text));
+    SendMsg(2108, 0, (sptr_t)(const char*)wx2stc(text));
 }
 
@@ -865,5 +865,5 @@ bool wxStyledTextCtrl::AutoCompGetCancel
 // choose the selected item.
 void wxStyledTextCtrl::AutoCompSetFillUps(const wxString& characterSet) {
-    SendMsg(2112, 0, (long)(const char*)wx2stc(characterSet));
+    SendMsg(2112, 0, (sptr_t)(const char*)wx2stc(characterSet));
 }
 
@@ -890,5 +890,5 @@ bool wxStyledTextCtrl::AutoCompGetIgnore
 // Display a list of strings and send notification when user chooses one.
 void wxStyledTextCtrl::UserListShow(int listType, const wxString& itemList) {
-    SendMsg(2117, listType, (long)(const char*)wx2stc(itemList));
+    SendMsg(2117, listType, (sptr_t)(const char*)wx2stc(itemList));
 }
 
@@ -927,5 +927,5 @@ void wxStyledTextCtrl::RegisterImage(int
         strm.CopyTo(buff, len);
         buff[len] = 0;
-        SendMsg(2405, type, (long)buff);
+        SendMsg(2405, type, (sptr_t)buff);
         delete [] buff;
      
@@ -1118,5 +1118,5 @@ int wxStyledTextCtrl::FindText(int minPo
             ft.lpstrText = (char*)(const char*)buf;
 
-            return SendMsg(2150, flags, (long)&ft);
+            return SendMsg(2150, flags, (sptr_t)&ft);
 }
 
@@ -1149,5 +1149,5 @@ int wxStyledTextCtrl::FindText(int minPo
              fr.chrg.cpMax = endPos;
 
-             return SendMsg(2151, doDraw, (long)&fr);
+             return SendMsg(2151, doDraw, (sptr_t)&fr);
 }
 
@@ -1164,5 +1164,5 @@ wxString wxStyledTextCtrl::GetLine(int l
          wxMemoryBuffer mbuf(len+1);
          char* buf = (char*)mbuf.GetWriteBuf(len+1);
-         SendMsg(2153, line, (long)buf);
+         SendMsg(2153, line, (sptr_t)buf);
          mbuf.UngetWriteBuf(len);
          mbuf.AppendByte(0);
@@ -1216,5 +1216,5 @@ wxString wxStyledTextCtrl::GetSelectedTe
          wxMemoryBuffer mbuf(len+2);
          char* buf = (char*)mbuf.GetWriteBuf(len+1);
-         SendMsg(2161, 0, (long)buf);
+         SendMsg(2161, 0, (sptr_t)buf);
          mbuf.UngetWriteBuf(len);
          mbuf.AppendByte(0);
@@ -1237,5 +1237,5 @@ wxString wxStyledTextCtrl::GetTextRange(
          tr.chrg.cpMin = startPos;
          tr.chrg.cpMax = endPos;
-         SendMsg(2162, 0, (long)&tr);
+         SendMsg(2162, 0, (sptr_t)&tr);
          mbuf.UngetWriteBuf(len);
          mbuf.AppendByte(0);
@@ -1270,5 +1270,5 @@ void wxStyledTextCtrl::EnsureCaretVisibl
 // Replace the selected text with the argument text.
 void wxStyledTextCtrl::ReplaceSelection(const wxString& text) {
-    SendMsg(2170, 0, (long)(const char*)wx2stc(text));
+    SendMsg(2170, 0, (sptr_t)(const char*)wx2stc(text));
 }
 
@@ -1320,5 +1320,5 @@ void wxStyledTextCtrl::Clear() {
 // Replace the contents of the document with the argument text.
 void wxStyledTextCtrl::SetText(const wxString& text) {
-    SendMsg(2181, 0, (long)(const char*)wx2stc(text));
+    SendMsg(2181, 0, (sptr_t)(const char*)wx2stc(text));
 }
 
@@ -1328,5 +1328,5 @@ wxString wxStyledTextCtrl::GetText() {
          wxMemoryBuffer mbuf(len+1);   // leave room for the null...
          char* buf = (char*)mbuf.GetWriteBuf(len+1);
-         SendMsg(2182, len+1, (long)buf);
+         SendMsg(2182, len+1, (sptr_t)buf);
          mbuf.UngetWriteBuf(len);
          mbuf.AppendByte(0);
@@ -1387,5 +1387,5 @@ int wxStyledTextCtrl::GetTargetEnd() {
      int wxStyledTextCtrl::ReplaceTarget(const wxString& text) {
          wxWX2MBbuf buf = (wxWX2MBbuf)wx2stc(text);
-         return SendMsg(2194, strlen(buf), (long)(const char*)buf);
+         return SendMsg(2194, strlen(buf), (sptr_t)(const char*)buf);
 }
 
@@ -1399,5 +1399,5 @@ int wxStyledTextCtrl::GetTargetEnd() {
      int wxStyledTextCtrl::ReplaceTargetRE(const wxString& text) {
          wxWX2MBbuf buf = (wxWX2MBbuf)wx2stc(text);
-         return SendMsg(2195, strlen(buf), (long)(const char*)buf);
+         return SendMsg(2195, strlen(buf), (sptr_t)(const char*)buf);
 }
 
@@ -1408,5 +1408,5 @@ int wxStyledTextCtrl::GetTargetEnd() {
      int wxStyledTextCtrl::SearchInTarget(const wxString& text) {
          wxWX2MBbuf buf = (wxWX2MBbuf)wx2stc(text);
-         return SendMsg(2197, strlen(buf), (long)(const char*)buf);
+         return SendMsg(2197, strlen(buf), (sptr_t)(const char*)buf);
 }
 
@@ -1423,5 +1423,5 @@ int wxStyledTextCtrl::GetSearchFlags() {
 // Show a call tip containing a definition near position pos.
 void wxStyledTextCtrl::CallTipShow(int pos, const wxString& definition) {
-    SendMsg(2200, pos, (long)(const char*)wx2stc(definition));
+    SendMsg(2200, pos, (sptr_t)(const char*)wx2stc(definition));
 }
 
@@ -1653,5 +1653,5 @@ int wxStyledTextCtrl::GetScrollWidth() {
 // Does not handle tab or control characters.
 int wxStyledTextCtrl::TextWidth(int style, const wxString& text) {
-    return SendMsg(2276, style, (long)(const char*)wx2stc(text));
+    return SendMsg(2276, style, (sptr_t)(const char*)wx2stc(text));
 }
 
@@ -1687,5 +1687,5 @@ bool wxStyledTextCtrl::GetUseVerticalScr
 void wxStyledTextCtrl::AppendText(const wxString& text) {
                     wxWX2MBbuf buf = (wxWX2MBbuf)wx2stc(text);
-                    SendMsg(2282, strlen(buf), (long)(const char*)buf);
+                    SendMsg(2282, strlen(buf), (sptr_t)(const char*)buf);
 }
 
@@ -2051,5 +2051,5 @@ void* wxStyledTextCtrl::GetDocPointer() 
 // Change the document object used.
 void wxStyledTextCtrl::SetDocPointer(void* docPointer) {
-         SendMsg(2358, 0, (long)docPointer);
+         SendMsg(2358, 0, (sptr_t)docPointer);
 }
 
@@ -2100,5 +2100,5 @@ void wxStyledTextCtrl::SearchAnchor() {
 // Does not ensure the selection is visible.
 int wxStyledTextCtrl::SearchNext(int flags, const wxString& text) {
-    return SendMsg(2367, flags, (long)(const char*)wx2stc(text));
+    return SendMsg(2367, flags, (sptr_t)(const char*)wx2stc(text));
 }
 
@@ -2106,5 +2106,5 @@ int wxStyledTextCtrl::SearchNext(int fla
 // Does not ensure the selection is visible.
 int wxStyledTextCtrl::SearchPrev(int flags, const wxString& text) {
-    return SendMsg(2368, flags, (long)(const char*)wx2stc(text));
+    return SendMsg(2368, flags, (sptr_t)(const char*)wx2stc(text));
 }
 
@@ -2144,10 +2144,10 @@ void* wxStyledTextCtrl::CreateDocument()
 // Extend life of document.
 void wxStyledTextCtrl::AddRefDocument(void* docPointer) {
-         SendMsg(2376, 0, (long)docPointer);
+         SendMsg(2376, 0, (sptr_t)docPointer);
 }
 
 // Release a reference to the document, deleting document if it fades to black.
 void wxStyledTextCtrl::ReleaseDocument(void* docPointer) {
-         SendMsg(2377, 0, (long)docPointer);
+         SendMsg(2377, 0, (sptr_t)docPointer);
 }
 
@@ -2334,5 +2334,5 @@ void wxStyledTextCtrl::CopyRange(int sta
 // Copy argument text to the clipboard.
 void wxStyledTextCtrl::CopyText(int length, const wxString& text) {
-    SendMsg(2420, length, (long)(const char*)wx2stc(text));
+    SendMsg(2420, length, (sptr_t)(const char*)wx2stc(text));
 }
 
@@ -2448,5 +2448,5 @@ void wxStyledTextCtrl::WordRightEndExten
 // Should be called after SetWordChars.
 void wxStyledTextCtrl::SetWhitespaceChars(const wxString& characters) {
-    SendMsg(2443, 0, (long)(const char*)wx2stc(characters));
+    SendMsg(2443, 0, (sptr_t)(const char*)wx2stc(characters));
 }
 
@@ -2539,25 +2539,25 @@ void wxStyledTextCtrl::Colourise(int sta
 // Set up a value that may be used by a lexer for some optional feature.
 void wxStyledTextCtrl::SetProperty(const wxString& key, const wxString& value) {
-    SendMsg(4004, (long)(const char*)wx2stc(key), (long)(const char*)wx2stc(value));
+    SendMsg(4004, (sptr_t)(const char*)wx2stc(key), (sptr_t)(const char*)wx2stc(value));
 }
 
 // Set up the key words used by the lexer.
 void wxStyledTextCtrl::SetKeyWords(int keywordSet, const wxString& keyWords) {
-    SendMsg(4005, keywordSet, (long)(const char*)wx2stc(keyWords));
+    SendMsg(4005, keywordSet, (sptr_t)(const char*)wx2stc(keyWords));
 }
 
 // Set the lexing language of the document based on string name.
 void wxStyledTextCtrl::SetLexerLanguage(const wxString& language) {
-    SendMsg(4006, 0, (long)(const char*)wx2stc(language));
+    SendMsg(4006, 0, (sptr_t)(const char*)wx2stc(language));
 }
 
 // Retrieve a 'property' value previously set with SetProperty.
 wxString wxStyledTextCtrl::GetProperty(const wxString& key) {
-         int len = SendMsg(SCI_GETPROPERTY, (long)(const char*)wx2stc(key), (long)NULL);
+         int len = SendMsg(SCI_GETPROPERTY, (sptr_t)(const char*)wx2stc(key), 0);
          if (!len) return wxEmptyString;
 
          wxMemoryBuffer mbuf(len+1);
          char* buf = (char*)mbuf.GetWriteBuf(len+1);
-         SendMsg(4008, (long)(const char*)wx2stc(key), (long)buf);
+         SendMsg(4008, (uptr_t)(const char*)wx2stc(key), (sptr_t)buf);
          mbuf.UngetWriteBuf(len);
          mbuf.AppendByte(0);
@@ -2568,10 +2568,10 @@ wxString wxStyledTextCtrl::GetProperty(c
 // with '$()' variable replacement on returned buffer.
 wxString wxStyledTextCtrl::GetPropertyExpanded(const wxString& key) {
-         int len = SendMsg(SCI_GETPROPERTYEXPANDED, (long)(const char*)wx2stc(key), (long)NULL);
+         int len = SendMsg(SCI_GETPROPERTYEXPANDED, (uptr_t)(const char*)wx2stc(key), 0);
          if (!len) return wxEmptyString;
 
          wxMemoryBuffer mbuf(len+1);
          char* buf = (char*)mbuf.GetWriteBuf(len+1);
-         SendMsg(4009, (long)(const char*)wx2stc(key), (long)buf);
+         SendMsg(4009, (uptr_t)(const char*)wx2stc(key), (sptr_t)buf);
          mbuf.UngetWriteBuf(len);
          mbuf.AppendByte(0);
@@ -2582,5 +2582,5 @@ wxString wxStyledTextCtrl::GetPropertyEx
 // interpreted as an int AFTER any '$()' variable replacement.
 int wxStyledTextCtrl::GetPropertyInt(const wxString& key) {
-    return SendMsg(4010, (long)(const char*)wx2stc(key), 0);
+    return SendMsg(4010, (sptr_t)(const char*)wx2stc(key), 0);
 }
 
@@ -2920,10 +2920,10 @@ bool wxStyledTextCtrl::GetUseAntiAliasin
 void wxStyledTextCtrl::AddTextRaw(const char* text)
 {
-    SendMsg(SCI_ADDTEXT, strlen(text), (long)text);
+    SendMsg(SCI_ADDTEXT, strlen(text), (sptr_t)text);
 }
 
 void wxStyledTextCtrl::InsertTextRaw(int pos, const char* text)
 {
-    SendMsg(SCI_INSERTTEXT, pos, (long)text);
+    SendMsg(SCI_INSERTTEXT, pos, (sptr_t)text);
 }
 
@@ -2938,5 +2938,5 @@ wxCharBuffer wxStyledTextCtrl::GetCurLin
 
     wxCharBuffer buf(len);
-    int pos = SendMsg(SCI_GETCURLINE, len, (long)buf.data());
+    int pos = SendMsg(SCI_GETCURLINE, len, (sptr_t)buf.data());
     if (linePos)  *linePos = pos;
     return buf;
@@ -2952,5 +2952,5 @@ wxCharBuffer wxStyledTextCtrl::GetLineRa
 
     wxCharBuffer buf(len);
-    SendMsg(SCI_GETLINE, line, (long)buf.data());
+    SendMsg(SCI_GETLINE, line, (sptr_t)buf.data());
     return buf;
 }
@@ -2969,5 +2969,5 @@ wxCharBuffer wxStyledTextCtrl::GetSelect
 
     wxCharBuffer buf(len);
-    SendMsg(SCI_GETSELTEXT, 0, (long)buf.data());
+    SendMsg(SCI_GETSELTEXT, 0, (sptr_t)buf.data());
     return buf;
 }
@@ -2991,5 +2991,5 @@ wxCharBuffer wxStyledTextCtrl::GetTextRa
     tr.chrg.cpMin = startPos;
     tr.chrg.cpMax = endPos;
-    SendMsg(SCI_GETTEXTRANGE, 0, (long)&tr);
+    SendMsg(SCI_GETTEXTRANGE, 0, (sptr_t)&tr);
     return buf;
 }
@@ -2997,5 +2997,5 @@ wxCharBuffer wxStyledTextCtrl::GetTextRa
 void wxStyledTextCtrl::SetTextRaw(const char* text)
 {
-    SendMsg(SCI_SETTEXT, 0, (long)text);
+    SendMsg(SCI_SETTEXT, 0, (sptr_t)text);
 }
 
@@ -3004,5 +3004,5 @@ wxCharBuffer wxStyledTextCtrl::GetTextRa
     int len  = GetTextLength();
     wxCharBuffer buf(len);
-    SendMsg(SCI_GETTEXT, len+1, (long)buf.data());
+    SendMsg(SCI_GETTEXT, len + 1, (sptr_t)buf.data());
     return buf;
 }
@@ -3010,5 +3010,5 @@ wxCharBuffer wxStyledTextCtrl::GetTextRa
 void wxStyledTextCtrl::AppendTextRaw(const char* text)
 {
-    SendMsg(SCI_APPENDTEXT, strlen(text), (long)text);
+    SendMsg(SCI_APPENDTEXT, strlen(text), (sptr_t)text);
 }
 
--- /contrib/src/stc/stc.cpp.in	(WX_2_8_BRANCH)
+++ /contrib/src/stc/stc.cpp.in	2009-10-19 10:14:29.000000000 +0200
@@ -195,5 +195,5 @@ wxStyledTextCtrl::~wxStyledTextCtrl() {
 //----------------------------------------------------------------------
 
-long wxStyledTextCtrl::SendMsg(int msg, long wp, long lp) {
+long wxStyledTextCtrl::SendMsg(int msg, wxUIntPtr wp, wxIntPtr lp) const {
 
     return m_swx->WndProc(msg, wp, lp);
@@ -558,10 +558,10 @@ bool wxStyledTextCtrl::GetUseAntiAliasin
 void wxStyledTextCtrl::AddTextRaw(const char* text)
 {
-    SendMsg(SCI_ADDTEXT, strlen(text), (long)text);
+    SendMsg(SCI_ADDTEXT, strlen(text), (sptr_t)text);
 }
 
 void wxStyledTextCtrl::InsertTextRaw(int pos, const char* text)
 {
-    SendMsg(SCI_INSERTTEXT, pos, (long)text);
+    SendMsg(SCI_INSERTTEXT, pos, (sptr_t)text);
 }
 
@@ -576,5 +576,5 @@ wxCharBuffer wxStyledTextCtrl::GetCurLin
 
     wxCharBuffer buf(len);
-    int pos = SendMsg(SCI_GETCURLINE, len, (long)buf.data());
+    int pos = SendMsg(SCI_GETCURLINE, len, (sptr_t)buf.data());
     if (linePos)  *linePos = pos;
     return buf;
@@ -590,5 +590,5 @@ wxCharBuffer wxStyledTextCtrl::GetLineRa
 
     wxCharBuffer buf(len);
-    SendMsg(SCI_GETLINE, line, (long)buf.data());
+    SendMsg(SCI_GETLINE, line, (sptr_t)buf.data());
     return buf;
 }
@@ -607,5 +607,5 @@ wxCharBuffer wxStyledTextCtrl::GetSelect
 
     wxCharBuffer buf(len);
-    SendMsg(SCI_GETSELTEXT, 0, (long)buf.data());
+    SendMsg(SCI_GETSELTEXT, 0, (sptr_t)buf.data());
     return buf;
 }
@@ -629,5 +629,5 @@ wxCharBuffer wxStyledTextCtrl::GetTextRa
     tr.chrg.cpMin = startPos;
     tr.chrg.cpMax = endPos;
-    SendMsg(SCI_GETTEXTRANGE, 0, (long)&tr);
+    SendMsg(SCI_GETTEXTRANGE, 0, (sptr_t)&tr);
     return buf;
 }
@@ -635,5 +635,5 @@ wxCharBuffer wxStyledTextCtrl::GetTextRa
 void wxStyledTextCtrl::SetTextRaw(const char* text)
 {
-    SendMsg(SCI_SETTEXT, 0, (long)text);
+    SendMsg(SCI_SETTEXT, 0, (sptr_t)text);
 }
 
@@ -642,5 +642,5 @@ wxCharBuffer wxStyledTextCtrl::GetTextRa
     int len  = GetTextLength();
     wxCharBuffer buf(len);
-    SendMsg(SCI_GETTEXT, len+1, (long)buf.data());
+    SendMsg(SCI_GETTEXT, len + 1, (sptr_t)buf.data());
     return buf;
 }
@@ -648,5 +648,5 @@ wxCharBuffer wxStyledTextCtrl::GetTextRa
 void wxStyledTextCtrl::AppendTextRaw(const char* text)
 {
-    SendMsg(SCI_APPENDTEXT, strlen(text), (long)text);
+    SendMsg(SCI_APPENDTEXT, strlen(text), (sptr_t)text);
 }
 
--- /contrib/src/stc/stc.h.in	(WX_2_8_BRANCH)
+++ /contrib/src/stc/stc.h.in	2009-10-19 10:14:29.000000000 +0200
@@ -190,5 +190,5 @@ public:
 
     // Send a message to Scintilla
-    long SendMsg(int msg, long wp=0, long lp=0);
+    long SendMsg(int msg, wxUIntPtr wp=0, wxIntPtr lp=0) const;
 
 
--- /include/wx/defs.h	(WX_2_8_BRANCH)
+++ /include/wx/defs.h	2009-10-19 10:14:29.000000000 +0200
@@ -828,8 +828,23 @@ typedef wxUint32 wxDword;
  */
 #if SIZEOF_LONG >= SIZEOF_VOID_P && SIZEOF_LONG >= SIZEOF_SIZE_T
-    /* normal case */
+    /*
+       Normal case when long is the largest integral type.
+     */
+    typedef long sptr_t;
+    typedef unsigned long uptr_t;
+	 typedef long wxIntPtr;
     typedef unsigned long wxUIntPtr;
 #elif SIZEOF_SIZE_T >= SIZEOF_VOID_P
-    /* Win64 case */
+    /* Win64 case size_t is the only integral type big enough for "void *".
+
+       Notice that uptr_t should be also defined as size_t when building
+       under Win32 with MSVC with /Wp64 option as otherwise any conversion
+       between ints and pointers results in a warning 4311 or 4312, even if it
+       is safe under Win32. Using size_t (declared with __w64) allows to avoid
+       them.
+     */
+    #define sptr_t ssize_t
+    typedef size_t uptr_t;
+	 #define wxIntPtr ssize_t 
     typedef size_t wxUIntPtr;
 #else

--- wxWindows.remote/samples/console/console.cpp	Mon Apr  1 21:43:21 2002
+++ wxWindows/samples/console/console.cpp	Tue Apr  2 14:08:25 2002
@@ -4626,9 +4626,9 @@
 #include "wx/thread.h"
 
 static size_t gs_counter = (size_t)-1;
 static wxCriticalSection gs_critsect;
-static wxCondition gs_cond;
+static wxSemaphore gs_cond;
 
 class MyJoinableThread : public wxThread
 {
 public:
@@ -4714,9 +4714,9 @@
     wxLogTrace("thread", "Thread %ld is in OnExit", GetId());
 
     wxCriticalSectionLocker lock(gs_critsect);
     if ( !--gs_counter && !m_cancelled )
-        gs_cond.Signal();
+        gs_cond.Post();
 }
 
 static void TestDetachedThreads()
 {
@@ -4853,10 +4853,11 @@
 
 class MyWaitingThread : public wxThread
 {
 public:
-    MyWaitingThread(wxCondition *condition)
+    MyWaitingThread( wxMutex *mutex, wxCondition *condition )
     {
+        m_mutex = mutex;
         m_condition = condition;
 
         Create();
     }
@@ -4865,41 +4866,45 @@
     {
         printf("Thread %lu has started running.\n", GetId());
         fflush(stdout);
 
-        gs_cond.Signal();
+        gs_cond.Post();
 
         printf("Thread %lu starts to wait...\n", GetId());
         fflush(stdout);
 
+        m_mutex->Lock();
         m_condition->Wait();
+        m_mutex->Unlock();
 
         printf("Thread %lu finished to wait, exiting.\n", GetId());
         fflush(stdout);
 
         return 0;
     }
 
 private:
+    wxMutex *m_mutex;
     wxCondition *m_condition;
 };
 
 static void TestThreadConditions()
 {
-    wxCondition condition;
+    wxMutex mutex;
+    wxCondition condition( &mutex );
 
     // otherwise its difficult to understand which log messages pertain to
     // which condition
-    wxLogTrace("thread", "Local condition var is %08x, gs_cond = %08x",
-               condition.GetId(), gs_cond.GetId());
+    //wxLogTrace("thread", "Local condition var is %08x, gs_cond = %08x",
+    //           condition.GetId(), gs_cond.GetId());
 
     // create and launch threads
     MyWaitingThread *threads[10];
 
     size_t n;
     for ( n = 0; n < WXSIZEOF(threads); n++ )
     {
-        threads[n] = new MyWaitingThread(&condition);
+        threads[n] = new MyWaitingThread( &mutex, &condition );
     }
 
     for ( n = 0; n < WXSIZEOF(threads); n++ )
     {

 	  	 

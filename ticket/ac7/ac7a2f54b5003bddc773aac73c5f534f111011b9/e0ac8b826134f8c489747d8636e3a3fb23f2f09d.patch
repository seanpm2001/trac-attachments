Index: src/msw/mediactrl.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/msw/mediactrl.cpp,v
retrieving revision 1.39
diff -b -u -2 -r1.39 mediactrl.cpp
--- src/msw/mediactrl.cpp	2005/06/02 07:55:35	1.39
+++ src/msw/mediactrl.cpp	2005/06/03 16:14:00
@@ -519,6 +519,4 @@
 public:
     void OnPaint(wxPaintEvent&);
-    void OnMove(wxMoveEvent&);
-    void OnSize(wxSizeEvent&);
     void OnEraseBackground(wxEraseEvent&);
 };
@@ -588,4 +586,5 @@
     HMODULE m_hQuartzDll;
     LPAMGETERRORTEXT m_lpAMGetErrorText;
+    wxString GetErrorString(HRESULT hrdsv);
 #endif
 
@@ -940,40 +939,37 @@
 //---------------------------------------------------------------------------
 #ifdef __WXDEBUG__
-#include "wx/msgdlg.h"
 #define MAX_ERROR_TEXT_LEN 160
-//
-// FIXME : Just use wxASSERT_MSG here instead of msgdlg - but
-// stackwalker still crashes win2k, so do msgdlg for now...
-//
-#define wxAMVERIFY(x) \
-{ \
-    HRESULT hrdsv = (x); \
-    if ( FAILED(hrdsv) ) \
-    { \
-        wxChar szError[MAX_ERROR_TEXT_LEN]; \
-        if( m_lpAMGetErrorText != NULL && \
-           (*m_lpAMGetErrorText)(hrdsv, szError, MAX_ERROR_TEXT_LEN) == 0) \
-        { \
-            wxMessageBox( wxString::Format(wxT("DirectShow error \"%s\" \n")\
-                                         wxT("(numeric %i)\n")\
-                                         wxT("occured at line %i in ") \
-                                         wxT("mediactrl.cpp"), \
-                                         (int)hrdsv, szError, __LINE__) ); \
-            wxASSERT(false);\
-        } \
-        else \
-        { \
-            wxMessageBox( wxString::Format(wxT("Unknown error (%i) ") \
-                                         wxT("occurred at") \
-                                         wxT(" line %i in mediactrl.cpp."), \
-                                         (int)hrdsv, __LINE__) ); \
-            wxASSERT(false);\
-        } \
-    } \
+#include "wx/log.h"             //wxLogDebug et al.
+
+//Get the error string for Active Movie
+wxString wxAMMediaBackend::GetErrorString(HRESULT hrdsv)
+{
+    wxChar szError[MAX_ERROR_TEXT_LEN]; 
+    if( m_lpAMGetErrorText != NULL && 
+       (*m_lpAMGetErrorText)(hrdsv, szError, MAX_ERROR_TEXT_LEN) == 0) 
+    { 
+        return wxString::Format(wxT("DirectShow error \"%s\" \n")
+                                     wxT("(numeric %i)\n")
+                                     wxT("occured at line %i in ") 
+                                     wxT("mediactrl.cpp"), 
+                                     (int)hrdsv, szError, __LINE__); 
+    } 
+    else 
+    { 
+        return wxString::Format(wxT("Unknown error (%i) ") 
+                                     wxT("occurred at") 
+                                     wxT(" line %i in mediactrl.cpp."), 
+                                     (int)hrdsv, __LINE__); 
+    } 
 }
+
+#define wxAMFAIL(x) wxFAIL_MSG(GetErrorString(x)); 
 #define wxVERIFY(x) wxASSERT((x))
+#define wxAMLOG(x) wxLogDebug(GetErrorString(x))
 #else
 #define wxAMVERIFY(x) (x)
 #define wxVERIFY(x) (x)
+#define wxAMLOG(x) 
+#define wxAMFAIL(x) 
 #endif
 
@@ -989,5 +985,6 @@
 //---------------------------------------------------------------------------
 wxAMMediaBackend::wxAMMediaBackend() : m_state(wxMEDIASTATE_STOPPED),
-m_pVMC(NULL)
+m_pMC(NULL), m_pME(NULL), m_pMS(NULL), m_pBA(NULL), m_pGB(NULL),
+m_pVMC(NULL), m_pThread(NULL)
     #ifdef __WXDEBUG__
     , m_hQuartzDll(NULL)
@@ -1049,5 +1046,5 @@
     //Make sure a valid windowless video mixing interface exists
     IGraphBuilder* pGB;
-    if( CoCreateInstance(CLSID_FilgraphManager, NULL, 
+    if( ::CoCreateInstance(CLSID_FilgraphManager, NULL, 
                                   CLSCTX_INPROC_SERVER,
                                   IID_IGraphBuilder, (void**)&pGB) != 0 )
@@ -1072,11 +1069,4 @@
         return false;
 
-    m_ctrl = ctrl;
-
-    //
-    // Connect Events
-    //
-    //TODO:  Greg Hazel reports problems with this... but win2k seems fine on mine...
-    //-------------------------------------------------------------------------------
     // My problem with this was only with a previous patch, probably the third rewrite
     // fixed it as a side-effect. In fact, the erase background style of drawing not 
@@ -1085,43 +1075,12 @@
     // or is on a notebook)
     //  - Greg Hazel
-    m_ctrl->Connect(m_ctrl->GetId(), wxEVT_ERASE_BACKGROUND, 
+    ctrl->Connect(ctrl->GetId(), wxEVT_ERASE_BACKGROUND, 
         wxEraseEventHandler(wxAMMediaEvtHandler::OnEraseBackground),
         NULL, (wxEvtHandler*) this);
-    //m_ctrl->Connect(m_ctrl->GetId(), wxEVT_PAINT, 
-    //    wxPaintEventHandler(wxAMMediaEvtHandler::OnPaint),
-    //    NULL, (wxEvtHandler*) this);
-
-    //
-    // As noted below, we need to catch the Top Level Window's
-    // move events because they are not sent to us if the media control
-    // size remains the same but it actually moves in window coordinates
-    //
-    wxWindow* pTheTLW = m_ctrl->GetParent();
-    while( pTheTLW->GetParent() )
-        pTheTLW = pTheTLW->GetParent();
-
-    //
-    //  FIXMEHACKFIXMEHACKFIXME
-    //  This is really nasty... basically the deal is not only above
-    //  but the repainting is messed up when the parent is maximized
-    //  too, so we've got to catch all 4 events!
-    //
-    m_ctrl->Connect(m_ctrl->GetId(), wxEVT_MOVE, 
-        wxMoveEventHandler(wxAMMediaEvtHandler::OnMove),
-        NULL, (wxEvtHandler*) this);
-    m_ctrl->Connect(m_ctrl->GetId(), wxEVT_SIZE, 
-        wxSizeEventHandler(wxAMMediaEvtHandler::OnSize),
-        NULL, (wxEvtHandler*) this);
- 
-    pTheTLW->Connect(pTheTLW->GetId(), wxEVT_MOVE, 
-        wxMoveEventHandler(wxAMMediaEvtHandler::OnMove),
-        NULL, (wxEvtHandler*) this);
-    pTheTLW->Connect(pTheTLW->GetId(), wxEVT_SIZE, 
-        wxSizeEventHandler(wxAMMediaEvtHandler::OnSize),
-        NULL, (wxEvtHandler*) this);
  
     //
     // done...
     //
+    m_ctrl = ctrl;
     return true;
 }
@@ -1136,14 +1095,18 @@
                                          IVMRWindowlessControl** ppVMC)
 {
+    HRESULT hr;
+
     //
     // Create and add a custom Video Mixing Render to the graph
     //
     IBaseFilter* pVMR;
-    if( CoCreateInstance(CLSID_VideoMixingRenderer, NULL, CLSCTX_INPROC_SERVER,
-                     IID_IBaseFilter, (void**)&pVMR) != 0 )
+    if( ::CoCreateInstance(CLSID_VideoMixingRenderer, NULL, 
+                CLSCTX_INPROC_SERVER, IID_IBaseFilter, (void**)&pVMR) != 0 )
         return false;
 
-    if ( pGB->AddFilter(pVMR, L"Video Mixing Renderer") != 0) 
+    hr = pGB->AddFilter(pVMR, L"Video Mixing Renderer");
+    if ( hr != 0) 
     {
+        wxAMLOG(hr);
         pVMR->Release();
         return false;
@@ -1154,12 +1117,16 @@
     //
     IVMRFilterConfig* pConfig; 
-    if( pVMR->QueryInterface(IID_IVMRFilterConfig, (void**)&pConfig) != 0 ) 
+    hr = pVMR->QueryInterface(IID_IVMRFilterConfig, (void**)&pConfig);
+    if( hr != 0 ) 
     {
+        wxAMLOG(hr);
         pVMR->Release();
         return false;
     }
 
-    if( pConfig->SetRenderingMode(2) != 0) //2 == VMRMode_Windowless
+    hr = pConfig->SetRenderingMode(2);
+    if( hr != 0) //2 == VMRMode_Windowless
     {
+        wxAMLOG(hr);
         pConfig->Release(); 
         pVMR->Release();
@@ -1173,6 +1140,8 @@
     //
     IVMRWindowlessControl* pVMC;
-    if( pVMR->QueryInterface(IID_IVMRWindowlessControl, (void**)&pVMC) != 0 )
+    hr = pVMR->QueryInterface(IID_IVMRWindowlessControl, (void**)&pVMC);
+    if( hr != 0 )
     {
+        wxAMLOG(hr);
         pVMR->Release(); 
         return false;
@@ -1205,4 +1174,6 @@
 bool wxAMMediaBackend::Load(const wxString& fileName)
 {
+    HRESULT hr;
+
     //if previously loaded cleanup
     if(m_pVMC)
@@ -1210,5 +1181,5 @@
 
     //Create interfaces - we already checked for success in CreateControl
-    CoCreateInstance(CLSID_FilgraphManager, NULL, CLSCTX_INPROC_SERVER,
+    ::CoCreateInstance(CLSID_FilgraphManager, NULL, CLSCTX_INPROC_SERVER,
                      IID_IGraphBuilder, (void**)&m_pGB);
 
@@ -1216,8 +1187,11 @@
     // Set and clip output
     SetWindowlessMode(m_pGB, &m_pVMC);
-    if( m_pVMC->SetVideoClippingWindow((HWND)m_ctrl->GetHandle()) != 0 )
+    hr = m_pVMC->SetVideoClippingWindow((HWND)m_ctrl->GetHandle());
+
+    if(hr != 0)
     {
         m_bestSize.x = m_bestSize.y = 0;
-        wxASSERT(false);
+        wxAMFAIL(hr);
+        return false;
     }
 
@@ -1226,16 +1200,45 @@
         return false;
 
+    //
     //Get the interfaces, all of them
-    wxAMVERIFY( m_pGB->QueryInterface(IID_IMediaEvent, (void**)&m_pME) );
-    wxAMVERIFY( m_pGB->QueryInterface(IID_IMediaControl, (void**)&m_pMC) );
-    wxAMVERIFY( m_pGB->QueryInterface(IID_IMediaPosition, (void**)&m_pMS) );
-    wxAMVERIFY( m_pGB->QueryInterface(IID_IBasicAudio, (void**)&m_pBA) );
+    //
+    hr = m_pGB->QueryInterface(IID_IMediaEvent, (void**)&m_pME);
+    if(FAILED(hr))
+    {
+        wxAMLOG(hr);
+        return false;
+    }
+
+    hr = m_pGB->QueryInterface(IID_IMediaControl, (void**)&m_pMC);
+    if(FAILED(hr))
+    {
+        wxAMLOG(hr);
+        return false;
+    }
+
+    hr = m_pGB->QueryInterface(IID_IMediaPosition, (void**)&m_pMS);
+    if(FAILED(hr))
+    {
+        wxAMLOG(hr);
+        return false;
+    }
+
+    hr = m_pGB->QueryInterface(IID_IBasicAudio, (void**)&m_pBA);
+    if(FAILED(hr))
+    {
+        wxAMLOG(hr);
+        //not critical
+    }
 
+    //
     // Get original video size
-    if( m_pVMC->GetNativeVideoSize((LONG*)&m_bestSize.x, (LONG*)&m_bestSize.y, 
-                                   NULL, NULL) != 0 )
+    //
+    hr = m_pVMC->GetNativeVideoSize((LONG*)&m_bestSize.x, (LONG*)&m_bestSize.y, 
+                                   NULL, NULL);
+    if(hr != 0)
     {
         m_bestSize.x = m_bestSize.y = 0;
-        wxASSERT(false);
+        wxAMFAIL(hr);
+        return false;
     }
 
@@ -1256,4 +1259,7 @@
     m_ctrl->SetSize(m_ctrl->GetSize());
 
+    //
+    //  Create the event thread
+    //
     m_pThread = new wxAMMediaThread;
     m_pThread->pThis = this;
@@ -1261,4 +1267,7 @@
     m_pThread->Run();
 
+    //
+    //  done
+    //
     return true;
 }
@@ -1277,4 +1286,31 @@
 
 //---------------------------------------------------------------------------
+// wxAMMediaBackend::Cleanup
+//
+// Releases all the directshow interfaces we use
+// TODO: Maybe only create one instance of IAMMultiMediaStream and reuse it
+// rather than recreating it each time?
+//---------------------------------------------------------------------------
+void wxAMMediaBackend::Cleanup()
+{
+    // RN:  This could be a bad ptr if load failed after
+    // m_pVMC was created
+    if(m_pThread)
+    {
+        m_pThread->Delete();
+        m_pThread = NULL;
+    }
+
+    // Release and zero DirectShow interfaces
+    SAFE_RELEASE(m_pMC);
+    SAFE_RELEASE(m_pME);
+    SAFE_RELEASE(m_pMS);
+    SAFE_RELEASE(m_pBA);
+    SAFE_RELEASE(m_pGB);
+    SAFE_RELEASE(m_pVMC);
+}
+
+
+//---------------------------------------------------------------------------
 // wxAMMediaBackend::Play
 //
@@ -1350,7 +1386,14 @@
 bool wxAMMediaBackend::SetPosition(wxLongLong where)
 {
-    return SUCCEEDED( m_pMS->put_CurrentPosition(
+    HRESULT hr = m_pMS->put_CurrentPosition(
                         ((LONGLONG)where.GetValue()) / 1000.0
-                                     ) );
+                                     );
+    if(FAILED(hr))
+    {
+        wxAMLOG(hr);
+        return false;
+    }
+
+    return true;
 }
 
@@ -1364,5 +1407,10 @@
 {
     double outCur;
-    wxAMVERIFY( m_pMS->get_CurrentPosition(&outCur) );
+    HRESULT hr = m_pMS->get_CurrentPosition(&outCur);
+    if(FAILED(hr))
+    {
+        wxAMLOG(hr);
+        return 0;
+    }
 
     //h,m,s,milli - outdur is in 1 second (double)
@@ -1375,28 +1423,51 @@
 
 //---------------------------------------------------------------------------
-// wxAMMediaBackend::SetVolume
+// wxAMMediaBackend::GetVolume
 //
-// Sets the volume through the IBasicAudio interface -
+// Gets the volume through the IBasicAudio interface -
 // value ranges from 0 (MAX volume) to -10000 (minimum volume).
 // -100 per decibel.
 //---------------------------------------------------------------------------
-bool wxAMMediaBackend::SetVolume(double dVolume)
+double wxAMMediaBackend::GetVolume()
 {
-    return SUCCEEDED(m_pBA->put_Volume( (long) ((dVolume-1.0) * 10000.0) ) );
+    if(m_pBA)
+    {
+        long lVolume;
+        HRESULT hr = m_pBA->get_Volume(&lVolume);
+        if(FAILED(hr))
+        {
+            wxAMLOG(hr);
+            return 0.0;
+        }
+
+        return (((double)(lVolume + 10000)) / 10000.0);
+    }
+
+    wxLogDebug(wxT("No directshow audio interface"));
+    return 0.0;
 }
 
 //---------------------------------------------------------------------------
-// wxAMMediaBackend::GetVolume
+// wxAMMediaBackend::SetVolume
 //
-// Gets the volume through the IBasicAudio interface -
+// Sets the volume through the IBasicAudio interface -
 // value ranges from 0 (MAX volume) to -10000 (minimum volume).
 // -100 per decibel.
 //---------------------------------------------------------------------------
-double wxAMMediaBackend::GetVolume()
+bool wxAMMediaBackend::SetVolume(double dVolume)
 {
-    long lVolume;
-    if ( SUCCEEDED( m_pBA->get_Volume(&lVolume) ) )
-        return (((double)(lVolume + 10000)) / 10000.0);
-    return 0.0;
+    if(m_pBA)
+    {
+        HRESULT hr = m_pBA->put_Volume( (long) ((dVolume-1.0) * 10000.0) );
+        if(FAILED(hr))
+        {
+            wxAMLOG(hr);
+            return false;
+        }
+        return true;
+    }
+
+    wxLogDebug(wxT("No directshow audio interface"));
+    return false;
 }
 
@@ -1414,5 +1485,10 @@
 {
     double outDuration;
-    wxAMVERIFY( m_pMS->get_Duration(&outDuration) );
+    HRESULT hr = m_pMS->get_Duration(&outDuration);
+    if(FAILED(hr))
+    {
+        wxAMLOG(hr);
+        return 0;
+    }
 
     //h,m,s,milli - outdur is in 1 second (double)
@@ -1443,5 +1519,10 @@
 {
     double dRate;
-    wxAMVERIFY( m_pMS->get_Rate(&dRate) );
+    HRESULT hr = m_pMS->get_Rate(&dRate);
+    if(FAILED(hr))
+    {
+        wxAMLOG(hr);
+        return 0.0;
+    }
     return dRate;
 }
@@ -1454,30 +1535,15 @@
 //---------------------------------------------------------------------------
 bool wxAMMediaBackend::SetPlaybackRate(double dRate)
-{
-    return m_pMS->put_Rate(dRate) == 0;
-}
-
-//---------------------------------------------------------------------------
-// wxAMMediaBackend::Cleanup
-//
-// Releases all the directshow interfaces we use
-// TODO: Maybe only create one instance of IAMMultiMediaStream and reuse it
-// rather than recreating it each time?
-//---------------------------------------------------------------------------
-void wxAMMediaBackend::Cleanup()
 {
-    m_pThread->Delete();
-    m_pThread = NULL;
+    HRESULT hr = m_pMS->put_Rate(dRate);
+    if(FAILED(hr))
+    {
+        wxAMLOG(hr);
+        return false;
+    }
 
-    // Release and zero DirectShow interfaces
-    SAFE_RELEASE(m_pMC);
-    SAFE_RELEASE(m_pME);
-    SAFE_RELEASE(m_pMS);
-    SAFE_RELEASE(m_pBA);
-    SAFE_RELEASE(m_pGB);
-    SAFE_RELEASE(m_pVMC);
+    return true;
 }
 
-
 //---------------------------------------------------------------------------
 // wxAMMediaBackend::GetVideoSize
@@ -1498,4 +1564,5 @@
                             int w, int h)
 {
+    //don't use deferred positioning on windows
     if(m_pVMC && m_bVideo)
     {
@@ -1521,49 +1588,13 @@
 
         //set the windowless control positions
-        if( m_pVMC->SetVideoPosition(&srcRect, &destRect) != 0 )
+        HRESULT hr = m_pVMC->SetVideoPosition(&srcRect, &destRect);
+        if(FAILED(hr))
         {
-            wxASSERT_MSG(false, wxT("Could not set video position!"));
+            wxAMLOG(hr);
         }
-
-/*
-        //oddly enough, it doesn't redraw the frame after moving...
-        //TODO: Use wxClientDC?
-        HDC hdc = ::GetDC((HWND)m_ctrl->GetHandle());
-        if( m_pVMC->RepaintVideo((HWND)m_ctrl->GetHandle(), 
-                                                hdc)  != 0 )
-        {
-            wxASSERT(false);
-        }
-        ::ReleaseDC((HWND)m_ctrl->GetHandle(), hdc);
-*/
     }
 }
 
 //---------------------------------------------------------------------------
-// wxAMMediaEvtHandler::OnMove
-//
-// Oddly enough Move isn't called on MSW when the parent moves
-// and the child (us) doesn't, so we have to do it twice I guess :(
-//---------------------------------------------------------------------------
-void wxAMMediaEvtHandler::OnMove(wxMoveEvent& evt)
-{
-    wxAMMediaBackend* pThis = (wxAMMediaBackend*) this;
-    pThis->Move(pThis->m_ctrl->GetPosition().x, 
-                pThis->m_ctrl->GetPosition().y,
-                pThis->m_ctrl->GetSize().x,
-                pThis->m_ctrl->GetSize().y );
-    evt.Skip();
-}
-void wxAMMediaEvtHandler::OnSize(wxSizeEvent& evt)
-{
-    wxAMMediaBackend* pThis = (wxAMMediaBackend*) this;
-    pThis->Move(pThis->m_ctrl->GetPosition().x, 
-                pThis->m_ctrl->GetPosition().y,
-                pThis->m_ctrl->GetSize().x,
-                pThis->m_ctrl->GetSize().y );
-    evt.Skip();
-}
-
-//---------------------------------------------------------------------------
 // wxAMMediaThread::Entry
 //
@@ -1587,11 +1618,15 @@
         {
             // Cleanup memory that GetEvent allocated
-            if( pThis->m_pME->FreeEventParams(evCode, evParam1, evParam2) != 0 )
-            {
-                wxASSERT(false);
+            HRESULT hr = pThis->m_pME->FreeEventParams(evCode, 
+                                                evParam1, evParam2);
+            if(hr != 0)
+            {
+                //Even though this makes a messagebox this 
+                //is windows where we can do gui stuff in seperate
+                //threads :)
+                wxFAIL_MSG(pThis->GetErrorString(hr));
             }
-
             // If this is the end of the clip, notify handler
-            if(1 == evCode) //EC_COMPLETE
+            else if(1 == evCode) //EC_COMPLETE
             {
                 pThis->OnStop();
@@ -1643,8 +1678,9 @@
         //TODO: Use wxClientDC?
         HDC hdc = ::GetDC((HWND)pThis->m_ctrl->GetHandle());
-        if( pThis->m_pVMC->RepaintVideo((HWND)pThis->m_ctrl->GetHandle(), 
-                                        hdc)  != 0 )
+        HRESULT hr = pThis->m_pVMC->RepaintVideo((HWND)pThis->m_ctrl->GetHandle(), 
+                                        hdc);
+        if(FAILED(hr))
         {
-            wxASSERT(false);
+            wxFAIL_MSG(pThis->GetErrorString(hr));
         }
         ::ReleaseDC((HWND)pThis->m_ctrl->GetHandle(), hdc);
@@ -1653,23 +1689,4 @@
     {
         evt.Skip();
-    }
-}
-
-//---------------------------------------------------------------------------
-// wxAMMediaEvtHandler::OnPaint
-//
-// Handle redrawing
-//---------------------------------------------------------------------------
-void wxAMMediaEvtHandler::OnPaint(wxPaintEvent& WXUNUSED(evt))
-{
-    wxAMMediaBackend* pThis = (wxAMMediaBackend*) this;
-    wxPaintDC dc(pThis->m_ctrl);
-    if( pThis->m_pVMC && pThis->m_bVideo)
-    {
-        if( pThis->m_pVMC->RepaintVideo((HWND)pThis->m_ctrl->GetHandle(), 
-                                                (HDC)dc.GetHDC())  != 0 )
-        {
-            wxASSERT(false);
-        }
     }
 }

 	  	 

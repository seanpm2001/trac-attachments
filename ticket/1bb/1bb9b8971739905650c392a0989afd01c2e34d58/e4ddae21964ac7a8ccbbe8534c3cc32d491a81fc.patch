Index: src/common/config.cpp
===================================================================
--- src/common/config.cpp	(revision 64521)
+++ src/common/config.cpp	(working copy)
@@ -218,14 +218,33 @@
     wxCHECK_MSG( val, false, wxT("wxConfig::Read(): NULL parameter") );
 
     long l;
-    if ( !DoReadLong(key, &l) )
+    if ( DoReadLong(key, &l) )
+    {
+        wxASSERT_MSG( l == 0 || l == 1, wxT("bad bool value in wxConfig::DoReadLong") );
+
+        *val = l != 0;
+
+        return true;
+    }
+
+    wxString str;
+    if ( !Read(key, &str) )
         return false;
 
-    wxASSERT_MSG( l == 0 || l == 1, wxT("bad bool value in wxConfig::DoReadInt") );
+    bool success = false;
+    str.MakeLower();
+    if ( str == wxT("true") || str == wxT("yes") || str == wxT("y") || str == wxT("on") )
+    {
+        *val = true;
+        success = true;
+    }
+    else if ( str == wxT("false") || str == wxT("no") || str == wxT("n") || str == wxT("off") )
+    {
+        *val = false;
+        success = true;
+    }
 
-    *val = l != 0;
-
-    return true;
+    return success;
 }
 
 bool wxConfigBase::DoReadDouble(const wxString& key, double* val) const
Index: tests/config/config.cpp
===================================================================
--- tests/config/config.cpp	(revision 64521)
+++ tests/config/config.cpp	(working copy)
@@ -42,10 +42,12 @@
     CPPUNIT_TEST_SUITE( ConfigTestCase );
         CPPUNIT_TEST( ReadWriteLocalTest );
         CPPUNIT_TEST( RecordingDefaultsTest );
+        CPPUNIT_TEST( ReadBoolValuesTest );
     CPPUNIT_TEST_SUITE_END();
 
     void ReadWriteLocalTest();
     void RecordingDefaultsTest();
+    void ReadBoolValuesTest();
 
     // return the number of values we (attempted to) read
     int ReadValues(wxConfig *config, bool has_values);
@@ -209,3 +211,96 @@
 }
 
 
+void ConfigTestCase::ReadBoolValuesTest()
+{
+    wxString app = wxT("wxConfigTestCase");
+    wxString vendor = wxT("wxWidgets");
+    wxConfig *config = new wxConfig(app, vendor, wxT(""), wxT(""),
+                                    wxCONFIG_USE_LOCAL_FILE);
+    config->DeleteAll();
+    config->Write(wxT("b0"), false);
+    config->Write(wxT("b1"), true);
+    config->Write(wxT("i0"), 0);
+    config->Write(wxT("i1"), 1);
+    config->Write(wxT("true"), wxT("true"));
+    config->Write(wxT("trUE"), wxT("trUE"));
+    config->Write(wxT("false"), wxT("false"));
+    config->Write(wxT("fAlSe"), wxT("fAlSe"));
+    config->Write(wxT("y"), wxT("y"));
+    config->Write(wxT("yes"), wxT("yes"));
+    config->Write(wxT("yesss"), wxT("yesss"));
+    config->Write(wxT("n"), wxT("n"));
+    config->Write(wxT("no"), wxT("no"));
+    config->Write(wxT("non"), wxT("non"));
+    config->Write(wxT("on"), wxT("on"));
+    config->Write(wxT("off"), wxT("off"));
+    config->Flush();
+
+    bool boolValue = true;  // value content
+    bool readOk;  // read result
+
+    readOk = config->Read (wxT("b0"), &boolValue);
+    CPPUNIT_ASSERT( readOk );
+    CPPUNIT_ASSERT( !boolValue);
+
+    readOk = config->Read (wxT("b1"), &boolValue);
+    CPPUNIT_ASSERT( readOk );
+    CPPUNIT_ASSERT( boolValue);
+
+    readOk = config->Read (wxT("i0"), &boolValue);
+    CPPUNIT_ASSERT( readOk );
+    CPPUNIT_ASSERT( !boolValue);
+
+    readOk = config->Read (wxT("i1"), &boolValue);
+    CPPUNIT_ASSERT( readOk );
+    CPPUNIT_ASSERT( boolValue);
+
+    readOk = config->Read (wxT("true"), &boolValue);
+    CPPUNIT_ASSERT( readOk );
+    CPPUNIT_ASSERT( boolValue);
+
+    readOk = config->Read (wxT("trUE"), &boolValue);
+    CPPUNIT_ASSERT( readOk );
+    CPPUNIT_ASSERT( boolValue);
+
+    readOk = config->Read (wxT("false"), &boolValue);
+    CPPUNIT_ASSERT( readOk );
+    CPPUNIT_ASSERT( !boolValue);
+
+    readOk = config->Read (wxT("fAlSe"), &boolValue);
+    CPPUNIT_ASSERT( readOk );
+    CPPUNIT_ASSERT( !boolValue);
+
+    readOk = config->Read (wxT("y"), &boolValue);
+    CPPUNIT_ASSERT( readOk );
+    CPPUNIT_ASSERT( boolValue);
+
+    readOk = config->Read (wxT("yes"), &boolValue);
+    CPPUNIT_ASSERT( readOk );
+    CPPUNIT_ASSERT( boolValue);
+
+    readOk = config->Read (wxT("yesss"), &boolValue);
+    CPPUNIT_ASSERT( !readOk );
+
+    readOk = config->Read (wxT("n"), &boolValue);
+    CPPUNIT_ASSERT( readOk );
+    CPPUNIT_ASSERT( !boolValue);
+
+    readOk = config->Read (wxT("no"), &boolValue);
+    CPPUNIT_ASSERT( readOk );
+    CPPUNIT_ASSERT( !boolValue);
+
+    readOk = config->Read (wxT("non"), &boolValue);
+    CPPUNIT_ASSERT( !readOk );
+
+    readOk = config->Read (wxT("on"), &boolValue);
+    CPPUNIT_ASSERT( readOk );
+    CPPUNIT_ASSERT( boolValue);
+
+    readOk = config->Read (wxT("off"), &boolValue);
+    CPPUNIT_ASSERT( readOk );
+    CPPUNIT_ASSERT( !boolValue);
+
+    delete config;
+}
+
Index: interface/wx/config.h
===================================================================
--- interface/wx/config.h	(revision 64521)
+++ interface/wx/config.h	(working copy)
@@ -610,11 +610,12 @@
     //@}
 
     /**
-        Reads a float value, returning @true if the value was found. If the
+        Reads a bool value, returning @true if the value was found. If the
         value was not found, @a b is not changed.
+        A valid bool value can be any non-null integer, "y", "yes", "true",
+        "on" for true, and 0, "n", "no", "false", "off" for false. The
+        string comparison is not case sensitive.
 
-        @since 2.9.1
-
         @beginWxPerlOnly
         Not supported by wxPerl.
         @endWxPerlOnly
@@ -623,6 +624,9 @@
     /**
         Reads a bool value, returning @true if the value was found. If the
         value was not found, @a defaultVal is used instead.
+        A valid bool value can be any non-null integer, "y", "yes", "true",
+        "on" for true, and 0, "n", "no", "false", "off" for false. The
+        string comparison is not case sensitive.
 
         @beginWxPerlOnly
         In wxPerl, this can be called as:

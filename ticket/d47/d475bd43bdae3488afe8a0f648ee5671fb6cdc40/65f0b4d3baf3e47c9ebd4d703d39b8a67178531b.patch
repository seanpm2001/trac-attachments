Index: src/common/filefn.cpp
===================================================================
--- src/common/filefn.cpp	(revision 50077)
+++ src/common/filefn.cpp	(working copy)
@@ -1287,11 +1287,13 @@
 #if defined(__WINDOWS__) || defined(__OS2__)
     // Windows fails to find directory named "c:\dir\" even if "c:\dir" exists,
     // so remove all trailing backslashes from the path - but don't do this for
-    // the paths "d:\" (which are different from "d:") nor for just "\"
+    // the paths "d:\" (which are different from "d:") nor for just "\". Also
+    // don't do this for windows unique volume names (\\?\Volume{guid}\)
     while ( wxEndsWithPathSeparator(strPath) )
     {
         size_t len = strPath.length();
-        if ( len == 1 || (len == 3 && strPath[len - 2] == _T(':')) )
+        if ( len == 1 || (len == 3 && strPath[len - 2] == _T(':')) ||
+            (len == 49 && strPath.StartsWith(wxT("\\\\?\\Volume{"))))
             break;
 
         strPath.Truncate(len - 1);
Index: src/common/filename.cpp
===================================================================
--- src/common/filename.cpp	(revision 50077)
+++ src/common/filename.cpp	(working copy)
@@ -295,6 +295,16 @@
                             path[2u] != wxFILE_SEP_PATH_DOS;
 }
 
+// return true if the format used is the DOS/Windows one and the string begins
+// with a Windows unique volume name ("\\?\Volume{guid}\")
+static bool IsWinUniqueVolumeNamePath(const wxString& path, wxPathFormat format)
+{
+    return format == wxPATH_DOS &&
+           path.length() >= 49 &&
+           path.StartsWith(wxT("\\\\?\\Volume{")) &&
+           path[WIN_UNIQUE_VOLNAME_LAST_CHAR_INDEX] == wxFILE_SEP_PATH_DOS;
+}
+
 // ============================================================================
 // implementation
 // ============================================================================
@@ -1973,6 +1983,24 @@
 
     wxString fullpath = fullpathWithVolume;
 
+    // special Windows unique volume names hack: transform \\?\Volume{guid}\path
+    // into ?\Volume{guid}:path
+    // note: this check must be done before the check for UNC path
+    if ( IsWinUniqueVolumeNamePath(fullpath, format) )
+    {
+        fullpath.erase(0, 2);
+
+        // we know the last backslash from the unique volume name is located
+        // there from the check in IsWinUniqueVolumeNamePath
+        fullpath[WIN_UNIQUE_VOLNAME_LAST_CHAR_INDEX - 2] = wxFILE_SEP_DSK;
+
+        // paths starting with a unique volume name should be always absolute?
+        // (FIXME)
+        fullpath.insert(WIN_UNIQUE_VOLNAME_LAST_CHAR_INDEX - 1,
+                        1,
+                        wxFILE_SEP_PATH_DOS);
+    }
+
     // special Windows UNC paths hack: transform \\share\path into share:path
     if ( IsUNCPath(fullpath, format) )
     {

 	  	 

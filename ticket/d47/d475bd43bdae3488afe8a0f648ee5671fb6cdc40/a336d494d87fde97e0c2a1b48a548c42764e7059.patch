Index: include/wx/filename.h
===================================================================
--- include/wx/filename.h	(revision 62747)
+++ include/wx/filename.h	(working copy)
@@ -433,6 +433,9 @@
     // is the char a path separator for this format?
     static bool IsPathSeparator(wxChar ch, wxPathFormat format = wxPATH_NATIVE);
 
+    // does the path begin with a windows unique volume name ('\\?\Volume{guid}\')?
+    static bool IsWinUniqueVolumeNamePath(const wxString& path, wxPathFormat format = wxPATH_NATIVE);
+
     // Dir accessors
     size_t GetDirCount() const { return m_dirs.size(); }
     void AppendDir(const wxString& dir);
Index: interface/wx/filename.h
===================================================================
--- interface/wx/filename.h	(revision 62747)
+++ interface/wx/filename.h	(working copy)
@@ -820,6 +820,16 @@
                                 wxPathFormat format = wxPATH_NATIVE);
 
     /**
+        Returns @true if the volume part of the path is a unique volume name. This
+        function will always return @false if the path format is not wxPATH_DOS.
+
+        Unique volume names are Windows volume identifiers which remain the same
+        regardless of where the volume is actually mounted.
+    */
+    static bool IsWinUniqueVolumeNamePath(const wxString& path,
+                                          wxPathFormat format = wxPATH_NATIVE);
+
+    /**
         Returns @true if this filename is not absolute.
     */
     bool IsRelative(wxPathFormat format = wxPATH_NATIVE) const;
Index: src/common/filename.cpp
===================================================================
--- src/common/filename.cpp	(revision 62747)
+++ src/common/filename.cpp	(working copy)
@@ -22,8 +22,17 @@
                 drive:\dir1\dir2\...\dirN\filename.ext where drive is a single
                 letter. "." and ".." as for Unix but no "~".
 
-                There are also UNC names of the form \\share\fullpath
+                There are also UNC names of the form \\share\fullpath and
+                Windows unique volume names of the form \\?\Volume{GUID}\fullpath.
 
+                The latter provide a uniform way to access a volume regardless of
+                its current mount point, i.e. you can change a volume's mount
+                point from D: to E:, or even remove it, and still be able to
+                access it through its unique volume name. More on the subject can
+                be found in MSDN's article "Naming a Volume" that is currently at
+                http://msdn.microsoft.com/en-us/library/aa365248(VS.85).aspx.
+
+
    wxPATH_MAC:  Mac OS 8/9 and Mac OS X under CodeWarrior 7 format, absolute file
                 names have the form
                     volume:dir1:...:dirN:filename
@@ -296,7 +305,17 @@
         // although I didn't find any authoritative docs on this)
         if ( format == wxPATH_DOS && volume.length() > 1 )
         {
-            path << wxFILE_SEP_PATH_DOS << wxFILE_SEP_PATH_DOS << volume;
+            // We also have to check for Windows unique volume names here and return it with
+            // '\\?\' prepended to it
+            if(wxFileName::IsWinUniqueVolumeNamePath("\\\\?\\" + volume + "\\", format))
+            {
+                path << "\\\\?\\" << volume;
+            }
+            else
+            {
+                // it must be a UNC path
+                path << wxFILE_SEP_PATH_DOS << wxFILE_SEP_PATH_DOS << volume;
+            }
         }
         else if  ( format == wxPATH_DOS || format == wxPATH_VMS )
         {
@@ -326,6 +345,12 @@
                             !IsDOSPathSep(path[2u]);
 }
 
+// ----------------------------------------------------------------------------
+// private constants
+// ----------------------------------------------------------------------------
+
+static const size_t wxWindowsUniqueVolumeNameLength = 49;
+
 } // anonymous namespace
 
 // ============================================================================
@@ -620,11 +645,13 @@
 #if defined(__WINDOWS__) || defined(__OS2__)
     // Windows fails to find directory named "c:\dir\" even if "c:\dir" exists,
     // so remove all trailing backslashes from the path - but don't do this for
-    // the paths "d:\" (which are different from "d:") nor for just "\"
+    // the paths "d:\" (which are different from "d:"), for just "\" or for
+    // windows unique volume names ("\\?\Volume{GUID}\")
     while ( wxEndsWithPathSeparator(strPath) )
     {
         size_t len = strPath.length();
-        if ( len == 1 || (len == 3 && strPath[len - 2] == wxT(':')) )
+        if ( len == 1 || (len == 3 && strPath[len - 2] == wxT(':')) ||
+            (len == wxWindowsUniqueVolumeNameLength && wxFileName::IsWinUniqueVolumeNamePath(strPath)))
             break;
 
         strPath.Truncate(len - 1);
@@ -1810,6 +1837,18 @@
     return ch != wxT('\0') && GetPathSeparators(format).Find(ch) != wxNOT_FOUND;
 }
 
+/* static */
+bool wxFileName::IsWinUniqueVolumeNamePath(const wxString& path, wxPathFormat format)
+{
+    // return true if the format used is the DOS/Windows one and the string begins
+    // with a Windows unique volume name ("\\?\Volume{guid}\")
+
+    return format == wxPATH_DOS &&
+           path.length() >= wxWindowsUniqueVolumeNameLength &&
+           path.StartsWith(wxT("\\\\?\\Volume{")) &&
+           path[wxWindowsUniqueVolumeNameLength - 1] == wxFILE_SEP_PATH_DOS;
+}
+
 // ----------------------------------------------------------------------------
 // path components manipulation
 // ----------------------------------------------------------------------------
@@ -2194,9 +2233,27 @@
 
     wxString fullpath = fullpathWithVolume;
 
-    // special Windows UNC paths hack: transform \\share\path into share:path
-    if ( IsUNCPath(fullpath, format) )
+    if ( IsWinUniqueVolumeNamePath(fullpath, format) )
     {
+        // special Windows unique volume names hack: transform \\?\Volume{guid}\path
+        // into Volume{guid}:path
+        // note: this check must be done before the check for UNC path
+
+        fullpath.erase(0, 4);
+
+        // we know the last backslash from the unique volume name is located
+        // there from IsWinUniqueVolumeNamePath
+        fullpath[wxWindowsUniqueVolumeNameLength - 5] = wxFILE_SEP_DSK;
+
+        // paths starting with a unique volume name should always be absolute
+        fullpath.insert(wxWindowsUniqueVolumeNameLength - 4,
+                        1,
+                        wxFILE_SEP_PATH_DOS);
+    }
+    else if ( IsUNCPath(fullpath, format) )
+    {
+        // special Windows UNC paths hack: transform \\share\path into share:path
+
         fullpath.erase(0, 2);
 
         size_t posFirstSlash =
Index: tests/filename/filenametest.cpp
===================================================================
--- tests/filename/filenametest.cpp	(revision 62747)
+++ tests/filename/filenametest.cpp	(working copy)
@@ -69,6 +69,10 @@
     { "c:foo.bar", "c", "", "foo", "bar", false, wxPATH_DOS },
     { "c:\\foo.bar", "c", "\\", "foo", "bar", true, wxPATH_DOS },
     { "c:\\Windows\\command.com", "c", "\\Windows", "command", "com", true, wxPATH_DOS },
+    { "\\\\?\\Volume{8089d7d7-d0ac-11db-9dd0-806d6172696f}\\",
+      "Volume{8089d7d7-d0ac-11db-9dd0-806d6172696f}", "\\", "", "", true, wxPATH_DOS },
+    { "\\\\?\\Volume{8089d7d7-d0ac-11db-9dd0-806d6172696f}\\Program Files\\setup.exe",
+      "Volume{8089d7d7-d0ac-11db-9dd0-806d6172696f}", "\\Program Files", "setup", "exe", true, wxPATH_DOS },
 
 #if 0
     // NB: when using the wxFileName::GetLongPath() function on these two
@@ -125,6 +129,7 @@
         CPPUNIT_TEST( TestShortLongPath );
 #endif // __WINDOWS__
         CPPUNIT_TEST( TestUNC );
+        CPPUNIT_TEST( TestVolumeUniqueName );
     CPPUNIT_TEST_SUITE_END();
 
     void TestConstruction();
@@ -138,6 +143,7 @@
     void TestShortLongPath();
 #endif // __WINDOWS__
     void TestUNC();
+    void TestVolumeUniqueName();
 
     DECLARE_NO_COPY_CLASS(FileNameTestCase)
 };
@@ -507,3 +513,16 @@
     CPPUNIT_ASSERT_EQUAL( "\\path2", fn.GetPath(wxPATH_NO_SEPARATOR, wxPATH_DOS) );
 }
 
+void FileNameTestCase::TestVolumeUniqueName()
+{
+    wxFileName fn("\\\\?\\Volume{8089d7d7-d0ac-11db-9dd0-806d6172696f}\\", wxPATH_DOS);
+    CPPUNIT_ASSERT_EQUAL( "Volume{8089d7d7-d0ac-11db-9dd0-806d6172696f}", fn.GetVolume() );
+    CPPUNIT_ASSERT_EQUAL( "\\", fn.GetPath(wxPATH_NO_SEPARATOR, wxPATH_DOS) );
+    CPPUNIT_ASSERT_EQUAL( "\\\\?\\Volume{8089d7d7-d0ac-11db-9dd0-806d6172696f}\\", fn.GetFullPath(wxPATH_DOS) );
+
+    fn.Assign("\\\\?\\Volume{8089d7d7-d0ac-11db-9dd0-806d6172696f}\\Program Files\\setup.exe", wxPATH_DOS);
+    CPPUNIT_ASSERT_EQUAL( "Volume{8089d7d7-d0ac-11db-9dd0-806d6172696f}", fn.GetVolume() );
+    CPPUNIT_ASSERT_EQUAL( "\\Program Files", fn.GetPath(wxPATH_NO_SEPARATOR, wxPATH_DOS) );
+    CPPUNIT_ASSERT_EQUAL( "\\\\?\\Volume{8089d7d7-d0ac-11db-9dd0-806d6172696f}\\Program Files\\setup.exe",
+                          fn.GetFullPath(wxPATH_DOS) );
+}

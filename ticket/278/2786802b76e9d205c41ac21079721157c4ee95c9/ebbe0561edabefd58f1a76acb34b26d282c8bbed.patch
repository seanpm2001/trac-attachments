diff -ru wxWidgets.orig/include/wx/cmndata.h wxWidgets/include/wx/cmndata.h
--- wxWidgets.orig/include/wx/cmndata.h	2007-11-17 04:53:20.000000000 +0100
+++ wxWidgets/include/wx/cmndata.h	2007-11-18 13:57:31.000000000 +0100
@@ -29,8 +29,13 @@
 class WXDLLEXPORT wxColourData: public wxObject
 {
 public:
+    enum
+    {
+        cust_color_count = 16
+    };
+
     wxColourData();
-    wxColourData(const wxColourData& data);
+    wxColourData(const wxColourData&);
     virtual ~wxColourData();
 
     void SetChooseFull(bool flag) { m_chooseFull = flag; }
@@ -40,18 +45,25 @@
     wxColour& GetColour() { return m_dataColour; }
 
     // Array of 16 custom colours
-    void SetCustomColour(int i, const wxColour& colour);
+    void     SetCustomColour(int i, const wxColour&);
     wxColour GetCustomColour(int i);
 
-    void operator=(const wxColourData& data);
+    bool TransferData(wxString*, bool save);
 
-public:
+    wxString ToString  (void) const;
+    unsigned int FromString(const wxString&);
+    
+    void operator=(const wxColourData&);
+
+public: // TODO: protected:
     wxColour        m_dataColour;
-    wxColour        m_custColours[16];
+    wxColour        m_custColours[cust_color_count];
     bool            m_chooseFull;
 
 private:
     DECLARE_DYNAMIC_CLASS(wxColourData)
+
+    friend class wxColourDialog;
 };
 
 class WXDLLEXPORT wxFontData : public wxObject
diff -ru wxWidgets.orig/include/wx/colordlg.h wxWidgets/include/wx/colordlg.h
--- wxWidgets.orig/include/wx/colordlg.h	2007-11-17 04:53:20.000000000 +0100
+++ wxWidgets/include/wx/colordlg.h	2007-11-18 00:08:45.000000000 +0100
@@ -30,10 +30,14 @@
     #define wxColourDialog wxGenericColourDialog
 #endif
 
+class WXDLLIMPEXP_FWD_CORE wxColourData;
+
 // get the colour from user and return it
 wxColour WXDLLEXPORT
 wxGetColourFromUser(wxWindow *parent = (wxWindow *)NULL,
-                    const wxColour& colInit = wxNullColour, const wxString& caption = wxEmptyString);
+                    const wxColour& colInit = wxNullColour, 
+                    const wxString& caption = wxEmptyString,
+                    wxColourData* data = NULL);
 
 #endif // wxUSE_COLOURDLG
 
diff -ru wxWidgets.orig/include/wx/colour.h wxWidgets/include/wx/colour.h
--- wxWidgets.orig/include/wx/colour.h	2007-11-17 04:53:20.000000000 +0100
+++ wxWidgets/include/wx/colour.h	2007-11-18 13:37:00.000000000 +0100
@@ -87,6 +87,10 @@
             (ChannelType)(0xFF & (colRGB >> 16)));
     }
 
+    unsigned long Get(void) const
+    {
+        return (unsigned long)Red() + (((unsigned long)Green()) << 8) + (((unsigned long)Blue()) << 16);
+    }
 
 
     // accessors
diff -ru wxWidgets.orig/samples/dialogs/dialogs.cpp wxWidgets/samples/dialogs/dialogs.cpp
--- wxWidgets.orig/samples/dialogs/dialogs.cpp	2007-11-17 04:53:38.000000000 +0100
+++ wxWidgets/samples/dialogs/dialogs.cpp	2007-11-18 14:12:05.000000000 +0100
@@ -463,7 +463,7 @@
 
 #if wxUSE_COLOURDLG
     m_clrData.SetChooseFull(true);
-    for (int i = 0; i < 16; i++)
+    for (int i = 0; i < WXSIZEOF(m_clrData.m_custColours); i++)
     {
         m_clrData.SetCustomColour(
           i,
@@ -482,22 +482,34 @@
 }
 
 #if wxUSE_COLOURDLG
+#define USE_GETTER 1
 void MyFrame::ChooseColour(wxCommandEvent& WXUNUSED(event) )
 {
+    wxColour clr;
+    const wxString caption = _("Choose the background colour");
+#if USE_GETTER
+    clr = wxGetColourFromUser(this, myCanvas->GetBackgroundColour(), caption);
+#else
     m_clrData.SetColour(myCanvas->GetBackgroundColour());
 
     wxColourDialog dialog(this, &m_clrData);
-    dialog.SetTitle(_T("Choose the background colour"));
+    dialog.SetTitle(caption);
     if (dialog.ShowModal() == wxID_OK)
     {
         m_clrData = dialog.GetColourData();
-        myCanvas->SetBackgroundColour(m_clrData.GetColour());
+        clr = m_clrData.GetColour();
+    }
+#endif    
+    if (clr.IsOk())
+    {
+        myCanvas->SetBackgroundColour(clr);
         myCanvas->ClearBackground();
         myCanvas->Refresh();
     }
 }
 #endif // wxUSE_COLOURDLG
 
+
 #if USE_COLOURDLG_GENERIC
 void MyFrame::ChooseColourGeneric(wxCommandEvent& WXUNUSED(event))
 {
diff -ru wxWidgets.orig/src/common/cmndata.cpp wxWidgets/src/common/cmndata.cpp
--- wxWidgets.orig/src/common/cmndata.cpp	2007-11-17 04:53:28.000000000 +0100
+++ wxWidgets/src/common/cmndata.cpp	2007-11-18 14:11:50.000000000 +0100
@@ -89,14 +89,14 @@
 
 void wxColourData::SetCustomColour(int i, const wxColour& colour)
 {
-    wxCHECK_RET( (i >= 0 && i < 16), _T("custom colour index out of range") );
+    wxCHECK_RET( (i >= 0 && i < WXSIZEOF(m_custColours)), _T("custom colour index out of range") );
 
     m_custColours[i] = colour;
 }
 
 wxColour wxColourData::GetCustomColour(int i)
 {
-    wxCHECK_MSG( (i >= 0 && i < 16), wxColour(0,0,0),
+    wxCHECK_MSG( (i >= 0 && i < WXSIZEOF(m_custColours)), wxColour(0,0,0),
                  _T("custom colour index out of range") );
 
     return m_custColours[i];
@@ -104,14 +104,76 @@
 
 void wxColourData::operator=(const wxColourData& data)
 {
-    int i;
-    for (i = 0; i < 16; i++)
+    for (int i = 0; i < WXSIZEOF(m_custColours); i++)
         m_custColours[i] = data.m_custColours[i];
 
-    m_dataColour = (wxColour&)data.m_dataColour;
+    m_dataColour = data.m_dataColour;
     m_chooseFull = data.m_chooseFull;
 }
 
+bool wxColourData::TransferData(wxString* str, bool save)
+{
+    const wxChar sep = ',';
+    if (save)
+    {
+        for (int i = 0; i < WXSIZEOF(m_custColours); i++)
+        {
+            const wxColour& clr = m_custColours[i];
+            if (i) (*str)+=sep;
+            if (clr.IsOk()) (*str)+=wxString::Format(wxT("%d"), (int)clr.Get());
+        }
+    }
+    else
+    {
+        int prev = 0;
+        unsigned int i;
+
+        for (i = 0; i < WXSIZEOF(m_custColours); i++)
+        {
+            int next = str->Mid(prev).Find(sep);
+            const bool gotnext = (next != wxNOT_FOUND);
+            if (gotnext) next++;
+            const wxString clr = str->Mid(prev, gotnext ? (prev + next) : wxString::npos);
+            if (!clr.IsEmpty()) m_custColours[i].Set(wxAtoi(clr));
+            if (!gotnext) break;
+            prev = prev + next;
+        }
+    }
+    return true;
+}
+
+wxString wxColourData::ToString(void) const
+{
+    const wxChar sep = ',';
+    wxString str;
+    for (int i = 0; i < WXSIZEOF(m_custColours); i++)
+    {
+        const wxColour& clr = m_custColours[i];
+        if (i) str+=sep;
+        if (clr.IsOk()) str+=wxString::Format(wxT("%d"), (int)clr.Get());
+    }
+    return str;
+}
+
+unsigned int wxColourData::FromString(const wxString& str)
+{
+    const wxChar sep = ',';
+    int prev = 0;
+    unsigned int i;
+
+    for (i = 0; i < WXSIZEOF(m_custColours); i++)
+    {
+        int next = str.Mid(prev).Find(sep);
+        const bool gotnext = (next != wxNOT_FOUND);
+        if (gotnext) next++;
+        const wxString clr = str.Mid(prev, gotnext ? (prev + next) : wxString::npos);
+        if (!clr.IsEmpty()) m_custColours[i].Set(wxAtoi(clr));
+        if (!gotnext) break;
+        prev = prev + next;
+    }
+    return i;
+}
+
 // ----------------------------------------------------------------------------
 // Font data
 // ----------------------------------------------------------------------------
diff -ru wxWidgets.orig/src/common/utilscmn.cpp wxWidgets/src/common/utilscmn.cpp
--- wxWidgets.orig/src/common/utilscmn.cpp	2007-11-17 04:53:28.000000000 +0100
+++ wxWidgets/src/common/utilscmn.cpp	2007-11-18 14:15:29.000000000 +0100
@@ -1419,22 +1419,38 @@
 
 #if wxUSE_COLOURDLG
 
-wxColour wxGetColourFromUser(wxWindow *parent, const wxColour& colInit, const wxString& caption)
+wxColour wxGetColourFromUser(wxWindow *parent, 
+                             const wxColour& colInit, 
+                             const wxString& caption,
+                             wxColourData* data_ptr)
 {
+    static wxString strData;
     wxColourData data;
-    data.SetChooseFull(true);
-    if ( colInit.Ok() )
+    if (data_ptr == NULL)
     {
-        data.SetColour((wxColour &)colInit); // const_cast
+        data_ptr = &data;
+        if (!strData.IsEmpty())
+        {
+            // data.TransferData(&strData, false);
+            data.FromString(strData);
+        }
+    }
+    data_ptr->SetChooseFull(true);
+    if ( colInit.IsOk() )
+    {
+        data_ptr->SetColour(colInit);
     }
 
     wxColour colRet;
-    wxColourDialog dialog(parent, &data);
+    wxColourDialog dialog(parent, data_ptr);
     if (!caption.empty())
         dialog.SetTitle(caption);
     if ( dialog.ShowModal() == wxID_OK )
     {
-        colRet = dialog.GetColourData().GetColour();
+        data_ptr->operator=(dialog.GetColourData());
+        colRet  = data_ptr->GetColour();
+        // data_ptr->TransferData(&strData, true);
+        strData = data_ptr->ToString();
     }
     //else: leave it invalid
 

 	  	 

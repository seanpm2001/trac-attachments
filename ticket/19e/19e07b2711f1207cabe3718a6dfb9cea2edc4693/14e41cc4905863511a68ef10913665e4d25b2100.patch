Index: src/msw/menu.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/msw/menu.cpp,v
retrieving revision 1.143
diff --unified -r1.143 menu.cpp
--- src/msw/menu.cpp	2007/01/11 01:21:42	1.143
+++ src/msw/menu.cpp	2007/01/13 04:23:49
@@ -437,7 +437,7 @@
             // while our owner-drawn code is not

             // first compile-time check
-#if defined(MIIM_BITMAP) && (_WIN32_WINNT >= 0x0500)
+#if defined(MIIM_BITMAP) && (_WIN32_WINNT >= 0x0500) && 0 // Turn off this code till bug if fixed
             WinStruct<MENUITEMINFO> mii;

             // now run-time one: MIIM_BITMAP only works under WinME/2000+
Index: src/msw/ownerdrw.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/msw/ownerdrw.cpp,v
retrieving revision 1.72
diff --unified -r1.72 ownerdrw.cpp
--- src/msw/ownerdrw.cpp	2006/10/31 14:44:37	1.72
+++ src/msw/ownerdrw.cpp	2007/01/13 04:38:27
@@ -34,6 +34,11 @@

 #if wxUSE_OWNER_DRAWN

+#if defined(__WXMSW__) && wxUSE_IMAGE
+#include "wx/image.h"
+bool wxOwnerDrawnCreateGreyedImage(const wxImage& src, wxImage& dst);
+#endif
+
 #ifndef SPI_GETKEYBOARDCUES
 #define SPI_GETKEYBOARDCUES 0x100A
 #endif
@@ -417,6 +422,18 @@
         if ( st & wxODDisabled )
         {
             bmp = GetDisabledBitmap();
+#if defined(__WXMSW__) && wxUSE_IMAGE && wxUSE_WXDIB
+            if ( !bmp.Ok() && m_bmpChecked.Ok() )
+            {
+                // no disabled bitmap specified but we still need to
+                // fill the space in the image list with something, so
+                // we grey out the normal bitmap
+                wxImage imgGreyed;
+                wxOwnerDrawnCreateGreyedImage(m_bmpChecked.ConvertToImage(), imgGreyed);
+                bmp = wxBitmap(imgGreyed);
+                SetDisabledBitmap(bmp);
+            }
+#endif // defined(__WXMSW__) && wxUSE_IMAGE && wxUSE_WXDIB
         }

         if ( !bmp.Ok() )
@@ -462,5 +479,79 @@
     return true;
 }

+#if defined(__WXMSW__) && wxUSE_IMAGE
+
+/*
+ * Make a greyed-out image suitable for disabled buttons.
+ * Code copied from common/tbarbase.cpp method wxCreateGreyedImage.
+ * Modified code a lot to get better looking results.
+ */
+
+bool wxOwnerDrawnCreateGreyedImage(const wxImage& src, wxImage& dst)
+{
+    dst = src.Copy();
+
+    unsigned char rBg, gBg, bBg;
+    if ( src.HasMask() )
+    {
+        src.GetOrFindMaskColour(&rBg, &gBg, &bBg);
+        dst.SetMaskColour(rBg, gBg, bBg);
+    }
+    else
+    {
+        // assuming the pixels along the edges are of the background color
+        rBg = src.GetRed(0, 0);
+        gBg = src.GetGreen(0, 0);
+        bBg = src.GetBlue(0, 0);
+    }
+
+    const wxColour colBg(rBg, gBg, bBg);
+
+    const wxColour colGray = wxTheColourDatabase->Find(_T("MEDIUM GREY"));
+
+    unsigned char rGrey, gGrey, bGrey;
+    rGrey = colGray.Red();
+    gGrey = colGray.Green();
+    bGrey = colGray.Blue();
+
+    // Second attempt, just making things monochrome
+    const int width = src.GetWidth();
+    const int height = src.GetHeight();
+
+    for ( int x = 0; x < width; x++ )
+    {
+        for ( int y = 0; y < height; y++ )
+        {
+            const int r = src.GetRed(x, y);
+            const int g = src.GetGreen(x, y);
+            const int b = src.GetBlue(x, y);
+
+            if ( src.IsTransparent(x, y) )
+            {
+                // Leave the Transparent colour as-is
+                continue;
+            }
+            if ( r == rBg && g == gBg && b == bBg )
+            {
+                // Leave the background colour as-is
+                continue;
+            }
+
+            if ( r == 0 && g == 0 && b == 0 )
+            {
+                // Colour is black change to Grey
+                dst.SetRGB(x, y, rGrey, gGrey, bGrey);
+            }
+            else
+            {
+                // Greyscale conversion by Geometric Mean.
+                dst.SetRGB(x, y, (r+g+b)/3, (r+g+b)/3, (r+g+b)/3);
+            }
+        }
+    }
+    return true;
+}
+
+#endif // defined(__WXMSW__) && wxUSE_IMAGE

 #endif // wxUSE_OWNER_DRAWN

 	  	 

Index: include/wx/msw/textctrl.h
===================================================================
--- include/wx/msw/textctrl.h	(revision 63760)
+++ include/wx/msw/textctrl.h	(working copy)
@@ -180,6 +180,10 @@
     virtual bool MSWShouldPreProcessMessage(WXMSG* pMsg);
     virtual WXDWORD MSWGetStyle(long style, WXDWORD *exstyle) const;
 
+    void SetCanFocus(bool can)
+    {
+        m_canFocus = can;
+    }
 protected:
     // common part of all ctors
     void Init();
@@ -268,6 +272,8 @@
     int  m_isInkEdit;
 #endif
 
+    bool m_canFocus;
+
 };
 
 #endif // _WX_TEXTCTRL_H_
Index: samples/text/text.cpp
===================================================================
--- samples/text/text.cpp	(revision 63760)
+++ samples/text/text.cpp	(working copy)
@@ -323,6 +323,13 @@
         m_panel->m_text->ChangeValue(wxT("Changed, not set: no event"));
     }
 
+#ifdef __WXMSW__
+    void OnReadOnlyFocusable(wxCommandEvent& event)
+    {
+        m_panel->m_readonly->SetCanFocus(event.IsChecked());
+    }
+#endif
+
     void OnIdle( wxIdleEvent& event );
 
 private:
@@ -426,6 +433,10 @@
     TEXT_GET_LINE,
     TEXT_GET_LINELENGTH,
 
+#ifdef __WXMSW__
+    TEXT_READONLY_FOCUSABLE,
+#endif
+
     TEXT_REMOVE,
     TEXT_REPLACE,
     TEXT_SELECT,
@@ -508,6 +519,10 @@
     menuText->AppendCheckItem(TEXT_SET_ENABLED, wxT("Toggle e&nabled state"));
     menuText->Check(TEXT_SET_EDITABLE, true);
     menuText->Check(TEXT_SET_ENABLED, true);
+#ifdef __WXMSW__
+    menuText->AppendCheckItem(TEXT_READONLY_FOCUSABLE, wxT("Make the 'Read only' wxTextCtrl focusable"));
+    menuText->Check(TEXT_READONLY_FOCUSABLE, false);
+#endif
     menuText->AppendSeparator();
     menuText->Append(TEXT_LINE_DOWN, wxT("Scroll text one line down"));
     menuText->Append(TEXT_LINE_UP, wxT("Scroll text one line up"));
@@ -1379,6 +1394,10 @@
     EVT_MENU(TEXT_SET,                MyFrame::OnSetText)
     EVT_MENU(TEXT_CHANGE,             MyFrame::OnChangeText)
 
+#ifdef __WXMSW__
+    EVT_MENU(TEXT_READONLY_FOCUSABLE, MyFrame::OnReadOnlyFocusable)
+#endif
+
     EVT_IDLE(MyFrame::OnIdle)
 END_EVENT_TABLE()
 
Index: src/msw/textctrl.cpp
===================================================================
--- src/msw/textctrl.cpp	(revision 63760)
+++ src/msw/textctrl.cpp	(working copy)
@@ -340,6 +340,15 @@
     }
 #endif // wxUSE_DRAG_AND_DROP && wxUSE_RICHEDIT
 
+    if (IsEditable() || IsMultiLine())
+    {
+        m_canFocus = true;
+    }
+    else
+    {
+        m_canFocus = false;
+    }
+
     return true;
 }
 
@@ -2072,10 +2081,8 @@
 
 bool wxTextCtrl::AcceptsFocusFromKeyboard() const
 {
-    // we don't want focus if we can't be edited unless we're a multiline
-    // control because then it might be still nice to get focus from keyboard
-    // to be able to scroll it without mouse
-    return (IsEditable() || IsMultiLine()) && wxControl::AcceptsFocus();
+        // we should accept focus if the client want this control to do
+        return m_canFocus && wxControl::AcceptsFocus();
 }
 
 wxSize wxTextCtrl::DoGetBestSize() const

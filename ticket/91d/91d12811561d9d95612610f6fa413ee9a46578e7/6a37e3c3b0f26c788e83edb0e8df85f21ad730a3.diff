Index: docs/latex/wx/colour.tex
===================================================================
--- docs/latex/wx/colour.tex	(revision 47237)
+++ docs/latex/wx/colour.tex	(working copy)
@@ -120,8 +120,8 @@
 
 The supported flags are {\bf wxC2S\_NAME}, to obtain the colour
 name (e.g. wxColour(255,0,0) -> \texttt{``red"}), {\bf wxC2S\_CSS\_SYNTAX}, to obtain
-the colour in the \texttt{``rgb(r,g,b)"} syntax
-(e.g. wxColour(255,0,0) -> \texttt{``rgb(255,0,0)"}), and {\bf wxC2S\_HTML\_SYNTAX}, to obtain
+the colour in the \texttt{``rgb(r,g,b)"} or \texttt{``rgba(r,g,b,a)"} syntax
+(e.g. wxColour(255,0,0,85) -> \texttt{``rgba(255,0,0,0.333)"}), and {\bf wxC2S\_HTML\_SYNTAX}, to obtain
 the colour as  \texttt{``\#"} followed by 6 hexadecimal digits
 (e.g. wxColour(255,0,0) -> \texttt{``\#FF0000"}).
 
@@ -170,7 +170,11 @@
 
 Sets the RGB intensity values using the given values (first overload), extracting them from the packed long (second overload), using the given string (third overloard).
 
-When using third form, Set() accepts: colour names (those listed in \helpref{wxTheColourDatabase}{wxcolourdatabase}), the CSS-like \texttt{``RGB(r,g,b)"} syntax (case insensitive) and the HTML-like syntax (i.e. \texttt{``\#"} followed by 6 hexadecimal digits for red, green, blue components).
+When using third form, Set() accepts: colour names (those listed in 
+\helpref{wxTheColourDatabase}{wxcolourdatabase}), the CSS-like 
+\texttt{``rgb(r,g,b)"} or \texttt{``rgba(r,g,b,a)"} syntax (case insensitive) 
+and the HTML-like syntax (i.e. \texttt{``\#"} followed by 6 hexadecimal digits 
+for red, green, blue components).
 
 Returns \true if the conversion was successful, \false otherwise.
 
Index: src/common/colourcmn.cpp
===================================================================
--- src/common/colourcmn.cpp	(revision 47237)
+++ src/common/colourcmn.cpp	(working copy)
@@ -34,6 +34,7 @@
 // wxString <-> wxColour conversions
 // ============================================================================
 
+//virtual
 bool wxColourBase::FromString(const wxString& str)
 {
     if ( str.empty() )
@@ -43,15 +44,28 @@
          wxStrncmp(str, wxT("rgb"), 3) == 0 )
     {
         // CSS-like RGB specification
-        // according to http://www.w3.org/TR/REC-CSS2/syndata.html#color-units
+        // according to http://www.w3.org/TR/css3-color/#colorunits
         // values outside 0-255 range are allowed but should be clipped
-        int red, green, blue;
-        if (wxSscanf(str.wx_str() + 3, wxT("(%d, %d, %d)"), &red, &green, &blue) != 3)
-            return false;
-
+        int red, green, blue, alpha=wxALPHA_OPAQUE;
+        if (str.Length() > 3 && (str[3] == wxT('a') || str[3] == wxT('A'))) 
+        {
+            float a;
+            //TODO: use locale indepenend strtod (or similar) function
+            if (wxSscanf(str.wx_str() + 4, wxT("( %d , %d , %d , %f )"), 
+                                                &red, &green, &blue, &a) != 4)
+                return false;
+            alpha = wxRound(a * 255);
+        }
+        else 
+        {
+            if (wxSscanf(str.wx_str() + 3, wxT("( %d , %d , %d )"), 
+                                                &red, &green, &blue) != 3)
+                return false;
+        }
         Set((unsigned char)wxClip(red,0,255),
             (unsigned char)wxClip(green,0,255),
-            (unsigned char)wxClip(blue,0,255));
+            (unsigned char)wxClip(blue,0,255),
+            (unsigned char)wxClip(alpha, 0, 255));
     }
     else if ( str[0] == wxT('#') && wxStrlen(str) == 7 )
     {
@@ -60,6 +74,7 @@
         if (wxSscanf(str.wx_str() + 1, wxT("%lx"), &tmp) != 1)
             return false;
 
+        // FIXME: it will not work on big-endian machines? (MW)
         Set((unsigned char)(tmp >> 16),
             (unsigned char)(tmp >> 8),
             (unsigned char)tmp);
@@ -94,8 +109,14 @@
     if ( colName.empty() && (flags & wxC2S_CSS_SYNTAX) )
     {
         // no name for this colour; return it in CSS syntax
-        colName.Printf(wxT("rgb(%d, %d, %d)"),
-                       Red(), Green(), Blue());
+        if (Alpha() == wxALPHA_OPAQUE)
+            // without int casts, we get error:
+            //  "failed in From8bit(): invalid multibyte character"
+            colName.Printf(wxT("rgb(%d, %d, %d)"), 
+                           (int)Red(), (int)Green(), (int)Blue());
+        else
+            colName.Printf(wxT("rgba(%d, %d, %d, %.3f)"), 
+                        (int)Red(), (int)Green(), (int)Blue(), Alpha() / 255.);
     }
     else if ( colName.empty() && (flags & wxC2S_HTML_SYNTAX) )
     {

 	  	 

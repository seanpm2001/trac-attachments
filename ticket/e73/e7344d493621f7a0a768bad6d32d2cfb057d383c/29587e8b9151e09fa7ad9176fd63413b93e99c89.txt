diff -ur wine-1.5.20-orig/dlls/user32/msgbox.c wine-1.5.20/dlls/user32/msgbox.c
--- wine-1.5.20-orig/dlls/user32/msgbox.c
+++ wine-1.5.20/dlls/user32/msgbox.c
@@ -299,21 +299,25 @@
 
     /* Position the buttons */
     bpos = (wwidth - (bw + bspace) * buttons + bspace) / 2;
-    for (buttons = i = 0; i < (sizeof(buttonOrder) / sizeof(buttonOrder[0])); i++) {
-
+    for (i = 0; i < (sizeof(buttonOrder) / sizeof(buttonOrder[0])); i++) {
 	/* Convert the button order to ID* value to order for the buttons */
 	hItem = GetDlgItem(hwnd, buttonOrder[i]);
 	if (GetWindowLongW(hItem, GWL_STYLE) & WS_VISIBLE) {
-	    if (buttons++ == ((lpmb->dwStyle & MB_DEFMASK) >> 8)) {
-		SetFocus(hItem);
-		SendMessageW( hItem, BM_SETSTYLE, BS_DEFPUSHBUTTON, TRUE );
-	    }
 	    SetWindowPos(hItem, 0, bpos, tiheight, bw, bh,
 			 SWP_NOZORDER|SWP_NOACTIVATE|SWP_NOREDRAW);
 	    bpos += bw + bspace;
 	}
     }
-
+    /* Set default button. */
+    for (buttons = i = 0; i < (sizeof(buttonOrder) / sizeof(buttonOrder[0])); i++) {
+	hItem = GetDlgItem(hwnd, buttonOrder[i]);
+	if (GetWindowLongW(hItem, GWL_STYLE) & WS_VISIBLE) {
+	    if (buttons++ == ((lpmb->dwStyle & MB_DEFMASK) >> 8)) {
+		SetFocus(hItem);
+		SendMessageW( hItem, BM_SETSTYLE, BS_DEFPUSHBUTTON, TRUE );
+	    }
+        }
+    }
     /*handle modal message boxes*/
     if (((lpmb->dwStyle & MB_TASKMODAL) && (lpmb->hwndOwner==NULL)) || (lpmb->dwStyle & MB_SYSTEMMODAL))
         SetWindowPos(hwnd, HWND_TOP, 0, 0, 0, 0, SWP_NOSIZE | SWP_NOMOVE);
